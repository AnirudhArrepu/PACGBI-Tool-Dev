[INST]      $set sourceformat"free"
       program-id. CS00000M.
       environment division.
       configuration section.
            special-names. decimal-point is comma.
       copy CSS00100.cpy. *> Módulos
       copy CSS01300.cpy. *> Usuário x Módulos           
       data division.
       copy CSF00100.cpy. *> Módulos
       copy CSF01300.cpy. *> Usuário x Módulos       
       working-storage section.
       78   c-versao                                value "a".
       78   c-este-programa                         value "CS00000M". 
       78   c-descricao-programa                    value "MENU PRINCIPAL".        
       copy CSC00900.cpy.
       copy CSW00900.cpy.
       01   ws-campos-trabalho.
            03 ws-nr-linha                         pic 9(02).
            03 ws-nr-coluna                        pic 9(02).
            03 ws-cd-programa                      pic x(08).
            03 ws-id-acesso                        pic x(01).
               88 ws-usuario-acesso                     value "S".
               88 ws-usuario-sem-acesso                 value "N".
            03 ws-linha-modulo                     pic x(58).
       linkage section.
       copy CSL00900.cpy.
       screen section.
       procedure division using lnk-par.
       0000-controle section.
            perform 1000-inicializacao
            perform 2000-processamento
            perform 3000-finalizacao.
       0000-saida.    
            exit program
            stop run
       exit.
       1000-inicializacao section.
            initialize                             wf-opcoes-frame
       exit.
       2000-processamento section.
            perform until wf-frame-retornar
                 evaluate wf-frame
                      when 0
                           perform 8000-tela
                      when 9
                           perform 2999-controle-frame     
                      when other
                           move "Frame inválido!"  to ws-mensagem
                           perform 9000-mensagem
                           perform 9000-abortar
                 end-evaluate
            end-perform
       exit.
       2999-controle-frame section.     
            perform 8000-accept-opcao
            if   not wf-opcao-retornar   
                 perform 9000-abrir-io-pd00100
                 perform 9000-abrir-io-pd01300
                 initialize                   f00100-modulos
                 move lnk-cd-empresa          to f00100-cd-empresa
                 move lnk-cd-filial           to f00100-cd-filial
                 move c-este-programa         to f00100-programa-principal
                 move wf-opcao                to f00100-operacao-programa
                 perform 9000-ler-pd00100-ran-1
                 if   not ws-operacao-ok
                 and  not ws-registro-inexistente
                      string "Erro de leitura f00100-modulos - Status [" ws-resultado-acesso "]" into ws-mensagem
                      perform 9000-mensagem
                      perform 9000-abortar
                 end-if
                 move f00100-cd-programa           to ws-cd-programa
                 if   not lnk-login-master
                      initialize                   f01300-usuario-modulo
                      move lnk-cd-empresa          to f01300-cd-empresa
                      move lnk-cd-filial           to f01300-cd-filial
                      move lnk-id-usuario          to f01300-id-usuario
                      move ws-cd-programa          to f01300-cd-programa
                      perform 9000-ler-pd01300-ran
                      if   not ws-operacao-ok
                      and  not ws-registro-inexistente
                           string "Erro de leitura f00100-modulos - Status [" ws-resultado-acesso "]" into ws-mensagem
                           perform 9000-mensagem
                           perform 9000-abortar
                      end-if  
                      move f01300-id-consulta      to lnk-id-consulta
                      move f00130-id-inclusao      to lnk-id-inclusao
                      move f01300-id-manutencao    to lnk-id-manutencao
                      move f00130-id-exclusao      to lnk-id-exclusao
                 else
                      set lnk-permite-consulta     to true
                      set lnk-permite-inclusao     to true
                      set lnk-permite-manutencao   to true
                      set lnk-permite-exclusao     to true
                 end-if                         
                 close pd00100
                 close pd01300
                 if   (lnk-permite-consulta or lnk-permite-inclusao or lnk-permite-manutencao or lnk-permite-exclusao)    
                 and  ws-cd-programa not equal spaces   
                      call ws-cd-programa using lnk-par
                      cancel ws-cd-programa 
                 end-if
                 set lnk-nao-permite-consulta      to true
                 set lnk-nao-permite-inclusao      to true
                 set lnk-nao-permite-manutencao    to true
                 set lnk-nao-permite-exclusao      to true
                 perform 8000-inicia-frame   
            end-if     
            if   wf-opcao-retornar
                 set wf-frame-retornar             to true
            end-if
       exit.
       3000-finalizacao section.
       exit.  
       8000-tela section.
            perform 9000-frame-padrao
            perform 9000-abrir-io-pd00100
            perform 9000-abrir-io-pd01300
            move 11                                to ws-nr-linha
            move 04                                to ws-nr-coluna
            initialize                             f00100-modulos
            move lnk-cd-empresa                    to f00100-cd-empresa
            move lnk-cd-filial                     to f00100-cd-filial
            move c-este-programa                   to f00100-programa-principal
            perform 9000-str-pd00100-grt
            perform 9000-ler-pd00100-nex
            perform until not ws-operacao-ok
                 or f00100-cd-empresa   <>  lnk-cd-empresa
                 or f00100-cd-filial    <>  lnk-cd-filial
                 if   f00100-programa-principal equal c-este-programa
                       if   not lnk-login-master
                            move f00100-cd-programa     to ws-cd-programa
                            perform 9000-verifica-acesso
                       end-if
                       if   ws-usuario-acesso
                       or   lnk-login-master                      
                            string f00100-operacao-programa " - " f00100-descricao-programa into ws-linha-modulo
                            display ws-linha-modulo at line ws-nr-linha col ws-nr-coluna
                            add 02                       to ws-nr-linha
                       end-if     
                 end-if
                 perform 9000-ler-pd00100-nex
            end-perform
            perform 8000-controle-frame
            close pd00100
            close pd01300
       exit.
       copy CSC00903.cpy. *> Frame
       copy CSP00900.cpy. *> Padrão
       9000-verifica-acesso section.
            set ws-usuario-sem-acesso              to true
            initialize                             f01300-usuario-modulo
            move lnk-cd-empresa                    to f01300-cd-empresa
            move lnk-cd-filial                     to f01300-cd-filial
            move lnk-id-usuario                    to f01300-id-usuario
            move ws-cd-programa                    to f01300-cd-programa
            perform 9000-ler-pd01300-ran
            if   ws-operacao-ok
                 set ws-usuario-acesso             to true
            end-if
       exit.
       copy CSR00100.cpy. *> Módulos
       copy CSR01300.cpy. *> Usuário x Módulos        [/INST]{
  "id": "BR-001",
  "description": "A user has access to a program if there is a record in the pd01300 file with the same company code, branch code, user ID and program code as the user trying to access the program.",
  "condition": "A record exist in pd01300 file with the same company code, branch code, user ID and program code.",
  "output": {
    "access_granted": "The user has access to the program.",
    "access_denied": "The user does not have access to the program."
  }
}[INST]      $set sourceformat"free"
       program-id. CS00000S.
       environment division.
       configuration section.
            special-names. decimal-point is comma.      
       data division.      
       working-storage section.
       78   c-versao                               value "b".
       78   c-este-programa                        value "CS00000S".
       78   c-descricao-programa                   value "COBSOFT".
       copy CSC00900.cpy.
       copy CSW00900.cpy.
       78   c-validar-login                        value "CS00100S".
       78   c-recuperar-login                      value "CS00101S".
       78   c-login-empresa                        value "CS00103S".
       78   c-validar-ambiente                     value "CS00104S".
       78   c-nr-max-tentativas-login              value 3.
       78   c-menu-principal                       value "CS00000M".
       01   lw-login.
            03 lw-nr-tentativas                    pic 9(02).
            03 lw-id-retorno-usuario               pic x(01).
               88 lw-login-invalido                     value "I".
               88 lw-login-valido                       value "V".                   
       01   f-login.
            03 f-id-usuario                        pic x(11).
            03 f-pw-usuario                        pic x(15).                                                                 
       linkage section.
       copy CSL00900.cpy.
       screen section.
       01   frm-login.
            03 blank screen.
            03 line 18 col 57   value "COBSOFT".  
            03 line 20 col 45   value "ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿".
            03 line 21 col 45   value "³                              ³".
            03 line 22 col 45   value "³                              ³".
            03 line 23 col 45   value "³ Usuario:                     ³".
            03 line 24 col 45   value "³                              ³".
            03 line 25 col 45   value "³                              ³".
            03 line 26 col 45   value "³   Senha:                     ³".
            03 line 27 col 45   value "³                              ³".
            03 line 28 col 45   value "³                              ³".
            03 line 29 col 45   value "³                              ³".
            03 line 30 col 45   value "ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ".           
       procedure division using lnk-par.
       0000-controle section.
            perform 1000-inicializacao
            perform 2000-processamento
            perform 3000-finalizacao.
       0000-saida.    
            exit program
            stop run
       exit.
       1000-inicializacao section.
            initialize                              lnk-par
                                                    wf-opcoes-frame
       exit.
       2000-processamento section.
            if   lnk-sem-erros
                 set lnk-carregar-diretorios        to true
                 call c-carregar-linkage using lnk-par
                 cancel c-carregar-linkage       
            end-if
            if   lnk-sem-erros
                 call c-validar-ambiente using lnk-par
                 cancel c-validar-ambiente    
            end-if
            if   lnk-sem-erros
                 perform until wf-frame-retornar
                      evaluate wf-frame
                           when 0
                                perform 2100-monta-login
                           when 9
                                perform 2999-controle-frame
                           when other   
                                move "Frame invalido!"   to ws-mensagem
                                perform 9000-mensagem
                      end-evaluate
                 end-perform
            end-if
       exit.
       2100-monta-login section.
            initialize                             lw-login
            perform until lw-login-valido
                       or lw-nr-tentativas >= c-nr-max-tentativas-login
                       or lnk-com-erros
                 display frm-login
                 perform until f-id-usuario <> spaces
                      accept f-id-usuario at line 23 col 56 with update auto-skip
                 end-perform
                 perform until f-pw-usuario <> spaces
                      accept f-pw-usuario at line 26 col 56 with update auto-skip secure           
                 end-perform
                 move f-id-usuario                 to lnk-id-usuario
                 move f-pw-usuario                 to lnk-pw-usuario 
                 call c-validar-login using lnk-par lw-login
                 cancel c-validar-login 
                 initialize                        f-login 
            end-perform
            if   lnk-sem-erros
                 if  lw-nr-tentativas >= 3
                     call c-recuperar-login using lnk-par lw-login
                     cancel c-recuperar-login
                     perform 9000-abortar
                 end-if
            end-if
            if   lnk-sem-erros
                 call c-login-empresa using lnk-par
                 cancel c-login-empresa           
            end-if            
            if   lnk-sem-erros
                 set lnk-carregar-prametros        to true
                 call c-carregar-linkage using lnk-par
                 cancel c-carregar-linkage
            end-if
            if   lnk-sem-erros
                 perform 8000-controle-frame 
            else
                 set lnk-sem-erros                 to true
                 perform 8000-inicia-frame
            end-if
       exit.
       2200-menu section.
            call c-menu-principal using lnk-par
            cancel c-menu-principal
       exit.
       2999-controle-frame section.
            evaluate wf-opcao
                 when 0
                      perform 2200-menu     
                 when other
                      move "Opcão invalido!"       to ws-mensagem
                      perform 9000-mensagem
            end-evaluate
            set wf-frame-retornar                  to true                
       exit.  
       3000-finalizacao section.
       exit.                                                   
       copy CSC00903.cpy. *> Frame
       copy CSP00900.cpy. *> Padrão
[/INST]{
  "id": "BR-001",
  "description": "The system validates the login credentials.",
  "condition": "lnk-sem-erros",
  "output": {
    "success": "Login validated successfully.",
    "failure": "Login validation failed."
  }
},
{
  "id": "BR-002",
  "description": "If the number of login attempts exceeds the maximum allowed, the system must abort the login process.",
  "condition": "lw-nr-tentativas >= 3",
  "output": {
    "abort": "Login process aborted due to excessive login attempts."
  }
},
{
  "id": "BR-003",
  "description": "The system must recover the login information if the number of login attempts exceeds 3.",
  "condition": "lw-nr-tentativas >= 3",
  "output": {
    "recover": "Login information recovered."
  }
},
{
  "id": "BR-004",
  "description": "The system must load the linkage after validating the environment.",
  "condition": "lnk-sem-erros",
  "output": {
    "load": "Linkage loaded successfully."
  }
}[INST]      $set sourceformat"free"
       program-id. CS00001M.
       environment division.
       configuration section.
            special-names. decimal-point is comma.
       copy CSS00100.cpy. *> Módulos
       copy CSS01300.cpy. *> Usuário x Módulos           
       data division.
       copy CSF00100.cpy. *> Módulos
       copy CSF01300.cpy. *> Usuário x Módulos       
       working-storage section.
       78   c-versao                                value "a".
       78   c-este-programa                         value "CS00001M". 
       78   c-descricao-programa                    value "CADASTROS".        
       copy CSC00900.cpy.
       copy CSW00900.cpy.
       01   ws-campos-trabalho.
            03 ws-nr-linha                         pic 9(02).
            03 ws-nr-coluna                        pic 9(02).
            03 ws-cd-programa                      pic x(08).
            03 ws-id-acesso                        pic x(01).
               88 ws-usuario-acesso                     value "S".
               88 ws-usuario-sem-acesso                 value "N".
            03 ws-linha-modulo                     pic x(58).
       linkage section.
       copy CSL00900.cpy.
       screen section.
       procedure division using lnk-par.
       0000-controle section.
            perform 1000-inicializacao
            perform 2000-processamento
            perform 3000-finalizacao.
       0000-saida.    
            exit program
            stop run
       exit.
       1000-inicializacao section.
            initialize                             wf-opcoes-frame
       exit.
       2000-processamento section.
            perform until wf-frame-retornar
                 evaluate wf-frame
                      when 0
                           perform 8000-tela
                      when 9
                           perform 2999-controle-frame     
                      when other
                           move "Frame inválido!"  to ws-mensagem
                           perform 9000-mensagem
                           perform 9000-abortar
                 end-evaluate
            end-perform
       exit.
       2999-controle-frame section.     
            perform 8000-accept-opcao
            if   not wf-opcao-retornar   
                 perform 9000-abrir-io-pd00100
                 perform 9000-abrir-io-pd01300
                 initialize                   f00100-modulos
                 move lnk-cd-empresa          to f00100-cd-empresa
                 move lnk-cd-filial           to f00100-cd-filial
                 move c-este-programa         to f00100-programa-principal
                 move wf-opcao                to f00100-operacao-programa
                 perform 9000-ler-pd00100-ran-1
                 if   not ws-operacao-ok
                 and  not ws-registro-inexistente
                      string "Erro de leitura f00100-modulos - Status [" ws-resultado-acesso "]" into ws-mensagem
                      perform 9000-mensagem
                      perform 9000-abortar
                 end-if
                 move f00100-cd-programa           to ws-cd-programa
                 if   not lnk-login-master
                      initialize                   f01300-usuario-modulo
                      move lnk-cd-empresa          to f01300-cd-empresa
                      move lnk-cd-filial           to f01300-cd-filial
                      move lnk-id-usuario          to f01300-id-usuario
                      move ws-cd-programa          to f01300-cd-programa
                      perform 9000-ler-pd01300-ran
                      if   not ws-operacao-ok
                      and  not ws-registro-inexistente
                           string "Erro de leitura f00100-modulos - Status [" ws-resultado-acesso "]" into ws-mensagem
                           perform 9000-mensagem
                           perform 9000-abortar
                      end-if  
                      move f01300-id-consulta      to lnk-id-consulta
                      move f00130-id-inclusao      to lnk-id-inclusao
                      move f01300-id-manutencao    to lnk-id-manutencao
                      move f00130-id-exclusao      to lnk-id-exclusao
                 else
                      set lnk-permite-consulta     to true
                      set lnk-permite-inclusao     to true
                      set lnk-permite-manutencao   to true
                      set lnk-permite-exclusao     to true
                 end-if                         
                 close pd00100
                 close pd01300
                 if   (lnk-permite-consulta or lnk-permite-inclusao or lnk-permite-manutencao or lnk-permite-exclusao)    
                 and  ws-cd-programa not equal spaces   
                      call ws-cd-programa using lnk-par
                      cancel ws-cd-programa 
                 end-if
                 set lnk-nao-permite-consulta      to true
                 set lnk-nao-permite-inclusao      to true
                 set lnk-nao-permite-manutencao    to true
                 set lnk-nao-permite-exclusao      to true
                 perform 8000-inicia-frame   
            end-if     
            if   wf-opcao-retornar
                 set wf-frame-retornar             to true
            end-if
       exit.
       3000-finalizacao section.
       exit.  
       8000-tela section.
            perform 9000-frame-padrao
            perform 9000-abrir-io-pd00100
            perform 9000-abrir-io-pd01300
            move 11                                to ws-nr-linha
            move 04                                to ws-nr-coluna
            initialize                             f00100-modulos
            move lnk-cd-empresa                    to f00100-cd-empresa
            move lnk-cd-filial                     to f00100-cd-filial
            move c-este-programa                   to f00100-programa-principal
            perform 9000-str-pd00100-grt
            perform 9000-ler-pd00100-nex
            perform until not ws-operacao-ok
                 or f00100-cd-empresa   <>  lnk-cd-empresa
                 or f00100-cd-filial    <>  lnk-cd-filial
                 if   f00100-programa-principal equal c-este-programa
                       if   not lnk-login-master
                            move f00100-cd-programa     to ws-cd-programa
                            perform 9000-verifica-acesso
                       end-if
                       if   ws-usuario-acesso
                       or   lnk-login-master                      
                            string f00100-operacao-programa " - " f00100-descricao-programa into ws-linha-modulo
                            display ws-linha-modulo at line ws-nr-linha col ws-nr-coluna
                            add 02                       to ws-nr-linha
                       end-if     
                 end-if
                 perform 9000-ler-pd00100-nex
            end-perform
            perform 8000-controle-frame
            close pd00100
            close pd01300
       exit.
       copy CSC00903.cpy. *> Frame
       copy CSP00900.cpy. *> Padrão
       9000-verifica-acesso section.
            set ws-usuario-sem-acesso              to true
            initialize                             f01300-usuario-modulo
            move lnk-cd-empresa                    to f01300-cd-empresa
            move lnk-cd-filial                     to f01300-cd-filial
            move lnk-id-usuario                    to f01300-id-usuario
            move ws-cd-programa                    to f01300-cd-programa
            perform 9000-ler-pd01300-ran
            if   ws-operacao-ok
                 set ws-usuario-acesso             to true
            end-if
       exit.
       copy CSR00100.cpy. *> Módulos
       copy CSR01300.cpy. *> Usuário x Módulos        [/INST]{
  "id": "BR-001",
  "description": "A user has access to a program (modulo) if there is a record in the database table pd01300 that has the same values for cd-empresa, cd-filial, id-usuario, and cd-programa as the user's input.",
  "condition": "ws-operacao-ok and not ws-registro-inexistente",
  "output": {
    "yes": "The user has access to the program.",
    "no": "The user does not have access to the program."
  }
}[INST]      $set sourceformat"free"
       program-id. CS00002M.
       environment division.
       configuration section.
            special-names. decimal-point is comma.
       copy CSS00100.cpy. *> Módulos
       copy CSS01300.cpy. *> Usuário x Módulos           
       data division.
       copy CSF00100.cpy. *> Módulos
       copy CSF01300.cpy. *> Usuário x Módulos       
       working-storage section.
       78   c-versao                                value "a".
       78   c-este-programa                         value "CS00002M". 
       78   c-descricao-programa                    value "CONTROLE DE ESTOQUE".        
       copy CSC00900.cpy.
       copy CSW00900.cpy.
       01   ws-campos-trabalho.
            03 ws-nr-linha                         pic 9(02).
            03 ws-nr-coluna                        pic 9(02).
            03 ws-cd-programa                      pic x(08).
            03 ws-id-acesso                        pic x(01).
               88 ws-usuario-acesso                     value "S".
               88 ws-usuario-sem-acesso                 value "N".
            03 ws-linha-modulo                     pic x(58).
       linkage section.
       copy CSL00900.cpy.
       screen section.
       procedure division using lnk-par.
       0000-controle section.
            perform 1000-inicializacao
            perform 2000-processamento
            perform 3000-finalizacao.
       0000-saida.    
            exit program
            stop run
       exit.
       1000-inicializacao section.
            initialize                             wf-opcoes-frame
       exit.
       2000-processamento section.
            perform until wf-frame-retornar
                 evaluate wf-frame
                      when 0
                           perform 8000-tela
                      when 9
                           perform 2999-controle-frame     
                      when other
                           move "Frame inválido!"  to ws-mensagem
                           perform 9000-mensagem
                           perform 9000-abortar
                 end-evaluate
            end-perform
       exit.
       2999-controle-frame section.     
            perform 8000-accept-opcao
            if   not wf-opcao-retornar   
                 perform 9000-abrir-io-pd00100
                 perform 9000-abrir-io-pd01300
                 initialize                   f00100-modulos
                 move lnk-cd-empresa          to f00100-cd-empresa
                 move lnk-cd-filial           to f00100-cd-filial
                 move c-este-programa         to f00100-programa-principal
                 move wf-opcao                to f00100-operacao-programa
                 perform 9000-ler-pd00100-ran-1
                 if   not ws-operacao-ok
                 and  not ws-registro-inexistente
                      string "Erro de leitura f00100-modulos - Status [" ws-resultado-acesso "]" into ws-mensagem
                      perform 9000-mensagem
                      perform 9000-abortar
                 end-if
                 move f00100-cd-programa           to ws-cd-programa
                 if   not lnk-login-master
                      initialize                   f01300-usuario-modulo
                      move lnk-cd-empresa          to f01300-cd-empresa
                      move lnk-cd-filial           to f01300-cd-filial
                      move lnk-id-usuario          to f01300-id-usuario
                      move ws-cd-programa          to f01300-cd-programa
                      perform 9000-ler-pd01300-ran
                      if   not ws-operacao-ok
                      and  not ws-registro-inexistente
                           string "Erro de leitura f00100-modulos - Status [" ws-resultado-acesso "]" into ws-mensagem
                           perform 9000-mensagem
                           perform 9000-abortar
                      end-if  
                      move f01300-id-consulta      to lnk-id-consulta
                      move f00130-id-inclusao      to lnk-id-inclusao
                      move f01300-id-manutencao    to lnk-id-manutencao
                      move f00130-id-exclusao      to lnk-id-exclusao
                 else
                      set lnk-permite-consulta     to true
                      set lnk-permite-inclusao     to true
                      set lnk-permite-manutencao   to true
                      set lnk-permite-exclusao     to true
                 end-if                         
                 close pd00100
                 close pd01300
                 if   (lnk-permite-consulta or lnk-permite-inclusao or lnk-permite-manutencao or lnk-permite-exclusao)    
                 and  ws-cd-programa not equal spaces   
                      call ws-cd-programa using lnk-par
                      cancel ws-cd-programa 
                 end-if
                 set lnk-nao-permite-consulta      to true
                 set lnk-nao-permite-inclusao      to true
                 set lnk-nao-permite-manutencao    to true
                 set lnk-nao-permite-exclusao      to true
                 perform 8000-inicia-frame   
            end-if     
            if   wf-opcao-retornar
                 set wf-frame-retornar             to true
            end-if
       exit.
       3000-finalizacao section.
       exit.  
       8000-tela section.
            perform 9000-frame-padrao
            perform 9000-abrir-io-pd00100
            perform 9000-abrir-io-pd01300
            move 11                                to ws-nr-linha
            move 04                                to ws-nr-coluna
            initialize                             f00100-modulos
            move lnk-cd-empresa                    to f00100-cd-empresa
            move lnk-cd-filial                     to f00100-cd-filial
            move c-este-programa                   to f00100-programa-principal
            perform 9000-str-pd00100-grt
            perform 9000-ler-pd00100-nex
            perform until not ws-operacao-ok
                 or f00100-cd-empresa   <>  lnk-cd-empresa
                 or f00100-cd-filial    <>  lnk-cd-filial
                 if   f00100-programa-principal equal c-este-programa
                       if   not lnk-login-master
                            move f00100-cd-programa     to ws-cd-programa
                            perform 9000-verifica-acesso
                       end-if
                       if   ws-usuario-acesso
                       or   lnk-login-master                      
                            string f00100-operacao-programa " - " f00100-descricao-programa into ws-linha-modulo
                            display ws-linha-modulo at line ws-nr-linha col ws-nr-coluna
                            add 02                       to ws-nr-linha
                       end-if     
                 end-if
                 perform 9000-ler-pd00100-nex
            end-perform
            perform 8000-controle-frame
            close pd00100
            close pd01300
       exit.
       copy CSC00903.cpy. *> Frame
       copy CSP00900.cpy. *> Padrão
       9000-verifica-acesso section.
            set ws-usuario-sem-acesso              to true
            initialize                             f01300-usuario-modulo
            move lnk-cd-empresa                    to f01300-cd-empresa
            move lnk-cd-filial                     to f01300-cd-filial
            move lnk-id-usuario                    to f01300-id-usuario
            move ws-cd-programa                    to f01300-cd-programa
            perform 9000-ler-pd01300-ran
            if   ws-operacao-ok
                 set ws-usuario-acesso             to true
            end-if
       exit.
       copy CSR00100.cpy. *> Módulos
       copy CSR01300.cpy. *> Usuário x Módulos        [/INST]{
  "id": "BR-001",
  "description": "A user is authorized to access a program if they are the master login or if they have been granted access to the program in the USUÁRIO x MÓDULOS file.",
  "condition": "if   not lnk-login-master\n                            move f00100-cd-programa     to ws-cd-programa\n                            perform 9000-verifica-acesso",
  "output": {
    "allowed_access": "set ws-usuario-acesso             to true",
    "no_access": "ws-usuario-sem-acesso              to true"
  }
}[INST]      $set sourceformat"free"
       program-id. CS00002S.
       environment division.
       configuration section.
            special-names. decimal-point is comma.      
            select ambiente assign to disk wid-ambiente
                 organization      is line sequential
                 access mode       is sequential
                 file status       is ws-resultado-acesso.
            select cobsoft-ini assign to disk wid-cobsoft-ini
                 organization         is line sequential
                 access mode          is sequential
                 file status          is ws-resultado-acesso.                 
       data division.
       fd   ambiente.
       01   rs-ambiente                            pic x(300).
       fd   cobsoft-ini.
       01   rs-cobsoft-ini                         pic x(300).
       working-storage section.
       78   c-versao                               value "a".
       78   c-este-programa                        value "CS00002S".
       78   c-computador-adrian                    value "DT-ADRIAN".
       78   c-omputador-hbsis                      value "DT-02403".
       01   ws-campos-trabalho.
            03 ws-computer-name                    pic x(55).
               88 ws-computador-adrian                  value c-computador-adrian.
               88 ws-computador-hbsis                   value c-omputador-hbsis.
            03 ws-alias-path                       pic x(55).
            03 ws-dir-path                         pic x(250).
       copy CSW00900.cpy.     
       linkage section.
       copy CSL00900.cpy.
       procedure division using lnk-par.
       0000-controle section.
            perform 1000-inicializacao
            perform 2000-processamento
            perform 3000-finalizacao.
       0000-saida.    
            exit program
            stop run
       exit.
       1000-inicializacao section.
       exit.
       2000-processamento section.     
            evaluate true
                 when lnk-carregar-diretorios
                      perform 2100-carregar-diretorios
                 when lnk-carregar-prametros
                      perform 2100-carregar-parametros             
                 when lnk-carregar-completa 
                      perform 2100-carregar-completa 
            end-evaluate
       exit.
       2100-carregar-diretorios section.     
            perform 9000-obter-computer-name
            if   ws-computador-adrian
            or   ws-computador-hbsis
                 set lnk-desenvolvimento           to true
                 move "C:\CobSoft\cgi"             to lnk-cgi-path
                 move "C:\CobSoft\dat"             to lnk-dat-path
                 move "C:\CobSoft\dvs"             to lnk-dvs-path
                 move "C:\CobSoft\int"             to lnk-int-path
                 move "C:\CobSoft\log"             to lnk-log-path
                 move "C:\CobSoft\tmp"             to lnk-tmp-path  
            else
                set lnk-producao                   to true
                move "..\configuracao\COBSOFT.INI" to wid-cobsoft-ini
                open input cobsoft-ini
                read cobsoft-ini next
                perform until not ws-operacao-ok
                      move spaces                  to ws-alias-path
                                                      ws-dir-path
                      unstring rs-cobsoft-ini delimited by "=" into ws-alias-path
                                                                    ws-dir-path
                      evaluate ws-alias-path
                           when "CGI"
                                move ws-dir-path   to lnk-cgi-path
                           when "DAT"
                                move ws-dir-path   to lnk-dat-path
                           when "TMP"
                                move ws-dir-path   to lnk-tmp-path                                      
                           when "INT"
                                move ws-dir-path   to lnk-int-path
                           when "DVS"
                                move ws-dir-path   to lnk-dvs-path
                           when "LOG"
                                move ws-dir-path   to lnk-log-path 
                           when "NFE"
                                move ws-dir-path   to lnk-nfe-path                                                                                        
                      end-evaluate                                                                                
                      read cobsoft-ini next
                 end-perform
                 close cobsoft-ini            
            end-if           
       exit.
       2100-carregar-parametros section.
            accept ws-data-inv                     from date yyyymmdd
            move ws-dia-inv                        to lnk-dia-os
            move ws-mes-inv                        to lnk-mes-os
            move ws-ano-inv                        to lnk-ano-os             
       exit.
       2100-carregar-completa section.
            perform 2100-carregar-diretorios
            perform 2100-carregar-parametros
       exit.
       3000-finalizacao section.
       exit.
       9000-obter-computer-name section.
            display "COMPUTERNAME"                 upon environment-name
            accept ws-computer-name                from environment-value
       exit.
[/INST]{
  "id": "BR-002",
  "description": "The program selects the operating configuration based on the computer name.",
  "condition": "ws-computador-adrian = true",
  "output": {
    "development": {
      "cgi-path": "C:\\CobSoft\\cgi",
      "dat-path": "C:\\CobSoft\\dat",
      "dvs-path": "C:\\CobSoft\\dvs",
      "int-path": "C:\\CobSoft\\int",
      "log-path": "C:\\CobSoft\\log",
      "tmp-path": "C:\\CobSoft\\tmp"
    },
    "production": {
      "cgi-path": "path from COBSOFT.INI",
      "dat-path": "path from COBSOFT.INI",
      "dvs-path": "path from COBSOFT.INI",
      "int-path": "path from COBSOFT.INI",
      "log-path": "path from COBSOFT.INI",
      "nfe-path": "path from COBSOFT.INI",
      "tmp-path": "path from COBSOFT.INI"
    }
  }
}[INST]      $set sourceformat"free"
       program-id. CS00003M.
       environment division.
       configuration section.
            special-names. decimal-point is comma.
       copy CSS00100.cpy. *> Módulos
       copy CSS01300.cpy. *> Usuário x Módulos           
       data division.
       copy CSF00100.cpy. *> Módulos
       copy CSF01300.cpy. *> Usuário x Módulos       
       working-storage section.
       78   c-versao                                value "a".
       78   c-este-programa                         value "CS00003M". 
       78   c-descricao-programa                    value "FATURAMENTO".        
       copy CSC00900.cpy.
       copy CSW00900.cpy.
       01   ws-campos-trabalho.
            03 ws-nr-linha                         pic 9(02).
            03 ws-nr-coluna                        pic 9(02).
            03 ws-cd-programa                      pic x(08).
            03 ws-id-acesso                        pic x(01).
               88 ws-usuario-acesso                     value "S".
               88 ws-usuario-sem-acesso                 value "N".
            03 ws-linha-modulo                     pic x(58).
       linkage section.
       copy CSL00900.cpy.
       screen section.
       procedure division using lnk-par.
       0000-controle section.
            perform 1000-inicializacao
            perform 2000-processamento
            perform 3000-finalizacao.
       0000-saida.    
            exit program
            stop run
       exit.
       1000-inicializacao section.
            initialize                             wf-opcoes-frame
       exit.
       2000-processamento section.
            perform until wf-frame-retornar
                 evaluate wf-frame
                      when 0
                           perform 8000-tela
                      when 9
                           perform 2999-controle-frame     
                      when other
                           move "Frame inválido!"  to ws-mensagem
                           perform 9000-mensagem
                           perform 9000-abortar
                 end-evaluate
            end-perform
       exit.
       2999-controle-frame section.     
            perform 8000-accept-opcao
            if   not wf-opcao-retornar   
                 perform 9000-abrir-io-pd00100
                 perform 9000-abrir-io-pd01300
                 initialize                   f00100-modulos
                 move lnk-cd-empresa          to f00100-cd-empresa
                 move lnk-cd-filial           to f00100-cd-filial
                 move c-este-programa         to f00100-programa-principal
                 move wf-opcao                to f00100-operacao-programa
                 perform 9000-ler-pd00100-ran-1
                 if   not ws-operacao-ok
                 and  not ws-registro-inexistente
                      string "Erro de leitura f00100-modulos - Status [" ws-resultado-acesso "]" into ws-mensagem
                      perform 9000-mensagem
                      perform 9000-abortar
                 end-if
                 move f00100-cd-programa           to ws-cd-programa
                 if   not lnk-login-master
                      initialize                   f01300-usuario-modulo
                      move lnk-cd-empresa          to f01300-cd-empresa
                      move lnk-cd-filial           to f01300-cd-filial
                      move lnk-id-usuario          to f01300-id-usuario
                      move ws-cd-programa          to f01300-cd-programa
                      perform 9000-ler-pd01300-ran
                      if   not ws-operacao-ok
                      and  not ws-registro-inexistente
                           string "Erro de leitura f00100-modulos - Status [" ws-resultado-acesso "]" into ws-mensagem
                           perform 9000-mensagem
                           perform 9000-abortar
                      end-if  
                      move f01300-id-consulta      to lnk-id-consulta
                      move f00130-id-inclusao      to lnk-id-inclusao
                      move f01300-id-manutencao    to lnk-id-manutencao
                      move f00130-id-exclusao      to lnk-id-exclusao
                 else
                      set lnk-permite-consulta     to true
                      set lnk-permite-inclusao     to true
                      set lnk-permite-manutencao   to true
                      set lnk-permite-exclusao     to true
                 end-if                         
                 close pd00100
                 close pd01300
                 if   (lnk-permite-consulta or lnk-permite-inclusao or lnk-permite-manutencao or lnk-permite-exclusao)    
                 and  ws-cd-programa not equal spaces   
                      call ws-cd-programa using lnk-par
                      cancel ws-cd-programa 
                 end-if
                 set lnk-nao-permite-consulta      to true
                 set lnk-nao-permite-inclusao      to true
                 set lnk-nao-permite-manutencao    to true
                 set lnk-nao-permite-exclusao      to true
                 perform 8000-inicia-frame   
            end-if     
            if   wf-opcao-retornar
                 set wf-frame-retornar             to true
            end-if
       exit.
       3000-finalizacao section.
       exit.  
       8000-tela section.
            perform 9000-frame-padrao
            perform 9000-abrir-io-pd00100
            perform 9000-abrir-io-pd01300
            move 11                                to ws-nr-linha
            move 04                                to ws-nr-coluna
            initialize                             f00100-modulos
            move lnk-cd-empresa                    to f00100-cd-empresa
            move lnk-cd-filial                     to f00100-cd-filial
            move c-este-programa                   to f00100-programa-principal
            perform 9000-str-pd00100-grt
            perform 9000-ler-pd00100-nex
            perform until not ws-operacao-ok
                 or f00100-cd-empresa   <>  lnk-cd-empresa
                 or f00100-cd-filial    <>  lnk-cd-filial
                 if   f00100-programa-principal equal c-este-programa
                       if   not lnk-login-master
                            move f00100-cd-programa     to ws-cd-programa
                            perform 9000-verifica-acesso
                       end-if
                       if   ws-usuario-acesso
                       or   lnk-login-master                      
                            string f00100-operacao-programa " - " f00100-descricao-programa into ws-linha-modulo
                            display ws-linha-modulo at line ws-nr-linha col ws-nr-coluna
                            add 02                       to ws-nr-linha
                       end-if     
                 end-if
                 perform 9000-ler-pd00100-nex
            end-perform
            perform 8000-controle-frame
            close pd00100
            close pd01300
       exit.
       copy CSC00903.cpy. *> Frame
       copy CSP00900.cpy. *> Padrão
       9000-verifica-acesso section.
            set ws-usuario-sem-acesso              to true
            initialize                             f01300-usuario-modulo
            move lnk-cd-empresa                    to f01300-cd-empresa
            move lnk-cd-filial                     to f01300-cd-filial
            move lnk-id-usuario                    to f01300-id-usuario
            move ws-cd-programa                    to f01300-cd-programa
            perform 9000-ler-pd01300-ran
            if   ws-operacao-ok
                 set ws-usuario-acesso             to true
            end-if
       exit.
       copy CSR00100.cpy. *> Módulos
       copy CSR01300.cpy. *> Usuário x Módulos        [/INST]{
  "id": "BR-002",  "description": "The user has access to a program if they are the master user or if they are a regular user and there is a record in the user_module table granting them access to the program.",
  "condition": null,
  "output": {
    "has_access": "ws-usuario-acesso",
    "no_access": "ws-usuario-sem-acesso"
  }
}[INST]      $set sourceformat"free"
       program-id. CS00003S.
       environment division.
       configuration section.
            special-names. decimal-point is comma.      
       data division.      
       working-storage section.
       78   c-versao                                value "a".
       78   c-este-programa                         value "CS00003S".
       78   c-caracteres-invalidos                 value "ÇÁÃÀÂÕÓÒÔÊÉÚÜÙÍÌÎçáãàâõóòôêéúüùíìî".
       78   c-caracteres-invalidos-conv            value "CAAAAOOOOEEUUUIIIcaaaaooooeeuuuiii".
       01   ws-campos-trabalho.
            03 ws-mensagem                         pic x(560).
            03 filler redefines ws-mensagem.
               05 ws-mensagem-01                   pic x(056).
               05 ws-mensagem-02                   pic x(056).
               05 ws-mensagem-03                   pic x(056).
               05 ws-mensagem-04                   pic x(056).
               05 ws-mensagem-05                   pic x(056).
               05 ws-mensagem-06                   pic x(056).
               05 ws-mensagem-07                   pic x(056).
               05 ws-mensagem-08                   pic x(056).
               05 ws-mensagem-09                   pic x(056).
               05 ws-mensagem-10                   pic x(056).
       01  ws-campos-frame.
           03  ws-posicao-frame.
               05  ws-linha-frame                  pic x(01)    comp-x value zeros.
               05  ws-coluna-frame                 pic x(01)    comp-x value zeros.
           03  ws-informacoes-frame.
               05  ws-caracteres-frame occurs 6.
                   07  ws-caracter-frame           pic x(6954).
                   07  filler redefines ws-caracter-frame.
                       09  ws-caracter-linha       pic x(122)   occurs 57 times. 
                   07  filler redefines ws-caracter-frame.
                       09  ws-caracter-byte        pic x(01)    occurs 6100 times.
                   07  ws-atributo-frame           pic x(6954).
                   07  filler redefines ws-atributo-frame.
                       09  ws-atributo-linha       pic x(122)   occurs 57 times.
                   07  filler redefines ws-atributo-frame.
                       09  ws-atributo-byte        pic x(01)    occurs 6954.
           03  ws-tamanho-frame                    pic x(02)    comp-x value 6954.
           03  ws-index-frame                      pic 9(02).               
       linkage section.
       copy CSL00900.cpy.
       01   lw-mensagem-parametros.
            03 lw-mensagem                         pic x(560).
            03 lw-mensagem-opcao                   pic x(002).
       screen section.
       01   frm-mensagem.
            03 blank screen.          
            03 line 04 col 31   value "ÚÄÄ MENSAGEM ÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿".
            03 line 05 col 31   value "³                                                          ³".       
            03 line 06 col 31   value "³                                                          ³".
            03 line 07 col 31   value "³                                                          ³".
            03 line 08 col 31   value "³                                                          ³".
            03 line 09 col 31   value "³                                                          ³".
            03 line 10 col 31   value "³                                                          ³".
            03 line 11 col 31   value "³                                                          ³".
            03 line 12 col 31   value "³                                                          ³".
            03 line 13 col 31   value "³                                                          ³".
            03 line 14 col 31   value "³                                                          ³".
            03 line 15 col 31   value "³                                                          ³".
            03 line 16 col 31   value "³                                                          ³".            
            03 line 17 col 31   value "ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ".
       procedure division using lnk-par lw-mensagem-parametros.
       0000-controle section.
            perform 1000-inicializacao
            perform 2000-processamento
            perform 3000-finalizacao.
       0000-saida.    
            exit program
            stop run
       exit.
       1000-inicializacao section.
       exit.
       2000-processamento section.
            if   lnk-execucao-foreground
                 move lw-mensagem                  to ws-mensagem        
                 inspect ws-mensagem converting c-caracteres-invalidos to all c-caracteres-invalidos-conv 
                 move spaces                       to lw-mensagem-opcao
                 move 01                           to ws-index-frame
                 perform 9000-salvar-frame
                 display frm-mensagem
                 display ws-mensagem-01 at line 06 col 33
                 display ws-mensagem-02 at line 07 col 33
                 display ws-mensagem-03 at line 08 col 33
                 display ws-mensagem-04 at line 09 col 33
                 display ws-mensagem-05 at line 10 col 33
                 display ws-mensagem-06 at line 11 col 33
                 display ws-mensagem-07 at line 12 col 33
                 display ws-mensagem-08 at line 13 col 33
                 display ws-mensagem-09 at line 14 col 33
                 display ws-mensagem-10 at line 15 col 33
                 accept lw-mensagem-opcao at line 16 col 87
                 move function upper-case(lw-mensagem-opcao)    to lw-mensagem-opcao
                 perform 9000-retorna-frame          
            else
            end-if    
       exit.
       3000-finalizacao section.
       exit.                                                   
       9000-salvar-frame section.
           call "CBL_READ_SCR_CHATTRS" using ws-posicao-frame  
                                             ws-caracter-frame(ws-index-frame)
                                             ws-atributo-frame(ws-index-frame)
                                             ws-tamanho-frame
       exit. 
       9000-retorna-frame section.
           call "CBL_WRITE_SCR_ATTRS" using ws-posicao-frame
                                            ws-atributo-frame(ws-index-frame)
                                            ws-tamanho-frame
           call "CBL_WRITE_SCR_CHARS" using ws-posicao-frame
                                            ws-caracter-frame(ws-index-frame)
                                            ws-tamanho-frame
       exit.[/INST]{
  "id": "BR-001",
  "description": "Non-foreground executions do not need to handle message parameters.",
  "condition": "NOT lnk-execucao-foreground",
  "output": {
    "no action": "Do nothing"
  }
}[INST]      $set sourceformat"free"
       program-id. CS00004S.
       environment division.
       configuration section.
            special-names. decimal-point is comma.      
       data division.      
       working-storage section.
       78   c-versao                                value "a".
       78   c-este-programa                         value "CS00004S".
       linkage section.
       copy CSL00900.cpy.
       procedure division using lnk-par.
       0000-controle section.
            perform 1000-inicializacao
            perform 2000-processamento
            perform 3000-finalizacao.
       0000-saida.    
            exit program
            stop run
       exit.
       1000-inicializacao section.
       exit.
       2000-processamento section.
       exit.
       3000-finalizacao section.
       exit.                                                   
[/INST]{
  "id": "BR-001",
  "description": "The program version is always 'a'.",
  "condition": "c-versao = 'a'",
  "output": {
    "valid_version": "c-versao is 'a'"
  }
}[INST]      $set sourceformat"free"
       identification division.
       program-id.  CS00006S.
       environment division.
            special-names.
               console is crt                                         *>DOS
               decimal-point is comma
               call-convention 66 is winapi                           *>DOS
               .
       working-storage section.
       78   versao                      value "b".
       77   uso-dll                     procedure-pointer.
       77   ws-mili-segundos            pic 9(09) comp-5 value zeros.
       77   ws-comando-unix             pic x(150) value spaces.
       linkage section.
       01   lk-segundos                 pic 9(06).
       procedure division using lk-segundos.
       0000-controle section.
       0000.
            set uso-dll                 to entry "kernel32.dll".      *>DOS
            compute ws-mili-segundos = lk-segundos * 1000.            *>DOS
            call winapi "Sleep" using by value ws-mili-segundos.      *>DOS
       0000-saida.
            exit program
            stop run.[/INST]{
  "id": "BR-001",
  "description": "The number of seconds to sleep is equal to the input value multiplied by 1000.",
  "condition": "lk-segundos * 1000",
  "output": {}
}[INST]      $set sourceformat"free"
       program-id. CS00100S.
       environment division.
       configuration section.
            special-names. decimal-point is comma.      
       copy CSS00800.cpy. *> Usuários
       data division.      
       copy CSF00800.cpy. *> Usuários
       working-storage section.
       78   c-versao                               value "a".
       78   c-este-programa                        value "CS00100S".
       78   c-descricao-programa                   value "MENU PRINCIPAL".        
       copy CSW00900.cpy.
       78   c-usuario-implantacao                  value "IMPLANTACAO". 
       01   ws-campos-trabalho.
            03 ws-computer-name                    pic x(55).       
       linkage section. 
       copy CSL00900.cpy.
       01   lw-login.
            03 lw-nr-tentativas                    pic 9(02).
            03 lw-id-retorno-usuario               pic x(01).
               88 lw-login-invalido                     value "I".
               88 lw-login-valido                       value "V".                        
       procedure division using lnk-par lw-login.
       0000-controle section.
            perform 1000-inicializacao
            perform 2000-processamento
            perform 3000-finalizacao.
       0000-saida.    
            exit program
            stop run
       exit.
       1000-inicializacao section.
            perform 9000-abrir-io-pd00800                
       exit.
       2000-processamento section.
            accept ws-data-inv                     from date yyyymmdd
            move ws-dia-inv                        to ws-dia
            move ws-mes-inv                        to ws-mes
            move ws-ano-inv                        to ws-ano
            add 01                                 to lw-nr-tentativas
            set lw-login-invalido                  to true
            if   function upper-case(lnk-id-usuario) equal c-usuario-implantacao
            and  lnk-pw-usuario                      equal ws-data
                 set lw-login-valido               to true
                 set lnk-login-master              to true            
            else
                 initialize                             f00800-usuario
                 move function numval(lnk-id-usuario)   to f00800-id-usuario
                 perform 9000-ler-pd00800-ran
                 if   not ws-operacao-ok
                 and  not ws-registro-inexistente
                      string "Erro de leitura f00800-usuario - Status [" ws-resultado-acesso "]" into ws-mensagem
                      perform 9000-mensagem
                      set lnk-com-erros            to true  
                 end-if
                 if   f00800-id-usuario equal function numval(lnk-id-usuario)
                 and  f00800-pw-usuario equal lnk-pw-usuario
                 and  f00800-ativo
                      if   f00800-desenvolvimento
                           set lnk-login-master    to true 
                      end-if
                      move f00800-id-usuario       to lnk-id-usuario
                      move f00800-nome-usuario     to lnk-nome-usuario 
                      perform 2100-atualizar-login
                      set lw-login-valido          to true
                 end-if   
            end-if 
       exit.
       2100-atualizar-login section.
            accept ws-data-inv                     from date yyyymmdd
            accept ws-horas                        from time
            move ws-data-inv                       to f00800-data-ultimo-login
            move ws-horas                          to f00800-hora-ultimo-login
            display "COMPUTERNAME"                 upon environment-name
            accept ws-computer-name                from environment-value
            move ws-computer-name                  to f00800-maquina-login                         
       exit.
       3000-finalizacao section.
            close pd00800
       exit. 
       copy CSP00900.cpy.
       copy CSR00800.cpy. *> Tabelas          
[/INST]{
  "id": "BR-001",
  "description": "The user is implanted if the user ID is equal to the implantation user ID.",
  "condition": "function upper-case(lnk-id-usuario) = c-usuario-implantacao",
  "output": {
    "true": "The user is implanted."
  }
},
{
  "id": "BR-002",
  "description": "The password must be equal to the date entered.",
  "condition": "lnk-pw-usuario = ws-data",
  "output": {
    "true": "The password is valid.",
    "false": "The password is invalid."
  }
},
{
  "id": "BR-003",
  "description": "The user must be active.",
  "condition": "f00800-ativo",
  "output": {
    "true": "The user is active."
  }
},
{
  "id": "BR-004",
  "description": "If the user is in development mode, the user is a master user.",
  "condition": "f00800-desenvolvimento",
  "output": {
    "true": "The user is a master user."
  }
},
{
  "id": "BR-005",
  "description": "The last login date and time must be updated.",
  "condition": "true",  
  "output": {
    "true": "The last login date and time is updated."
  }
}[INST]      $set sourceformat"free"
       program-id. CS00101S.
       environment division.
       configuration section.
            special-names. decimal-point is comma.      
       data division.      
       working-storage section.
       78   c-versao                                value "a".
       78   c-este-programa                         value "CS00101S".     
       procedure division.
       0000-controle section.
            perform 1000-inicializacao
            perform 2000-processamento
            perform 3000-finalizacao.
       0000-saida.    
            exit program
            stop run
       exit.
       1000-inicializacao section.
       exit.
       2000-processamento section.
       exit.
       3000-finalizacao section.
       exit.                                                   
[/INST]{
  "id": "BR-001",
  "description": "The program always has a version and a name that describe the program.",
  "condition": null,
  "output": {
    "version": "c-versao",
    "name": "c-este-programa"
  }
}[INST]      $set sourceformat"free"
       program-id. CS00104S.
       environment division.
       configuration section.
            special-names. decimal-point is comma.
       copy CSS00700.cpy.           
       data division.
       copy CSF00700.cpy.      
       working-storage section.
       78   c-versao                               value "a".
       78   c-este-programa                        value "CS00104S".
       copy CSW00900.cpy.
       78   c-impotar-configuracao                 value "CS00005S".     
       linkage section.
       copy CSL00900.cpy.
       procedure division using lnk-par.
       0000-controle section.
            perform 1000-inicializacao
            perform 2000-processamento
            perform 3000-finalizacao.
       0000-saida.    
            exit program
            stop run
       exit.
       1000-inicializacao section.
       exit.
       2000-processamento section.
            string lnk-dat-path delimited   by "  " "\EFD007.DAT" into wid-pd00700
            open input pd00700
            if   not ws-operacao-ok
                 call c-impotar-configuracao using lnk-par
                 cancel c-impotar-configuracao                 
            else
                set lnk-sem-erros                  to true
            end-if
       exit.
       3000-finalizacao section.
       exit.                                                   
[/INST]{
  "id": "BR-002",
  "description": "If the configuration file cannot be imported, the program should cancel the import process and set the operation status to false.",
  "condition": "not ws-operacao-ok",
  "action": "cancel c-impotar-configuracao"
}[INST]      $set sourceformat"free"
       program-id. CS00105S.
       environment division.
       configuration section.
            special-names. decimal-point is comma.      
       copy CSS02200.cpy.
       data division.      
       copy CSF02200.cpy.
       working-storage section.
       78   c-versao                               value "a".
       78   c-este-programa                        value "CS00105S".
       78   c-descricao-programa                   value "PROXIMO DOCUMENTO NFE".
       01   ws-campos-trabalho.
            03 ws-numero-documento                 pic 9(09).
            03 ws-serie-documento                  pic 9(03).
       copy CSW00900.cpy.
       linkage section.
       copy CSL00900.cpy.
       procedure division using lnk-par.
       0000-controle section.
            perform 1000-inicializacao
            perform 2000-processamento
            perform 3000-finalizacao.
       0000-saida.    
            exit program
            stop run
       exit.
       1000-inicializacao section.
            perform 9000-abrir-io-pd02200
       exit.
       2000-processamento section.
            initialize                             f02200-parametros-nfe
            move lnk-cd-empresa                    to f02200-cd-empresa
            move lnk-cd-filial                     to f02200-cd-filial
            perform 9000-ler-pd02200-ran
            if   ws-operacao-ok
            and  f02200-cd-empresa equal lnk-cd-empresa
            and  f02200-cd-filial  equal lnk-cd-filial
                 add 1                             to f02200-numero-documento
                 move f02200-numero-documento      to ws-numero-documento
                 move f02200-serie-documento       to ws-serie-documento
                 if   ws-numero-documento equal zeros
                      move 1                       to ws-numero-documento
                      add 1                        to f02200-serie-documento
                      move f02200-serie-documento  to ws-serie-documento                              
                 end-if
            else
                 move 1                            to ws-numero-documento
                 move 1                            to ws-serie-documento                                            
            end-if 
            initialize                             f02200-parametros-nfe
            move lnk-cd-empresa                    to f02200-cd-empresa
            move lnk-cd-filial                     to f02200-cd-filial
            move ws-numero-documento               to f02200-numero-documento
            move ws-serie-documento                to f02200-serie-documento
            perform 9000-gravar-pd02200
            if   not ws-operacao-ok
                 perform 9000-regravar-pd02200
                 if   not ws-operacao-ok
                      string "Erro de gravacao f02200-parametros-nfe - " ws-resultado-acesso into ws-mensagem
                      perform 9000-mensagem
                 end-if
            end-if
            move ws-numero-documento               to lnk-numero-documento
            move ws-serie-documento                to lnk-serie-documento
       exit.
       3000-finalizacao section.
            close pd02200
       exit.  
       copy CSP00900.cpy. *> Padrão
       copy CSR02200.cpy.[/INST]{
  "id": "BR-001",
  "description": "The number in `f02200-numero-documento` must be incremented by 1.",
  "condition": "f02200-numero-documento incremented by 1",
  "output": {}
},
{
  "id": "BR-002",
  "description": "If `ws-numero-documento` is equal to all zeros, then it should be set to 1.",
  "condition": "`ws-numero-documento` equals zero",
  "output": {
    "set `ws-numero-documento` to 1": "move 1 to `ws-numero-documento`"
  }
},
{
  "id": "BR-003",
  "description": "If `ws-numero-documento` is equal to all zeros, then `f02200-serie-documento` should be incremented by 1.",
  "condition": "`ws-numero-documento` equals zero",
  "output": {
    "increment `f02200-serie-documento` by 1": "add 1 to `f02200-serie-documento`"
  }
},
{
  "id": "BR-004",
  "description": "If the record `f02200-parametros-nfe` is successfully read from the file `pd02200`, then the company code `lnk-cd-empresa` and branch code `lnk-cd-filial` from the input parameters should be copied to that record.",
  "condition": "`f02200-parametros-nfe` from the `pd02200` file is successfully read",
  "output": {
    "copy `lnk-cd-empresa` to `f02200-cd-empresa`": "move `lnk-cd-empresa` to `f02200-cd-empresa`",
    "copy `lnk-cd-filial` to `f02200-cd-filial`": "move `lnk-cd-filial` to `f02200-cd-filial`"
  }
},
{
  "id": "BR-005",
  "description": "If the record `f02200-parametros-nfe` is successfully written to the file `pd02200`, then the document number `ws-numero-documento` and document series `ws-serie-documento` should be copied to the output parameters.",
  "condition": "`f02200-parametros-nfe` to the `pd02200` file is successfully written",
  "output": {
    "copy `ws-numero-documento` to `lnk-numero-documento`": "move `ws-numero-documento` to `lnk-numero-documento`",
    "copy `ws-serie-documento` to `lnk-serie-documento`": "move `ws-serie-documento` to `lnk-serie-documento`"
  }
}[INST]      $set sourceformat"free"
       program-id. CS10015C.
       environment division.
       configuration section.
            special-names. decimal-point is comma.      
       copy CSS01800.cpy.
       data division.      
       copy CSF01800.cpy.
       working-storage section.
       78   c-versao                               value "a".
       78   c-este-programa                        value "CS10015C".
       78   c-descricao-programa                   value "PRODUTOS".
       copy CSC00900.cpy.
       copy CSW00900.cpy.
       01   ws-campos-trabalho.
            03 ws-cd-produto                       pic 9(09).
       01   f-produto.
            03 f-cd-produto                        pic 9(09).
            03 f-descricao-produto                 pic x(55).
            03 f-descricao-abreviada               pic x(55).
            03 f-cd-categoria                      pic 9(09).
            03 f-ean                               pic 9(13).
            03 f-ncm                               pic 9(08).
            03 f-data-inclusao                     pic 9(08).
            03 f-data-exclusao                     pic 9(08).
            03 f-unidade-medida                    pic x(10).
            03 f-fator-conversao                   pic 9(09).
            03 f-peso-bruto                        pic zzzzzzzzz,zzzz.
            03 f-peso-liquido                      pic zzzzzzzzz,zzzz.       
       linkage section.
       copy CSL00900.cpy.
       screen section.
       01   frm-produto.
            03 line 11 col 18   pic x(15) value "Codigo Produto:".
            03 line 11 col 34   pic 9(09) from f-cd-produto.
            03 line 13 col 23   pic x(10) value "Descricao:".
            03 line 15 col 13   pic x(20) value "Descricao Abreviada:".
            03 line 17 col 16   pic x(17) value "Codigo Categoria:".
            03 line 19 col 13   pic x(20) value "Descricao Categoria: ".
            03 line 21 col 22   pic x(11) value "Codigo EAN:".
            03 line 23 col 29   pic x(04) value "NCM:".
            03 line 25 col 19   pic x(14) value "Data Inclusao:".
            03 line 25 col 48   pic x(14) value "Data Exclusao:".
            03 line 27 col 15   pic x(18) value "Unidade de Medida:".
            03 line 29 col 14   pic x(19) value "Fator de Conversao:".
            03 line 31 col 22   pic x(11) value "Peso Bruto:".
            03 line 31 col 49   pic x(13) value "Peso Liquido:".
       procedure division using lnk-par.
       0000-controle section.
            perform 1000-inicializacao
            perform 2000-processamento
            perform 3000-finalizacao.
       0000-saida.    
            exit program
            stop run
       exit.
       1000-inicializacao section.
           initialize                             wf-opcoes-frame
           perform 9000-abrir-io-pd01800        
       exit.
       2000-processamento section.
             perform until wf-frame-retornar
                 evaluate wf-frame
                      when 0
                           perform 8000-tela
                           perform 8000-controle-frame
                      when 9
                           perform 2999-controle-frame
                      when other   
                           move "Frame invalido!"   to ws-mensagem
                           perform 9000-mensagem
                 end-evaluate
            end-perform       
       exit.
       2999-controle-frame section.
            perform 8000-accept-opcao
            evaluate wf-opcao
                when 01
                     perform 2100-incluir
                when 02
                     perform 2100-consulta
                when 03
                     perform 2100-manutencao
                when 04
                     perform 2100-exclusao
                when 05
                     perform 2100-relatorio
                when 99
                     set wf-frame-retornar         to true                       
                when other    
                     move "Opcao invalida!"   to ws-mensagem
                     perform 9000-mensagem            
            end-evaluate
       exit. 
       2100-incluir section.
            if   not lnk-permite-inclusao
                 exit section
            end-if       
            perform 8000-limpa-tela 
            initialize                             f01800-produto
            move lnk-cd-empresa                    to f01800-cd-empresa
            move lnk-cd-filial                     to f01800-cd-filial
            move 999999999                         to f01800-cd-produto
            perform 9000-str-pd01800-ngrt
            perform 9000-ler-pd01800-pre
            if   ws-operacao-ok
            and  f01800-cd-empresa equal lnk-cd-empresa
            and  f01800-cd-filial  equal lnk-cd-filial
                 add 1                             to f01800-cd-produto
                 move f01800-cd-produto            to ws-cd-produto
            else
                 move 1                            to ws-cd-produto                                            
            end-if            
            move ws-cd-produto                     to f-cd-produto
            perform 8000-tela
            perform until f-descricao-produto <> spaces
                 accept f-descricao-produto at line 13 col 34 with update auto-skip  
            end-perform
            perform until f-descricao-abreviada <> spaces
                 accept f-descricao-abreviada at line 15 col 34 with update auto-skip
            end-perform
            perform until f-cd-categoria <> spaces
                 accept f-cd-categoria at line 17 col 34 with update auto-skip 
            end-perform
            initialize                             f01800-produto
            move lnk-cd-empresa                    to f01800-cd-empresa
            move lnk-cd-filial                     to f01800-cd-filial
            move f-cd-produto                      to f01800-cd-produto
            move f-descricao-produto               to f01800-descricao-produto
            perform 9000-gravar-pd01800
            if   not ws-operacao-ok
                 perform 9000-regravar-pd01800
                 if    not ws-operacao-ok
                       string "Erro ao gravar produto! - " ws-resultado-acesso into ws-mensagem
                       perform 9000-mensagem
                 end-if
            end-if
       exit.
       2100-consulta section.
       exit.
       2100-manutencao section.
       exit.
       2100-exclusao section.
       exit.
       2100-relatorio section.
       exit.
       3000-finalizacao section.
       exit.                                                   
       copy CSC00903.cpy. *> Frame
       8000-tela section.
            perform 9000-frame-padrao
            display frm-produto
       exit.          
       8000-limpa-tela section.
            initialize                             f-produto
            perform 9000-frame-padrao
            display frm-produto
       exit. 
       copy CSP00900.cpy. *> Padrão
       copy CSR01800.cpy.[/INST]{
  "id": "BR-002",
  "description": "The Opções Frame contains the following return codes: \n 0 - Frame was executed successfully, 9 - Control Frame should be executed, Other - Invalid Frame.",
  "condition": "wf-frame",
  "output": {
    "0": "Frame was executed successfully",
    "9": "Control Frame should be executed",
    "Other": "Invalid Frame"
  }
}[INST]      $set sourceformat"free"
       program-id. CS10018C.
       environment division.
       configuration section.
            special-names. decimal-point is comma.      
       copy CSS01800.cpy.
       copy CSS02100.cpy.  
       data division.      
       copy CSF01800.cpy.
       copy CSF02100.cpy.         
       working-storage section.
       78   c-versao                               value "a".
       78   c-este-programa                        value "CS10018C".
       78   c-descricao-programa                   value "PRECOS PRODUTOS".
       copy CSC00900.cpy.
       copy CSW00900.cpy.
       01   ws-campos-trabalho.
            03 ws-cd-produto                       pic 9(09).
            03 ws-vl-unitario                      pic 9(09)v9(02).   
       01   f-produto.
            03 f-cd-produto                        pic zzzzzzzzz.
            03 f-descricao-produto                 pic x(55).
            03 f-vl-unitario                       pic zzz.zzz.zzz,zz.
       linkage section.
       copy CSL00900.cpy.
       screen section.
       01   frm-produto.
            03 line 11 col 18   pic x(15) value "Codigo Produto:".
            03 line 11 col 34   pic 9(09) from f-cd-produto.
            03 line 13 col 23   pic x(10) value "Descricao:".
            03 line 13 col 34   pic x(55) from f-descricao-produto.
            03 line 15 col 19   pic x(15) value "Valor Unitario:".
            03 line 15 col 34   pic zzz.zzz.zzz,zz from f-vl-unitario.
       procedure division using lnk-par.
       0000-controle section.
            perform 1000-inicializacao
            perform 2000-processamento
            perform 3000-finalizacao.
       0000-saida.    
            exit program
            stop run
       exit.
       1000-inicializacao section.
           initialize                             wf-opcoes-frame
           perform 9000-abrir-i-pd01800
           perform 9000-abrir-io-pd02100        
       exit.
       2000-processamento section.
             perform until wf-frame-retornar
                 evaluate wf-frame
                      when 0
                           perform 8000-tela
                           perform 8000-controle-frame
                      when 9
                           perform 2999-controle-frame
                      when other   
                           move "Frame invalido!"   to ws-mensagem
                           perform 9000-mensagem
                 end-evaluate
            end-perform       
       exit.
       2999-controle-frame section.
            perform 8000-accept-opcao
            evaluate wf-opcao
                when 01
                     perform 2100-incluir
                when 02
                     perform 2100-consulta
                when 03
                     perform 2100-manutencao
                when 04
                     perform 2100-exclusao
                when 05
                     perform 2100-relatorio
                when 99
                     set wf-frame-retornar         to true                       
                when other    
                     move "Opcao invalida!"   to ws-mensagem
                     perform 9000-mensagem            
            end-evaluate
       exit. 
       2100-incluir section.
            if   not lnk-permite-inclusao
                 exit section
            end-if       
            perform 8000-limpa-tela 
            perform until exit
                accept f-cd-produto at line 11 col 34 with update auto-skip
                move f-cd-produto              to ws-cd-produto
                if   ws-cd-produto greater zeros
                     initialize                f01800-produto
                     move lnk-cd-empresa       to f01800-cd-empresa
                     move lnk-cd-filial        to f01800-cd-filial
                     move ws-cd-produto        to f01800-cd-produto
                     perform 9000-ler-pd01800-ran
                     if   not ws-operacao-ok
                     and  not ws-registro-inexistente
                          string "Erro de leitura f01800-produto - " ws-resultado-acesso into ws-mensagem
                          perform 9000-mensagem
                     else
                          if   ws-registro-inexistente
                               string "Produto não cadastrado! [" ws-cd-produto "]" into ws-mensagem
                               perform 9000-mensagem                              
                          else
                               move f01800-cd-produto           to f-cd-produto
                               move f01800-descricao-produto    to f-descricao-produto
                               perform 8000-tela
                               exit perform        
                          end-if      
                     end-if                          
                end-if                     
            end-perform
            perform until exit
                move zeros                         to ws-vl-unitario
                accept f-vl-unitario at line 15 col 34 with update auto-skip
                move f-vl-unitario                 to ws-vl-unitario
                if   ws-vl-unitario greater zeros
                     exit perform
                end-if                
            end-perform
            move "Confirma inclusão do registro? [S/N]" to ws-mensagem
            perform 9000-mensagem
            if   ws-mensagem-opcao-sim
                 initialize                             f02100-preco-produto
                 move lnk-cd-empresa                    to f02100-cd-empresa
                 move lnk-cd-filial                     to f02100-cd-filial
                 move f-cd-produto                      to f02100-cd-produto
                 move ws-vl-unitario                    to f02100-vl-unitario
                 move function numval(lnk-id-usuario)   to f02100-id-usuario
                 accept ws-data-inv                     from date yyyymmdd
                 accept ws-horas                        from time
                 move ws-data-inv                       to f02100-data-alteracao
                 move ws-horas                          to f02100-hora-alteracao
                 perform 9000-gravar-pd02100
                 if   not ws-operacao-ok
                      perform 9000-regravar-pd02100
                      if   not ws-operacao-ok
                           string "Erro ao gravar  f02100-preco-produto - " ws-resultado-acesso into ws-mensagem
                           perform 9000-mensagem
                      end-if
                 end-if
            end-if
       exit.
       2100-consulta section.
       exit.
       2100-manutencao section.
       exit.
       2100-exclusao section.
       exit.
       2100-relatorio section.
       exit.
       3000-finalizacao section.
            close pd01800
            close pd02100
       exit.                                                   
       copy CSC00903.cpy. *> Frame
       8000-tela section.
            perform 9000-frame-padrao
            display frm-produto
       exit.          
       8000-limpa-tela section.
            initialize                             f-produto
            perform 9000-frame-padrao
            display frm-produto
       exit. 
       copy CSP00900.cpy. *> Padrão
       copy CSR01800.cpy.
       copy CSR02100.cpy.[/INST]{
  "id": "BR-002",
  "description": "A user is not allowed to include a new record if lnk-permite-inclusao evaluates to false.",
  "condition": "lnk-permite-inclusao",
  "output": {
    "allowed": "User can include record",
    "notAllowed": "User cannot include record"
  }
}[INST]      $set sourceformat"free"
       program-id. CS20001C.
       environment division.
       configuration section.
            special-names. decimal-point is comma.      
       data division.      
       working-storage section.
       78   c-versao                                value "a".
       78   c-este-programa                         value "CS00004S".
       78   c-estoque                               value "CS20003C".
       linkage section.
       copy CSL00900.cpy.
       procedure division using lnk-par.
       0000-controle section.
            perform 1000-inicializacao
            perform 2000-processamento
            perform 3000-finalizacao.
       0000-saida.    
            exit program
            stop run
       exit.
       1000-inicializacao section.
            call c-estoque using lnk-par
            cancel c-estoque
       exit.
       2000-processamento section.
       exit.
       3000-finalizacao section.
       exit.                                                   
[/INST]{
  "id": "BR-002",
  "description": "The initialization step of the program involves calling and cancelling the subroutine c-estoque.",
  "condition": null,
  "output": {
    "initialize": "perform 1000-inicializacao"
  }
}[INST]      $set sourceformat"free"
       program-id. CS20002C.
       environment division.
       configuration section.
            special-names. decimal-point is comma.      
       data division.      
       working-storage section.
       78   c-versao                                value "a".
       78   c-este-programa                         value "CS00004S".
       78   c-estoque                               value "CS20003C".
       linkage section.
       copy CSL00900.cpy.
       procedure division using lnk-par.
       0000-controle section.
            perform 1000-inicializacao
            perform 2000-processamento
            perform 3000-finalizacao.
       0000-saida.    
            exit program
            stop run
       exit.
       1000-inicializacao section.
            call c-estoque using lnk-par
            cancel c-estoque
       exit.
       2000-processamento section.
       exit.
       3000-finalizacao section.
       exit.                                                   
[/INST]{
  "id": "BR-001",
  "description": "The program version is 'a'",
  "condition": null,
  "output": {
    "value": "a"
  }
}[INST]      $set sourceformat"free"
       program-id. CS30001C.
       environment division.
       configuration section.
            special-names. decimal-point is comma.      
       copy CSS02200.cpy.  
       data division.      
       copy CSF02200.cpy.         
       working-storage section.
       78   c-versao                               value "a".
       78   c-este-programa                        value "CS30001C".
       78   c-descricao-programa                   value "PARAMETROS NF-E".
       copy CSC00900.cpy.
       copy CSW00900.cpy.
       01   f-parametros-nfe.
            03 f-numero-documento                  pic 9(09).
            03 f-serie-documento                   pic 9(03).
       linkage section.
       copy CSL00900.cpy.
       screen section.
       01   frm-produto.
            03 line 11 col 16   pic x(17) value "Numero Documento:".
            03 line 11 col 34   pic 9(09) from f-numero-documento.
            03 line 13 col 17   pic x(16) value "Serie Documento:".
            03 line 13 col 34   pic 9(03) from f-serie-documento.
       procedure division using lnk-par.
       0000-controle section.
            perform 1000-inicializacao
            perform 2000-processamento
            perform 3000-finalizacao.
       0000-saida.    
            exit program
            stop run
       exit.
       1000-inicializacao section.
           initialize                             wf-opcoes-frame
           perform 9000-abrir-io-pd02200        
       exit.
       2000-processamento section.
             perform until wf-frame-retornar
                 evaluate wf-frame
                      when 0
                           perform 8000-tela
                           perform 8000-controle-frame
                      when 9
                           perform 2999-controle-frame
                      when other   
                           move "Frame invalido!"   to ws-mensagem
                           perform 9000-mensagem
                 end-evaluate
            end-perform       
       exit.
       2999-controle-frame section.
            perform 8000-accept-opcao
            evaluate wf-opcao
                when 01
                     perform 2100-incluir
                when 02
                     perform 2100-consulta
                when 03
                     perform 2100-manutencao
                when 04
                     perform 2100-exclusao
                when 05
                     perform 2100-relatorio
                when 99
                     set wf-frame-retornar         to true                       
                when other    
                     move "Opcao invalida!"   to ws-mensagem
                     perform 9000-mensagem            
            end-evaluate
       exit. 
       2100-incluir section.
            if   not lnk-permite-inclusao
                 exit section
            end-if       
            perform 8000-limpa-tela 
            perform until f-numero-documento <> zeros
                accept f-numero-documento at line 11 col 34 with update auto-skip
            end-perform
            perform until f-serie-documento <> zeros
                accept f-serie-documento at line 13 col 34 with update auto-skip
            end-perform            
            move "Confirma inclusão do registro? [S/N]" to ws-mensagem
            perform 9000-mensagem
            if   ws-mensagem-opcao-sim
                 initialize                             f02200-parametros-nfe
                 move lnk-cd-empresa                    to f02200-cd-empresa
                 move lnk-cd-filial                     to f02200-cd-filial
                 move f-numero-documento                to f02200-numero-documento
                 move f-serie-documento                 to f02200-serie-documento
                 perform 9000-gravar-pd02200
                 if   not ws-operacao-ok
                      perform 9000-regravar-pd02200
                      if   not ws-operacao-ok
                           string "Erro ao gravar  f02200-parametros-nfe - " ws-resultado-acesso into ws-mensagem
                           perform 9000-mensagem
                      end-if
                 end-if
            end-if
       exit.
       2100-consulta section.
       exit.
       2100-manutencao section.
       exit.
       2100-exclusao section.
       exit.
       2100-relatorio section.
       exit.
       3000-finalizacao section.
            close pd02200
       exit.                                                   
       copy CSC00903.cpy. *> Frame
       8000-tela section.
            perform 9000-frame-padrao
            display frm-produto
       exit.          
       8000-limpa-tela section.
            initialize                             f-parametros-nfe
            perform 9000-frame-padrao
            display frm-produto
       exit. 
       copy CSP00900.cpy. *> Padrão
       copy CSR02200.cpy.[/INST]{
  "id": "BR-002",
  "description": "The inclusion of a new record in the file (f02200-parametros-nfe) is allowed only if the user has the permission to include (lnk-permite-inclusao).",
  "condition": "NOT lnk-permite-inclusao",
  "output": {}
}[INST]      $set sourceformat"free"
       program-id. CS30002C.
       environment division.
       configuration section.
            special-names. decimal-point is comma.      
       data division.      
       working-storage section.
       78   c-versao                                value "a".
       78   c-emissao-nfe                           value "CS30003C".
       linkage section.
       copy CSL00900.cpy.
       procedure division using lnk-par.
       0000-controle section.
            perform 1000-inicializacao
            perform 2000-processamento
            perform 3000-finalizacao.
       0000-saida.    
            exit program
            stop run
       exit.
       1000-inicializacao section.
            call c-emissao-nfe using lnk-par
            cancel c-emissao-nfe
       exit.
       2000-processamento section.
       exit.
       3000-finalizacao section.
       exit.                                                   
[/INST]{
  "id": "BR-002",
  "description": "Program has a version number.",
  "condition": "c-versao",
  "output": {
    "version": "c-versao"
  }
}[INST]      $set sourceformat"free"
       program-id. ProgramaPrincipal.
       environment division.
       configuration section.
            special-names. decimal-point is comma.      
       data division.      
       working-storage section.
       78   c-versao                                value "a".
       78   c-este-programa                         value "ProgramaPrincipal".
       78   c-frame-principal                       value "CS00000S".
       78   c-controle-assincrono                   value "CS00001S".
       01   ws-campos-trabalho.
            03 ws-linha-commando                    pic x(500)  value spaces.
       copy CSL00900.cpy.     
       procedure division.
       0000-controle section.
            perform 1000-inicializacao
            perform 2000-processamento
            perform 3000-finalizacao.
       0000-saida.    
            exit program
            stop run
       exit.
       1000-inicializacao section.
            accept ws-linha-commando                from command-line
       exit.
       2000-processamento section.
            if   ws-linha-commando equal spaces
                 call c-frame-principal using lnk-par
                 cancel c-frame-principal
            else
                 call c-controle-assincrono using lnk-par
                 cancel c-controle-assincrono
            end-if      
       exit.
       3000-finalizacao section.
       exit.                                                   
[/INST]{
  "id": "BR-001",  "description": "If the CLI doesn't have any arguments, \\n*the Application Frame will open\\n*the Asynchronous Control will cancel",
  "condition": "ws-linha-commando equal spaces",
  "output": {
    "if true": {
      "action_1": "call c-frame-principal using lnk-par",
      "action_2": "cancel c-frame-principal"
    }
  }
},
{
  "id": "BR-002",  "description": "If the CLI has any arguments, \\n*the Asynchronous Control will open\\n*the Application Frame will cancel",
  "condition": "ws-linha-commando does not equal spaces",
  "output": {
    "if true": {
      "action_1": "call c-controle-assincrono using lnk-par",
      "action_2": "cancel c-controle-assincrono"
    }
  }
}[INST]      $set sourceformat"free"
       program-id. ProgramaTemplate.
       environment division.
       configuration section.
            special-names. decimal-point is comma.      
       data division.      
       working-storage section.
       78   c-versao                                value "a".
       78   c-este-programa                         value "ProgramaTemplate".     
       procedure division.
       0000-controle section.
            perform 1000-inicializacao
            perform 2000-processamento
            perform 3000-finalizacao.
       0000-saida.    
            exit program
            stop run
       exit.
       1000-inicializacao section.
       exit.
       2000-processamento section.
       exit.
       3000-finalizacao section.
       exit.                                                   
[/INST]{
  "id": "BR-001",
  "description": "The program version is 'a'",
  "condition": null,
  "output": {
    "version": "a"
  }
}[INST]move "/"                           to routing-pattern(1).
move "indexweb"                    to routing-destiny(1).
move "/showsum/%value1/%value2"    to routing-pattern(2).
move "showsum"                     to routing-destiny(2).
move "/showname/%value"            to routing-pattern(3).
move "showname"                    to routing-destiny(3).
[/INST]{
  "id": "BR-001",
  "description": "When the request URL for a web application matches the routing pattern "indexweb", the request should be mapped to the destination "showsum.",
  "condition": "request url = /",
  "output": {
    "change dest": "indexweb"
  }
},
{
  "id": "BR-002",
  "description": "When the request URL for a web application matches the routing pattern /showsum/%value1/%value2, the request should be mapped to the destination showsum.",
  "condition": "request url = /showsum/%value1/%value2",
  "output": {
    "change dest": "showsum"
  }
},
{
  "id": "BR-003",
  "description": "When the request URL for a web application matches the routing pattern /showname/%value, the request should be mapped to the destination showname.",
  "condition": "request url = /showname/%value",
  "output": {
    "change dest": "showname"
  }
}[INST]       identification division.
       program-id. indexweb.
       data division.
       working-storage section.
       01 the-vars.
          03  COW-vars OCCURS 99 times.
            05 COW-varname       pic x(99).
            05 COW-varvalue      pic x(99).    
       procedure division.
           call 'template' using the-vars "index.cow".
       goback.
       end program indexweb.
[/INST]{
  "id": "BR-002",
  "description": "The system uses a template named \\\"index.cow\\\" and passes the data from the-vars to it.",
  "condition": null,
  "output": {
    "template": "index.cow",
    "vars": "the-vars"
  }
}[INST]       identification division.
       program-id. showname.
       data division.
       working-storage section.
       01 the-vars.
          03  COW-vars OCCURS 99 times.
            05 COW-varname       pic x(99).
            05 COW-varvalue      pic x(99).    
       linkage section.
       01 the-values.
          05 COW-query-values           occurs 10 times.
            10 COW-query-value-name     pic x(90).
            10 COW-query-value          pic x(90).
       procedure division using the-values.
           MOVE "username" to COW-varname(1).
           MOVE COW-query-value(1) to COW-varvalue(1).   
           call 'template' using the-vars "hello.cow".
       goback.
       end program showname.
[/INST]{
  "id": "BR-001",
  "description": "The first variable name in the COW-vars group is 'username'.",
  "condition": "COW-varname(1) = 'username'",
  "output": {
    "username": "COW-varname(1) = 'username'"
  }
},
{
  "id": "BR-002",
  "description": "The value of the first variable in the COW-query-values group is copied to the value of the first variable in the COW-vars group.",
  "condition": "COW-varvalue(1) = COW-query-value(1)",
  "output": {
    "username": "COW-varvalue(1) = COW-query-value(1)"
  }
}[INST]       identification division.
       program-id. showsum.
       data division.
       working-storage section.
       01 sum-result pic z(36).
       01 the-vars.
          03  COW-vars OCCURS 99 times.
            05 COW-varname       pic x(99).
            05 COW-varvalue      pic x(99).    
       linkage section.
       01 received-values.
          05 query-values           occurs 10 times.
            10 query-value-name     pic x(90).
            10 query-value          pic x(90).
       procedure division using received-values.
           COMPUTE sum-result = 
              function numval(query-value(1)) 
                 + 
              function numval(query-value(2)).
           MOVE "number1" to COW-varname(1).
           MOVE query-value(1) to COW-varvalue(1).   
           MOVE "number2" to COW-varname(2).
           MOVE query-value(2) to COW-varvalue(2).
           MOVE "number3" to COW-varname(3).
           MOVE function trim(sum-result) to COW-varvalue(3).
           call 'template' using the-vars "showsum.cow".
       goback.
       end program showsum.[/INST]{
  "id": "BR-001",
  "description": "The sum of the first two query values is stored in the third query value after removing leading and trailing spaces from the sum.",
  "inputs": {
    "query-value(1)": "first query value",
    "query-value(2)": "second query value"
  },
  "outputs": {
    "COW-varvalue(3)": "the sum of the first two query values with leading and trailing spaces removed"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. WGRVGCUS.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 CUST-REC-KEY.
           05 NAME                        PIC X(30)  VALUE SPACES.
       01  CUSTOMER-RECORD.
           05 CUSTOMER-NAME               PIC X(30).
           05 CUSTOMER-SSN                PIC X(9).
           05 CUSTOMER-ADDRESS.
              10 CUSTOMER-STREET          PIC X(20).
              10 CUSTOMER-CITY            PIC X(10).
              10 CUSTOMER-STATE           PIC X(4).
              10 CUSTOMER-ZIP             PIC 9(5).
           05 CUSTOMER-PHONE              PIC X(13).
           05 CUSTOMER-ACCESS-PIN         PIC X(4).
       01 ACCT-REC-KEY.
           05 SSN                         PIC X(9)   VALUE SPACES.
           05 NUM                         PIC X(10)  VALUE SPACES.
       01  ACCOUNT-RECORD.
           05 ACCOUNT-SSN                 PIC X(9).
           05 ACCOUNT-NUMBER              PIC X(10).
           05 ACCOUNT-TYPE.
              10 ACCOUNT-TYPE-CODE        PIC X.
                 88 ACCOUNT-TYPE-CHK            VALUE 'C'.
                 88 ACCOUNT-TYPE-SAV            VALUE 'S'.
              10 ACCOUNT-TYPE-NAME        PIC X(10).
           05 ACCOUNT-AREA                PIC X(39).
           05 ACCOUNT-TYPE-CHECKING REDEFINES ACCOUNT-AREA.
              10 ACCOUNT-CHK-OD-CHG       PIC S9(3)V99   COMP-3.
              10 ACCOUNT-CHK-OD-LIMIT     PIC S9(5)V99   COMP-3.
              10 ACCOUNT-CHK-OD-LINK-ACCT PIC X(10).
              10 ACCOUNT-CHK-LAST-STMT    PIC X(10).
              10 ACCOUNT-CHK-DETAIL-ITEMS PIC S9(7)      COMP-3.
              10 ACCOUNT-CHK-BAL          PIC S9(13)V99  COMP-3.
           05 ACCOUNT-TYPE-SAVINGS  REDEFINES ACCOUNT-AREA.
              10 ACCOUNT-SAV-INT-RATE     PIC S9(1)V99   COMP-3.
              10 ACCOUNT-SAV-SVC-CHRG     PIC S9(3)V99   COMP-3.
              10 ACCOUNT-SAV-LAST-STMT    PIC X(10).
              10 ACCOUNT-SAV-DETAIL-ITEMS PIC S9(7)      COMP-3.
              10 ACCOUNT-SAV-BAL          PIC S9(13)V99  COMP-3.
              10 FILLER                   PIC X(12).
       01 TXN-REC-KEY.
           05 SSN                         PIC X(9)   VALUE SPACES.
           05 NUM                         PIC X(10)  VALUE SPACES.
           05 ITEM-NUM                    PIC S9(7)  COMP-3.
       01  TXN-DETAILS.
           05 TXN-SSN                     PIC X(9).
           05 TXN-ACCT-NUM                PIC X(10).
           05 TXN-ITEM-NUM                PIC S9(7)  COMP-3.
           05 TXN-TYPE                    PIC X.
              88 TXN-TYPE-INITIAL-BALANCE       VALUE 'B'.
              88 TXN-TYPE-CREDIT                VALUE 'C'.
              88 TXN-TYPE-DEBIT                 VALUE 'D'.
              88 TXN-TYPE-SVCCHG                VALUE 'S'.
              88 TXN-TYPE-ODCHG                 VALUE 'O'.
           05 TXN-DATE                    PIC X(10).
           05 TXN-AMOUNT                  PIC S9(13)V99  COMP-3.
       01 DONE                        PIC X       VALUE 'N'.
       01 RESP-CODE                   PIC S9(9)   COMP  VALUE +0.
       01 WBCUSTDB-DD                 PIC X(8)    VALUE 'WBCUSTDB'.
       01 WBACCTDB-DD                 PIC X(8)    VALUE 'WBACCTDB'.
       01 WBTXNDB-DD                  PIC X(8)    VALUE 'WBTXNDB'.
       01 RET-CODE                    PIC S9(4)   COMP    VALUE 0.
       01 EDIT-NUM                    PIC Z,ZZZ,ZZ9.
       01 TEMPDATA                    PIC X(1).
       01 TEMPLENG                    PIC S9(4)   COMP.
       01 PAGEN                       PIC 9(3)            VALUE 1.
       01 OPINSTR                     PIC X(52)
                VALUE 'Press <Enter> and follow with paging commands.'.
       COPY WGRVMAP.
       LINKAGE SECTION.
       PROCEDURE DIVISION.
           EXEC CICS HANDLE AID CLEAR(END-WGRVGCUS)
                                PF3(END-WGRVGCUS)
                                PF4(XFER-WGRVGBAL)
                                PF5(XFER-WGRVGACC)
                                PF7(XFER-WGRVGDET)
                                PF8(XFER-WGRVADDC)
                                PF9(XFER-WGRVADDA)
                                PF10(XFER-WGRVCUSL) END-EXEC.
           PERFORM SET-MAP-DEFAULTS THRU SET-MAP-DEFAULTS-EXIT.
           EXEC CICS SEND MAP('GCNAME') MAPSET('WGRVMAP')
                          MAPONLY ERASE END-EXEC.
           EXEC CICS RECEIVE MAP('GCNAME') MAPSET('WGRVMAP')
                             ASIS END-EXEC.
           MOVE LOW-VALUE TO GCHPAGNA.
           MOVE PAGEN TO GCHPAGNO.
           EXEC CICS SEND MAP('GCHEAD') MAPSET('WGRVMAP')
                          ACCUM PAGING ERASE
           END-EXEC.
           PERFORM GET-CUSTOMERS THRU GET-CUSTOMERS-EXIT.
           EXEC CICS RECEIVE INTO(TEMPDATA)
                             LENGTH(TEMPLENG) END-EXEC.
           EXEC CICS RETURN END-EXEC.
       FORMAT-ERROR-MSG.
           EXEC CICS SEND MAP('GCNAME') MAPSET('WGRVMAP')
                          FROM (GCNAMEO) ERASE END-EXEC.
       FORMAT-ERROR-MSG-EXIT.
           EXIT.
       SET-MAP-DEFAULTS.
           MOVE 'WBGC' TO GCTRANO GCNXTTRO.
           MOVE SPACES TO GCNNAMEO.
           MOVE SPACES TO GCNMSG1O.
           MOVE SPACES TO GCNMSG2O.
       SET-MAP-DEFAULTS-EXIT.
           EXIT.
       GET-CUSTOMERS.
           EXEC CICS HANDLE CONDITION
                            OVERFLOW(GET-CUSTOMERS-OVERFLOW) END-EXEC.
           MOVE GCNNAMEI TO NAME OF CUST-REC-KEY.
           EXEC CICS STARTBR
                     DATASET(WBCUSTDB-DD)
                     RIDFLD(CUST-REC-KEY)
                     KEYLENGTH(LENGTH OF CUST-REC-KEY)
                     GTEQ
                     RESP(RESP-CODE)
           END-EXEC.
           EVALUATE RESP-CODE
              WHEN 0
                 CONTINUE
              WHEN DFHRESP(NOTOPEN)
                 GO TO GET-CUSTOMERS-NOTFND-SB
              WHEN DFHRESP(NOTFND)
                 GO TO GET-CUSTOMERS-NOTFND-SB
              WHEN DFHRESP(ENDFILE)
                 GO TO GET-CUSTOMERS-ENDFILE-SB
              WHEN OTHER
                 GO TO GET-CUSTOMERS-ERROR-SB
           END-EVALUATE.
       GET-CUSTOMERS-NEXT.
           EXEC CICS READNEXT
                     DATASET(WBCUSTDB-DD)
                     INTO(CUSTOMER-RECORD)
                     LENGTH(LENGTH OF CUSTOMER-RECORD)
                     KEYLENGTH(LENGTH OF CUST-REC-KEY)
                     RIDFLD(CUST-REC-KEY)
                     RESP(RESP-CODE)
           END-EXEC.
           EVALUATE RESP-CODE
              WHEN 0
                 CONTINUE
              WHEN DFHRESP(NOTFND)
                 GO TO GET-CUSTOMERS-NOTFND
              WHEN DFHRESP(ENDFILE)
                 GO TO GET-CUSTOMERS-ENDFILE
              WHEN OTHER
                 GO TO GET-CUSTOMERS-ERROR
           END-EVALUATE.
           MOVE LOW-VALUE TO GCLINEO.
           MOVE CUSTOMER-NAME TO GCLNAMEO.
           MOVE CUSTOMER-SSN  TO GCLSSNO.
           EXEC CICS SEND MAP('GCLINE') MAPSET('WGRVMAP')
                          ACCUM PAGING END-EXEC
           GO TO GET-CUSTOMERS-NEXT.
       GET-CUSTOMERS-OVERFLOW.
           EXEC CICS SEND MAP('GCFOOT') MAPSET('WGRVMAP')
                          MAPONLY ACCUM PAGING END-EXEC.
           ADD 1 TO PAGEN.
           MOVE PAGEN TO GCHPAGNO.
           EXEC CICS SEND MAP('GCHEAD') MAPSET('WGRVMAP')
                          ACCUM PAGING ERASE END-EXEC.
           EXEC CICS SEND MAP('GCLINE') MAPSET('WGRVMAP')
                          ACCUM PAGING END-EXEC.
           GO TO GET-CUSTOMERS-NEXT.
       GET-CUSTOMERS-ENDFILE.
           EXEC CICS ENDBR DATASET(WBCUSTDB-DD) END-EXEC.
           GO TO GET-CUSTOMERS-ENDFILE-SB.
       GET-CUSTOMERS-ENDFILE-SB.
           EXEC CICS SEND MAP('GCFINAL') MAPSET('WGRVMAP')
                          MAPONLY ACCUM PAGING END-EXEC.
           EXEC CICS SEND PAGE END-EXEC.
           EXEC CICS SEND TEXT FROM(OPINSTR)
                               LENGTH(LENGTH OF OPINSTR)
                               ERASE END-EXEC.
           GO TO GET-CUSTOMERS-EXIT.
       GET-CUSTOMERS-NOTFND.
           EXEC CICS ENDBR DATASET(WBCUSTDB-DD) END-EXEC.
           GO TO GET-CUSTOMERS-NOTFND-SB.
       GET-CUSTOMERS-NOTFND-SB.
           EXEC CICS SEND MAP('GCFINAL') MAPSET('WGRVMAP')
                          MAPONLY ACCUM PAGING END-EXEC.
           EXEC CICS SEND PAGE END-EXEC.
           EXEC CICS SEND TEXT FROM(OPINSTR)
                               LENGTH(LENGTH OF OPINSTR)
                               ERASE END-EXEC.
           GO TO GET-CUSTOMERS-EXIT.
       GET-CUSTOMERS-ERROR.
           EXEC CICS ENDBR DATASET(WBCUSTDB-DD) END-EXEC.
           GO TO GET-CUSTOMERS-ERROR-SB.
       GET-CUSTOMERS-ERROR-SB.
           EXEC CICS HANDLE CONDITION ERROR END-EXEC.
           EXEC CICS PURGE MESSAGE END-EXEC.
           EXEC CICS ABEND ABCODE('WBER') END-EXEC.
       GET-CUSTOMERS-EXIT.
           EXIT.
       XFER-WGRVGBAL.
           EXEC CICS XCTL PROGRAM('WGRVGBAL') END-EXEC.
           EXEC CICS RETURN END-EXEC.
       XFER-WGRVGACC.
           EXEC CICS XCTL PROGRAM('WGRVGACC') END-EXEC.
           EXEC CICS RETURN END-EXEC.
       XFER-WGRVGDET.
           EXEC CICS XCTL PROGRAM('WGRVGDET') END-EXEC.
           EXEC CICS RETURN END-EXEC.
       XFER-WGRVADDC.
           EXEC CICS XCTL PROGRAM('WGRVADDC') END-EXEC.
           EXEC CICS RETURN END-EXEC.
       XFER-WGRVADDA.
           EXEC CICS XCTL PROGRAM('WGRVADDA') END-EXEC.
           EXEC CICS RETURN END-EXEC.
       XFER-WGRVCUSL.
           EXEC CICS XCTL PROGRAM('WGRVCUSL') END-EXEC.
           EXEC CICS RETURN END-EXEC.
       END-WGRVGCUS.
           EXEC CICS SEND CONTROL ERASE FREEKB END-EXEC.
           EXEC CICS RETURN END-EXEC.
       END-WGRVGCUS-EXIT.
           EXIT.
[/INST]{
  "id": "BR-001",
  "description": "Customer SSN should not be empty",
  "condition": "CUSTOMER-SSN IS NOT EMPTY",
  "output": []
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. WTIGBAL.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 CUST-REC-KEY.
           05 NAME                        PIC X(30)  VALUE SPACES.
       01  CUSTOMER-RECORD.
           05 CUSTOMER-NAME               PIC X(30).
           05 CUSTOMER-SSN                PIC X(9).
           05 CUSTOMER-ADDRESS.
              10 CUSTOMER-STREET          PIC X(20).
              10 CUSTOMER-CITY            PIC X(10).
              10 CUSTOMER-STATE           PIC X(4).
              10 CUSTOMER-ZIP             PIC 9(5).
           05 CUSTOMER-PHONE              PIC X(13).
           05 CUSTOMER-ACCESS-PIN         PIC X(4).
       01 ACCT-REC-KEY.
           05 SSN                         PIC X(9)   VALUE SPACES.
           05 NUM                         PIC X(10)  VALUE SPACES.
       01  ACCOUNT-RECORD.
           05 ACCOUNT-SSN                 PIC X(9).
           05 ACCOUNT-NUMBER              PIC X(10).
           05 ACCOUNT-TYPE.
              10 ACCOUNT-TYPE-CODE        PIC X.
                 88 ACCOUNT-TYPE-CHK            VALUE 'C'.
                 88 ACCOUNT-TYPE-SAV            VALUE 'S'.
              10 ACCOUNT-TYPE-NAME        PIC X(10).
           05 ACCOUNT-AREA                PIC X(39).
           05 ACCOUNT-TYPE-CHECKING REDEFINES ACCOUNT-AREA.
              10 ACCOUNT-CHK-OD-CHG       PIC S9(3)V99   COMP-3.
              10 ACCOUNT-CHK-OD-LIMIT     PIC S9(5)V99   COMP-3.
              10 ACCOUNT-CHK-OD-LINK-ACCT PIC X(10).
              10 ACCOUNT-CHK-LAST-STMT    PIC X(10).
              10 ACCOUNT-CHK-DETAIL-ITEMS PIC S9(7)      COMP-3.
              10 ACCOUNT-CHK-BAL          PIC S9(13)V99  COMP-3.
           05 ACCOUNT-TYPE-SAVINGS  REDEFINES ACCOUNT-AREA.
              10 ACCOUNT-SAV-INT-RATE     PIC S9(1)V99   COMP-3.
              10 ACCOUNT-SAV-SVC-CHRG     PIC S9(3)V99   COMP-3.
              10 ACCOUNT-SAV-LAST-STMT    PIC X(10).
              10 ACCOUNT-SAV-DETAIL-ITEMS PIC S9(7)      COMP-3.
              10 ACCOUNT-SAV-BAL          PIC S9(13)V99  COMP-3.
              10 FILLER                   PIC X(12).
       01 TXN-REC-KEY.
           05 SSN                         PIC X(9)   VALUE SPACES.
           05 NUM                         PIC X(10)  VALUE SPACES.
           05 ITEM-NUM                    PIC S9(7)  COMP-3.
       01  TXN-DETAILS.
           05 TXN-SSN                     PIC X(9).
           05 TXN-ACCT-NUM                PIC X(10).
           05 TXN-ITEM-NUM                PIC S9(7)  COMP-3.
           05 TXN-TYPE                    PIC X.
              88 TXN-TYPE-INITIAL-BALANCE       VALUE 'B'.
              88 TXN-TYPE-CREDIT                VALUE 'C'.
              88 TXN-TYPE-DEBIT                 VALUE 'D'.
              88 TXN-TYPE-SVCCHG                VALUE 'S'.
              88 TXN-TYPE-ODCHG                 VALUE 'O'.
           05 TXN-DATE                    PIC X(10).
           05 TXN-AMOUNT                  PIC S9(13)V99  COMP-3.
       01 RESP-CODE                   PIC S9(9)   COMP  VALUE +0.
       01 WBCUSTDB-DD                 PIC X(8)    VALUE 'WBCUSTDB'.
       01 WBACCTDB-DD                 PIC X(8)    VALUE 'WBACCTDB'.
       01 WBTXNDB-DD                  PIC X(8)    VALUE 'WBTXNDB'.
       01 RET-CODE                    PIC S9(4)   COMP    VALUE 0.
       01 EDIT-NUM                    PIC Z,ZZZ,ZZ9.
       LINKAGE SECTION.
       01 DFHCOMMAREA.
          05 SCRATCH-PAD-AREA               PIC X(256).
          05 METADATAERRBLK.
             10 LMETADATALEN                PIC 9(9) COMP.
             10 BSTRRUNTIMEVERSION          PIC X(32).
             10 BSTRMETHODNAME              PIC X(32).
             10 BSTRPROGID                  PIC X(40).
             10 BSTRCLSID                   PIC X(40).
             10 USMAJORVERSION              PIC 9(4) COMP.
             10 USMINORVERSION              PIC 9(4) COMP.
             10 SREADYTOCOMMIT              PIC 9(4) COMP.
             10 SWILLINGTODOMORE            PIC 9(4) COMP.
             10 SRETURNERRORTOCLIENT        PIC 9(4) COMP.
             10 SERRORCODE                  PIC 9(4) COMP.
             10 LHELPCONTEXT                PIC 9(9) COMP.
             10 BSTRHELPSTRING              PIC X(256).
          05 USER-DATA.
             10 ACCT-BAL                    PIC S9(13)V99  COMP-3.
             10 CUST-NAME                   PIC X(30).
             10 CUST-ACCT                   PIC X(10).
       PROCEDURE DIVISION.
           MOVE 0 TO SERRORCODE RET-CODE
                     SRETURNERRORTOCLIENT.
           MOVE SPACES TO BSTRHELPSTRING.
           MOVE 0 TO ACCT-BAL OF USER-DATA.
           PERFORM GET-CUST-SSN THRU GET-CUST-SSN-EXIT.
           IF RET-CODE = 0 THEN
              PERFORM GET-ACCT THRU GET-ACCT-EXIT
           END-IF.
           IF SERRORCODE NOT = 0 THEN
              MOVE 1 TO SRETURNERRORTOCLIENT
           END-IF.
           EXEC CICS RETURN END-EXEC.
       GET-CUST-SSN.
           MOVE CUST-NAME OF USER-DATA TO NAME OF CUST-REC-KEY.
           EXEC CICS READ
                     DATASET(WBCUSTDB-DD)
                     INTO(CUSTOMER-RECORD)
                     LENGTH(LENGTH OF CUSTOMER-RECORD)
                     KEYLENGTH(LENGTH OF CUST-REC-KEY)
                     RIDFLD(CUST-REC-KEY)
                     RESP(RESP-CODE)
           END-EXEC.
           EVALUATE RESP-CODE
              WHEN 0
                 MOVE 0 TO RET-CODE
                 GO TO GET-CUST-SSN-EXIT
              WHEN DFHRESP(NOTOPEN)
                 GO TO GET-CUST-SSN-NOTOPEN
              WHEN DFHRESP(DISABLED)
                 GO TO GET-CUST-SSN-NOTOPEN
              WHEN DFHRESP(ENDFILE)
                 GO TO GET-CUST-SSN-NOTFND
              WHEN DFHRESP(NOTFND)
                 GO TO GET-CUST-SSN-NOTFND
              WHEN OTHER
                 GO TO GET-CUST-SSN-ERROR
           END-EVALUATE.
           GO TO GET-CUST-SSN-EXIT.
       GET-CUST-SSN-NOTOPEN.
           MOVE 'Customer file not open' TO BSTRHELPSTRING.
           MOVE 5001 TO SERRORCODE RET-CODE.
           GO TO GET-CUST-SSN-EXIT.
       GET-CUST-SSN-NOTFND.
           MOVE 'Customer name not found' TO BSTRHELPSTRING.
           MOVE 5002 TO  SERRORCODE RET-CODE.
           GO TO GET-CUST-SSN-EXIT.
       GET-CUST-SSN-ERROR.
           MOVE SPACES TO BSTRHELPSTRING.
           MOVE RESP-CODE TO EDIT-NUM.
           STRING 'I/O Error one Customer file, response code='
                            DELIMITED SIZE
                  EDIT-NUM  DELIMITED SIZE
                  INTO BSTRHELPSTRING
           END-STRING.
           MOVE 5003 TO  SERRORCODE RET-CODE.
           GO TO GET-CUST-SSN-EXIT.
       GET-CUST-SSN-EXIT.
           EXIT.
       GET-ACCT.
           MOVE CUSTOMER-SSN           TO SSN OF ACCT-REC-KEY.
           MOVE CUST-ACCT OF USER-DATA TO NUM OF ACCT-REC-KEY.
           EXEC CICS READ
                     DATASET(WBACCTDB-DD)
                     INTO(ACCOUNT-RECORD)
                     LENGTH(LENGTH OF ACCOUNT-RECORD)
                     KEYLENGTH(LENGTH OF ACCT-REC-KEY)
                     RIDFLD(ACCT-REC-KEY)
                     RESP(RESP-CODE)
           END-EXEC.
           EVALUATE RESP-CODE
              WHEN 0
                 CONTINUE
              WHEN DFHRESP(NOTOPEN)
                 GO TO GET-ACCT-NOTOPEN
              WHEN DFHRESP(DISABLED)
                 GO TO GET-ACCT-NOTOPEN
              WHEN DFHRESP(NOTFND)
                 GO TO GET-ACCT-NOTFND
              WHEN OTHER
                 GO TO GET-ACCT-ERROR
           END-EVALUATE.
           EVALUATE ACCOUNT-TYPE-CODE
              WHEN 'C'
                 MOVE ACCOUNT-CHK-BAL TO ACCT-BAL OF USER-DATA
              WHEN 'S'
                 MOVE ACCOUNT-SAV-BAL TO ACCT-BAL OF USER-DATA
              WHEN OTHER
                 MOVE 0 TO ACCT-BAL OF USER-DATA
                 MOVE 'Invalid Account type' TO BSTRHELPSTRING
                 MOVE 5004 TO  SERRORCODE RET-CODE
           END-EVALUATE.
           GO TO GET-ACCT-EXIT.
       GET-ACCT-NOTFND.
           MOVE 'Customer account not found' TO BSTRHELPSTRING.
           MOVE 5005 TO  SERRORCODE RET-CODE.
           GO TO GET-ACCT-EXIT.
       GET-ACCT-ERROR.
           MOVE SPACES TO BSTRHELPSTRING.
           MOVE RESP-CODE TO EDIT-NUM.
           STRING 'I/O Error one Accounts file, response code='
                            DELIMITED SIZE
                  EDIT-NUM  DELIMITED SIZE
                  INTO BSTRHELPSTRING
           END-STRING.
           MOVE 5006 TO  SERRORCODE RET-CODE.
           GO TO GET-ACCT-EXIT.
       GET-ACCT-NOTOPEN.
           MOVE 'Accounts file not open' TO BSTRHELPSTRING.
           MOVE 5004 TO  SERRORCODE RET-CODE.
           GO TO GET-ACCT-EXIT.
       GET-ACCT-EXIT.
           EXIT.
[/INST]{
  "id": "BR-001",
  "description": "The response code is used to evaluate the status of a CICS read operation.",
  "condition": "evaluate RESP-CODE",
  "output": {
    "0": "zero",
    "DFHRESP(NOTOPEN)": "file not open",
    "DFHRESP(DISABLED)": "file disabled",
    "DFHRESP(ENDFILE)": "end of file",
    "DFHRESP(NOTFND)": "record not found",
    "OTHER": "some other error"
  }
}
{
  "id": "BR-002",
  "description": "Only checking and savings account types are allowed. Any other account type will return an error.",
  "condition": "evaluate ACCOUNT-TYPE-CODE",
  "output": {
    "C": null,
    "S": null,
    "OTHER": "Invalid Account type"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. WTIGCUSI.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 CUST-REC-KEY.
           05 NAME                        PIC X(30)  VALUE SPACES.
       01  CUSTOMER-RECORD.
           05 CUSTOMER-NAME               PIC X(30).
           05 CUSTOMER-SSN                PIC X(9).
           05 CUSTOMER-ADDRESS.
              10 CUSTOMER-STREET          PIC X(20).
              10 CUSTOMER-CITY            PIC X(10).
              10 CUSTOMER-STATE           PIC X(4).
              10 CUSTOMER-ZIP             PIC 9(5).
           05 CUSTOMER-PHONE              PIC X(13).
           05 CUSTOMER-ACCESS-PIN         PIC X(4).
       01 ACCT-REC-KEY.
           05 SSN                         PIC X(9)   VALUE SPACES.
           05 NUM                         PIC X(10)  VALUE SPACES.
       01  ACCOUNT-RECORD.
           05 ACCOUNT-SSN                 PIC X(9).
           05 ACCOUNT-NUMBER              PIC X(10).
           05 ACCOUNT-TYPE.
              10 ACCOUNT-TYPE-CODE        PIC X.
                 88 ACCOUNT-TYPE-CHK            VALUE 'C'.
                 88 ACCOUNT-TYPE-SAV            VALUE 'S'.
              10 ACCOUNT-TYPE-NAME        PIC X(10).
           05 ACCOUNT-AREA                PIC X(39).
           05 ACCOUNT-TYPE-CHECKING REDEFINES ACCOUNT-AREA.
              10 ACCOUNT-CHK-OD-CHG       PIC S9(3)V99   COMP-3.
              10 ACCOUNT-CHK-OD-LIMIT     PIC S9(5)V99   COMP-3.
              10 ACCOUNT-CHK-OD-LINK-ACCT PIC X(10).
              10 ACCOUNT-CHK-LAST-STMT    PIC X(10).
              10 ACCOUNT-CHK-DETAIL-ITEMS PIC S9(7)      COMP-3.
              10 ACCOUNT-CHK-BAL          PIC S9(13)V99  COMP-3.
           05 ACCOUNT-TYPE-SAVINGS  REDEFINES ACCOUNT-AREA.
              10 ACCOUNT-SAV-INT-RATE     PIC S9(1)V99   COMP-3.
              10 ACCOUNT-SAV-SVC-CHRG     PIC S9(3)V99   COMP-3.
              10 ACCOUNT-SAV-LAST-STMT    PIC X(10).
              10 ACCOUNT-SAV-DETAIL-ITEMS PIC S9(7)      COMP-3.
              10 ACCOUNT-SAV-BAL          PIC S9(13)V99  COMP-3.
              10 FILLER                   PIC X(12).
       01 TXN-REC-KEY.
           05 SSN                         PIC X(9)   VALUE SPACES.
           05 NUM                         PIC X(10)  VALUE SPACES.
           05 ITEM-NUM                    PIC S9(7)  COMP-3.
       01  TXN-DETAILS.
           05 TXN-SSN                     PIC X(9).
           05 TXN-ACCT-NUM                PIC X(10).
           05 TXN-ITEM-NUM                PIC S9(7)  COMP-3.
           05 TXN-TYPE                    PIC X.
              88 TXN-TYPE-INITIAL-BALANCE       VALUE 'B'.
              88 TXN-TYPE-CREDIT                VALUE 'C'.
              88 TXN-TYPE-DEBIT                 VALUE 'D'.
              88 TXN-TYPE-SVCCHG                VALUE 'S'.
              88 TXN-TYPE-ODCHG                 VALUE 'O'.
           05 TXN-DATE                    PIC X(10).
           05 TXN-AMOUNT                  PIC S9(13)V99  COMP-3.
       01 RESP-CODE                   PIC S9(9)   COMP  VALUE +0.
       01 WBCUSTDB-DD                 PIC X(8)    VALUE 'WBCUSTDB'.
       01 WBACCTDB-DD                 PIC X(8)    VALUE 'WBACCTDB'.
       01 WBTXNDB-DD                  PIC X(8)    VALUE 'WBTXNDB'.
       01 RET-CODE                    PIC S9(4)   COMP    VALUE 0.
       01 EDIT-NUM                    PIC Z,ZZZ,ZZ9.
       LINKAGE SECTION.
       01 DFHCOMMAREA.
          05 SCRATCH-PAD-AREA               PIC X(256).
          05 METADATAERRBLK.
             10 LMETADATALEN                PIC 9(9) COMP.
             10 BSTRRUNTIMEVERSION          PIC X(32).
             10 BSTRMETHODNAME              PIC X(32).
             10 BSTRPROGID                  PIC X(40).
             10 BSTRCLSID                   PIC X(40).
             10 USMAJORVERSION              PIC 9(4) COMP.
             10 USMINORVERSION              PIC 9(4) COMP.
             10 SREADYTOCOMMIT              PIC 9(4) COMP.
             10 SWILLINGTODOMORE            PIC 9(4) COMP.
             10 SRETURNERRORTOCLIENT        PIC 9(4) COMP.
             10 SERRORCODE                  PIC 9(4) COMP.
             10 LHELPCONTEXT                PIC 9(9) COMP.
             10 BSTRHELPSTRING              PIC X(256).
          05 USER-DATA.
             10 CUSTOMER-NAME               PIC X(30).
             10 CUSTOMER-SSN                PIC X(9).
             10 CUSTOMER-ADDRESS.
                15 CUSTOMER-STREET          PIC X(20).
                15 CUSTOMER-CITY            PIC X(10).
                15 CUSTOMER-STATE           PIC X(4).
                15 CUSTOMER-ZIP             PIC 9(5).
             10 CUSTOMER-PHONE              PIC X(13).
             10 CUSTOMER-ACCESS-PIN         PIC X(4).
       PROCEDURE DIVISION.
           MOVE 0 TO SERRORCODE RET-CODE
                     SRETURNERRORTOCLIENT.
           MOVE SPACES TO BSTRHELPSTRING.
           PERFORM GET-CUST THRU GET-CUST-EXIT.
           IF RET-CODE = 0 THEN
              MOVE CORRESPONDING CUSTOMER-RECORD TO USER-DATA
           END-IF.
           IF SERRORCODE NOT = 0 THEN
              MOVE 1 TO SRETURNERRORTOCLIENT
           END-IF.
           EXEC CICS RETURN END-EXEC.
       GET-CUST.
           MOVE CUSTOMER-NAME OF USER-DATA TO NAME OF CUST-REC-KEY.
           EXEC CICS READ
                     DATASET(WBCUSTDB-DD)
                     INTO(CUSTOMER-RECORD)
                     LENGTH(LENGTH OF CUSTOMER-RECORD)
                     KEYLENGTH(LENGTH OF CUST-REC-KEY)
                     RIDFLD(CUST-REC-KEY)
                     RESP(RESP-CODE)
           END-EXEC.
           EVALUATE RESP-CODE
              WHEN 0
                 MOVE 0 TO RET-CODE
                 GO TO GET-CUST-EXIT
              WHEN DFHRESP(NOTOPEN)
                 GO TO GET-CUST-NOTOPEN
              WHEN DFHRESP(DISABLED)
                 GO TO GET-CUST-NOTOPEN
              WHEN DFHRESP(ENDFILE)
                 GO TO GET-CUST-NOTFND
              WHEN DFHRESP(NOTFND)
                 GO TO GET-CUST-NOTFND
              WHEN OTHER
                 GO TO GET-CUST-ERROR
           END-EVALUATE.
           GO TO GET-CUST-EXIT.
       GET-CUST-NOTOPEN.
           MOVE 'Customer file not open' TO BSTRHELPSTRING.
           MOVE 5001 TO SERRORCODE RET-CODE.
           GO TO GET-CUST-EXIT.
       GET-CUST-NOTFND.
           MOVE 'Customer name not found' TO BSTRHELPSTRING.
           MOVE 5002 TO  SERRORCODE RET-CODE.
           GO TO GET-CUST-EXIT.
       GET-CUST-ERROR.
           MOVE SPACES TO BSTRHELPSTRING.
           MOVE RESP-CODE TO EDIT-NUM.
           STRING 'I/O Error one Customer file, response code='
                            DELIMITED SIZE
                  EDIT-NUM  DELIMITED SIZE
                  INTO BSTRHELPSTRING
           END-STRING.
           MOVE 5003 TO  SERRORCODE RET-CODE.
           GO TO GET-CUST-EXIT.
       GET-CUST-EXIT.
           EXIT.
[/INST]{
  "id": "BR-001",
  "description": "A customer name can be found on the customer file if a customer file is open.",
  "condition": "Customer file open",
  "output": {
    "found": "Customer name exists",
    "not_found": "Customer name not found in customer file."
}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. WTISCUSI.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 CUST-REC-KEY.
           05 NAME                        PIC X(30)  VALUE SPACES.
       01  CUSTOMER-RECORD.
           05 CUSTOMER-NAME               PIC X(30).
           05 CUSTOMER-SSN                PIC X(9).
           05 CUSTOMER-ADDRESS.
              10 CUSTOMER-STREET          PIC X(20).
              10 CUSTOMER-CITY            PIC X(10).
              10 CUSTOMER-STATE           PIC X(4).
              10 CUSTOMER-ZIP             PIC 9(5).
           05 CUSTOMER-PHONE              PIC X(13).
           05 CUSTOMER-ACCESS-PIN         PIC X(4).
       01 ACCT-REC-KEY.
           05 SSN                         PIC X(9)   VALUE SPACES.
           05 NUM                         PIC X(10)  VALUE SPACES.
       01  ACCOUNT-RECORD.
           05 ACCOUNT-SSN                 PIC X(9).
           05 ACCOUNT-NUMBER              PIC X(10).
           05 ACCOUNT-TYPE.
              10 ACCOUNT-TYPE-CODE        PIC X.
                 88 ACCOUNT-TYPE-CHK            VALUE 'C'.
                 88 ACCOUNT-TYPE-SAV            VALUE 'S'.
              10 ACCOUNT-TYPE-NAME        PIC X(10).
           05 ACCOUNT-AREA                PIC X(39).
           05 ACCOUNT-TYPE-CHECKING REDEFINES ACCOUNT-AREA.
              10 ACCOUNT-CHK-OD-CHG       PIC S9(3)V99   COMP-3.
              10 ACCOUNT-CHK-OD-LIMIT     PIC S9(5)V99   COMP-3.
              10 ACCOUNT-CHK-OD-LINK-ACCT PIC X(10).
              10 ACCOUNT-CHK-LAST-STMT    PIC X(10).
              10 ACCOUNT-CHK-DETAIL-ITEMS PIC S9(7)      COMP-3.
              10 ACCOUNT-CHK-BAL          PIC S9(13)V99  COMP-3.
           05 ACCOUNT-TYPE-SAVINGS  REDEFINES ACCOUNT-AREA.
              10 ACCOUNT-SAV-INT-RATE     PIC S9(1)V99   COMP-3.
              10 ACCOUNT-SAV-SVC-CHRG     PIC S9(3)V99   COMP-3.
              10 ACCOUNT-SAV-LAST-STMT    PIC X(10).
              10 ACCOUNT-SAV-DETAIL-ITEMS PIC S9(7)      COMP-3.
              10 ACCOUNT-SAV-BAL          PIC S9(13)V99  COMP-3.
              10 FILLER                   PIC X(12).
       01 TXN-REC-KEY.
           05 SSN                         PIC X(9)   VALUE SPACES.
           05 NUM                         PIC X(10)  VALUE SPACES.
           05 ITEM-NUM                    PIC S9(7)  COMP-3.
       01  TXN-DETAILS.
           05 TXN-SSN                     PIC X(9).
           05 TXN-ACCT-NUM                PIC X(10).
           05 TXN-ITEM-NUM                PIC S9(7)  COMP-3.
           05 TXN-TYPE                    PIC X.
              88 TXN-TYPE-INITIAL-BALANCE       VALUE 'B'.
              88 TXN-TYPE-CREDIT                VALUE 'C'.
              88 TXN-TYPE-DEBIT                 VALUE 'D'.
              88 TXN-TYPE-SVCCHG                VALUE 'S'.
              88 TXN-TYPE-ODCHG                 VALUE 'O'.
           05 TXN-DATE                    PIC X(10).
           05 TXN-AMOUNT                  PIC S9(13)V99  COMP-3.
       01 LOG-MSG.
          05 LOG-ID                         PIC X(7)   VALUE 'TASK #'.
          05 TASK-NUMBER                    PIC 9(7).
          05 FILLER                         PIC X      VALUE SPACE.
          05 LOG-MSG-BUFFER                 PIC X(80)  VALUE SPACES.
       01 ENABLE-LOGGING                    PIC X          VALUE 'Y'.
          88 LOGGING-IS-ENABLED                            VALUE 'Y'.
          88 LOGGING-IS-DISABLED                           VALUE 'N'.
       01 RESP-CODE                   PIC S9(9)   COMP  VALUE +0.
       01 HW-LENGTH                   PIC S9(4)   COMP  VALUE +0.
       01 WBCUSTDB-DD                 PIC X(8)    VALUE 'WBCUSTDB'.
       01 WBACCTDB-DD                 PIC X(8)    VALUE 'WBACCTDB'.
       01 WBTXNDB-DD                  PIC X(8)    VALUE 'WBTXNDB'.
       01 RET-CODE                    PIC S9(4)   COMP    VALUE 0.
       01 EDIT-NUM                    PIC Z,ZZZ,ZZ9.
       LINKAGE SECTION.
       01 DFHCOMMAREA.
          05 SCRATCH-PAD-AREA               PIC X(256).
          05 METADATAERRBLK.
             10 LMETADATALEN                PIC 9(9) COMP.
             10 BSTRRUNTIMEVERSION          PIC X(32).
             10 BSTRMETHODNAME              PIC X(32).
             10 BSTRPROGID                  PIC X(40).
             10 BSTRCLSID                   PIC X(40).
             10 USMAJORVERSION              PIC 9(4) COMP.
             10 USMINORVERSION              PIC 9(4) COMP.
             10 SREADYTOCOMMIT              PIC 9(4) COMP.
             10 SWILLINGTODOMORE            PIC 9(4) COMP.
             10 SRETURNERRORTOCLIENT        PIC 9(4) COMP.
             10 SERRORCODE                  PIC 9(4) COMP.
             10 LHELPCONTEXT                PIC 9(9) COMP.
             10 BSTRHELPSTRING              PIC X(256).
          05 USER-DATA.
             10 CUSTOMER-NAME               PIC X(30).
             10 CUSTOMER-SSN                PIC X(9).
             10 CUSTOMER-ADDRESS.
                15 CUSTOMER-STREET          PIC X(20).
                15 CUSTOMER-CITY            PIC X(10).
                15 CUSTOMER-STATE           PIC X(4).
                15 CUSTOMER-ZIP             PIC 9(5).
             10 CUSTOMER-PHONE              PIC X(13).
             10 CUSTOMER-ACCESS-PIN         PIC X(4).
       PROCEDURE DIVISION.
           MOVE 0 TO SERRORCODE RET-CODE
                     SRETURNERRORTOCLIENT.
           MOVE SPACES TO BSTRHELPSTRING.
           PERFORM UPDATE-CUST THRU UPDATE-CUST-EXIT.
           IF SERRORCODE NOT = 0 THEN
              MOVE 1 TO SRETURNERRORTOCLIENT
           END-IF.
           EXEC CICS RETURN END-EXEC.
       UPDATE-CUST.
           MOVE CUSTOMER-NAME OF USER-DATA TO NAME OF CUST-REC-KEY.
           EXEC CICS READ
                     DATASET(WBCUSTDB-DD)
                     INTO(CUSTOMER-RECORD)
                     LENGTH(LENGTH OF CUSTOMER-RECORD)
                     KEYLENGTH(LENGTH OF CUST-REC-KEY)
                     RIDFLD(CUST-REC-KEY)
                     RESP(RESP-CODE)
                     UPDATE
           END-EXEC.
           EVALUATE RESP-CODE
              WHEN 0
                 IF CUSTOMER-SSN OF USER-DATA NOT =
                    CUSTOMER-SSN OF CUSTOMER-RECORD THEN
                    GO TO UPDATE-CUST-BADSSN
                 END-IF
                 MOVE 0 TO RET-CODE
              WHEN DFHRESP(NOTOPEN)
                 GO TO UPDATE-CUST-NOTOPEN
              WHEN DFHRESP(DISABLED)
                 GO TO UPDATE-CUST-NOTOPEN
              WHEN DFHRESP(ENDFILE)
                 GO TO UPDATE-CUST-NOTFND
              WHEN DFHRESP(NOTFND)
                 GO TO UPDATE-CUST-NOTFND
              WHEN OTHER
                 GO TO UPDATE-CUST-ERROR
           END-EVALUATE.
           MOVE CORRESPONDING USER-DATA TO CUSTOMER-RECORD.
           EXEC CICS REWRITE
                     DATASET(WBCUSTDB-DD)
                     FROM(CUSTOMER-RECORD)
                     LENGTH(LENGTH OF CUSTOMER-RECORD)
                     RESP(RESP-CODE)
           END-EXEC.
           EVALUATE RESP-CODE
              WHEN 0
                 MOVE 0 TO RET-CODE
                 GO TO UPDATE-CUST-EXIT
              WHEN OTHER
                 GO TO UPDATE-CUST-ERROR
           END-EVALUATE.
           GO TO UPDATE-CUST-EXIT.
       UPDATE-CUST-NOTOPEN.
           MOVE 'Customer file not open' TO BSTRHELPSTRING.
           MOVE 5001 TO SERRORCODE RET-CODE.
           GO TO UPDATE-CUST-EXIT.
       UPDATE-CUST-NOTFND.
           EXEC CICS UNLOCK
                     DATASET(WBCUSTDB-DD)
                     RESP(RESP-CODE)
           END-EXEC.
           MOVE 'Customer name not found' TO BSTRHELPSTRING.
           MOVE 5002 TO  SERRORCODE RET-CODE.
           GO TO UPDATE-CUST-EXIT.
       UPDATE-CUST-ERROR.
           MOVE SPACES TO BSTRHELPSTRING.
           MOVE RESP-CODE TO EDIT-NUM.
           STRING 'I/O Error one Customer file, response code='
                            DELIMITED SIZE
                  EDIT-NUM  DELIMITED SIZE
                  INTO BSTRHELPSTRING
           END-STRING.
           MOVE 5003 TO  SERRORCODE RET-CODE.
           GO TO UPDATE-CUST-EXIT.
       UPDATE-CUST-BADSSN.
           EXEC CICS UNLOCK
                     DATASET(WBCUSTDB-DD)
                     RESP(RESP-CODE)
           END-EXEC.
           MOVE 'Customer SSN not valid' TO BSTRHELPSTRING.
           MOVE 5004 TO SERRORCODE RET-CODE.
           GO TO UPDATE-CUST-EXIT.
       UPDATE-CUST-EXIT.
           EXIT.
       WRITE-LOG-MSG.
           IF LOGGING-IS-ENABLED THEN
              MOVE LENGTH OF LOG-MSG TO HW-LENGTH
              MOVE EIBTASKN          TO TASK-NUMBER
              EXEC CICS WRITEQ TD QUEUE('CSMT')
                                  FROM(LOG-MSG)
                                  LENGTH(HW-LENGTH)
                                  NOHANDLE
                                  END-EXEC
           END-IF.
       WRITE-LOG-MSG-EXIT.
           EXIT.
[/INST]{
  "id": "BR-010",
  "description": "a customer SSN cannot be changed.",
  "condition": "CUSTOMER-SSN OF USER-DATA NOT =\nCUSTOMER-SSN OF CUSTOMER-RECORD",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  CWBWDATE.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  DATE-TABLE.
           05  FILLER                 PIC 9(4)    VALUE 0131.
           05  FILLER                 PIC 9(4)    VALUE 0228.
           05  FILLER                 PIC 9(4)    VALUE 0331.
           05  FILLER                 PIC 9(4)    VALUE 0430.
           05  FILLER                 PIC 9(4)    VALUE 0531.
           05  FILLER                 PIC 9(4)    VALUE 0630.
           05  FILLER                 PIC 9(4)    VALUE 0731.
           05  FILLER                 PIC 9(4)    VALUE 0831.
           05  FILLER                 PIC 9(4)    VALUE 0930.
           05  FILLER                 PIC 9(4)    VALUE 1031.
           05  FILLER                 PIC 9(4)    VALUE 1130.
           05  FILLER                 PIC 9(4)    VALUE 1231.
       01  DATE-TABLE-REDEFINED REDEFINES DATE-TABLE.
           05  DATE-FIELDS OCCURS 12 TIMES.
               10  DATE-MM            PIC 9(2).
               10  DATE-DD            PIC 9(2).
       01  WORK-AREAS.
           05  HOLD-YEARS             PIC 9(2)    VALUE 0.
           05  EXTRA-YEARS            PIC 9(2)    VALUE 0.
           05  CHECKED-FOR-EOM-SW     PIC X       VALUE 'N'.
               88  CHECKED-FOR-EOM                VALUE 'Y'.
       LINKAGE SECTION.
       01  EOM-SW                     PIC X.
       01  YRS-OF-SERVICE             PIC 9(2).
       01  RUN-DATE.
           05  RUN-YY                 PIC 9(2).
           05  RUN-MM                 PIC 9(2).
           05  RUN-DD                 PIC 9(2).
       01  HIRE-DATE.
           05  HIRE-YY                PIC 9(2).
           05  HIRE-MM                PIC 9(2).
           05  HIRE-DD                PIC 9(2).
       PROCEDURE DIVISION USING EOM-SW,
                                YRS-OF-SERVICE,
                                RUN-DATE,
                                HIRE-DATE.
       0000-MAINLINE.
           IF CHECKED-FOR-EOM
               PERFORM 1000-CALC-YRS-OF-SERVICE
           ELSE
               PERFORM 2000-CALC-END-OF-MONTH
               MOVE 'Y' TO CHECKED-FOR-EOM-SW.
           GOBACK.
         1000-CALC-YRS-OF-SERVICE.
             IF HIRE-YY > RUN-YY                                        11032000
                   COMPUTE YRS-OF-SERVICE = (100 + RUN-YY) - HIRE-YY    11032000
               ELSE                                                     11032000
                  COMPUTE YRS-OF-SERVICE = RUN-YY - HIRE-YY.
             IF HIRE-MM > RUN-MM
                 COMPUTE YRS-OF-SERVICE = YRS-OF-SERVICE - 1
             ELSE
                 IF HIRE-MM = RUN-MM
                     IF HIRE-DD > RUN-DD
                        COMPUTE YRS-OF-SERVICE = YRS-OF-SERVICE - 1.
         2000-CALC-END-OF-MONTH.
             IF RUN-MM = 02
                 PERFORM 3000-CALC-LEAP-YEAR
             ELSE
                 IF DATE-DD(RUN-MM) = RUN-DD
                     MOVE 'Y' TO EOM-SW.
         3000-CALC-LEAP-YEAR.
             DIVIDE RUN-YY BY 4
                 GIVING HOLD-YEARS
                 REMAINDER EXTRA-YEARS.
             IF EXTRA-YEARS = 0
                 IF RUN-DD = 29
                     MOVE 'Y' TO EOM-SW.[/INST]{
  "id": "BR-001",  "description": "The current day is the last day of the month when the day of the month on the input date is equal to the current day of the month AND the current month is February AND the current year is a leap year.",
  "condition": "DATE-DD(RUN-MM) = RUN-DD AND\\nRUN-MM = 02 AND\\nEXTRA-YEARS = 0 AND\\nRUN-DD = 29",
  "output": {
    "end of month": "EOM-SW = Y"
  }
},
{
  "id": "BR-002",  "description": "The current day is the last day of the month when the day of the month on the input date is equal to the current day of the month AND the current month is NOT February.",
  "condition": "DATE-DD(RUN-MM) = RUN-DD AND\\nRUN-MM != 02",
  "output": {
    "end of month": "EOM-SW = Y"
  }
},
{
  "id": "BR-003",  "description": "Years of service are calculated as (100 + current year) - year of hire if the year of hire is greater than the current year; otherwise years of service are calculated as current year minus year of hire.",
  "condition": "IF HIRE-YY > RUN-YY\\\nCOMPUTE YRS-OF-SERVICE = (100 + RUN-YY) - HIRE-YY\\\nELSE\\\nCOMPUTE YRS-OF-SERVICE = RUN-YY - HIRE-YY.",
  "output": {}
},
{
  "id": "BR-004",  "description": "Subtract one from the years of service calculation if the month of hire is greater than the current month; otherwise subtract one if the month of hire equals the current month and the day of hire is greater than the current day.",
  "condition": "IF HIRE-MM > RUN-MM\\\nCOMPUTE YRS-OF-SERVICE = YRS-OF-SERVICE - 1\\\nELSE\\\nIF HIRE-MM = RUN-MM\\\nIF HIRE-DD > RUN-DD\\\nCOMPUTE YRS-OF-SERVICE = YRS-OF-SERVICE - 1.",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  CWBWSUBC.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  MGMT-RANGE        PIC 9(6)V99.
           88  M-RANGE1           VALUES ARE      1 THRU 100000.
           88  M-RANGE2           VALUES ARE 100001 THRU 200000.
           88  M-RANGE3           VALUES ARE 200001 THRU 300000.
           88  M-RANGE4           VALUES ARE 300001 THRU 400000.
           88  M-RANGE5           VALUES ARE 400001 THRU 500000.
       01  MGMT-RATE-TABLE.
           05  FILLER           PIC SV999   VALUE  +.020.
           05  FILLER           PIC SV999   VALUE  +.025.
           05  FILLER           PIC SV999   VALUE  +.030.
           05  FILLER           PIC SV999   VALUE  +.035.
           05  FILLER           PIC SV999   VALUE  +.040.
       01  MGMT-RATE-REDEFINED REDEFINES MGMT-RATE-TABLE.
           05  MGMT-RATE-OCCURS OCCURS 5 TIMES INDEXED BY MGMT-IX.
               10  MGMT-RATE    PIC SV999.
       01  SALES-RANGE         PIC 9(6)V99.
           88  S-RANGE1        VALUES ARE     1 THRU  20000.
           88  S-RANGE2        VALUES ARE 20001 THRU  40000.
           88  S-RANGE3        VALUES ARE 40001 THRU  60000.
           88  S-RANGE4        VALUES ARE 60001 THRU  80000.
           88  S-RANGE5        VALUES ARE 80001 THRU 100000.
       01  SALES-RATE-TABLE.
           05  FILLER          PIC SV99  VALUE  +.02.
           05  FILLER          PIC SV99  VALUE  +.04.
           05  FILLER          PIC SV99  VALUE  +.06.
           05  FILLER          PIC SV99  VALUE  +.08.
           05  FILLER          PIC SV99  VALUE  +.10.
       01  SALES-RATE-REDEFINED REDEFINES SALES-RATE-TABLE.
           05  SALES-RATE-OCCURS OCCURS 5 TIMES INDEXED BY SALES-IX.
               10  SALES-RATE   PIC SV99.
       LINKAGE SECTION.
       01  EMP-TYPE             PIC X.
       01  SALES-AMOUNT         PIC 9(6)V99.
       01  COMM-TOTAL           PIC 9(5)V99     COMP-3.
       PROCEDURE DIVISION USING EMP-TYPE, SALES-AMOUNT, COMM-TOTAL.
       0000-MAINLINE.
           IF EMP-TYPE EQUAL 'S'
               PERFORM 1000-PROCESS-SALES
           ELSE
               IF EMP-TYPE EQUAL 'M'
                   PERFORM 2000-PROCESS-MANAGEMENT.
           GOBACK.
       1000-PROCESS-SALES.
           MOVE SALES-AMOUNT TO SALES-RANGE.
           IF S-RANGE1
               SET SALES-IX TO 1
           ELSE
               IF S-RANGE2
                   SET SALES-IX TO 2
               ELSE
                   IF S-RANGE3
                       SET SALES-IX TO 3
                   ELSE
                       IF S-RANGE4
                           SET SALES-IX TO 4
                       ELSE
                           SET SALES-IX TO 5.
           COMPUTE COMM-TOTAL = SALES-AMOUNT * SALES-RATE(SALES-IX).
       2000-PROCESS-MANAGEMENT.
           MOVE SALES-AMOUNT TO MGMT-RANGE.
           IF M-RANGE1
               SET MGMT-IX TO 1
           ELSE
               IF M-RANGE2
                   SET MGMT-IX TO 2
               ELSE
                   IF M-RANGE3
                       SET MGMT-IX TO 3
                   ELSE
                       IF M-RANGE4
                           SET MGMT-IX TO 4
                       ELSE
                           SET MGMT-IX TO 5.
           COMPUTE COMM-TOTAL = SALES-AMOUNT * MGMT-RATE(MGMT-IX).[/INST]{
  "id": "BR-001",
  "description": "Sales employees receive a commission based on sales amount and a rate determined by the range the sales amount falls into.",
  "condition": {
    "values": [
      {
        "varName": "SALES-AMOUNT",
        "operator": "in",
        "values": [
          "1 THRU 20000",
          "20001 THRU 40000",
          "40001 THRU 60000",
          "60001 THRU 80000",
          "80001 THRU 100000"
        ]
      }
    ]
  },
  "output": {
    "commission-rate": {
      "1 THRU 20000": "+.02",
      "20001 THRU 40000": "+.04",
      "40001 THRU 60000": "+.06",
      "60001 THRU 80000": "+.08",
      "80001 THRU 100000": "+.10"
    }
  }
}
{
  "id": "BR-002",
  "description": "Management employees receive a commission based on sales amount and a rate determined by the range the sales amount falls into.",
  "condition": {
    "values": [
      {
        "varName": "SALES-AMOUNT",
        "operator": "in",
        "values": [
          "1 THRU 100000",
          "100001 THRU 200000",
          "200001 THRU 300000",
          "300001 THRU 400000",
          "400001 THRU 500000"
        ]
      }
    ]
  },
  "output": {
    "commission-rate": {
      "1 THRU 100000": "+.020",
      "100001 THRU 200000": "+.025",
      "200001 THRU 300000": "+.030",
      "300001 THRU 400000": "+.035",
      "400001 THRU 500000": "+.040"
    }
  }
}
{
  "id": "BR-003",
  "description": "Commission is calculated by multiplying the sales amount by the appropriate rate.",
  "condition": null,
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  CWKTDATE.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  DATE-TABLE.
           05  FILLER                 PIC 9(4)    VALUE 0131.
           05  FILLER                 PIC 9(4)    VALUE 0228.
           05  FILLER                 PIC 9(4)    VALUE 0331.
           05  FILLER                 PIC 9(4)    VALUE 0430.
           05  FILLER                 PIC 9(4)    VALUE 0531.
           05  FILLER                 PIC 9(4)    VALUE 0630.
           05  FILLER                 PIC 9(4)    VALUE 0731.
           05  FILLER                 PIC 9(4)    VALUE 0831.
           05  FILLER                 PIC 9(4)    VALUE 0930.
           05  FILLER                 PIC 9(4)    VALUE 1031.
           05  FILLER                 PIC 9(4)    VALUE 1130.
           05  FILLER                 PIC 9(4)    VALUE 1231.
       01  DATE-TABLE-REDEFINED REDEFINES DATE-TABLE.
           05  DATE-FIELDS OCCURS 12 TIMES.
               10  DATE-MM            PIC 9(2).
               10  DATE-DD            PIC 9(2).
       01  WORK-AREAS.
           05  HOLD-YEARS             PIC 9(2)    VALUE 0.
           05  EXTRA-YEARS            PIC 9(2)    VALUE 0.
           05  CHECKED-FOR-EOM-SW     PIC X       VALUE 'N'.
               88  CHECKED-FOR-EOM                VALUE 'Y'.
       LINKAGE SECTION.
       01  EOM-SW                     PIC X.
       01  YRS-OF-SERVICE             PIC 9(2).
       01  RUN-DATE.
           05  RUN-YY                 PIC 9(2).
           05  RUN-MM                 PIC 9(2).
           05  RUN-DD                 PIC 9(2).
       01  HIRE-DATE.
           05  HIRE-YY                PIC 9(2).
           05  HIRE-MM                PIC 9(2).
           05  HIRE-DD                PIC 9(2).
       PROCEDURE DIVISION USING EOM-SW,
                                YRS-OF-SERVICE,
                                RUN-DATE,
                                HIRE-DATE.
       0000-MAINLINE.
           IF CHECKED-FOR-EOM
               PERFORM 1000-CALC-YRS-OF-SERVICE
           ELSE
               PERFORM 2000-CALC-END-OF-MONTH
               MOVE 'Y' TO CHECKED-FOR-EOM-SW.
           GOBACK.
         1000-CALC-YRS-OF-SERVICE.
             IF HIRE-YY > RUN-YY                                        11032000
                   COMPUTE YRS-OF-SERVICE = (100 + RUN-YY) - HIRE-YY    11032000
               ELSE                                                     11032000
                  COMPUTE YRS-OF-SERVICE = RUN-YY - HIRE-YY.
             IF HIRE-MM > RUN-MM
                 COMPUTE YRS-OF-SERVICE = YRS-OF-SERVICE - 1
             ELSE
                 IF HIRE-MM = RUN-MM
                     IF HIRE-DD > RUN-DD
                        COMPUTE YRS-OF-SERVICE = YRS-OF-SERVICE - 1.
         2000-CALC-END-OF-MONTH.
             IF RUN-MM = 02
                 PERFORM 3000-CALC-LEAP-YEAR
             ELSE
                 IF DATE-DD(RUN-MM) = RUN-DD
                     MOVE 'Y' TO EOM-SW.
         3000-CALC-LEAP-YEAR.
             DIVIDE RUN-YY BY 4
                 GIVING HOLD-YEARS
                 REMAINDER EXTRA-YEARS.
             IF EXTRA-YEARS = 0
                 IF RUN-DD = 29
                     MOVE 'Y' TO EOM-SW.[/INST]{
  "id": "BR-001",
  "description": "number of service years is calculated by subtracting the hiring year from the current year.",
  "condition": "HIRE-YY > RUN-YY",
  "output": {
    "current_year_greater_than_year_of_service": "YRS-OF-SERVICE = (100 + RUN-YY) - HIRE-YY",
    "current_year_not_greater_than_year_of_service": "YRS-OF-SERVICE = RUN-YY - HIRE-YY"
  }
}
{
  "id": "BR-002",
  "description": "if year of service greater than current year, deduct 1 from years of service.",
  "condition": "HIRE-MM > RUN-MM",
  "output": {
    "month_of_service_greater_than_current_month": "YRS-OF-SERVICE = YRS-OF-SERVICE - 1"
  }
}
{
  "id": "BR-003",
  "description": "if the month of service is equal to the current month and day of service is greater than current day then deduct 1 from years of service.",
  "condition": "HIRE-MM = RUN-MM",
  "output": {
    "month_of_service_equal_to_current_month_and_day_service_greater_than_current_day": "YRS-OF-SERVICE = YRS-OF-SERVICE - 1."
  }
}
{
  "id": "BR-004",
  "description": "February has 29 days in a leap year.",
  "condition": "RUN-MM = 02",
  "output": {
    "february_month": "leap year: RUN-YY / 4 = 0 AND RUN-DD = 29"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  CWKTSUBC.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  MGMT-RANGE        PIC 9(6)V99.
           88  M-RANGE1           VALUES ARE      1 THRU 100000.
           88  M-RANGE2           VALUES ARE 100001 THRU 200000.
           88  M-RANGE3           VALUES ARE 200001 THRU 300000.
           88  M-RANGE4           VALUES ARE 300001 THRU 400000.
           88  M-RANGE5           VALUES ARE 400001 THRU 500000.
       01  MGMT-RATE-TABLE.
           05  FILLER           PIC SV999   VALUE  +.020.
           05  FILLER           PIC SV999   VALUE  +.025.
           05  FILLER           PIC SV999   VALUE  +.030.
           05  FILLER           PIC SV999   VALUE  +.035.
           05  FILLER           PIC SV999   VALUE  +.040.
       01  MGMT-RATE-REDEFINED REDEFINES MGMT-RATE-TABLE.
           05  MGMT-RATE-OCCURS OCCURS 5 TIMES INDEXED BY MGMT-IX.
               10  MGMT-RATE    PIC SV999.
       01  SALES-RANGE         PIC 9(6)V99.
           88  S-RANGE1        VALUES ARE     1 THRU  20000.
           88  S-RANGE2        VALUES ARE 20001 THRU  40000.
           88  S-RANGE3        VALUES ARE 40001 THRU  60000.
           88  S-RANGE4        VALUES ARE 60001 THRU  80000.
           88  S-RANGE5        VALUES ARE 80001 THRU 100000.
       01  SALES-RATE-TABLE.
           05  FILLER          PIC SV99  VALUE  +.02.
           05  FILLER          PIC SV99  VALUE  +.04.
           05  FILLER          PIC SV99  VALUE  +.06.
           05  FILLER          PIC SV99  VALUE  +.08.
           05  FILLER          PIC SV99  VALUE  +.10.
       01  SALES-RATE-REDEFINED REDEFINES SALES-RATE-TABLE.
           05  SALES-RATE-OCCURS OCCURS 5 TIMES INDEXED BY SALES-IX.
               10  SALES-RATE   PIC SV99.
       LINKAGE SECTION.
       01  EMP-TYPE             PIC X.
       01  SALES-AMOUNT         PIC 9(6)V99.
       01  COMM-TOTAL           PIC 9(5)V99     COMP-3.
       PROCEDURE DIVISION USING EMP-TYPE, SALES-AMOUNT, COMM-TOTAL.
       0000-MAINLINE.
           IF EMP-TYPE EQUAL 'S'
               PERFORM 1000-PROCESS-SALES
           ELSE
               IF EMP-TYPE EQUAL 'M'
                   PERFORM 2000-PROCESS-MANAGEMENT.
           GOBACK.
       1000-PROCESS-SALES.
           MOVE SALES-AMOUNT TO SALES-RANGE.
           IF S-RANGE1
               SET SALES-IX TO 1
           ELSE
               IF S-RANGE2
                   SET SALES-IX TO 2
               ELSE
                   IF S-RANGE3
                       SET SALES-IX TO 3
                   ELSE
                       IF S-RANGE4
                           SET SALES-IX TO 4
                       ELSE
                           SET SALES-IX TO 5.
           COMPUTE COMM-TOTAL = SALES-AMOUNT * SALES-RATE(SALES-IX).
       2000-PROCESS-MANAGEMENT.
           MOVE SALES-AMOUNT TO MGMT-RANGE.
           IF M-RANGE1
               SET MGMT-IX TO 1
           ELSE
               IF M-RANGE2
                   SET MGMT-IX TO 2
               ELSE
                   IF M-RANGE3
                       SET MGMT-IX TO 3
                   ELSE
                       IF M-RANGE4
                           SET MGMT-IX TO 4
                       ELSE
                           SET MGMT-IX TO 5.
           COMPUTE COMM-TOTAL = SALES-AMOUNT * MGMT-RATE(MGMT-IX).[/INST]{
  "id": "BR-002",
  "description": "For employees of type 'S', the commission is calculated as the sales amount multiplied by the corresponding rate from the Sales Rate table.",
  "condition": "EMP-TYPE = 'S'",
  "output": "COMM-TOTAL = SALES-AMOUNT * SALES-RATE(SALES-IX)"
}
{
  "id": "BR-003",
  "description": "The input sales amount is used to determine the applicable row in the Sales Rate table.",
  "condition": null,
  "output": {
    "S-RANGE1": "SALES-IX = 1",
    "S-RANGE2": "SALES-IX = 2",
    "S-RANGE3": "SALES-IX = 3",
    "S-RANGE4": "SALES-IX = 4",
    "otherwise": "SALES-IX = 5"
  }
}
{
  "id": "BR-004",
  "description": "For employees of type 'M', the commission is calculated as the sales amount multiplied by the corresponding rate from the Management Rate table.",
  "condition": "EMP-TYPE = 'M'",
  "output": "COMM-TOTAL = SALES-AMOUNT * MGMT-RATE(MGMT-IX)"
}
{
  "id": "BR-005",
  "description": "The input sales amount is used to determine the applicable row in the Management Rate table.",
  "condition": null,
  "output": {
    "M-RANGE1": "MGMT-IX = 1",
    "M-RANGE2": "MGMT-IX = 2",
    "M-RANGE3": "MGMT-IX = 3",
    "M-RANGE4": "MGMT-IX = 4",
    "otherwise": "MGMT-IX = 5"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  CWXTDATE.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  DATE-TABLE.
           05  FILLER                 PIC 9(4)    VALUE 0131.
           05  FILLER                 PIC 9(4)    VALUE 0228.
           05  FILLER                 PIC 9(4)    VALUE 0331.
           05  FILLER                 PIC 9(4)    VALUE 0430.
           05  FILLER                 PIC 9(4)    VALUE 0531.
           05  FILLER                 PIC 9(4)    VALUE 0630.
           05  FILLER                 PIC 9(4)    VALUE 0731.
           05  FILLER                 PIC 9(4)    VALUE 0831.
           05  FILLER                 PIC 9(4)    VALUE 0930.
           05  FILLER                 PIC 9(4)    VALUE 1031.
           05  FILLER                 PIC 9(4)    VALUE 1130.
           05  FILLER                 PIC 9(4)    VALUE 1231.
       01  DATE-TABLE-REDEFINED REDEFINES DATE-TABLE.
           05  DATE-FIELDS OCCURS 12 TIMES.
               10  DATE-MM            PIC 9(2).
               10  DATE-DD            PIC 9(2).
       01  WORK-AREAS.
           05  HOLD-YEARS             PIC 9(2)    VALUE 0.
           05  EXTRA-YEARS            PIC 9(2)    VALUE 0.
           05  CHECKED-FOR-EOM-SW     PIC X       VALUE 'N'.
               88  CHECKED-FOR-EOM                VALUE 'Y'.
       LINKAGE SECTION.
       01  EOM-SW                     PIC X.
       01  YRS-OF-SERVICE             PIC 9(2).
       01  RUN-DATE.
           05  RUN-YY                 PIC 9(2).
           05  RUN-MM                 PIC 9(2).
           05  RUN-DD                 PIC 9(2).
       01  HIRE-DATE.
           05  HIRE-YY                PIC 9(2).
           05  HIRE-MM                PIC 9(2).
           05  HIRE-DD                PIC 9(2).
       PROCEDURE DIVISION USING EOM-SW,
                                YRS-OF-SERVICE,
                                RUN-DATE,
                                HIRE-DATE.
       0000-MAINLINE.
           IF CHECKED-FOR-EOM
               PERFORM 1000-CALC-YRS-OF-SERVICE
           ELSE
               PERFORM 2000-CALC-END-OF-MONTH
               MOVE 'Y' TO CHECKED-FOR-EOM-SW.
           GOBACK.
         1000-CALC-YRS-OF-SERVICE.
             IF HIRE-YY > RUN-YY                                        11032000
                   COMPUTE YRS-OF-SERVICE = (100 + RUN-YY) - HIRE-YY    11032000
               ELSE                                                     11032000
                  COMPUTE YRS-OF-SERVICE = RUN-YY - HIRE-YY.
             IF HIRE-MM > RUN-MM
                 COMPUTE YRS-OF-SERVICE = YRS-OF-SERVICE - 1
             ELSE
                 IF HIRE-MM = RUN-MM
                     IF HIRE-DD > RUN-DD
                        COMPUTE YRS-OF-SERVICE = YRS-OF-SERVICE - 1.
         2000-CALC-END-OF-MONTH.
             IF RUN-MM = 02
                 PERFORM 3000-CALC-LEAP-YEAR
             ELSE
                 IF DATE-DD(RUN-MM) = RUN-DD
                     MOVE 'Y' TO EOM-SW.
         3000-CALC-LEAP-YEAR.
             DIVIDE RUN-YY BY 4
                 GIVING HOLD-YEARS
                 REMAINDER EXTRA-YEARS.
             IF EXTRA-YEARS = 0
                 IF RUN-DD = 29
                     MOVE 'Y' TO EOM-SW.[/INST]{
  "id": "BR-001",
  "description": "The end of the month (EOM) is the last day of the month, except for the month of February, in which case the EOM is the 28th or 29th day of the month, depending on whether or not the year is a leap year.",
  "condition": "IF DATE-DD(RUN-MM) = RUN-DD",
  "output": {
    "eom": "EOM-SW to 'Y'",
    "not eom": "EOM-SW to blank"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  CWXTSUBC.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  MGMT-RANGE        PIC 9(6)V99.
           88  M-RANGE1           VALUES ARE      1 THRU 100000.
           88  M-RANGE2           VALUES ARE 100001 THRU 200000.
           88  M-RANGE3           VALUES ARE 200001 THRU 300000.
           88  M-RANGE4           VALUES ARE 300001 THRU 400000.
           88  M-RANGE5           VALUES ARE 400001 THRU 500000.
       01  MGMT-RATE-TABLE.
           05  FILLER           PIC SV999   VALUE  +.020.
           05  FILLER           PIC SV999   VALUE  +.025.
           05  FILLER           PIC SV999   VALUE  +.030.
           05  FILLER           PIC SV999   VALUE  +.035.
           05  FILLER           PIC SV999   VALUE  +.040.
       01  MGMT-RATE-REDEFINED REDEFINES MGMT-RATE-TABLE.
           05  MGMT-RATE-OCCURS OCCURS 5 TIMES INDEXED BY MGMT-IX.
               10  MGMT-RATE    PIC SV999.
       01  SALES-RANGE         PIC 9(6)V99.
           88  S-RANGE1        VALUES ARE     1 THRU  20000.
           88  S-RANGE2        VALUES ARE 20001 THRU  40000.
           88  S-RANGE3        VALUES ARE 40001 THRU  60000.
           88  S-RANGE4        VALUES ARE 60001 THRU  80000.
           88  S-RANGE5        VALUES ARE 80001 THRU 100000.
       01  SALES-RATE-TABLE.
           05  FILLER          PIC SV99  VALUE  +.02.
           05  FILLER          PIC SV99  VALUE  +.04.
           05  FILLER          PIC SV99  VALUE  +.06.
           05  FILLER          PIC SV99  VALUE  +.08.
           05  FILLER          PIC SV99  VALUE  +.10.
       01  SALES-RATE-REDEFINED REDEFINES SALES-RATE-TABLE.
           05  SALES-RATE-OCCURS OCCURS 5 TIMES INDEXED BY SALES-IX.
               10  SALES-RATE   PIC SV99.
       LINKAGE SECTION.
       01  EMP-TYPE             PIC X.
       01  SALES-AMOUNT         PIC 9(6)V99.
       01  COMM-TOTAL           PIC 9(5)V99     COMP-3.
       PROCEDURE DIVISION USING EMP-TYPE, SALES-AMOUNT, COMM-TOTAL.
       0000-MAINLINE.
           IF EMP-TYPE EQUAL 'S'
               PERFORM 1000-PROCESS-SALES
           ELSE
               IF EMP-TYPE EQUAL 'M'
                   PERFORM 2000-PROCESS-MANAGEMENT.
           GOBACK.
       1000-PROCESS-SALES.
           MOVE SALES-AMOUNT TO SALES-RANGE.
           IF S-RANGE1
               SET SALES-IX TO 1
           ELSE
               IF S-RANGE2
                   SET SALES-IX TO 2
               ELSE
                   IF S-RANGE3
                       SET SALES-IX TO 3
                   ELSE
                       IF S-RANGE4
                           SET SALES-IX TO 4
                       ELSE
                           SET SALES-IX TO 5.
           COMPUTE COMM-TOTAL = SALES-AMOUNT * SALES-RATE(SALES-IX).
       2000-PROCESS-MANAGEMENT.
           MOVE SALES-AMOUNT TO MGMT-RANGE.
           IF M-RANGE1
               SET MGMT-IX TO 1
           ELSE
               IF M-RANGE2
                   SET MGMT-IX TO 2
               ELSE
                   IF M-RANGE3
                       SET MGMT-IX TO 3
                   ELSE
                       IF M-RANGE4
                           SET MGMT-IX TO 4
                       ELSE
                           SET MGMT-IX TO 5.
           COMPUTE COMM-TOTAL = SALES-AMOUNT * MGMT-RATE(MGMT-IX).[/INST]{
  "id": "BR-001",
  "description": "Sales employees get commission based on the following ranges and rates:\\n1-20000 at 2%\\n20001-40000 at 4%\\n40001-60000 at 6%\\n60001-80000 at 8%\\n80001-100000 at 10%",
  "condition": "EMP-TYPE = 'S'",
  "output": {
    "S-RANGE1": "SALES-IX = 1",
    "S-RANGE2": "SALES-IX = 2",
    "S-RANGE3": "SALES-IX = 3",
    "S-RANGE4": "SALES-IX = 4",
    "S-RANGE5": "SALES-IX = 5"
  }
}
{
  "id": "BR-002",
  "description": "Management employees get commission based on the following ranges and rates:\\n1-100000 at 2%\\n100000-200000 at 2.5%\\n200001-300000 at 3%\\n300001-400000 at 3.5%\\n400001-500000 at 4%",
  "condition": "EMP-TYPE = 'M'",
  "output": {
    "M-RANGE1": "MGMT-IX = 1",
    "M-RANGE2": "MGMT-IX = 2",
    "M-RANGE3": "MGMT-IX = 3",
    "M-RANGE4": "MGMT-IX = 4",
    "M-RANGE5": "MGMT-IX = 5"
  }
}[INST]000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID.    TPROG01.
000300 AUTHOR.        COMPUWARE ISPW TRAINING.
000400 DATE-WRITTEN.  JANUARY 24TH, 1996.
000500 DATE-COMPILED.
000600
000700********************************************************
000800* THIS PROGRAM IS A TRAINING PROGRAM 95
000900*      WITH A LINK TO TSUBR01
001000*
001100*      AND COPYLIBS   TCPYA01   (HEADER)
001200*                     TCPYB01   (LINK AREA)
001300* ======================================================
001400*  ISPW (TM)
001500*  COPYRIGHT (C) 1986-2016 COMPUWARE CORPORATION.
001600*  UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT
001700*  LAWS OF THE UNITED STATES.
001800*
001900* ======================================================
002000*                   MODIFICATION  LOG
002100*
002200*  DD/MM/YY  PROGRAMMER  CHANGES
002300*  ********  **********  *******
002400*  96/01/24  ISPW        NEW PROGRAM
002500* ======================================================
002600 ENVIRONMENT DIVISION.
002700 CONFIGURATION SECTION.
002800 SOURCE-COMPUTER. IBM-370.
002900 OBJECT-COMPUTER. IBM-370.
003000
003100 INPUT-OUTPUT SECTION.
003200 FILE-CONTROL.
003300
003400*****************************************************
003500*  FILES USED:
003600*   INPUT   JUST SOME DUMMY DATA TO READ IN
003700*   OUTPUT  A COPY OF THE DUMMY DATA WRITTEN OUT
003800*****************************************************
003900     SELECT INFILE  ASSIGN UT-S-INPUT
004000       ORGANIZATION IS SEQUENTIAL
004100       ACCESS IS SEQUENTIAL.
004200
004300     SELECT OUTFILE ASSIGN UT-S-OUTPUT
004400       ORGANIZATION IS SEQUENTIAL
004500       ACCESS IS SEQUENTIAL.
004600
004700 DATA DIVISION.
004800
004900 FILE SECTION.
005000
005100 FD  INFILE
005200     LABEL RECORDS OMITTED
005300     BLOCK CONTAINS 0 RECORDS
005400     RECORDING MODE IS F
005500     DATA RECORD IS INPUT-REC.
005600
005700 01  INPUT-REC         PIC X(80).
005800
005900 FD  OUTFILE
006000     LABEL RECORDS OMITTED
006100     BLOCK CONTAINS 0 RECORDS
006200     RECORDING MODE IS F
006300     DATA RECORD IS OUTPUT-REC.
006400
006500 01  OUTPUT-REC.
006600     05  CC                PIC X(1).
006700     05  OUTPUT-LINE       PIC X(132).
006800
006900
007000 WORKING-STORAGE SECTION.
007100****************************************************
007200****    THE DATA AREA COPYBOOK
007300****************************************************
007400 COPY TCPYA01.
007500
007600
007700
007800****************************************************
007900**** A COPY MEMBER FOR THE LINKAGE AREA PARAMETERS
008000****************************************************
008100 COPY TCPYB01 .
008200
008300 PROCEDURE DIVISION.
008400
008500 00000-MAIN-PROCEDURE.
008600
008700     OPEN OUTPUT OUTFILE.
008800     MOVE 'R' TO ACTION-FLAG.
008900     CALL 'TSUBR01' USING PASS-ME-AROUND.
009000
009100     IF NOT INFILE-EOF THEN
009200        MOVE TEXT-PORTION TO MESSANGER
009300
009400     MOVE SPACES TO CC.
009500     MOVE STAR-LINE-1 TO OUTPUT-REC.
009600     WRITE OUTPUT-REC.
009700     WRITE OUTPUT-REC.
009800     WRITE OUTPUT-REC.
009900
010000     MOVE SPACES TO BODY-TEXT.
010100     MOVE BODY-LINE TO OUTPUT-REC.
010200     WRITE OUTPUT-REC.
010300
010400     MOVE FLASH-LINE TO OUTPUT-REC.
010500     WRITE OUTPUT-REC.
010600     WRITE OUTPUT-REC.
010700     WRITE OUTPUT-REC.
010800
010900     MOVE SPACES TO BODY-TEXT.
011000     MOVE BODY-LINE TO OUTPUT-REC.
011100     WRITE OUTPUT-REC.
011200     WRITE OUTPUT-REC.
011300
011400     MOVE MESSAGE-LINE TO BODY-TEXT.
011500     MOVE BODY-LINE TO OUTPUT-REC.
011600     WRITE OUTPUT-REC.
011700
011800     MOVE SPACES TO BODY-TEXT.
011900     MOVE BODY-LINE TO OUTPUT-REC.
012000     WRITE OUTPUT-REC.
012100
012200     PERFORM GET-MESSAGE THRU GET-MESSAGE-X
012300        UNTIL INFILE-EOF.
012400
012500     MOVE SPACES TO BODY-TEXT.
012600     MOVE BODY-LINE TO OUTPUT-REC.
012700     WRITE OUTPUT-REC.
012800     WRITE OUTPUT-REC.
012900
013000     MOVE STAR-LINE-1 TO OUTPUT-REC.
013100     WRITE OUTPUT-REC.
013200     WRITE OUTPUT-REC.
013300     WRITE OUTPUT-REC.
013400
013500* CLOSE THE INPUT FILE
013600     MOVE 'C' TO ACTION-FLAG.
013700     CALL 'TSUBR01' USING PASS-ME-AROUND.
013800
013900     CLOSE OUTFILE.
014000     GOBACK.
014100
014200 GET-MESSAGE.
014300        MOVE 'R' TO ACTION-FLAG.
014400        CALL 'TSUBR01' USING PASS-ME-AROUND.
014500           IF NOT INFILE-EOF THEN
014600             MOVE TEXT-PORTION TO BODY-TEXT
014700             MOVE BODY-LINE TO OUTPUT-REC
014800             WRITE OUTPUT-REC.
014900 GET-MESSAGE-X.
015000     EXIT.[/INST]{
  "id": "BR-002",
  "description": "The file 'INFILE' is opened for input at the beginning of the program.",
  "condition": "OPEN INFILE",
  "output": {}
}
{
  "id": "BR-003",
  "description": "The program calls the subroutine 'TSUBR01' with a 'R' action flag to read a record from the 'INFILE' file.",
  "condition": "CALL 'TSUBR01' USING PASS-ME-AROUND",
  "output": {}
}
{
  "id": "BR-004",
  "description": "If the end of file for 'INFILE' is not reached, the program writes the text portion of the input record to the 'OUTPUT-REC' field.",
  "condition": "IF NOT INFILE-EOF\\nMOVE TEXT-PORTION TO MESSANGER",
  "output": {}
}
{
  "id": "BR-005",
  "description": "The program writes the 'STAR-LINE-1' record to the 'OUTPUT-REC' field.",
  "condition": "MOVE STAR-LINE-1 TO OUTPUT-REC",
  "output": {}
}
{
  "id": "BR-006",
  "description": "The program writes the 'BODY-LINE' record to the 'OUTPUT-REC' field.",
  "condition": "MOVE BODY-LINE TO OUTPUT-REC",
  "output": {}
}
{
  "id": "BR-007",
  "description": "The program writes the 'MESSAGE-LINE' record to the 'BODY-TEXT' field.",
  "condition": "MOVE MESSAGE-LINE TO BODY-TEXT",
  "output": {}
}
{
  "id": "BR-008",
  "description": "The program performs the 'GET-MESSAGE' paragraph until the end of file for 'INFILE' is reached.",
  "condition": "PERFORM GET-MESSAGE THRU GET-MESSAGE-XUNTIL INFILE-EOF",
  "output": {}
}
{
  "id": "BR-009",
  "description": "The file 'OUTFILE' is closed at the end of the program.",
  "condition": "CLOSE OUTFILE",
  "output": {}
}[INST]000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID.    TPROG01b.
000300 AUTHOR.        COMPUWARE ISPW TRAINING.
000400 DATE-WRITTEN.  JANUARY 24TH, 1996.
000500 DATE-COMPILED.
000600
000700********************************************************
000800* THIS PROGRAM IS A TRAINING PROGRAM
000900*      WITH A LINK TO TSUBR01
001000*
001100*      AND COPYLIBS   TCPYA01   (HEADER)
001200*                     TCPYB01   (LINK AREA)
001300* ======================================================
001400*  ISPW (TM)
001500*  COPYRIGHT (C) 1986-2016 COMPUWARE CORPORATION.
001600*  UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT
001700*  LAWS OF THE UNITED STATES.
001800*
001900* ======================================================
002000*                   MODIFICATION  LOG
002100*
002200*  DD/MM/YY  PROGRAMMER  CHANGES
002300*  ********  **********  *******
002400*  96/01/24  ISPW        NEW PROGRAM
002500* ======================================================
002600 ENVIRONMENT DIVISION.
002700 CONFIGURATION SECTION.
002800 SOURCE-COMPUTER. IBM-370.
002900 OBJECT-COMPUTER. IBM-370.
003000
003100 INPUT-OUTPUT SECTION.
003200 FILE-CONTROL.
003300
003400*****************************************************
003500*  FILES USED:
003600*   INPUT   JUST SOME DUMMY DATA TO READ IN
003700*   OUTPUT  A COPY OF THE DUMMY DATA WRITTEN OUT
003800*****************************************************
003900     SELECT INFILE  ASSIGN UT-S-INPUT
004000       ORGANIZATION IS SEQUENTIAL
004100       ACCESS IS SEQUENTIAL.
004200
004300     SELECT OUTFILE ASSIGN UT-S-OUTPUT
004400       ORGANIZATION IS SEQUENTIAL
004500       ACCESS IS SEQUENTIAL.
004600
004700 DATA DIVISION.
004800
004900 FILE SECTION.
005000
005100 FD  INFILE
005200     LABEL RECORDS OMITTED
005300     BLOCK CONTAINS 0 RECORDS
005400     RECORDING MODE IS F
005500     DATA RECORD IS INPUT-REC.
005600
005700 01  INPUT-REC         PIC X(80).
005800
005900 FD  OUTFILE
006000     LABEL RECORDS OMITTED
006100     BLOCK CONTAINS 0 RECORDS
006200     RECORDING MODE IS F
006300     DATA RECORD IS OUTPUT-REC.
006400
006500 01  OUTPUT-REC.
006600     05  CC                PIC X(1).
006700     05  OUTPUT-LINE       PIC X(132).
006800
006900
007000 WORKING-STORAGE SECTION.
007100****************************************************
007200****    THE DATA AREA COPYBOOK
007300****************************************************
007400 COPY TCPYA01.
007500
007600
007700
007800****************************************************
007900**** A COPY MEMBER FOR THE LINKAGE AREA PARAMETERS
008000****************************************************
008100 COPY TCPYB01 .
008200
008300 PROCEDURE DIVISION.
008400
008500 00000-MAIN-PROCEDURE.
008600
008700     OPEN OUTPUT OUTFILE.
008800     MOVE 'R' TO ACTION-FLAG.
008900     CALL 'TSUBR01' USING PASS-ME-AROUND.
009000
009100     IF NOT INFILE-EOF THEN
009200        MOVE TEXT-PORTION TO MESSANGER
009300
009400     MOVE SPACES TO CC.
009500     MOVE STAR-LINE-1 TO OUTPUT-REC.
009600     WRITE OUTPUT-REC.
009700     WRITE OUTPUT-REC.
009800     WRITE OUTPUT-REC.
009900
010000     MOVE SPACES TO BODY-TEXT.
010100     MOVE BODY-LINE TO OUTPUT-REC.
010200     WRITE OUTPUT-REC.
010300
010400     MOVE FLASH-LINE TO OUTPUT-REC.
010500     WRITE OUTPUT-REC.
010600     WRITE OUTPUT-REC.
010700     WRITE OUTPUT-REC.
010800
010900     MOVE SPACES TO BODY-TEXT.
011000     MOVE BODY-LINE TO OUTPUT-REC.
011100     WRITE OUTPUT-REC.
011200     WRITE OUTPUT-REC.
011300
011400     MOVE MESSAGE-LINE TO BODY-TEXT.
011500     MOVE BODY-LINE TO OUTPUT-REC.
011600     WRITE OUTPUT-REC.
011700
011800     MOVE SPACES TO BODY-TEXT.
011900     MOVE BODY-LINE TO OUTPUT-REC.
012000     WRITE OUTPUT-REC.
012100
012200     PERFORM GET-MESSAGE THRU GET-MESSAGE-X
012300        UNTIL INFILE-EOF.
012400
012500     MOVE SPACES TO BODY-TEXT.
012600     MOVE BODY-LINE TO OUTPUT-REC.
012700     WRITE OUTPUT-REC.
012800     WRITE OUTPUT-REC.
012900
013000     MOVE STAR-LINE-1 TO OUTPUT-REC.
013100     WRITE OUTPUT-REC.
013200     WRITE OUTPUT-REC.
013300     WRITE OUTPUT-REC.
013400
013500* CLOSE THE INPUT FILE
013600     MOVE 'C' TO ACTION-FLAG.
013700     CALL 'TSUBR01' USING PASS-ME-AROUND.
013800
013900     CLOSE OUTFILE.
014000     GOBACK.
014100
014200 GET-MESSAGE.
014300        MOVE 'R' TO ACTION-FLAG.
014400        CALL 'TSUBR01' USING PASS-ME-AROUND.
014500           IF NOT INFILE-EOF THEN
014600             MOVE TEXT-PORTION TO BODY-TEXT
014700             MOVE BODY-LINE TO OUTPUT-REC
014800             WRITE OUTPUT-REC.
014900 GET-MESSAGE-X.
015000     EXIT.[/INST]{
  "id": "BR-001",
  "description": "The action flag is set to 'R' for reading the data.",
  "condition": "ACTION-FLAG = 'R'",
  "output": {
    "true": "move 'R' to ACTION-FLAG"
  }
},
{
  "id": "BR-002",
  "description": "The action flag is set to 'C' for closing the file.",
  "condition": "ACTION-FLAG = 'C'",
  "output": {
    "true": "move 'C' to ACTION-FLAG"
  }
},
{
  "id": "BR-003",
  "description": "The program calls the subroutine with the name 'TSUBR01' by passing it the parameter 'PASS-ME-AROUND.",
  "condition": null,
  "output": {
    "true": "CALL 'TSUBR01' USING PASS-ME-AROUND."
  }
}[INST]000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID.    TPROG03.
000300 AUTHOR.        COMPUWARE ISPW TRAINING1.
000400 DATE-WRITTEN.  JANUARY 24TH, 1996.
000500 DATE-COMPILED.
000600
000700********************************************************
000800* THIS PROGRAM IS A TRAINING PROGRAM
000900*      WITH A LINK TO TSUBR03
001000*
001100*      AND COPYLIBS   TCPYA03   (HEADER)
001200*                     TCPYB03   (LINK AREA)
001300* ======================================================
001400*  ISPW (TM)
001500*  COPYRIGHT (C) 1986-2016 COMPUWARE CORPORATION.
001600*  UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT
001700*  LAWS OF THE UNITED STATES.
001800*
001900* ======================================================
002000*                   MODIFICATION  LOG
002100*
002200*  DD/MM/YY  PROGRAMMER  CHANGES
002300*  ********  **********  *******
002400*  96/01/24  ISPW        NEW PROGRAM
002500* ======================================================
002600 ENVIRONMENT DIVISION.
002700 CONFIGURATION SECTION.
002800 SOURCE-COMPUTER. IBM-370.
002900 OBJECT-COMPUTER. IBM-370.
003000
003100 INPUT-OUTPUT SECTION.
003200 FILE-CONTROL.
003300
003400*****************************************************
003500*  FILES USED:
003600*   INPUT   JUST SOME DUMMY DATA TO READ IN
003700*   OUTPUT  A COPY OF THE DUMMY DATA WRITTEN OUT
003800*****************************************************
003900     SELECT INFILE  ASSIGN UT-S-INPUT
004000       ORGANIZATION IS SEQUENTIAL
004100       ACCESS IS SEQUENTIAL.
004200
004300     SELECT OUTFILE ASSIGN UT-S-OUTPUT
004400       ORGANIZATION IS SEQUENTIAL
004500       ACCESS IS SEQUENTIAL.
004600
004700 DATA DIVISION.
004800
004900 FILE SECTION.
005000
005100 FD  INFILE
005200     LABEL RECORDS OMITTED
005300     BLOCK CONTAINS 0 RECORDS
005400     RECORDING MODE IS F
005500     DATA RECORD IS INPUT-REC.
005600
005700 01  INPUT-REC         PIC X(80).
005800
005900 FD  OUTFILE
006000     LABEL RECORDS OMITTED
006100     BLOCK CONTAINS 0 RECORDS
006200     RECORDING MODE IS F
006300     DATA RECORD IS OUTPUT-REC.
006400
006500 01  OUTPUT-REC.
006600     05  CC                PIC X(1).
006700     05  OUTPUT-LINE       PIC X(132).
006800
006900
007000 WORKING-STORAGE SECTION.
007100****************************************************
007200****    THE DATA AREA COPYBOOK
007300****************************************************
007400 COPY TCPYA03.
007500
007600
007700
007800****************************************************
007900**** A COPY MEMBER FOR THE LINKAGE AREA PARAMETERS
008000****************************************************
008100 COPY TCPYB03 .
008200
008300 PROCEDURE DIVISION.
008400
008500 00000-MAIN-PROCEDURE.
008600
008700     OPEN OUTPUT OUTFILE.
008800     MOVE 'R' TO ACTION-FLAG.
008900     CALL 'TSUBR03' USING PASS-ME-AROUND.
009000
009100     IF NOT INFILE-EOF THEN
009200        MOVE TEXT-PORTION TO MESSANGER
009300
009400     MOVE SPACES TO CC.
009500     MOVE STAR-LINE-1 TO OUTPUT-REC.
009600     WRITE OUTPUT-REC.
009700     WRITE OUTPUT-REC.
009800     WRITE OUTPUT-REC.
009900
010000     MOVE SPACES TO BODY-TEXT.
010100     MOVE BODY-LINE TO OUTPUT-REC.
010200     WRITE OUTPUT-REC.
010300
010400     MOVE FLASH-LINE TO OUTPUT-REC.
010500     WRITE OUTPUT-REC.
010600     WRITE OUTPUT-REC.
010700     WRITE OUTPUT-REC.
010800
010900     MOVE SPACES TO BODY-TEXT.
011000     MOVE BODY-LINE TO OUTPUT-REC.
011100     WRITE OUTPUT-REC.
011200     WRITE OUTPUT-REC.
011300
011400     MOVE MESSAGE-LINE TO BODY-TEXT.
011500     MOVE BODY-LINE TO OUTPUT-REC.
011600     WRITE OUTPUT-REC.
011700
011800     MOVE SPACES TO BODY-TEXT.
011900     MOVE BODY-LINE TO OUTPUT-REC.
012000     WRITE OUTPUT-REC.
012100
012200     PERFORM GET-MESSAGE THRU GET-MESSAGE-X
012300        UNTIL INFILE-EOF.
012400
012500     MOVE SPACES TO BODY-TEXT.
012600     MOVE BODY-LINE TO OUTPUT-REC.
012700     WRITE OUTPUT-REC.
012800     WRITE OUTPUT-REC.
012900
013000     MOVE STAR-LINE-1 TO OUTPUT-REC.
013100     WRITE OUTPUT-REC.
013200     WRITE OUTPUT-REC.
013300     WRITE OUTPUT-REC.
013400
013500* CLOSE THE INPUT FILE
013600     MOVE 'C' TO ACTION-FLAG.
013700     CALL 'TSUBR03' USING PASS-ME-AROUND.
013800
013900     CLOSE OUTFILE.
014000     GOBACK.
014100
014200 GET-MESSAGE.
014300        MOVE 'R' TO ACTION-FLAG.
014400        CALL 'TSUBR03' USING PASS-ME-AROUND.
014500           IF NOT INFILE-EOF THEN
014600             MOVE TEXT-PORTION TO BODY-TEXT
014700             MOVE BODY-LINE TO OUTPUT-REC
014800             WRITE OUTPUT-REC.
014900 GET-MESSAGE-X.
015000     EXIT.[/INST]{
  "id": "BR-001",
  "description": "When creating a report, a header should be printed on the report.",
  "condition": "new report",
  "output": {
    "header": "The header should be printed on the report."
  }
},
{
  "id": "BR-002",
  "description": "When creating a report, a footer should be printed on the report.",
  "condition": "new report",
  "output": {
    "footer": "The footer should be printed on the report."
  }
},
{
  "id": "BR-003",
  "description": "When creating a report, the body should be printed on the report.",
  "condition": "new report",
  "output": {
    "body": "The body should be printed on the report."
  }
}[INST]000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID.    TPROG04.
000300 AUTHOR.        COMPUWARE ISPW TRAINING.
000400 DATE-WRITTEN.  JANUARY 24TH, 1996.
000500 DATE-COMPILED.
000600
000700********************************************************
000800* THIS PROGRAM IS A TRAINING PROGRAM
000900*      WITH A LINK TO TSUBR04
001000*
001100*      AND COPYLIBS   TCPYA04   (HEADER)
001200*                     TCPYB04   (LINK AREA)
001300* ======================================================
001400*  ISPW (TM)
001500*  COPYRIGHT (C) 1986-2016 COMPUWARE CORPORATION.
001600*  UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT
001700*  LAWS OF THE UNITED STATES.
001800*
001900* ======================================================
002000*                   MODIFICATION  LOG
002100*
002200*  DD/MM/YY  PROGRAMMER  CHANGES
002300*  ********  **********  *******
002400*  96/01/24  ISPW        NEW PROGRAM
002500* ======================================================
002600 ENVIRONMENT DIVISION.
002700 CONFIGURATION SECTION.
002800 SOURCE-COMPUTER. IBM-370.
002900 OBJECT-COMPUTER. IBM-370.
003000
003100 INPUT-OUTPUT SECTION.
003200 FILE-CONTROL.
003300
003400*****************************************************
003500*  FILES USED:
003600*   INPUT   JUST SOME DUMMY DATA TO READ IN
003700*   OUTPUT  A COPY OF THE DUMMY DATA WRITTEN OUT
003800*****************************************************
003900     SELECT INFILE  ASSIGN UT-S-INPUT
004000       ORGANIZATION IS SEQUENTIAL
004100       ACCESS IS SEQUENTIAL.
004200
004300     SELECT OUTFILE ASSIGN UT-S-OUTPUT
004400       ORGANIZATION IS SEQUENTIAL
004500       ACCESS IS SEQUENTIAL.
004600
004700 DATA DIVISION.
004800
004900 FILE SECTION.
005000
005100 FD  INFILE
005200     LABEL RECORDS OMITTED
005300     BLOCK CONTAINS 0 RECORDS
005400     RECORDING MODE IS F
005500     DATA RECORD IS INPUT-REC.
005600
005700 01  INPUT-REC         PIC X(80).
005800
005900 FD  OUTFILE
006000     LABEL RECORDS OMITTED
006100     BLOCK CONTAINS 0 RECORDS
006200     RECORDING MODE IS F
006300     DATA RECORD IS OUTPUT-REC.
006400
006500 01  OUTPUT-REC.
006600     05  CC                PIC X(1).
006700     05  OUTPUT-LINE       PIC X(132).
006800
006900
007000 WORKING-STORAGE SECTION.
007100****************************************************
007200****    THE DATA AREA COPYBOOK
007300****************************************************
007400 COPY TCPYA04.
007500
007600
007700
007800****************************************************
007900**** A COPY MEMBER FOR THE LINKAGE AREA PARAMETERS
008000****************************************************
008100 COPY TCPYB04 .
008200
008300 PROCEDURE DIVISION.
008400
008500 00000-MAIN-PROCEDURE.
008600
008700     OPEN OUTPUT OUTFILE.
008800     MOVE 'R' TO ACTION-FLAG.
008900     CALL 'TSUBR04' USING PASS-ME-AROUND.
009000
009100     IF NOT INFILE-EOF THEN
009200        MOVE TEXT-PORTION TO MESSANGER
009300
009400     MOVE SPACES TO CC.
009500     MOVE STAR-LINE-1 TO OUTPUT-REC.
009600     WRITE OUTPUT-REC.
009700     WRITE OUTPUT-REC.
009800     WRITE OUTPUT-REC.
009900
010000     MOVE SPACES TO BODY-TEXT.
010100     MOVE BODY-LINE TO OUTPUT-REC.
010200     WRITE OUTPUT-REC.
010300
010400     MOVE FLASH-LINE TO OUTPUT-REC.
010500     WRITE OUTPUT-REC.
010600     WRITE OUTPUT-REC.
010700     WRITE OUTPUT-REC.
010800
010900     MOVE SPACES TO BODY-TEXT.
011000     MOVE BODY-LINE TO OUTPUT-REC.
011100     WRITE OUTPUT-REC.
011200     WRITE OUTPUT-REC.
011300
011400     MOVE MESSAGE-LINE TO BODY-TEXT.
011500     MOVE BODY-LINE TO OUTPUT-REC.
011600     WRITE OUTPUT-REC.
011700
011800     MOVE SPACES TO BODY-TEXT.
011900     MOVE BODY-LINE TO OUTPUT-REC.
012000     WRITE OUTPUT-REC.
012100
012200     PERFORM GET-MESSAGE THRU GET-MESSAGE-X
012300        UNTIL INFILE-EOF.
012400
012500     MOVE SPACES TO BODY-TEXT.
012600     MOVE BODY-LINE TO OUTPUT-REC.
012700     WRITE OUTPUT-REC.
012800     WRITE OUTPUT-REC.
012900
013000     MOVE STAR-LINE-1 TO OUTPUT-REC.
013100     WRITE OUTPUT-REC.
013200     WRITE OUTPUT-REC.
013300     WRITE OUTPUT-REC.
013400
013500* CLOSE THE INPUT FILE
013600     MOVE 'C' TO ACTION-FLAG.
013700     CALL 'TSUBR04' USING PASS-ME-AROUND.
013800
013900     CLOSE OUTFILE.
014000     GOBACK.
014100
014200 GET-MESSAGE.
014300        MOVE 'R' TO ACTION-FLAG.
014400        CALL 'TSUBR04' USING PASS-ME-AROUND.
014500           IF NOT INFILE-EOF THEN
014600             MOVE TEXT-PORTION TO BODY-TEXT
014700             MOVE BODY-LINE TO OUTPUT-REC
014800             WRITE OUTPUT-REC.
014900 GET-MESSAGE-X.
015000     EXIT.[/INST]{
  "id": "BR-001",
  "description": "The ACTION-FLAG is set to 'R' to read from the input file. CALL 'TSUBR04' using PASS-ME-AROUND to read from the input file.",
  "condition": "ACTION-FLAG = 'R'",
  "output": {
    "read": "MOVE 'R' TO ACTION-FLAG.\nCALL 'TSUBR04' USING PASS-ME-AROUND."
  }
},
{
  "id": "BR-002",
  "description": "If the INFILE-EOF is not true, move the TEXT-PORTION to BODY-TEXT.",
  "condition": "NOT INFILE-EOF",
  "output": {
    "move": "MOVE TEXT-PORTION TO BODY-TEXT"
  }
},
{
  "id": "BR-003",
  "description": "Close the input file by setting the ACTION-FLAG to 'C' and calling 'TSUBR04' using PASS-ME-AROUND.",
  "condition": null,
  "output": {
    "close": "MOVE 'C' TO ACTION-FLAG.\nCALL 'TSUBR04' USING PASS-ME-AROUND."
  }
},
{
  "id": "BR-004",
  "description": "Close the output file.",
  "condition": null,
  "output": {
    "close": "CLOSE OUTFILE."
  }
},
{
  "id": "BR-005",
  "description": "If the INFILE-EOF is not true, move the TEXT-PORTION to BODY-TEXT and write it to the output file.",
  "condition": "NOT INFILE-EOF",
  "output": {
    "write": "MOVE TEXT-PORTION TO BODY-TEXT\nMOVE BODY-LINE TO OUTPUT-REC\nWRITE OUTPUT-REC."
  }
}[INST]000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID.    TPROG05.
000300 AUTHOR.        COMPUWARE ISPW TRAINING.
000400 DATE-WRITTEN.  JANUARY 24TH, 1996.
000500 DATE-COMPILED.
000600
000700********************************************************
000800* THIS PROGRAM IS A TRAINING PROGRAM
000900*      WITH A LINK TO TSUBR05
001000*
001100*      AND COPYLIBS   TCPYA05   (HEADER)
001200*                     TCPYB05   (LINK AREA)
001300* ======================================================
001400*  ISPW (TM)
001500*  COPYRIGHT (C) 1986-2016 COMPUWARE CORPORATION.
001600*  UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT
001700*  LAWS OF THE UNITED STATES.
001800*
001900* ======================================================
002000*                   MODIFICATION  LOG
002100*
002200*  DD/MM/YY  PROGRAMMER  CHANGES
002300*  ********  **********  *******
002400*  96/01/24  ISPW        NEW PROGRAM
002500* ======================================================
002600 ENVIRONMENT DIVISION.
002700 CONFIGURATION SECTION.
002800 SOURCE-COMPUTER. IBM-370.
002900 OBJECT-COMPUTER. IBM-370.
003000
003100 INPUT-OUTPUT SECTION.
003200 FILE-CONTROL.
003300
003400*****************************************************
003500*  FILES USED:
003600*   INPUT   JUST SOME DUMMY DATA TO READ IN
003700*   OUTPUT  A COPY OF THE DUMMY DATA WRITTEN OUT
003800*****************************************************
003900     SELECT INFILE  ASSIGN UT-S-INPUT
004000       ORGANIZATION IS SEQUENTIAL
004100       ACCESS IS SEQUENTIAL.
004200
004300     SELECT OUTFILE ASSIGN UT-S-OUTPUT
004400       ORGANIZATION IS SEQUENTIAL
004500       ACCESS IS SEQUENTIAL.
004600
004700 DATA DIVISION.
004800
004900 FILE SECTION.
005000
005100 FD  INFILE
005200     LABEL RECORDS OMITTED
005300     BLOCK CONTAINS 0 RECORDS
005400     RECORDING MODE IS F
005500     DATA RECORD IS INPUT-REC.
005600
005700 01  INPUT-REC         PIC X(80).
005800
005900 FD  OUTFILE
006000     LABEL RECORDS OMITTED
006100     BLOCK CONTAINS 0 RECORDS
006200     RECORDING MODE IS F
006300     DATA RECORD IS OUTPUT-REC.
006400
006500 01  OUTPUT-REC.
006600     05  CC                PIC X(1).
006700     05  OUTPUT-LINE       PIC X(132).
006800
006900
007000 WORKING-STORAGE SECTION.
007100****************************************************
007200****    THE DATA AREA COPYBOOK
007300****************************************************
007400 COPY TCPYA05.
007500
007600
007700
007800****************************************************
007900**** A COPY MEMBER FOR THE LINKAGE AREA PARAMETERS
008000****************************************************
008100 COPY TCPYB05 .
008200
008300 PROCEDURE DIVISION.
008400
008500 00000-MAIN-PROCEDURE.
008600
008700     OPEN OUTPUT OUTFILE.
008800     MOVE 'R' TO ACTION-FLAG.
008900     CALL 'TSUBR05' USING PASS-ME-AROUND.
009000
009100     IF NOT INFILE-EOF THEN
009200        MOVE TEXT-PORTION TO MESSANGER
009300
009400     MOVE SPACES TO CC.
009500     MOVE STAR-LINE-1 TO OUTPUT-REC.
009600     WRITE OUTPUT-REC.
009700     WRITE OUTPUT-REC.
009800     WRITE OUTPUT-REC.
009900
010000     MOVE SPACES TO BODY-TEXT.
010100     MOVE BODY-LINE TO OUTPUT-REC.
010200     WRITE OUTPUT-REC.
010300
010400     MOVE FLASH-LINE TO OUTPUT-REC.
010500     WRITE OUTPUT-REC.
010600     WRITE OUTPUT-REC.
010700     WRITE OUTPUT-REC.
010800
010900     MOVE SPACES TO BODY-TEXT.
011000     MOVE BODY-LINE TO OUTPUT-REC.
011100     WRITE OUTPUT-REC.
011200     WRITE OUTPUT-REC.
011300
011400     MOVE MESSAGE-LINE TO BODY-TEXT.
011500     MOVE BODY-LINE TO OUTPUT-REC.
011600     WRITE OUTPUT-REC.
011700
011800     MOVE SPACES TO BODY-TEXT.
011900     MOVE BODY-LINE TO OUTPUT-REC.
012000     WRITE OUTPUT-REC.
012100
012200     PERFORM GET-MESSAGE THRU GET-MESSAGE-X
012300        UNTIL INFILE-EOF.
012400
012500     MOVE SPACES TO BODY-TEXT.
012600     MOVE BODY-LINE TO OUTPUT-REC.
012700     WRITE OUTPUT-REC.
012800     WRITE OUTPUT-REC.
012900
013000     MOVE STAR-LINE-1 TO OUTPUT-REC.
013100     WRITE OUTPUT-REC.
013200     WRITE OUTPUT-REC.
013300     WRITE OUTPUT-REC.
013400
013500* CLOSE THE INPUT FILE
013600     MOVE 'C' TO ACTION-FLAG.
013700     CALL 'TSUBR05' USING PASS-ME-AROUND.
013800
013900     CLOSE OUTFILE.
014000     GOBACK.
014100
014200 GET-MESSAGE.
014300        MOVE 'R' TO ACTION-FLAG.
014400        CALL 'TSUBR05' USING PASS-ME-AROUND.
014500           IF NOT INFILE-EOF THEN
014600             MOVE TEXT-PORTION TO BODY-TEXT
014700             MOVE BODY-LINE TO OUTPUT-REC
014800             WRITE OUTPUT-REC.
014900 GET-MESSAGE-X.
015000     EXIT.[/INST]{
  "id": "BR-002",
  "description": "When the ACTION-FLAG is set to 'R', then the program is in record retrieval mode.",
  "condition": "ACTION-FLAG = R",
  "context": "CALL 'TSUBR05' USING PASS-ME-AROUND"
}[INST]000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID.    TPROG06.
000300 AUTHOR.        COMPUWARE ISPW TRAINING.
000400 DATE-WRITTEN.  JANUARY 24TH, 1996.
000500 DATE-COMPILED.
000600
000700********************************************************
000800* THIS PROGRAM IS A TRAINING PROGRAM
000900*      WITH A LINK TO TSUBR06
001000*
001100*      AND COPYLIBS   TCPYA06   (HEADER)
001200*                     TCPYB06   (LINK AREA)
001300* ======================================================
001400*  ISPW (TM)
001500*  COPYRIGHT (C) 1986-2016 COMPUWARE CORPORATION.
001600*  UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT
001700*  LAWS OF THE UNITED STATES.
001800*
001900* ======================================================
002000*                   MODIFICATION  LOG
002100*
002200*  DD/MM/YY  PROGRAMMER  CHANGES
002300*  ********  **********  *******
002400*  96/01/24  ISPW        NEW PROGRAM
002500* ======================================================
002600 ENVIRONMENT DIVISION.
002700 CONFIGURATION SECTION.
002800 SOURCE-COMPUTER. IBM-370.
002900 OBJECT-COMPUTER. IBM-370.
003000
003100 INPUT-OUTPUT SECTION.
003200 FILE-CONTROL.
003300
003400*****************************************************
003500*  FILES USED:
003600*   INPUT   JUST SOME DUMMY DATA TO READ IN
003700*   OUTPUT  A COPY OF THE DUMMY DATA WRITTEN OUT
003800*****************************************************
003900     SELECT INFILE  ASSIGN UT-S-INPUT
004000       ORGANIZATION IS SEQUENTIAL
004100       ACCESS IS SEQUENTIAL.
004200
004300     SELECT OUTFILE ASSIGN UT-S-OUTPUT
004400       ORGANIZATION IS SEQUENTIAL
004500       ACCESS IS SEQUENTIAL.
004600
004700 DATA DIVISION.
004800
004900 FILE SECTION.
005000
005100 FD  INFILE
005200     LABEL RECORDS OMITTED
005300     BLOCK CONTAINS 0 RECORDS
005400     RECORDING MODE IS F
005500     DATA RECORD IS INPUT-REC.
005600
005700 01  INPUT-REC         PIC X(80).
005800
005900 FD  OUTFILE
006000     LABEL RECORDS OMITTED
006100     BLOCK CONTAINS 0 RECORDS
006200     RECORDING MODE IS F
006300     DATA RECORD IS OUTPUT-REC.
006400
006500 01  OUTPUT-REC.
006600     05  CC                PIC X(1).
006700     05  OUTPUT-LINE       PIC X(132).
006800
006900
007000 WORKING-STORAGE SECTION.
007100****************************************************
007200****    THE DATA AREA COPYBOOK
007300****************************************************
007400 COPY TCPYA06.
007500
007600
007700
007800****************************************************
007900**** A COPY MEMBER FOR THE LINKAGE AREA PARAMETERS
008000****************************************************
008100 COPY TCPYB06 .
008200
008300 PROCEDURE DIVISION.
008400
008500 00000-MAIN-PROCEDURE.
008600
008700     OPEN OUTPUT OUTFILE.
008800     MOVE 'R' TO ACTION-FLAG.
008900     CALL 'TSUBR06' USING PASS-ME-AROUND.
009000
009100     IF NOT INFILE-EOF THEN
009200        MOVE TEXT-PORTION TO MESSANGER
009300
009400     MOVE SPACES TO CC.
009500     MOVE STAR-LINE-1 TO OUTPUT-REC.
009600     WRITE OUTPUT-REC.
009700     WRITE OUTPUT-REC.
009800     WRITE OUTPUT-REC.
009900
010000     MOVE SPACES TO BODY-TEXT.
010100     MOVE BODY-LINE TO OUTPUT-REC.
010200     WRITE OUTPUT-REC.
010300
010400     MOVE FLASH-LINE TO OUTPUT-REC.
010500     WRITE OUTPUT-REC.
010600     WRITE OUTPUT-REC.
010700     WRITE OUTPUT-REC.
010800
010900     MOVE SPACES TO BODY-TEXT.
011000     MOVE BODY-LINE TO OUTPUT-REC.
011100     WRITE OUTPUT-REC.
011200     WRITE OUTPUT-REC.
011300
011400     MOVE MESSAGE-LINE TO BODY-TEXT.
011500     MOVE BODY-LINE TO OUTPUT-REC.
011600     WRITE OUTPUT-REC.
011700
011800     MOVE SPACES TO BODY-TEXT.
011900     MOVE BODY-LINE TO OUTPUT-REC.
012000     WRITE OUTPUT-REC.
012100
012200     PERFORM GET-MESSAGE THRU GET-MESSAGE-X
012300        UNTIL INFILE-EOF.
012400
012500     MOVE SPACES TO BODY-TEXT.
012600     MOVE BODY-LINE TO OUTPUT-REC.
012700     WRITE OUTPUT-REC.
012800     WRITE OUTPUT-REC.
012900
013000     MOVE STAR-LINE-1 TO OUTPUT-REC.
013100     WRITE OUTPUT-REC.
013200     WRITE OUTPUT-REC.
013300     WRITE OUTPUT-REC.
013400
013500* CLOSE THE INPUT FILE
013600     MOVE 'C' TO ACTION-FLAG.
013700     CALL 'TSUBR06' USING PASS-ME-AROUND.
013800
013900     CLOSE OUTFILE.
014000     GOBACK.
014100
014200 GET-MESSAGE.
014300        MOVE 'R' TO ACTION-FLAG.
014400        CALL 'TSUBR06' USING PASS-ME-AROUND.
014500           IF NOT INFILE-EOF THEN
014600             MOVE TEXT-PORTION TO BODY-TEXT
014700             MOVE BODY-LINE TO OUTPUT-REC
014800             WRITE OUTPUT-REC.
014900 GET-MESSAGE-X.
015000     EXIT.[/INST]{
  "id": "BR-002",
  "description": "The first line of the output file should be the text: \"STAR-LINE-1\"",
  "condition": "OPEN OUTPUT OUTFILE",
  "output": {
    "true": "MOVE STAR-LINE-1 TO OUTPUT-REC.\\nWRITE OUTPUT-REC",
    "false": null
  }
},
{
  "id": "BR-003",
  "description": "Write the \"BODY-LINE\" text to the output file 4 times",
  "condition": "NOT INFILE-EOF",
  "output": {
    "true": "MOVE BODY-LINE TO OUTPUT-REC.\\nWRITE OUTPUT-REC\\nWRITE OUTPUT-REC\\nWRITE OUTPUT-REC",
    "false": null
  }
},
{
  "id": "BR-004",
  "description": "Write the \"MESSAGE-LINE\" text to the output file 3 times",
  "condition": "NOT INFILE-EOF",
  "output": {
    "true": "MOVE MESSAGE-LINE TO BODY-TEXT\\nMOVE BODY-LINE TO OUTPUT-REC.\\nWRITE OUTPUT-REC\\nWRITE OUTPUT-REC",
    "false": null
  }
},
{
  "id": "BR-005",
  "description": "The last line of the output file should be the text: \"STAR-LINE-1\"",
  "condition": "CLOSE OUTFILE",
  "output": {
    "true": "MOVE STAR-LINE-1 TO OUTPUT-REC.\\nWRITE OUTPUT-REC\\nWRITE OUTPUT-REC\\nWRITE OUTPUT-REC",
    "false": null
  }
}[INST]000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID.    TPROG07.
000300 AUTHOR.        COMPUWARE ISPW TRAINING.
000400 DATE-WRITTEN.  JANUARY 24TH, 1996.
000500 DATE-COMPILED.
000600
000700********************************************************
000800* THIS PROGRAM IS A TRAINING PROGRAM
000900*      WITH A LINK TO TSUBR07
001000*
001100*      AND COPYLIBS   TCPYA07   (HEADER)
001200*                     TCPYB07   (LINK AREA)
001300* ======================================================
001400*  ISPW (TM)
001500*  COPYRIGHT (C) 1986-2016 COMPUWARE CORPORATION.
001600*  UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT
001700*  LAWS OF THE UNITED STATES.
001800*
001900* ======================================================
002000*                   MODIFICATION  LOG
002100*
002200*  DD/MM/YY  PROGRAMMER  CHANGES
002300*  ********  **********  *******
002400*  96/01/24  ISPW        NEW PROGRAM
002500* ======================================================
002600 ENVIRONMENT DIVISION.
002700 CONFIGURATION SECTION.
002800 SOURCE-COMPUTER. IBM-370.
002900 OBJECT-COMPUTER. IBM-370.
003000
003100 INPUT-OUTPUT SECTION.
003200 FILE-CONTROL.
003300
003400*****************************************************
003500*  FILES USED:
003600*   INPUT   JUST SOME DUMMY DATA TO READ IN
003700*   OUTPUT  A COPY OF THE DUMMY DATA WRITTEN OUT
003800*****************************************************
003900     SELECT INFILE  ASSIGN UT-S-INPUT
004000       ORGANIZATION IS SEQUENTIAL
004100       ACCESS IS SEQUENTIAL.
004200
004300     SELECT OUTFILE ASSIGN UT-S-OUTPUT
004400       ORGANIZATION IS SEQUENTIAL
004500       ACCESS IS SEQUENTIAL.
004600
004700 DATA DIVISION.
004800
004900 FILE SECTION.
005000
005100 FD  INFILE
005200     LABEL RECORDS OMITTED
005300     BLOCK CONTAINS 0 RECORDS
005400     RECORDING MODE IS F
005500     DATA RECORD IS INPUT-REC.
005600
005700 01  INPUT-REC         PIC X(80).
005800
005900 FD  OUTFILE
006000     LABEL RECORDS OMITTED
006100     BLOCK CONTAINS 0 RECORDS
006200     RECORDING MODE IS F
006300     DATA RECORD IS OUTPUT-REC.
006400
006500 01  OUTPUT-REC.
006600     05  CC                PIC X(1).
006700     05  OUTPUT-LINE       PIC X(132).
006800
006900
007000 WORKING-STORAGE SECTION.
007100****************************************************
007200****    THE DATA AREA COPYBOOK
007300****************************************************
007400 COPY TCPYA07.
007500
007600
007700
007800****************************************************
007900**** A COPY MEMBER FOR THE LINKAGE AREA PARAMETERS
008000****************************************************
008100 COPY TCPYB07 .
008200
008300 PROCEDURE DIVISION.
008400
008500 00000-MAIN-PROCEDURE.
008600
008700     OPEN OUTPUT OUTFILE.
008800     MOVE 'R' TO ACTION-FLAG.
008900     CALL 'TSUBR07' USING PASS-ME-AROUND.
009000
009100     IF NOT INFILE-EOF THEN
009200        MOVE TEXT-PORTION TO MESSANGER
009300
009400     MOVE SPACES TO CC.
009500     MOVE STAR-LINE-1 TO OUTPUT-REC.
009600     WRITE OUTPUT-REC.
009700     WRITE OUTPUT-REC.
009800     WRITE OUTPUT-REC.
009900
010000     MOVE SPACES TO BODY-TEXT.
010100     MOVE BODY-LINE TO OUTPUT-REC.
010200     WRITE OUTPUT-REC.
010300
010400     MOVE FLASH-LINE TO OUTPUT-REC.
010500     WRITE OUTPUT-REC.
010600     WRITE OUTPUT-REC.
010700     WRITE OUTPUT-REC.
010800
010900     MOVE SPACES TO BODY-TEXT.
011000     MOVE BODY-LINE TO OUTPUT-REC.
011100     WRITE OUTPUT-REC.
011200     WRITE OUTPUT-REC.
011300
011400     MOVE MESSAGE-LINE TO BODY-TEXT.
011500     MOVE BODY-LINE TO OUTPUT-REC.
011600     WRITE OUTPUT-REC.
011700
011800     MOVE SPACES TO BODY-TEXT.
011900     MOVE BODY-LINE TO OUTPUT-REC.
012000     WRITE OUTPUT-REC.
012100
012200     PERFORM GET-MESSAGE THRU GET-MESSAGE-X
012300        UNTIL INFILE-EOF.
012400
012500     MOVE SPACES TO BODY-TEXT.
012600     MOVE BODY-LINE TO OUTPUT-REC.
012700     WRITE OUTPUT-REC.
012800     WRITE OUTPUT-REC.
012900
013000     MOVE STAR-LINE-1 TO OUTPUT-REC.
013100     WRITE OUTPUT-REC.
013200     WRITE OUTPUT-REC.
013300     WRITE OUTPUT-REC.
013400
013500* CLOSE THE INPUT FILE
013600     MOVE 'C' TO ACTION-FLAG.
013700     CALL 'TSUBR07' USING PASS-ME-AROUND.
013800
013900     CLOSE OUTFILE.
014000     GOBACK.
014100
014200 GET-MESSAGE.
014300        MOVE 'R' TO ACTION-FLAG.
014400        CALL 'TSUBR07' USING PASS-ME-AROUND.
014500           IF NOT INFILE-EOF THEN
014600             MOVE TEXT-PORTION TO BODY-TEXT
014700             MOVE BODY-LINE TO OUTPUT-REC
014800             WRITE OUTPUT-REC.
014900 GET-MESSAGE-X.
015000     EXIT.[/INST]{
  "id": "BR-001",
  "description": "A message is read from a file until end of file is reached.\\nOpening and closing the input file is done by using TSUBR07 with the action flag set to ‘R’ (for Read) or ‘C’ (for Close).",
  "condition": "NOT INFILE-EOF",
  "output": {
    "continue-reading": "MOVE 'R' TO ACTION-FLAG.\\nCALL 'TSUBR07' USING PASS-ME-AROUND.",
    "stop-reading": "MOVE 'C' TO ACTION-FLAG.\\nCALL 'TSUBR07' USING PASS-ME-AROUND."
  }
}[INST]000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID.    TPROG08.
000300 AUTHOR.        COMPUWARE ISPW TRAINING.
000400 DATE-WRITTEN.  JANUARY 24TH, 1996.
000500 DATE-COMPILED.
000600
000700********************************************************
000800* THIS PROGRAM IS A TRAINING PROGRAM
000900*      WITH A LINK TO TSUBR08
001000*
001100*      AND COPYLIBS   TCPYA08   (HEADER)
001200*                     TCPYB08   (LINK AREA)
001300* ======================================================
001400*  ISPW (TM)
001500*  COPYRIGHT (C) 1986-2016 COMPUWARE CORPORATION.
001600*  UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT
001700*  LAWS OF THE UNITED STATES.
001800*
001900* ======================================================
002000*                   MODIFICATION  LOG
002100*
002200*  DD/MM/YY  PROGRAMMER  CHANGES
002300*  ********  **********  *******
002400*  96/01/24  ISPW        NEW PROGRAM
002500* ======================================================
002600 ENVIRONMENT DIVISION.
002700 CONFIGURATION SECTION.
002800 SOURCE-COMPUTER. IBM-370.
002900 OBJECT-COMPUTER. IBM-370.
003000
003100 INPUT-OUTPUT SECTION.
003200 FILE-CONTROL.
003300
003400*****************************************************
003500*  FILES USED:
003600*   INPUT   JUST SOME DUMMY DATA TO READ IN
003700*   OUTPUT  A COPY OF THE DUMMY DATA WRITTEN OUT
003800*****************************************************
003900     SELECT INFILE  ASSIGN UT-S-INPUT
004000       ORGANIZATION IS SEQUENTIAL
004100       ACCESS IS SEQUENTIAL.
004200
004300     SELECT OUTFILE ASSIGN UT-S-OUTPUT
004400       ORGANIZATION IS SEQUENTIAL
004500       ACCESS IS SEQUENTIAL.
004600
004700 DATA DIVISION.
004800
004900 FILE SECTION.
005000
005100 FD  INFILE
005200     LABEL RECORDS OMITTED
005300     BLOCK CONTAINS 0 RECORDS
005400     RECORDING MODE IS F
005500     DATA RECORD IS INPUT-REC.
005600
005700 01  INPUT-REC         PIC X(80).
005800
005900 FD  OUTFILE
006000     LABEL RECORDS OMITTED
006100     BLOCK CONTAINS 0 RECORDS
006200     RECORDING MODE IS F
006300     DATA RECORD IS OUTPUT-REC.
006400
006500 01  OUTPUT-REC.
006600     05  CC                PIC X(1).
006700     05  OUTPUT-LINE       PIC X(132).
006800
006900
007000 WORKING-STORAGE SECTION.
007100****************************************************
007200****    THE DATA AREA COPYBOOK
007300****************************************************
007400 COPY TCPYA08.
007500
007600
007700
007800****************************************************
007900**** A COPY MEMBER FOR THE LINKAGE AREA PARAMETERS
008000****************************************************
008100 COPY TCPYB08 .
008200
008300 PROCEDURE DIVISION.
008400
008500 00000-MAIN-PROCEDURE.
008600
008700     OPEN OUTPUT OUTFILE.
008800     MOVE 'R' TO ACTION-FLAG.
008900     CALL 'TSUBR08' USING PASS-ME-AROUND.
009000
009100     IF NOT INFILE-EOF THEN
009200        MOVE TEXT-PORTION TO MESSANGER
009300
009400     MOVE SPACES TO CC.
009500     MOVE STAR-LINE-1 TO OUTPUT-REC.
009600     WRITE OUTPUT-REC.
009700     WRITE OUTPUT-REC.
009800     WRITE OUTPUT-REC.
009900
010000     MOVE SPACES TO BODY-TEXT.
010100     MOVE BODY-LINE TO OUTPUT-REC.
010200     WRITE OUTPUT-REC.
010300
010400     MOVE FLASH-LINE TO OUTPUT-REC.
010500     WRITE OUTPUT-REC.
010600     WRITE OUTPUT-REC.
010700     WRITE OUTPUT-REC.
010800
010900     MOVE SPACES TO BODY-TEXT.
011000     MOVE BODY-LINE TO OUTPUT-REC.
011100     WRITE OUTPUT-REC.
011200     WRITE OUTPUT-REC.
011300
011400     MOVE MESSAGE-LINE TO BODY-TEXT.
011500     MOVE BODY-LINE TO OUTPUT-REC.
011600     WRITE OUTPUT-REC.
011700
011800     MOVE SPACES TO BODY-TEXT.
011900     MOVE BODY-LINE TO OUTPUT-REC.
012000     WRITE OUTPUT-REC.
012100
012200     PERFORM GET-MESSAGE THRU GET-MESSAGE-X
012300        UNTIL INFILE-EOF.
012400
012500     MOVE SPACES TO BODY-TEXT.
012600     MOVE BODY-LINE TO OUTPUT-REC.
012700     WRITE OUTPUT-REC.
012800     WRITE OUTPUT-REC.
012900
013000     MOVE STAR-LINE-1 TO OUTPUT-REC.
013100     WRITE OUTPUT-REC.
013200     WRITE OUTPUT-REC.
013300     WRITE OUTPUT-REC.
013400
013500* CLOSE THE INPUT FILE
013600     MOVE 'C' TO ACTION-FLAG.
013700     CALL 'TSUBR08' USING PASS-ME-AROUND.
013800
013900     CLOSE OUTFILE.
014000     GOBACK.
014100
014200 GET-MESSAGE.
014300        MOVE 'R' TO ACTION-FLAG.
014400        CALL 'TSUBR08' USING PASS-ME-AROUND.
014500           IF NOT INFILE-EOF THEN
014600             MOVE TEXT-PORTION TO BODY-TEXT
014700             MOVE BODY-LINE TO OUTPUT-REC
014800             WRITE OUTPUT-REC.
014900 GET-MESSAGE-X.
015000     EXIT.[/INST]{
  "id": "BR-001",
  "description": "The procedure division calls the program 'TSUBR08' with 'PASS-ME-AROUND' as input-output parameter.",
  "condition": "CALL 'TSUBR08' USING PASS-ME-AROUND",
  "output": {}
}[INST]000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID.    TPROG09.
000300 AUTHOR.        COMPUWARE ISPW TRAINING.
000400 DATE-WRITTEN.  JANUARY 24TH, 1996.
000500 DATE-COMPILED.
000600
000700********************************************************
000800* THIS PROGRAM IS A TRAINING PROGRAM
000900*      WITH A LINK TO TSUBR09
001000*
001100*      AND COPYLIBS   TCPYA09   (HEADER)
001200*                     TCPYB09   (LINK AREA)
001300* ======================================================
001400*  ISPW (TM)
001500*  COPYRIGHT (C) 1986-2016 COMPUWARE CORPORATION.
001600*  UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT
001700*  LAWS OF THE UNITED STATES.
001800*
001900* ======================================================
002000*                   MODIFICATION  LOG
002100*
002200*  DD/MM/YY  PROGRAMMER  CHANGES
002300*  ********  **********  *******
002400*  96/01/24  ISPW        NEW PROGRAM
002500* ======================================================
002600 ENVIRONMENT DIVISION.
002700 CONFIGURATION SECTION.
002800 SOURCE-COMPUTER. IBM-370.
002900 OBJECT-COMPUTER. IBM-370.
003000
003100 INPUT-OUTPUT SECTION.
003200 FILE-CONTROL.
003300
003400*****************************************************
003500*  FILES USED:
003600*   INPUT   JUST SOME DUMMY DATA TO READ IN
003700*   OUTPUT  A COPY OF THE DUMMY DATA WRITTEN OUT
003800*****************************************************
003900     SELECT INFILE  ASSIGN UT-S-INPUT
004000       ORGANIZATION IS SEQUENTIAL
004100       ACCESS IS SEQUENTIAL.
004200
004300     SELECT OUTFILE ASSIGN UT-S-OUTPUT
004400       ORGANIZATION IS SEQUENTIAL
004500       ACCESS IS SEQUENTIAL.
004600
004700 DATA DIVISION.
004800
004900 FILE SECTION.
005000
005100 FD  INFILE
005200     LABEL RECORDS OMITTED
005300     BLOCK CONTAINS 0 RECORDS
005400     RECORDING MODE IS F
005500     DATA RECORD IS INPUT-REC.
005600
005700 01  INPUT-REC         PIC X(80).
005800
005900 FD  OUTFILE
006000     LABEL RECORDS OMITTED
006100     BLOCK CONTAINS 0 RECORDS
006200     RECORDING MODE IS F
006300     DATA RECORD IS OUTPUT-REC.
006400
006500 01  OUTPUT-REC.
006600     05  CC                PIC X(1).
006700     05  OUTPUT-LINE       PIC X(132).
006800
006900
007000 WORKING-STORAGE SECTION.
007100****************************************************
007200****    THE DATA AREA COPYBOOK
007300****************************************************
007400 COPY TCPYA09.
       01 WS-MISC-DATA.
          05 WS-LOW-VALUES PIC X(2) VALUE 'ï¿½ï¿½'.
007500
007600
007700
007800****************************************************
007900**** A COPY MEMBER FOR THE LINKAGE AREA PARAMETERS
008000****************************************************
008100 COPY TCPYB09 .
008200
008300 PROCEDURE DIVISION.
008400
008500 00000-MAIN-PROCEDURE.
008600
008700     OPEN OUTPUT OUTFILE.
008800     MOVE 'R' TO ACTION-FLAG.
008900     CALL 'TSUBR09' USING PASS-ME-AROUND.
009000
009100     IF NOT INFILE-EOF THEN
009200        MOVE TEXT-PORTION TO MESSANGER
009300
009400     MOVE SPACES TO CC.
009500     MOVE STAR-LINE-1 TO OUTPUT-REC.
009600     WRITE OUTPUT-REC.
009700     WRITE OUTPUT-REC.
009800     WRITE OUTPUT-REC.
009900
010000     MOVE SPACES TO BODY-TEXT.
010100     MOVE BODY-LINE TO OUTPUT-REC.
010200     WRITE OUTPUT-REC.
010300
010400     MOVE FLASH-LINE TO OUTPUT-REC.
010500     WRITE OUTPUT-REC.
010600     WRITE OUTPUT-REC.
010700     WRITE OUTPUT-REC.
010800
010900     MOVE SPACES TO BODY-TEXT.
011000     MOVE BODY-LINE TO OUTPUT-REC.
011100     WRITE OUTPUT-REC.
011200     WRITE OUTPUT-REC.
011300
011400     MOVE MESSAGE-LINE TO BODY-TEXT.
011500     MOVE BODY-LINE TO OUTPUT-REC.
011600     WRITE OUTPUT-REC.
011700
011800     MOVE SPACES TO BODY-TEXT.
011900     MOVE BODY-LINE TO OUTPUT-REC.
012000     WRITE OUTPUT-REC.
012100
012200     PERFORM GET-MESSAGE THRU GET-MESSAGE-X
012300        UNTIL INFILE-EOF.
012400
012500     MOVE SPACES TO BODY-TEXT.
012600     MOVE BODY-LINE TO OUTPUT-REC.
012700     WRITE OUTPUT-REC.
012800     WRITE OUTPUT-REC.
012900
013000     MOVE STAR-LINE-1 TO OUTPUT-REC.
013100     WRITE OUTPUT-REC.
013200     WRITE OUTPUT-REC.
013300     WRITE OUTPUT-REC.
013400
013500* CLOSE THE INPUT FILE
013600     MOVE 'C' TO ACTION-FLAG.
013700     CALL 'TSUBR09' USING PASS-ME-AROUND.
013800
013900     CLOSE OUTFILE.
014000     GOBACK.
014100
014200 GET-MESSAGE.
014300        MOVE 'R' TO ACTION-FLAG.
014400        CALL 'TSUBR09' USING PASS-ME-AROUND.
014500           IF NOT INFILE-EOF THEN
014600             MOVE TEXT-PORTION TO BODY-TEXT
014700             MOVE BODY-LINE TO OUTPUT-REC
014800             WRITE OUTPUT-REC.
014900 GET-MESSAGE-X.
015000     EXIT.[/INST]{
  "id": "BR-002",
  "description": "The process will write a report that will have 4 lines of message, and will be separated by 2 blank lines and will be enclosed by a line of stars.",
  "business_logic": {
    "body_text": "A string SPACES is moved to BODY-TEXT (WORKING-STORAGE SECTION).",
    "body_line": "BODY-LINE is TO OUTPUT-REC, OUTPUT-REC is written.",
    "line_separation": "A string SPACES is moved to BODY-TEXT (WORKING-STORAGE SECTION).",
    "star_line": "STAR-LINE-1 (WORKING-STORAGE SECTION) is copied into OUTPUT-REC, OUTPUT-REC is written thrice."
  }
}[INST]000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID.    TPROG10.
000300 AUTHOR.        COMPUWARE ISPW TRAINING.
000400 DATE-WRITTEN.  JANUARY 24TH, 1996.
000500 DATE-COMPILED.
000600
000700********************************************************
000800* THIS PROGRAM IS A TRAINING PROGRAM
000900*      WITH A LINK TO TSUBR10
001000*
001100*      AND COPYLIBS   TCPYA10   (HEADER)
001200*                     TCPYB10   (LINK AREA)
001300* ======================================================
001400*  ISPW (TM)
001500*  COPYRIGHT (C) 1986-2016 COMPUWARE CORPORATION.
001600*  UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT
001700*  LAWS OF THE UNITED STATES.
001800*
001900* ======================================================
002000*                   MODIFICATION  LOG
002100*
002200*  DD/MM/YY  PROGRAMMER  CHANGES
002300*  ********  **********  *******
002400*  96/01/24  ISPW        NEW PROGRAM
002500* ======================================================
002600 ENVIRONMENT DIVISION.
002700 CONFIGURATION SECTION.
002800 SOURCE-COMPUTER. IBM-370.
002900 OBJECT-COMPUTER. IBM-370.
003000
003100 INPUT-OUTPUT SECTION.
003200 FILE-CONTROL.
003300
003400*****************************************************
003500*  FILES USED:
003600*   INPUT   JUST SOME DUMMY DATA TO READ IN
003700*   OUTPUT  A COPY OF THE DUMMY DATA WRITTEN OUT
003800*****************************************************
003900     SELECT INFILE  ASSIGN UT-S-INPUT
004000       ORGANIZATION IS SEQUENTIAL
004100       ACCESS IS SEQUENTIAL.
004200
004300     SELECT OUTFILE ASSIGN UT-S-OUTPUT
004400       ORGANIZATION IS SEQUENTIAL
004500       ACCESS IS SEQUENTIAL.
004600
004700 DATA DIVISION.
004800
004900 FILE SECTION.
005000
005100 FD  INFILE
005200     LABEL RECORDS OMITTED
005300     BLOCK CONTAINS 0 RECORDS
005400     RECORDING MODE IS F
005500     DATA RECORD IS INPUT-REC.
005600
005700 01  INPUT-REC         PIC X(80).
005800
005900 FD  OUTFILE
006000     LABEL RECORDS OMITTED
006100     BLOCK CONTAINS 0 RECORDS
006200     RECORDING MODE IS F
006300     DATA RECORD IS OUTPUT-REC.
006400
006500 01  OUTPUT-REC.
006600     05  CC                PIC X(1).
006700     05  OUTPUT-LINE       PIC X(132).
006800
006900
007000 WORKING-STORAGE SECTION.
007100****************************************************
007200****    THE DATA AREA COPYBOOK
007300****************************************************
007400 COPY TCPYA10.
007500
007600
007700
007800****************************************************
007900**** A COPY MEMBER FOR THE LINKAGE AREA PARAMETERS
008000****************************************************
008100 COPY TCPYB10 .
008200
008300 PROCEDURE DIVISION.
008400
008500 00000-MAIN-PROCEDURE.
008600
008700     OPEN OUTPUT OUTFILE.
008800     MOVE 'R' TO ACTION-FLAG.
008900     CALL 'TSUBR10' USING PASS-ME-AROUND.
009000
009100     IF NOT INFILE-EOF THEN
009200        MOVE TEXT-PORTION TO MESSANGER
009300
009400     MOVE SPACES TO CC.
009500     MOVE STAR-LINE-1 TO OUTPUT-REC.
009600     WRITE OUTPUT-REC.
009700     WRITE OUTPUT-REC.
009800     WRITE OUTPUT-REC.
009900
010000     MOVE SPACES TO BODY-TEXT.
010100     MOVE BODY-LINE TO OUTPUT-REC.
010200     WRITE OUTPUT-REC.
010300
010400     MOVE FLASH-LINE TO OUTPUT-REC.
010500     WRITE OUTPUT-REC.
010600     WRITE OUTPUT-REC.
010700     WRITE OUTPUT-REC.
010800
010900     MOVE SPACES TO BODY-TEXT.
011000     MOVE BODY-LINE TO OUTPUT-REC.
011100     WRITE OUTPUT-REC.
011200     WRITE OUTPUT-REC.
011300
011400     MOVE MESSAGE-LINE TO BODY-TEXT.
011500     MOVE BODY-LINE TO OUTPUT-REC.
011600     WRITE OUTPUT-REC.
011700
011800     MOVE SPACES TO BODY-TEXT.
011900     MOVE BODY-LINE TO OUTPUT-REC.
012000     WRITE OUTPUT-REC.
012100
012200     PERFORM GET-MESSAGE THRU GET-MESSAGE-X
012300        UNTIL INFILE-EOF.
012400
012500     MOVE SPACES TO BODY-TEXT.
012600     MOVE BODY-LINE TO OUTPUT-REC.
012700     WRITE OUTPUT-REC.
012800     WRITE OUTPUT-REC.
012900
013000     MOVE STAR-LINE-1 TO OUTPUT-REC.
013100     WRITE OUTPUT-REC.
013200     WRITE OUTPUT-REC.
013300     WRITE OUTPUT-REC.
013400
013500* CLOSE THE INPUT FILE
013600     MOVE 'C' TO ACTION-FLAG.
013700     CALL 'TSUBR10' USING PASS-ME-AROUND.
013800
013900     CLOSE OUTFILE.
014000     GOBACK.
014100
014200 GET-MESSAGE.
014300        MOVE 'R' TO ACTION-FLAG.
014400        CALL 'TSUBR10' USING PASS-ME-AROUND.
014500           IF NOT INFILE-EOF THEN
014600             MOVE TEXT-PORTION TO BODY-TEXT
014700             MOVE BODY-LINE TO OUTPUT-REC
014800             WRITE OUTPUT-REC.
014900 GET-MESSAGE-X.
015000     EXIT.[/INST]{
  "id": "BR-001",
  "description": "The input file is read sequentially.",
  "condition": null,
  "output": {
    "true": "The input file is read sequentially.",
    "false": "The input file is not read sequentially."
  }
}[INST]000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID.    TSUBR02.
000300 AUTHOR.        COMPUWARE ISPW TRAINING.
000400 DATE-WRITTEN.  JANUARY 24TH, 1996.
000500 DATE-COMPILED.
000600
000700********************************************************
000800* THIS PROGRAM IS A TRAINING PROGRAM 02
000900*      CALLED FROM    TPROG02
001000*      WITH COPYLIB   TCPYB02 (LINKAGE AREA)
001100* ======================================================
001200*  ISPW (TM)
001300*  COPYRIGHT (C) 1986-2016 COMPUWARE CORPORATION.
001400*  UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT
001500*  LAWS OF THE UNITED STATES.
001600*
001700* ======================================================
001800*                   MODIFICATION  LOG
001900*
002000*  DD/MM/YY  PROGRAMMER  CHANGES
002100*  ********  **********  *******
002200*  96/01/24  ISPW        NEW PROGRAM
002300* ======================================================
002400 ENVIRONMENT DIVISION.
002500 CONFIGURATION SECTION.
002600 SOURCE-COMPUTER. IBM-370.
002700 OBJECT-COMPUTER. IBM-370.
002800
002900 INPUT-OUTPUT SECTION.
003000 FILE-CONTROL.
003100
003200********************************************************
003300*  FILES USED:
003400*   INPUT   JUST SOME DUMMY DATA TO READ IN
003500********************************************************
003600     SELECT INFILE  ASSIGN UT-S-INPUT
003700       ORGANIZATION IS SEQUENTIAL
003800       ACCESS IS SEQUENTIAL.
003900
004000
004100 DATA DIVISION.
004200
004300 FILE SECTION.
004400
004500 FD  INFILE
004600     LABEL RECORDS OMITTED
004700     BLOCK CONTAINS 0 RECORDS
004800     RECORDING MODE IS F
004900     DATA RECORD IS INPUT-REC.
005000
005100 01  INPUT-REC         PIC X(80).
005200
005300 WORKING-STORAGE SECTION.
005400
005500 01   INFILE-OPEN-FLAG     PIC X(1) VALUE 'N'.
005600      88 INFILE-OPEN       VALUE 'Y'.
005700
005800 LINKAGE SECTION.
005900********************************************************
006000**** A COPY MEMBER FOR THE LINKAGE AREA
006100********************************************************
006200 COPY TCPYB02.
006300
006400 PROCEDURE DIVISION USING PASS-ME-AROUND.
006500
006600 00000-MAIN-PROCEDURE.
006700
006800     IF NOT INFILE-OPEN THEN
006900        MOVE 'Y' TO INFILE-OPEN-FLAG
007000        MOVE 'N' TO INFILE-EOF-FLAG
007100        OPEN INPUT INFILE.
007200
007300     MOVE SPACES TO INCOMING-DATA.
007400
007500     IF ACTION-READ THEN
007600        PERFORM GET-ME-A-RECORD THRU GET-ME-A-RECORD-X
007700        UNTIL INFILE-EOF OR KEEPER.
007800
007900     IF ACTION-CLOSE THEN
008000        CLOSE INFILE.
008100
008200     GOBACK.
008300
008400 GET-ME-A-RECORD.
008500     READ INFILE AT END MOVE 'Y' TO INFILE-EOF-FLAG.
008600     IF NOT INFILE-EOF MOVE INPUT-REC TO INCOMING-DATA.
008700 GET-ME-A-RECORD-X.
008800     EXIT.[/INST]{
  "id": "BR-001",
  "description": "The system will read data from the INFILE until the end of the file is reached or the user decides to stop.",
  "condition": "NOT INFILE-EOF OR KEEPER",
  "output": {
    "continue": "PERFORM GET-ME-A-RECORD THRU GET-ME-A-RECORD-X"
  }
}[INST]000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID.    TSUBR03.
000300 AUTHOR.        COMPUWARE ISPW TRAINING.
000400 DATE-WRITTEN.  JANUARY 24TH, 1996.
000500 DATE-COMPILED.
000600
000700********************************************************
000800* THIS PROGRAM IS A TRAINING PROGRAM 42
000900*      CALLED FROM    TPROG03
001000*      WITH COPYLIB   TCPYB03 (LINKAGE AREA)
001100* ======================================================
001200*  ISPW (TM)
001300*  COPYRIGHT (C) 1986-2016 COMPUWARE CORPORATION.
001400*  UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT
001500*  LAWS OF THE UNITED STATES. 0014
001600*
001700* ======================================================
001800*                   MODIFICATION  LOG
001900*
002000*  DD/MM/YY  PROGRAMMER  CHANGES
002100*  ********  **********  *******
002200*  96/01/24  ISPW        NEW PROGRAM
002300* ======================================================
002400 ENVIRONMENT DIVISION.
002500 CONFIGURATION SECTION.
002600 SOURCE-COMPUTER. IBM-370.
002700 OBJECT-COMPUTER. IBM-370.
002800
002900 INPUT-OUTPUT SECTION.
003000 FILE-CONTROL.
003100
003200********************************************************
003300*  FILES USED:
003400*   INPUT   JUST SOME DUMMY DATA TO READ IN
003500********************************************************
003600     SELECT INFILE  ASSIGN UT-S-INPUT
003700       ORGANIZATION IS SEQUENTIAL
003800       ACCESS IS SEQUENTIAL.
003900
004000
004100 DATA DIVISION.
004200
004300 FILE SECTION.
004400
004500 FD  INFILE
004600     LABEL RECORDS OMITTED
004700     BLOCK CONTAINS 0 RECORDS
004800     RECORDING MODE IS F
004900     DATA RECORD IS INPUT-REC.
005000
005100 01  INPUT-REC         PIC X(80).
005200
005300 WORKING-STORAGE SECTION.
005400
005500 01   INFILE-OPEN-FLAG     PIC X(1) VALUE 'N'.
005600      88 INFILE-OPEN       VALUE 'Y'.
005700
005800 LINKAGE SECTION.
005900********************************************************
006000**** A COPY MEMBER FOR THE LINKAGE AREA
006100********************************************************
006200 COPY TCPYB03.
006300
006400 PROCEDURE DIVISION USING PASS-ME-AROUND.
006500
006600 00000-MAIN-PROCEDURE.
006700
006800     IF NOT INFILE-OPEN THEN
006900        MOVE 'Y' TO INFILE-OPEN-FLAG
007000        MOVE 'N' TO INFILE-EOF-FLAG
007100        OPEN INPUT INFILE.
007200
007300     MOVE SPACES TO INCOMING-DATA.
007400
007500     IF ACTION-READ THEN
007600        PERFORM GET-ME-A-RECORD THRU GET-ME-A-RECORD-X
007700        UNTIL INFILE-EOF OR KEEPER.
007800
007900     IF ACTION-CLOSE THEN
008000        CLOSE INFILE.
008100
008200     GOBACK.
008300
008400 GET-ME-A-RECORD.
008500     READ INFILE AT END MOVE 'Y' TO INFILE-EOF-FLAG.
008600     IF NOT INFILE-EOF MOVE INPUT-REC TO INCOMING-DATA.
008700 GET-ME-A-RECORD-X.
008800     EXIT.[/INST]{
  "id": "BR-002",
  "description": "The program reads input data from a file named INFILE.",
  "condition": "NOT INFILE-OPEN",
  "output": {
    "open_file": "OPEN INPUT INFILE."
  }
}[INST]000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID.    TSUBR04.
000300 AUTHOR.        COMPUWARE ISPW TRAINING.
000400 DATE-WRITTEN.  JANUARY 24TH, 1996.
000500 DATE-COMPILED.
000600
000700********************************************************
000800* THIS PROGRAM IS A TRAINING PROGRAM 01
000900*      CALLED FROM    TPROG04
001000*      WITH COPYLIB   TCPYB04 (LINKAGE AREA)
001100* ======================================================
001200*  ISPW (TM)
001300*  COPYRIGHT (C) 1986-2016 COMPUWARE CORPORATION.
001400*  UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT
001500*  LAWS OF THE UNITED STATES.
001600*
001700* ======================================================
001800*                   MODIFICATION  LOG
001900*
002000*  DD/MM/YY  PROGRAMMER  CHANGES
002100*  ********  **********  *******
002200*  96/01/24  ISPW        NEW PROGRAM
002300* ======================================================
002400 ENVIRONMENT DIVISION.
002500 CONFIGURATION SECTION.
002600 SOURCE-COMPUTER. IBM-370.
002700 OBJECT-COMPUTER. IBM-370.
002800
002900 INPUT-OUTPUT SECTION.
003000 FILE-CONTROL.
003100
003200********************************************************
003300*  FILES USED:
003400*   INPUT   JUST SOME DUMMY DATA TO READ IN
003500********************************************************
003600     SELECT INFILE  ASSIGN UT-S-INPUT
003700       ORGANIZATION IS SEQUENTIAL
003800       ACCESS IS SEQUENTIAL.
003900
004000
004100 DATA DIVISION.
004200
004300 FILE SECTION.
004400
004500 FD  INFILE
004600     LABEL RECORDS OMITTED
004700     BLOCK CONTAINS 0 RECORDS
004800     RECORDING MODE IS F
004900     DATA RECORD IS INPUT-REC.
005000
005100 01  INPUT-REC         PIC X(80).
005200
005300 WORKING-STORAGE SECTION.
005400
005500 01   INFILE-OPEN-FLAG     PIC X(1) VALUE 'N'.
005600      88 INFILE-OPEN       VALUE 'Y'.
005700
005800 LINKAGE SECTION.
005900********************************************************
006000**** A COPY MEMBER FOR THE LINKAGE AREA
006100********************************************************
006200 COPY TCPYB04.
006300
006400 PROCEDURE DIVISION USING PASS-ME-AROUND.
006500
006600 00000-MAIN-PROCEDURE.
006700
006800     IF NOT INFILE-OPEN THEN
006900        MOVE 'Y' TO INFILE-OPEN-FLAG
007000        MOVE 'N' TO INFILE-EOF-FLAG
007100        OPEN INPUT INFILE.
007200
007300     MOVE SPACES TO INCOMING-DATA.
007400
007500     IF ACTION-READ THEN
007600        PERFORM GET-ME-A-RECORD THRU GET-ME-A-RECORD-X
007700        UNTIL INFILE-EOF OR KEEPER.
007800
007900     IF ACTION-CLOSE THEN
008000        CLOSE INFILE.
008100
008200     GOBACK.
008300
008400 GET-ME-A-RECORD.
008500     READ INFILE AT END MOVE 'Y' TO INFILE-EOF-FLAG.
008600     IF NOT INFILE-EOF MOVE INPUT-REC TO INCOMING-DATA.
008700 GET-ME-A-RECORD-X.
008800     EXIT.[/INST]{
  "id": "BR-001",
  "description": "If the INFILE has not been opened, then open it and set the INFILE-OPEN-FLAG to ‘Y’.",
  "condition": "NOT INFILE-OPEN",
  "action": [
    "MOVE 'Y' TO INFILE-OPEN-FLAG",
    "MOVE 'N' TO INFILE-EOF-FLAG",
    "OPEN INPUT INFILE"
  ]
}[INST]000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID.    TSUBR07.
000300 AUTHOR.        COMPUWARE ISPW TRAINING.
000400 DATE-WRITTEN.  JANUARY 24TH, 1996.
000500 DATE-COMPILED.
000600
000700********************************************************
000800* THIS PROGRAM IS A TRAINING PROGRAM
000900*      CALLED FROM    TPROG07
001000*      WITH COPYLIB   TCPYB07 (LINKAGE AREA)
001100* ======================================================
001200*  ISPW (TM)
001300*  COPYRIGHT (C) 1986-2016 COMPUWARE CORPORATION.
001400*  UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT
001500*  LAWS OF THE UNITED STATES.
001600*
001700* ======================================================
001800*                   MODIFICATION  LOG
001900*
002000*  DD/MM/YY  PROGRAMMER  CHANGES
002100*  ********  **********  *******
002200*  96/01/24  ISPW        NEW PROGRAM
002300* ======================================================
002400 ENVIRONMENT DIVISION.
002500 CONFIGURATION SECTION.
002600 SOURCE-COMPUTER. IBM-370.
002700 OBJECT-COMPUTER. IBM-370.
002800
002900 INPUT-OUTPUT SECTION.
003000 FILE-CONTROL.
003100
003200********************************************************
003300*  FILES USED:
003400*   INPUT   JUST SOME DUMMY DATA TO READ IN
003500********************************************************
003600     SELECT INFILE  ASSIGN UT-S-INPUT
003700       ORGANIZATION IS SEQUENTIAL
003800       ACCESS IS SEQUENTIAL.
003900
004000
004100 DATA DIVISION.
004200
004300 FILE SECTION.
004400
004500 FD  INFILE
004600     LABEL RECORDS OMITTED
004700     BLOCK CONTAINS 0 RECORDS
004800     RECORDING MODE IS F
004900     DATA RECORD IS INPUT-REC.
005000
005100 01  INPUT-REC         PIC X(80).
005200
005300 WORKING-STORAGE SECTION.
005400
005500 01   INFILE-OPEN-FLAG     PIC X(1) VALUE 'N'.
005600      88 INFILE-OPEN       VALUE 'Y'.
005700
005800 LINKAGE SECTION.
005900********************************************************
006000**** A COPY MEMBER FOR THE LINKAGE AREA
006100********************************************************
006200 COPY TCPYB07.
006300
006400 PROCEDURE DIVISION USING PASS-ME-AROUND.
006500
006600 00000-MAIN-PROCEDURE.
006700
006800     IF NOT INFILE-OPEN THEN
006900        MOVE 'Y' TO INFILE-OPEN-FLAG
007000        MOVE 'N' TO INFILE-EOF-FLAG
007100        OPEN INPUT INFILE.
007200
007300     MOVE SPACES TO INCOMING-DATA.
007400
007500     IF ACTION-READ THEN
007600        PERFORM GET-ME-A-RECORD THRU GET-ME-A-RECORD-X
007700        UNTIL INFILE-EOF OR KEEPER.
007800
007900     IF ACTION-CLOSE THEN
008000        CLOSE INFILE.
008100
008200     GOBACK.
008300
008400 GET-ME-A-RECORD.
008500     READ INFILE AT END MOVE 'Y' TO INFILE-EOF-FLAG.
008600     IF NOT INFILE-EOF MOVE INPUT-REC TO INCOMING-DATA.
008700 GET-ME-A-RECORD-X.
008800     EXIT.[/INST]{
  "id": "BR-001",
  "description": "IF the INFILE-OPEN-FLAG is not 'Y' then open INFILE.",
  "condition": "INFILE-OPEN-FLAG NOT = 'Y'",
  "output": {
    "open_file": "OPEN INPUT INFILE."
  }
}
{
  "id": "BR-002",
  "description": "IF the INFILE-EOF-FLAG is 'Y' then close INFILE.",
  "condition": "INFILE-EOF-FLAG = 'Y'",
  "output": {
    "close_file": "CLOSE INFILE."
  }
}[INST]000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID.    TSUBR08.
000300 AUTHOR.        COMPUWARE ISPW TRAINING.
000400 DATE-WRITTEN.  JANUARY 24TH, 1996.
000500 DATE-COMPILED.
000600
000700********************************************************
000800* THIS PROGRAM IS A TRAINING PROGRAM
000900*      CALLED FROM    TPROG08
001000*      WITH COPYLIB   TCPYB08 (LINKAGE AREA)
001100* ======================================================
001200*  ISPW (TM)
001300*  COPYRIGHT (C) 1986-2016 COMPUWARE CORPORATION.
001400*  UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT
001500*  LAWS OF THE UNITED STATES.
001600*
001700* ======================================================
001800*                   MODIFICATION  LOG
001900*
002000*  DD/MM/YY  PROGRAMMER  CHANGES
002100*  ********  **********  *******
002200*  96/01/24  ISPW        NEW PROGRAM
002300* ======================================================
002400 ENVIRONMENT DIVISION.
002500 CONFIGURATION SECTION.
002600 SOURCE-COMPUTER. IBM-370.
002700 OBJECT-COMPUTER. IBM-370.
002800
002900 INPUT-OUTPUT SECTION.
003000 FILE-CONTROL.
003100
003200********************************************************
003300*  FILES USED:
003400*   INPUT   JUST SOME DUMMY DATA TO READ IN
003500********************************************************
003600     SELECT INFILE  ASSIGN UT-S-INPUT
003700       ORGANIZATION IS SEQUENTIAL
003800       ACCESS IS SEQUENTIAL.
003900
004000
004100 DATA DIVISION.
004200
004300 FILE SECTION.
004400
004500 FD  INFILE
004600     LABEL RECORDS OMITTED
004700     BLOCK CONTAINS 0 RECORDS
004800     RECORDING MODE IS F
004900     DATA RECORD IS INPUT-REC.
005000
005100 01  INPUT-REC         PIC X(80).
005200
005300 WORKING-STORAGE SECTION.
005400
005500 01   INFILE-OPEN-FLAG     PIC X(1) VALUE 'N'.
005600      88 INFILE-OPEN       VALUE 'Y'.
005700
005800 LINKAGE SECTION.
005900********************************************************
006000**** A COPY MEMBER FOR THE LINKAGE AREA
006100********************************************************
006200 COPY TCPYB08.
006300
006400 PROCEDURE DIVISION USING PASS-ME-AROUND.
006500
006600 00000-MAIN-PROCEDURE.
006700
006800     IF NOT INFILE-OPEN THEN
006900        MOVE 'Y' TO INFILE-OPEN-FLAG
007000        MOVE 'N' TO INFILE-EOF-FLAG
007100        OPEN INPUT INFILE.
007200
007300     MOVE SPACES TO INCOMING-DATA.
007400
007500     IF ACTION-READ THEN
007600        PERFORM GET-ME-A-RECORD THRU GET-ME-A-RECORD-X
007700        UNTIL INFILE-EOF OR KEEPER.
007800
007900     IF ACTION-CLOSE THEN
008000        CLOSE INFILE.
008100
008200     GOBACK.
008300
008400 GET-ME-A-RECORD.
008500     READ INFILE AT END MOVE 'Y' TO INFILE-EOF-FLAG.
008600     IF NOT INFILE-EOF MOVE INPUT-REC TO INCOMING-DATA.
008700 GET-ME-A-RECORD-X.
008800     EXIT.[/INST]{
  "id": "BR-002",
  "description": "If the ACTION-READ flag is set, the program will read records from the INFILE until the end of file is reached, or until the KEEPER flag is set.",
  "condition": "ACTION-READ = 'Y'",
  "output": {
    "perform-get-me-a-record": "perform GET-ME-A-RECORD",
    "close-infile": "CLOSE INFILE"
  }
}[INST]000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID.    TSUBR09.
000300 AUTHOR.        COMPUWARE ISPW TRAINING.
000400 DATE-WRITTEN.  JANUARY 24TH, 1996.
000500 DATE-COMPILED.
000600
000700********************************************************
000800* THIS PROGRAM IS A TRAINING PROGRAM
000900*      CALLED FROM    TPROG09
001000*      WITH COPYLIB   TCPYB09 (LINKAGE AREA)
001100* ======================================================
001200*  ISPW (TM)
001300*  COPYRIGHT (C) 1986-2016 COMPUWARE CORPORATION.
001400*  UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT
001500*  LAWS OF THE UNITED STATES.
001600*
001700* ======================================================
001800*                   MODIFICATION  LOG
001900*
002000*  DD/MM/YY  PROGRAMMER  CHANGES
002100*  ********  **********  *******
002200*  96/01/24  ISPW        NEW PROGRAM
002300* ======================================================
002400 ENVIRONMENT DIVISION.
002500 CONFIGURATION SECTION.
002600 SOURCE-COMPUTER. IBM-370.
002700 OBJECT-COMPUTER. IBM-370.
002800
002900 INPUT-OUTPUT SECTION.
003000 FILE-CONTROL.
003100
003200********************************************************
003300*  FILES USED:
003400*   INPUT   JUST SOME DUMMY DATA TO READ IN
003500********************************************************
003600     SELECT INFILE  ASSIGN UT-S-INPUT
003700       ORGANIZATION IS SEQUENTIAL
003800       ACCESS IS SEQUENTIAL.
003900
004000
004100 DATA DIVISION.
004200
004300 FILE SECTION.
004400
004500 FD  INFILE
004600     LABEL RECORDS OMITTED
004700     BLOCK CONTAINS 0 RECORDS
004800     RECORDING MODE IS F
004900     DATA RECORD IS INPUT-REC.
005000
005100 01  INPUT-REC         PIC X(80).
005200
005300 WORKING-STORAGE SECTION.
005400
005500 01   INFILE-OPEN-FLAG     PIC X(1) VALUE 'N'.
005600      88 INFILE-OPEN       VALUE 'Y'.
005700
005800 LINKAGE SECTION.
005900********************************************************
006000**** A COPY MEMBER FOR THE LINKAGE AREA
006100********************************************************
006200 COPY TCPYB09.
006300
006400 PROCEDURE DIVISION USING PASS-ME-AROUND.
006500
006600 00000-MAIN-PROCEDURE.
006700
006800     IF NOT INFILE-OPEN THEN
006900        MOVE 'Y' TO INFILE-OPEN-FLAG
007000        MOVE 'N' TO INFILE-EOF-FLAG
007100        OPEN INPUT INFILE.
007200
007300     MOVE SPACES TO INCOMING-DATA.
007400
007500     IF ACTION-READ THEN
007600        PERFORM GET-ME-A-RECORD THRU GET-ME-A-RECORD-X
007700        UNTIL INFILE-EOF OR KEEPER.
007800
007900     IF ACTION-CLOSE THEN
008000        CLOSE INFILE.
008100
008200     GOBACK.
008300
008400 GET-ME-A-RECORD.
008500     READ INFILE AT END MOVE 'Y' TO INFILE-EOF-FLAG.
008600     IF NOT INFILE-EOF MOVE INPUT-REC TO INCOMING-DATA.
008700 GET-ME-A-RECORD-X.
008800     EXIT.[/INST]{
  "id": "BR-001",
  "description": "When reading from a file, if the Action-Read flag is turned on, the program will continue to read all records from the file until the end of file is reached or the user presses a key on a terminal. ",
  "condition": "ACTION-READ = Y",
  "output": {
    "read": "perform Get-Me-A-Record until End of File or Keeper"
  }
},
{
  "id": "BR-002",
  "description": "When reading from a file, if the Action-Close flag is turned on, the program will close the input file.",
  "condition": "ACTION-CLOSE  = Y",
  "output": {
    "close": "Close Input File"
  }
},
{
  "id": "BR-003",
  "description": "If the INFILE-OPEN flag is not turned on, the program turns it on, sets the INFILE-EOF flag to not end of file and opens the input file.",
  "condition": "NOT INFILE-OPEN",
  "output": {
    "open": "set INFILE-OPEN-FLAG to Y, set INFILE-EOF-FLAG to N, OPEN INPUT INFILE"
  }
}[INST]000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID.    TSUBR10.
000300 AUTHOR.        COMPUWARE ISPW TRAINING.
000400 DATE-WRITTEN.  JANUARY 24TH, 1996.
000500 DATE-COMPILED.
000600
000700********************************************************
000800* THIS PROGRAM IS A TRAINING PROGRAM
000900*      CALLED FROM    TPROG10
001000*      WITH COPYLIB   TCPYB10 (LINKAGE AREA)
001100* ======================================================
001200*  ISPW (TM)
001300*  COPYRIGHT (C) 1986-2016 COMPUWARE CORPORATION.
001400*  UNPUBLISHED RIGHTS RESERVED UNDER THE COPYRIGHT
001500*  LAWS OF THE UNITED STATES.
001600*
001700* ======================================================
001800*                   MODIFICATION  LOG
001900*
002000*  DD/MM/YY  PROGRAMMER  CHANGES
002100*  ********  **********  *******
002200*  96/01/24  ISPW        NEW PROGRAM
002300* ======================================================
002400 ENVIRONMENT DIVISION.
002500 CONFIGURATION SECTION.
002600 SOURCE-COMPUTER. IBM-370.
002700 OBJECT-COMPUTER. IBM-370.
002800
002900 INPUT-OUTPUT SECTION.
003000 FILE-CONTROL.
003100
003200********************************************************
003300*  FILES USED:
003400*   INPUT   JUST SOME DUMMY DATA TO READ IN
003500********************************************************
003600     SELECT INFILE  ASSIGN UT-S-INPUT
003700       ORGANIZATION IS SEQUENTIAL
003800       ACCESS IS SEQUENTIAL.
003900
004000
004100 DATA DIVISION.
004200
004300 FILE SECTION.
004400
004500 FD  INFILE
004600     LABEL RECORDS OMITTED
004700     BLOCK CONTAINS 0 RECORDS
004800     RECORDING MODE IS F
004900     DATA RECORD IS INPUT-REC.
005000
005100 01  INPUT-REC         PIC X(80).
005200
005300 WORKING-STORAGE SECTION.
005400
005500 01   INFILE-OPEN-FLAG     PIC X(1) VALUE 'N'.
005600      88 INFILE-OPEN       VALUE 'Y'.
005700
005800 LINKAGE SECTION.
005900********************************************************
006000**** A COPY MEMBER FOR THE LINKAGE AREA
006100********************************************************
006200 COPY TCPYB10.
006300
006400 PROCEDURE DIVISION USING PASS-ME-AROUND.
006500
006600 00000-MAIN-PROCEDURE.
006700
006800     IF NOT INFILE-OPEN THEN
006900        MOVE 'Y' TO INFILE-OPEN-FLAG
007000        MOVE 'N' TO INFILE-EOF-FLAG
007100        OPEN INPUT INFILE.
007200
007300     MOVE SPACES TO INCOMING-DATA.
007400
007500     IF ACTION-READ THEN
007600        PERFORM GET-ME-A-RECORD THRU GET-ME-A-RECORD-X
007700        UNTIL INFILE-EOF OR KEEPER.
007800
007900     IF ACTION-CLOSE THEN
008000        CLOSE INFILE.
008100
008200     GOBACK.
008300
008400 GET-ME-A-RECORD.
008500     READ INFILE AT END MOVE 'Y' TO INFILE-EOF-FLAG.
008600     IF NOT INFILE-EOF MOVE INPUT-REC TO INCOMING-DATA.
008700 GET-ME-A-RECORD-X.
008800     EXIT.[/INST]{
  "id": "BR-001",
  "description": "INFILE-EOF-FLAG is set to Y if the end of the INFILE file is reached.",
  "condition": "IF NOT INFILE-EOF",
  "output": {
    "true": "System exits the loop",
    "false": "System continues reading INFILE"
  }
}[INST]identification division.
function-id. c_isvaliddate.
data division.
working-storage section.
01  ft_year            usage   signed-short.
01  ft_month           usage unsigned-short.
01  ft_day             usage unsigned-short.
01  isvalid            usage   signed-int.
    88  notvalid value 0.
linkage section.
01  ivd_year            usage   signed-short.
01  ivd_month           usage unsigned-short.
01  ivd_day_of_month    usage unsigned-short.
01  ivd_valid           pic x.
    88  ivd_is_valid_date       value 'Y'.
    88  ivd_is_not_valid_date   value 'N'.
procedure division using ivd_year ivd_month ivd_day_of_month returning ivd_valid.
0100-main.
    move ivd_year to ft_year.
    move ivd_month to ft_month.
    move ivd_day_of_month to ft_day.
    call 'du_isvaliddate' using by value ft_year by value ft_month by value ft_day returning isvalid.
    if notvalid
        move 'N' to ivd_valid
    else
        move 'Y' to ivd_valid
    end-if.
    goback.
end function c_isvaliddate.
identification division.
function-id. c_fieldedtolinear.
data division.
working-storage section.
01  isvalid               usage   signed-int.
    88  notvalid value 0.
linkage section.
01  ftl_fieldeddate.
    05 year       sync usage   signed-short.
    05 month      sync usage unsigned-short.
    05 dayofweek  sync usage unsigned-short.
    05 dayofmonth sync usage unsigned-short.
    05 dayofyear  sync usage unsigned-short.
01  result.
    05  ftl_lineardate       usage   signed-int.
    05  ftl_bool             pic x.
        88  is_valid       value 'Y'.
        88  is_not_valid   value 'N'.
procedure division using ftl_fieldeddate returning result.
0100-main.
    call 'du_fieldedtolinear' using by reference ftl_fieldeddate by reference ftl_lineardate returning isvalid.
    if not notvalid
        move 'Y' to ftl_bool
    else
        move 'N' to ftl_bool
    end-if
    goback.
end function c_fieldedtolinear.
identification division.
function-id. c_lineartofielded.
data division.
working-storage section.
01  isvalid               usage   signed-int.
    88  notvalid value 0.
linkage section.
01  ltf_lineardate       usage   signed-int.
01  result.
    05  ltf_fieldeddate.
        10 year       sync usage   signed-short.
        10 month      sync usage unsigned-short.
        10 dayofweek  sync usage unsigned-short.
        10 dayofmonth sync usage unsigned-short.
        10 dayofyear  sync usage unsigned-short.
    05  ltf_bool           pic x.
        88  is_valid       value 'Y'.
        88  is_not_valid   value 'N'.
procedure division using ltf_lineardate returning result.
0100-main.
    call 'du_lineartofielded' using by value ltf_lineardate by reference ltf_fieldeddate returning isvalid.
    if not notvalid
        move 'Y' to ltf_bool
    else
        move 'N' to ltf_bool
    end-if.
    goback.
end function c_lineartofielded.
identification division.
function-id. c_newyear.
data division.
working-storage section.
01  isvalid               usage   signed-int.
    88  notvalid value 0.
linkage section.
01  ny_year             usage   signed-short.
01  results.
    05  ny_lineardate       usage   signed-int.
    05  ny_bool              pic x.
        88  is_valid       value 'Y'.
        88  is_not_valid   value 'N'.
procedure division using ny_year returning results.
0100-main.
    call 'du_newyear' using by value ny_year by reference ny_lineardate returning isvalid.
    if not notvalid
        move 'Y' to ny_bool
    else
        move 'N' to ny_bool
    end-if.
    goback.
end function c_newyear.
identification division.
function-id. c_yearend.
data division.
working-storage section.
01  isvalid               usage   signed-int.
    88  notvalid value 0.
linkage section.
01  ye_year             usage   signed-short.
01  result.
    05  ye_lineardate       usage   signed-int.
    05  ye_bool              pic x.
        88  is_valid       value 'Y'.
        88  is_not_valid   value 'N'.
procedure division using ye_year returning result.
0100-main.
    call 'du_yearend' using by value ye_year by reference ye_lineardate returning isvalid.
    if not notvalid
        move 'Y' to ye_bool
    else
        move 'N' to ye_bool
    end-if.
    goback.
end function c_yearend.
identification division.
function-id. c_dayofweek.
data division.
working-storage section.
01  isvalid               usage   signed-int.
    88  notvalid value 0.
linkage section.
01  ld                  usage   signed-int.
01  results.
    05  dayofweek           usage   unsigned-short.
    05  bool              pic x.
        88  is_valid       value 'Y'.
        88  is_not_valid   value 'N'.
procedure division using ld returning results.
0100-main.
    call 'du_dayofweek' using by value ld by reference dayofweek returning isvalid.
    if not notvalid
        move 'Y' to bool
    else
        move 'N' to bool
    end-if.
    goback.
end function c_dayofweek.
identification division.
function-id. c_kdayonorbefore.
data division.
working-storage section.
01  isvalid               usage   signed-int.
    88  notvalid value 0.
linkage section.
01  k                   usage   unsigned-short.
01  ld-max              usage   signed-int.
01  results.
    05  ld                  usage   signed-int.
    05  bool              pic x.
        88  is_valid       value 'Y'.
        88  is_not_valid   value 'N'.
procedure division using k ld-max returning results.
0100-main.
    call 'du_kdayonorbefore' using by value k ld-max by reference ld returning isvalid.
    if not notvalid
        move 'Y' to bool
    else
        move 'N' to bool
    end-if.
    goback.
end function c_kdayonorbefore.
[/INST]{
  "id": "BR-001",
  "description": "A date is valid if it is in the future.",
  "condition": "DATE >",
  "output": {
    "valid": "DATE is valid",
    "invalid": "DATE is invalid"
  }
}[INST]identification division.
function-id. gregorian_to_linear.
environment division.
configuration section.
repository.
    function isleapyear
    function floor-div
    function all intrinsic.
data division.
working-storage section.
01  fdm-x   pic s9(8) comp-5.
01  c4      pic s9(8) comp-5 value 4.
01  c12     pic s9(8) comp-5 value 12.
01  c100    pic s9(8) comp-5 value 100.
01  c400    pic s9(8) comp-5 value 400.
01  gtl-year-less-1  pic s9(5) comp-5.
01  gtl-temp-days    pic 9999  comp-5.
linkage section.
01  gtl-year         pic s9(5) comp-5.
01  gtl-month        pic 99    comp-5.
01  gtl-day-of-month pic 99    comp-5.
01  gtl-linear       pic s9(8) comp-5.
procedure division using gtl-year gtl-month gtl-day-of-month returning gtl-linear.
0100-main.
    subtract 1 from gtl-year giving gtl-year-less-1.
    multiply gtl-year-less-1 by 365 giving gtl-linear.
    move gtl-year-less-1 to fdm-x.
    add floor-div(fdm-x, c4) to gtl-linear.
    subtract floor-div(fdm-x, c100) from gtl-linear.
    add floor-div(fdm-x, c400) to gtl-linear.
    multiply 367 by gtl-month giving gtl-temp-days.
    subtract 362 from gtl-temp-days giving fdm-x.
    add floor-div(fdm-x, c12) to gtl-linear.
    add gtl-day-of-month to gtl-linear.
    if gtl-month > 2
        if isleapyear(gtl-year) = 'Y'
            subtract 1 from gtl-linear
        else
            subtract 2 from gtl-linear
        end-if
    end-if.
    goback.
end function gregorian_to_linear.
identification division.
function-id. fielded_to_linear.
environment division.
configuration section.
repository.
    function gregorian_to_linear
    function all intrinsic.
data division.
linkage section.
01  year         pic s9(5) comp-5.
01  month        pic 99    comp-5.
01  dom          pic 99    comp-5.
01  linear       pic s9(8) comp-5.
procedure division using year month dom returning linear.
0100-main.
    subtract 584389 from gregorian_to_linear(year, month, dom) giving linear.
    goback.
end function fielded_to_linear.
[/INST]{
  "id": "BR-002",
  "description": "For a given date Y-M-D '\\n' M = 1 or 2(ie Jan or Feb), a leap year is one where Y is divisible by 4 but not by 100, and for M = 1 or 2, a leap year is also one that is divisible by 400.",
  "condition": "(M = 1) OR (M = 2) AND Y MOD 4 = 0 AND Y MOD 100 NOT EQUAL TO 0, OR (M = 1) OR (M = 2) AND Y MOD 400 = 0",
  "output": {
    "isleapyear": "Y",
    "notisleapyear": "-"
  }
}[INST]identification division.
function-id. floor-div.
data division.
working-storage section.
01  fdm-tmp pic s9(8) comp-5.
linkage section.
01  fdm-x   pic s9(8) comp-5.
01  fdm-y   pic s9(8) comp-5.
01  fdm-div pic s9(8) comp-5.
procedure division using fdm-x fdm-y returning fdm-div.
0100-main.
    if fdm-x >= 0
        divide fdm-y into fdm-x giving fdm-div
    else
        add 1 to fdm-x giving fdm-tmp
        subtract fdm-y from fdm-tmp
        divide fdm-y into fdm-tmp giving fdm-div
    end-if.
    goback.
end function floor-div.
[/INST]{
  "id": "BR-001",
  "description": "Division without truncation.",
  "condition": "fdm-x >= 0",
  "output": {
    "positive": "divide fdm-y into fdm-x giving fdm-div"
  }
},
{
  "id": "BR-002",
  "description": "Division without truncation.",
  "condition": "fdm-x < 0",
  "output": {
    "negative": "add 1 to fdm-x giving fdm-tmp,\\nsubtract fdm-y from fdm-tmp,\\ndivide fdm-y into fdm-tmp giving fdm-div"
  }
}[INST]identification division.
function-id. floor-divmod.
data division.
working-storage section.
01  fdm-tmp pic s9(8) comp-5.
linkage section.
01  fdm-x   pic s9(8) comp-5.
01  fdm-y   pic s9(8) comp-5.
01  result.
    05  fdm-div pic s9(8) comp-5.
    05  fdm-mod pic s9(8) comp-5.
procedure division using fdm-x fdm-y returning result.
0100-main.
    if fdm-x >= 0
        divide fdm-y into fdm-x giving fdm-div remainder fdm-mod
    else
        add 1 to fdm-x giving fdm-tmp
        subtract fdm-y from fdm-tmp
        divide fdm-y into fdm-tmp giving fdm-div
            remainder fdm-mod
        add fdm-y to fdm-mod
        subtract 1 from fdm-mod
    end-if.
    goback.
end function floor-divmod.
[/INST]{
  "id": "BR-001",
  "description": "For negative numbers, the remainder is equal to \\n1 less than the remainder after the division of the negative of the number divided by the divisor.",
  "condition": "fdm-x < 0",
  "output": {
    "result": {
      "fdm-div": "negative of the quotient after dividing the negative of the number by the divisor",
      "fdm-mod": "1 less than the remainder after dividing the negative of the number by the divisor"
    },
    "steps": [
      "negate fdm-x",
      "calculate the division and remainder",
      "add the divisor to the remainder",
      "subtract 1 from the remainder"
    ]
  }
}[INST]identification division.
function-id. newyear.
environment division.
configuration section.
repository.
    function fielded_to_linear
    function all intrinsic.
data division.
working-storage section.
01  month           pic 99      comp-5 value 1.
01  dom             pic 99      comp-5 value 1.
linkage section.
01  ny-year              pic s9(5)   comp-5.
01  results.
    05  ny-lineardate        pic s9(8)   comp-5.
    05  ny-success           pic x.
procedure division using ny-year returning results.
0100-main.
    move 'N' to ny-success.
    if (-27256 <= ny-year) and (ny-year <= 30826)
        move fielded_to_linear(ny-year, month, dom) to ny-lineardate
        move 'Y' to ny-success
    end-if.
    goback.
end function newyear.
identification division.
function-id. yearend.
environment division.
configuration section.
repository.
    function fielded_to_linear
    function all intrinsic.
data division.
working-storage section.
01  month           pic 99      comp-5 value 12.
01  dom             pic 99      comp-5 value 31.
linkage section.
01  ye-year              pic s9(5)   comp-5.
01  results.
    05  ye-lineardate        pic s9(8)   comp-5.
    05  ye-success           pic x.
procedure division using ye-year returning results.
0100-main.
    move 'N' to ye-success
    if (-27256 <= ye-year) and (ye-year <= 30826)
        move fielded_to_linear(ye-year, month, dom) to ye-lineardate
        move 'Y' to ye-success
    end-if.
    goback.
end function yearend.
identification division.
function-id. dayofweek.
environment division.
configuration section.
repository.
    function floor-divmod
    function all intrinsic.
data division.
working-storage section.
01  ld2                    signed-int.
01  c7           pic s9(8) comp-5 value 7.
01  divmod.
    05  d            pic s9(8) comp-5.
    05  m            pic s9(8) comp-5.
linkage section.
01  ld                 usage   signed-int.
01  results.
    05  dow            unsigned-short.
    05  dow-success    pic x.
procedure division using ld returning results.
0100-main.
    add 1 to ld giving ld2.
    move floor-divmod(ld2, c7) to divmod.
    move m to dow.
    move 'Y' to dow-success
    goback.
end function dayofweek.
identification division.
function-id. kdayonorbefore.
environment division.
configuration section.
repository.
    function floor-divmod
    function all intrinsic.
data division.
working-storage section.
01  ld2-max                signed-int.
01  c7           pic s9(8) comp-5 value 7.
01  divmod.
    05  d            pic s9(8) comp-5.
    05  m            pic s9(8) comp-5.
linkage section.
01  k                   usage   unsigned-short.
01  ld-max              usage   signed-int.
01  result.
    05  ld                  usage   signed-int.
    05  bool              pic x.
procedure division using k ld-max returning result.
0100-main.
    compute ld2-max = ld-max - k + 1.
    move floor-divmod(ld2-max, c7) to divmod.
    subtract m from ld-max giving ld.
    move 'Y' to bool.
    goback.
end function kdayonorbefore.
[/INST]{
  "id": "BR-001",
  "description": "The linear date is calculated by calling the 'fielded_to_linear' function with the year, month, and day.",
  "condition": "month = 1 and dom = 1",
  "output": {
    "linear_date": "ny-lineardate"
  }
},
{
  "id": "BR-002",
  "description": "The linear date is calculated by calling the 'fielded_to_linear' function with the year, month, and day.",
  "condition": "month = 12 and dom = 31",
  "output": {
    "linear_date": "ye-lineardate"
  }
},
{
  "id": "BR-003",
  "description": "The day of the week is calculated by dividing the linear date by 7 and taking the remainder.",
  "condition": null,
  "output": {
    "day_of_week": "dow"
  }
},
{
  "id": "BR-004",
  "description": "A given linear date is k or fewer days before another linear date if the remainder of dividing the difference between the two dates by 7 is less than or equal to k.",
  "condition": null,
  "output": {
    "result": "bool"
  }
}[INST]identification division.
function-id. isleapyear.
environment division.
configuration section.
repository.
    function floor-divmod
    function all intrinsic.
data division.
working-storage section.
01  fdm-x   pic s9(8) comp-5.
01  c4      pic s9(8) comp-5 value 4.
01  c400    pic s9(8) comp-5 value 400.
01  divmod.
    05  fdm-div pic s9(8) comp-5.
    05  fdm-mod pic s9(8) comp-5.
linkage section.
01  ily-year    pic s9(5) comp-5.
01  ily-leap    pic x.
    88  ily-is-leap-year    value 'Y'.
    88  ily-not-leap-year   value 'N'.
procedure division using ily-year returning ily-leap.
0100-main.
    move ily-year to fdm-x.
    move floor-divmod(fdm-x, c4) to divmod.
    if fdm-mod is not zero
        move 'N' to ily-leap
    else
        move floor-divmod(fdm-x, c400) to divmod
        if (fdm-mod = 100) or (fdm-mod = 200) or (fdm-mod = 300)
            move 'N' to ily-leap
        else
            move 'Y' to ily-leap
        end-if
    end-if.
    goback.
end function isleapyear.
[/INST]{
  "id": "BR-001",  "description": "A year is a leap year if it is divisible by 4 but not by 100, unless it is also divisible by 400.",
  "condition": "ily-year DIV 4",
  "output": {
    "leap-year": "ily-is-leap-year",
    "not-leap-year": "ily-not-leap-year"
  }
}[INST]identification division.
function-id. isvaliddate.
environment division.
configuration section.
repository.
    function isleapyear
    function all intrinsic.
data division.
working-storage section.
01  ivd-days-in-month-values.
    05  filler          pic 99 comp-5 value 31.
    05  filler          pic 99 comp-5 value 29.
    05  filler          pic 99 comp-5 value 31.
    05  filler          pic 99 comp-5 value 30.
    05  filler          pic 99 comp-5 value 31.
    05  filler          pic 99 comp-5 value 30.
    05  filler          pic 99 comp-5 value 31.
    05  filler          pic 99 comp-5 value 31.
    05  filler          pic 99 comp-5 value 30.
    05  filler          pic 99 comp-5 value 31.
    05  filler          pic 99 comp-5 value 30.
    05  filler          pic 99 comp-5 value 31.
01  ivd-days-in-month-table redefines ivd-days-in-month-values.
    05  ivd-days-in-month   occurs 12 times pic 99 comp-5.
linkage section.
01  ivd-year            pic s9(5) comp-5.
01  ivd-month           pic 99    comp-5.
01  ivd-day-of-month    pic 99    comp-5.
01  ivd-valid           pic x.
    88  ivd-is-valid-date       value 'Y'.
    88  ivd-is-not-valid-date   value 'N'.
procedure division using ivd-year ivd-month ivd-day-of-month returning ivd-valid.
0100-main.
    move 'N' to ivd-valid.
    if (   -27256 <= ivd-year) and (ivd-year <= 30826)
       and (1 <= ivd-month) and (ivd-month <= 12)
       and (1 <= ivd-day-of-month)
       and (ivd-day-of-month <= ivd-days-in-month(ivd-month))
        if (ivd-month not equal 2) or (ivd-day-of-month not equal 29) or (isleapyear(ivd-year) = 'Y')
            move 'Y' to ivd-valid
        end-if
    end-if.
    goback.
end function isvaliddate.
[/INST]{
  "id": "BR-001",
  "description": "A date is valid only if the year must be between 27256 BC and 30826 AD, the month must be between 1 and 12, the day of the month must be between 1 and the number of days in the month, and if it is February 29, the year must be a leap year.",
  "condition": "(-27256 <= ivd-year) and (ivd-year <= 30826)\nand (1 <= ivd-month) and (ivd-month <= 12)\nand (1 <= ivd-day-of-month)\nand (ivd-day-of-month <= ivd-days-in-month(ivd-month))\nIf (ivd-month not equal 2) or (ivd-day-of-month not equal 29) or (isleapyear(ivd-year) = 'Y')\nmove 'Y' to ivd-valid\nend-if",
  "output": {
    "valid": "ivd-valid = 'Y'",
    "invalid": "ivd-valid = 'N'"
  }
}[INST]identification division.
function-id. linear_to_gregorian.
environment division.
configuration section.
repository.
    function isleapyear
    function floor-divmod
    function gregorian_to_linear
    function all intrinsic.
data division.
working-storage section.
01  ltg-d0                pic s9(8) comp-5.
01  divmod-400.
    05  ltg-n400          pic s9(8) comp-5.
    05  ltg-d1            pic s9(8) comp-5.
01  divmod-100.
    05  ltg-n100          pic s9(8) comp-5.
    05  ltg-d2            pic s9(8) comp-5.
01  divmod-4.
    05  ltg-n4            pic s9(8) comp-5.
    05  ltg-d3            pic s9(8) comp-5.
01  divmod-1.
    05  ltg-n1            pic s9(8) comp-5.
    05  ltg-d4            pic s9(8) comp-5.
01  ltg-jan01         pic s9(8) comp-5.
01  ltg-mar01         pic s9(8) comp-5.
01  ltg-correction    pic 9     comp-5.
01  ltg-prior-days    pic s9(8) comp-5.
01  ltg-temp          pic s9(8) comp-5.
01  ltg-1st           pic s9(8) comp-5.
01  ltg-cache-year    pic s9(5) comp-5  value -27257.
01  ltg-cache-jan01   pic s9(8) comp-5.
01  ltg-cache-mar01   pic s9(8) comp-5.
01  c146097      pic s9(8) comp-5 value 146097.
01  c36524       pic s9(8) comp-5 value 36524.
01  c1461        pic s9(8) comp-5 value 1461.
01  c365         pic s9(8) comp-5 value 365.
01  c7           pic s9(8) comp-5 value 7.
01  divmod.
    05  fdm-div pic s9(8) comp-5.
    05  fdm-mod pic s9(8) comp-5.
linkage section.
01  ltg-linear        pic s9(8) comp-5.
01  ltg-fielded.
    05  ltg-year          pic s9(5) comp-5.
    05  ltg-month         pic 99    comp-5.
    05  ltg-day-of-month  pic 99    comp-5.
    05  ltg-day-of-year   pic 999   comp-5.
    05  ltg-day-of-week   pic 9     comp-5.
procedure division using ltg-linear returning ltg-fielded.
0100-main.
    subtract 1 from ltg-linear giving ltg-d0.
    move floor-divmod(ltg-d0, c146097) to divmod-400.
    move floor-divmod(ltg-d1, c36524) to divmod-100.
    move floor-divmod(ltg-d2, c1461) to divmod-4.
    move floor-divmod(ltg-d3, c365) to divmod-1.
    compute ltg-year = 400 * ltg-n400 + 100 * ltg-n100
                     + 4 * ltg-n4 + ltg-n1.
    if (ltg-n100 is not equal 4) and (ltg-n1 is not equal 4)
        add 1 to ltg-year
    end-if.
    move 1 to ltg-day-of-month.
    if ltg-year is equal to ltg-cache-year
        move ltg-cache-jan01 to ltg-jan01
        move ltg-cache-mar01 to ltg-mar01
    else
        move 1 to ltg-month
        move gregorian_to_linear(ltg-year, ltg-month, ltg-day-of-month) to ltg-jan01
        move 3 to ltg-month
        move gregorian_to_linear(ltg-year, ltg-month, ltg-day-of-month) to ltg-mar01
        move ltg-year  to ltg-cache-year
        move ltg-jan01 to ltg-cache-jan01
        move ltg-mar01 to ltg-cache-mar01
    end-if.
    if (ltg-linear  < ltg-mar01)
        move 0 to ltg-correction
    else
        if isleapyear(ltg-year) = 'Y'
            move 1 to ltg-correction
        else
            move 2 to ltg-correction
        end-if
    end-if.
    subtract ltg-jan01 from ltg-linear giving ltg-prior-days.
    add 1 to ltg-prior-days giving ltg-day-of-year.
    compute ltg-temp =
        (12 * (ltg-prior-days + ltg-correction) + 373) / 367.
    move ltg-temp to ltg-month.
    move gregorian_to_linear(ltg-year, ltg-month, ltg-day-of-month) to ltg-1st.
    compute ltg-day-of-month = ltg-linear - ltg-1st + 1.
    move floor-divmod(ltg-linear, c7) to divmod.
    move fdm-mod to ltg-day-of-week.
    goback.
end function linear_to_gregorian.
identification division.
function-id. linear_to_fielded.
environment division.
configuration section.
repository.
     function linear_to_gregorian
     function all intrinsic.
data division.
linkage section.
01  linear           pic s9(8) comp-5.
01  fielded.
    05  year             pic s9(5) comp-5.
    05  month            pic 99    comp-5.
    05  dom              pic 99    comp-5.
    05  doy              pic 999   comp-5.
    05  dow              pic 9     comp-5.
procedure division using linear returning fielded.
0100-main.
    move linear_to_gregorian(584389 + linear) to fielded.
    goback.
end function linear_to_fielded.
[/INST]{
  "id": "BR-002",
  "description": "A linear date of 584389 or after is converted to a fielded date in the Gregorian calendar.",
  "condition": "linear >= 584389",
  "output": {
    "gregorian": "fielded"
  }
}[INST]identification division.
program-id. main.
environment division.
configuration section.
repository.
    function dayofweek
    function fielded_to_linear
    function isvaliddate
    function linear_to_fielded
    function newyear
    function yearend
    function all intrinsic.
input-output section.
file-control.
    select output-file assign to 'dates.txt'
        organization is line sequential
        access is sequential.
data division.
file section.
fd  output-file
    block contains 50 records.
01  output-record.
    05  or-year     pic +99999.
    05  filler      pic x.
    05  or-month    pic 99.
    05  filler      pic x.
    05  or-dom      pic 99.
    05  filler      pic x.
    05  or-doy      pic 999.
    05  filler      pic x.
    05  or-dow      pic 9.
    05  filler      pic x.
    05  or-linear   pic +9(8).
working-storage section.
01  working-record.
    05  wr-year     pic +99999.
    05  filler      pic x       value '-'.
    05  wr-month    pic 99.
    05  filler      pic x       value '-'.
    05  wr-dom      pic 99.
    05  filler      pic x       value ' '.
    05  wr-doy      pic 999.
    05  filler      pic x       value ' '.
    05  wr-dow      pic 9.
    05  filler      pic x       value ' '.
    05  wr-linear   pic +9(8).
01  fielded-date.
    05  year        pic s9(5)   comp-5.
    05  month       pic 99      comp-5.
    05  dom         pic 99      comp-5.
    05  doy         pic 999     comp-5.
    05  dow         pic 9       comp-5.
01  bool            pic x.
    88  is-valid    value 'Y'.
    88  not-valid   value 'N'.
01  linear-date     pic s9(8)   comp-5.
01  ld              usage   signed-int.
01  cld             usage   signed-int.
01  ld_today        usage   signed-int.
01  cld_today       usage   signed-int.
01  ld_lower        usage   signed-int.
01  ld_upper        usage   signed-int.
01  ny-result.
    05  ld-newyear  signed-int.
    05  ny-success  pic x.
01  ye-result.
    05  ld-yearend  signed-int.
    05  ye-success  pic x.
01  dow-result.
    05  dow2         unsigned-short.
    05  dow-success  pic x.
01  time-stamp.
    05  ts-date.
        10  ts-year         pic 9999.
        10  ts-month        pic 99.
        10  ts-dom          pic 99.
    05  ts-date-3 redefines ts-date pic 9(8).
    05  ts-time.
        10  ts-hours        pic 99.
        10  ts-minutes      pic 99.
        10  ts-seconds      pic 99v99.
    05  ts-timezone.
        10  ts-tz-sign      pic x.
            88 tz-positive  value '+'.
            88 tz-negative  value '-'.
        10  ts-tz-hours     pic 99.
        10  ts-tz-minutes   pic 99.
01  ts-date-2.
    05  ts-year-2         pic 9999.
    05  ts-month-2        pic 99.
    05  ts-dom-2          pic 99.
01  julian_date.
    05  jd_year           pic 9999.
    05  jd_doy            pic 999.
procedure division.
0000-start-here.
    open output output-file.
    move function current-date to time-stamp.
    move ts-year  to year.
    move ts-month to month.
    move ts-dom   to dom.
    if isvaliddate(year, month, dom) = 'N'
        display time-stamp
        display year ' ' month ' ' dom ' *not valid*'
        go to 9000-end
    end-if.
    move fielded_to_linear(year, month, dom) to ld_today.
    move function integer-of-date(ts-date-3) to cld_today.
    if ld_today <> cld_today - 1
        display 'Does not agree with function integer-of-date'
        display ld_today
        display ts-date-3
        display cld_today
    end-if.
    subtract 200000 from ld_today giving ld_lower.
    add 200000 to ld_today giving ld_upper.
    perform varying ld from ld_lower by 1 until ld > ld_upper
        move ld to linear-date
        move linear_to_fielded(linear-date) to fielded-date
        move year to wr-year
        move month to wr-month
        move doy to wr-doy
        move dom to wr-dom
        move dow to wr-dow
        move linear-date to wr-linear
        write output-record from working-record
        if 0 < ld
            add 1 to ld giving cld
            move function date-of-integer(cld) to ts-date-2
            move year to ts-year
            move month to ts-month
            move dom to ts-dom
            if ts-year-2 <> ts-year or ts-month-2 <> ts-month or ts-dom-2 <> ts-dom
                display 'Does not agree with function date-of-integer'
                display cld
                display ts-date-2
                display ts-date
            end-if
            move function day-of-integer(cld) to julian_date
            if jd_doy <> doy
                display 'Does not agree with function day-of-integer'
                display ld_today
                display ts-date-3
                display cld_today
                display jd_doy
                display doy
            end-if
        end-if
        move dayofweek(ld) to dow-result
        if dow-success = 'N'
            display 'Day of week: ', ld, dow2, ' *not valid*'
            go to 9000-end
        end-if
        if dow not equal dow2
            display 'Day of week: ', ld, ' ', dow, ' ', dow2, ' does not agree'
            go to 9000-end
        end-if
        if month = 1 and dom = 1
            move newyear(year) to ny-result
            if ny-success = 'N'
                display year ' *not valid*'
                go to 9000-end
            end-if
            if ld-newyear not equal ld
                display 'New year: ', year, ' does not agree with ', ld-newyear
                go to 9000-end
            end-if
        end-if
        if month = 12 and dom = 31
            move yearend(year) to ye-result
            if ye-success = 'N'
                display year ' *not valid*'
                go to 9000-end
            end-if
            if ld-yearend not equal ld
                display 'Year end: ', year, ' does not agree with ', ld-yearend
                go to 9000-end
            end-if
        end-if
    end-perform.
9000-end.
    close output-file.
    goback.
end program main.
[/INST]{
  "id": "BR-001",
  "description": "A date is valid if the year is between 0001 and 9999, the month is between 01 and 12, and the day is between 01 and the number of days in the month.",
  "condition": "isvaliddate(year, month, dom) = 'Y'",
  "output": {
    "valid": "Date is valid",
    "invalid": "Date is not valid"
  }
}
{
  "id": "BR-002",
  "description": "The linear date is the number of days since the start of the Gregorian calendar.",
  "condition": null,
  "output": {
    "linear date": "The linear date is {linear-date}"
  }
}
{
  "id": "BR-003",
  "description": "The day of week is the number of the day in the week, with 1 being Sunday and 7 being Saturday.",
  "condition": "dayofweek(ld) = dow2",
  "output": {
    "day of week": "The day of week is {dow2}"
  }
}
{
  "id": "BR-004",
  "description": "The new year is the first day of the year.",
  "condition": "newyear(year) = ld-newyear",
  "output": {
    "new year": "The new year is {ld-newyear}"
  }
}
{
  "id": "BR-005",
  "description": "The year end is the last day of the year.",
  "condition": "yearend(year) = ld-yearend",
  "output": {
    "year end": "The year end is {ld-yearend}"
  }
}[INST]identification division.
program-id. main2.
environment division.
configuration section.
repository.
    function c_dayofweek
    function c_fieldedtolinear
    function c_isvaliddate
    function c_lineartofielded
    function c_newyear
    function c_yearend
    function all intrinsic.
input-output section.
file-control.
    select output-file assign to 'dates2.txt'
        organization is line sequential
        access is sequential.
data division.
file section.
fd  output-file
    block contains 50 records.
01  output-record.
    05  or-year     pic +99999.
    05  filler      pic x.
    05  or-month    pic 99.
    05  filler      pic x.
    05  or-dom      pic 99.
    05  filler      pic x.
    05  or-doy      pic 999.
    05  filler      pic x.
    05  or-dow      pic 9.
    05  filler      pic x.
    05  or-linear   pic +9(8).
working-storage section.
01  working-record.
    05  wr-year     pic +99999.
    05  filler      pic x       value '-'.
    05  wr-month    pic 99.
    05  filler      pic x       value '-'.
    05  wr-dom      pic 99.
    05  filler      pic x       value ' '.
    05  wr-doy      pic 999.
    05  filler      pic x       value ' '.
    05  wr-dow      pic 9.
    05  filler      pic x       value ' '.
    05  wr-linear   pic +9(8).
01  ltf-result.
    05  fieldeddate.
        10 year         sync usage   signed-short.
        10 month        sync usage unsigned-short.
        10 dow          sync usage unsigned-short.
        10 dom          sync usage unsigned-short.
        10 doy          sync usage unsigned-short.
    05  ltf-success     pic x.
01  ftl-result.
    05  ftl-ld          signed-int.
    05  ftl-success     pic x.
01  dow-result.
    05  dow2            unsigned-short.
    05  dow-success     pic x.
01  ye-result.
    05  ld-yearend      signed-int.
    05  ye-success      pic x.
01  ny-result.
    05  ld-newyear      signed-int.
    05  ny-success      pic x.
01  ld              usage   signed-int.
01  cld             usage   signed-int.
01  ld_today        usage   signed-int.
01  cld_today       usage   signed-int.
01  ld_lower        usage   signed-int.
01  ld_upper        usage   signed-int.
01  time-stamp.
    05  ts-date.
        10  ts-year         pic 9999.
        10  ts-month        pic 99.
        10  ts-dom          pic 99.
    05  ts-date-3 redefines ts-date pic 9(8).
    05  ts-time.
        10  ts-hours        pic 99.
        10  ts-minutes      pic 99.
        10  ts-seconds      pic 99v99.
    05  ts-timezone.
        10  ts-tz-sign      pic x.
            88 tz-positive  value '+'.
            88 tz-negative  value '-'.
        10  ts-tz-hours     pic 99.
        10  ts-tz-minutes   pic 99.
01  ts-date-2.
    05  ts-year-2         pic 9999.
    05  ts-month-2        pic 99.
    05  ts-dom-2          pic 99.
01  julian_date.
    05  jd_year           pic 9999.
    05  jd_doy            pic 999.
procedure division.
0000-start-here.
    open output output-file.
    move function current-date to time-stamp.
    move ts-year  to year.
    move ts-month to month.
    move ts-dom   to dom.
    if c_isvaliddate(year, month, dom) = 0
        display time-stamp
        display year ' ' month ' ' dom ' *not valid*'
        go to 9000-end
    end-if.
    move c_fieldedtolinear(fieldeddate) to ftl-result.
    if ftl-success = 'N'
        display year ' ' month ' ' dom ' ' '*not valid*'
        go to 9000-end
    end-if.
    move ftl-ld to ld_today.
    move function integer-of-date(ts-date-3) to cld_today.
    if ld_today <> cld_today - 1
        display 'Does not agree with function integer-of-date'
        display ld_today
        display ts-date-3
        display cld_today
    end-if.
    move function day-of-integer(cld_today) to julian_date.
    if jd_doy <> doy
        display 'Does not agree with function day-of-integer'
        display ld_today
        display ts-date-3
        display cld_today
        display jd_doy
        display doy
    end-if.
    subtract 200000 from ld_today giving ld_lower.
    add 200000 to ld_today giving ld_upper.
    perform varying ld from ld_lower by 1 until ld > ld_upper
        move c_lineartofielded(ld) to ltf-result
        if ltf-success = 'N'
            display ld ' *not valid*'
            go to 9000-end
        end-if
        move year to wr-year
        move month to wr-month
        move doy to wr-doy
        move dom to wr-dom
        move dow to wr-dow
        move ld to wr-linear
        write output-record from working-record
        if 0 < ld
            add 1 to ld giving cld
            move function date-of-integer(cld) to ts-date-2
            move year to ts-year
            move month to ts-month
            move dom to ts-dom
            if ts-year-2 <> ts-year or ts-month-2 <> ts-month or ts-dom-2 <> ts-dom
                display 'Does not agree with function date-of-integer'
                display cld
                display ts-date-2
                display ts-date
            end-if
            move function day-of-integer(cld) to julian_date
            if jd_doy <> doy
                display 'Does not agree with function day-of-integer'
                display ld_today
                display ts-date-3
                display cld_today
                display jd_doy
                display doy
            end-if
        end-if
        move c_dayofweek(ld) to dow-result
        if dow-success = 'N'
            display 'Day of week: ', ld, dow2, ' *not valid*'
            go to 9000-end
        end-if
        if dow not equal dow2
            display 'Day of week: ', ld, ' ', dow, ' ', dow2, ' does not agree'
            go to 9000-end
        end-if
        if month = 1 and dom = 1
            move c_newyear(year) to ny-result
            if ny-success = 'N'
                display year ' *not valid*'
                go to 9000-end
            end-if
            if ld-newyear not equal ld
                display 'New year: ', year, ' does not agree with ', ld-newyear
                go to 9000-end
            end-if
        end-if
        if month = 12 and dom = 31
            move c_yearend(year) to ye-result
            if ye-success = 'N'
                display year ' *not valid*'
                go to 9000-end
            end-if
            if ld-yearend not equal ld
                display 'Year end: ', year, ' does not agree with ', ld-yearend
                go to 9000-end
            end-if
        end-if
    end-perform.
9000-end.
    close output-file.
    goback.
end program main2.
[/INST]{
  "id": "BR-001",
  "description": "A valid date must be in the format 'YYYY-MM-DD'.",
  "condition": "c_isvaliddate(year, month, dom) = 0",
  "output": {
    "valid": null,
    "invalid": "*not valid*"
  }
}[INST]identification division.
program-id. testgen.
environment division.
data division.
working-storage section.
01  csvhandle       usage pointer.
01  filename        pic x(40).
01  buffer          pic x(8000).
01  bool            usage signed-int.
    88  success             value 0.
    88  failure             value -1.
procedure division.
001-open.
    string 'generated.csv' x'00' delimited by size into filename.
    call 'csvgen_createfile' using
        by reference csvhandle
        by reference filename
        by value 2
        returning bool.
    if success
        perform 004-genfile
        call 'csvgen_closefile' using
            by value csvhandle
            returning bool
        end-call
        if failure
            display 'Cannot close test.csv.'
        end-if
    else
        display 'Cannot create test.csv.'
    end-if.
    goback.
002-genfield1.
    string 'Foo' x'00' delimited by size into buffer.
    call 'csvgen_putfield' using
        by value     csvhandle
        by reference buffer
        returning bool
    end-call
    if failure
        display 'Cannot begin row.'
    end-if.
002-genfield2.
    string 'Bar,Baz' x'00' delimited by size into buffer.
    call 'csvgen_putfield' using
        by value     csvhandle
        by reference buffer
        returning bool
    end-call
    if failure
        display 'Cannot begin row.'
    end-if.
003-genline.
    call 'csvgen_beginrow' using
        by value     csvhandle
        returning bool
    end-call
    if failure
        display 'Cannot begin row.'
    end-if
    perform 002-genfield1
    perform 002-genfield2
    call 'csvgen_endrow' using
        by value     csvhandle
        returning bool
    end-call
    if failure
        display 'Cannot end row.'
    end-if.
004-genfile.
    perform 003-genline.
end program testgen.
[/INST]{
  "id": "BR-001",  "description": "A CSV file can be generated with given name and number of columns header.",
  "condition": "CALL 'csvgen_createfile'",
  "output": {
    "success": "CSV file is created",
    "failure": "Cannot create CSV file."
  }
},
{
  "id": "BR-002",  "description": "A field in a row in a CSV file can be generated with given value.",
  "condition": "CALL 'csvgen_putfield'",
  "output": {
    "success": "Field is added to row",
    "failure": "Cannot add field to row."
  }
},
{
  "id": "BR-003",  "description": "A row in a CSV file can be generated with given fields.",
  "condition": "CALL 'csvgen_beginrow' followed by CALL 'csvgen_endrow'",
  "output": {
    "success": "Row is added to CSV file",
    "failure": "Cannot add row to CSV file."
  }
}[INST]identification division.
program-id. testparser.
environment division.
data division.
file section.
working-storage section.
01  csvhandle       usage pointer.
01  bufptr          usage pointer.
01  filename        pic x(40).
01  buffer          pic x(8000) based.
01  bool            usage signed-int.
    88  success             value 0.
    88  failure             value -1.
01  csv_event       usage signed-int value 0.
    88  cpe_none           value 0.
    88  cpe_call_getfield  value 1.
    88  cpe_end_of_record  value 2.
    88  cpe_end_of_file    value 3.
    88  cpe_invalid        value 4.
01  fieldnum        usage signed-int.
01  ws-field        pic x(80).
procedure division.
001-open.
    string 'example.csv' x'00' delimited by size
        into filename.
    call 'csvparser_openfile' using
        by reference csvhandle
        by reference filename
        returning bool.
    if success
        perform 002-getline
        if not cpe_invalid and not cpe_end_of_file
            perform 003-parsefile
        end-if
        call 'csvparser_closefile' using
            by value csvhandle
            returning bool
        if cpe_invalid
            display 'CSV file is not valid.'
        else
            if not cpe_end_of_file or failure
                display 'Unexpected error.'
            else
                display 'Success.'
            end-if
        end-if
    else
        display 'Cannot open CSV file.'
    end-if.
    goback.
002-getline.
    move 0 to fieldnum.
    perform until failure or cpe_end_of_record or cpe_end_of_file or cpe_invalid
        call 'csvparser_getevent' using
            by value     csvhandle
            by reference csv_event
            returning bool
        end-call
        if success and cpe_call_getfield
            call 'csvparser_getfield' using
                by value      csvhandle
                by reference  bufptr
                returning bool
            end-call
            set address of buffer to bufptr
            add 1 to fieldnum
            unstring buffer delimited by x'00' into ws-field
            display ws-field
        end-if
    end-perform.
    if success and cpe_end_of_record
        call 'csvparser_getevent' using
            by value     csvhandle
            by reference csv_event
            returning bool
        end-call
    end-if.
003-parsefile.
    perform 002-getline.
    perform until failure or fieldnum <> 5 or cpe_invalid
        perform 002-getline
    end-perform.
end program testparser.
[/INST]{
  "id": "BR-001",
  "description": "A CSV file has a valid format if the following conditions are true:\\n1. The file is delimited by the ASCII Null character (x'00').\\n2. The last record in the file must have a carriage return and a line feed (CRLF).",
  "condition": "The CSV file is delimited by x'00' and the last record has a CRLF",
  "output": {
    "valid": "Success.",
    "invalid": "CSV file is not valid."
  }
}[INST]identification division.
program-id. today.
environment division.
configuration section.
repository.
    function fielded_to_linear
    function isvaliddate
    function linear_to_fielded
    function all intrinsic.
data division.
working-storage section.
01  output-line-1.
    05  ol1-year    pic +99999.
    05  filler      pic x       value '-'.
    05  ol1-month   pic 99.
    05  filler      pic x       value '-'.
    05  ol1-dom     pic 99.
    05  filler      pic x       value ' '.
    05  ol1-doy     pic 999.
    05  filler      pic x       value ' '.
    05  ol1-dow     pic 9.
    05  filler      pic x       value ' '.
    05  ol1-linear  pic +9(8).
    05  filler      pic x       value ' '.
    05  ol1-time.
        10  ol1-hours       pic 99.
        10  filler          pic x       value ':'.
        10  ol1-minutes     pic 99.
        10  filler          pic x       value ':'.
        10  ol1-seconds     pic 99.99.
    05  filler      pic x       value ' '.
    05  ol1-timezone.
        10  ol1-tz-sign     pic x.
        10  ol1-tz-hours    pic 99.
        10  filler          pic x       value ':'.
        10  ol1-tz-minutes  pic 99.
01  output-line-2.
    05  ol2-dayname    pic x(3).
    05  filler         pic x.
    05  ol2-monthname  pic x(3).
    05  filler         pic x.
    05  ol2-dayofmonth pic 9(2).
    05  filler         pic x.
    05  ol2-time.
        10  ol2-hours       pic 99.
        10  filler          pic x       value ':'.
        10  ol2-minutes     pic 99.
        10  filler          pic x       value ':'.
        10  ol2-seconds     pic 99.99.
    05  filler      pic x       value ' '.
    05  ol2-timezone.
        10  ol2-tz-sign     pic x.
        10  ol2-tz-hours    pic 99.
        10  filler          pic x       value ':'.
        10  ol2-tz-minutes  pic 99.
    05  filler      pic x       value ' '.
    05  ol2-year    pic +99999.
01  fielded-date.
    05  year        pic s9(5)   comp-5.
    05  month       pic 99      comp-5.
    05  dom         pic 99      comp-5.
    05  doy         pic 999     comp-5.
    05  dow         pic 9       comp-5.
01  linear-date     pic s9(8)   comp-5.
01  time-stamp.
    05  ts-date.
        10  ts-year         pic 9999.
        10  ts-month        pic 99.
        10  ts-dom          pic 99.
    05  ts-time.
        10  ts-hours        pic 99.
        10  ts-minutes      pic 99.
        10  ts-seconds      pic 99v99.
    05  ts-timezone.
        10  ts-tz-sign      pic x.
            88 tz-positive  value '+'.
            88 tz-negative  value '-'.
        10  ts-tz-hours     pic 99.
        10  ts-tz-minutes   pic 99.
01  ws-dayname-def.
    05  filler pic x(3) value 'Sun'.
    05  filler pic x(3) value 'Mon'.
    05  filler pic x(3) value 'Tue'.
    05  filler pic x(3) value 'Wed'.
    05  filler pic x(3) value 'Thu'.
    05  filler pic x(3) value 'Fri'.
    05  filler pic x(3) value 'Sat'.
01  ws-dayname-table redefines ws-dayname-def.
    05  ws-dayname pic x(3) occurs 7 times.
01  ws-dayname-index  pic 9 comp-5.
01  ws-monthname-def.
    05  filler pic x(3) value 'Jan'.
    05  filler pic x(3) value 'Feb'.
    05  filler pic x(3) value 'Mar'.
    05  filler pic x(3) value 'Apr'.
    05  filler pic x(3) value 'May'.
    05  filler pic x(3) value 'Jun'.
    05  filler pic x(3) value 'Jul'.
    05  filler pic x(3) value 'Aug'.
    05  filler pic x(3) value 'Sep'.
    05  filler pic x(3) value 'Oct'.
    05  filler pic x(3) value 'Nov'.
    05  filler pic x(3) value 'Dec'.
01  ws-monthname-table redefines ws-monthname-def.
    05  ws-monthname pic x(3) occurs 12 times.
procedure division.
0000-start-here.
    move function current-date to time-stamp.
    move ts-year  to year.
    move ts-month to month.
    move ts-dom   to dom.
    if isvaliddate(year, month, dom) = 'N'
        display time-stamp
        display year ' ' month ' ' dom ' *not valid*'
        go to 9000-end
    end-if.
    move fielded_to_linear(year, month, dom) to linear-date.
    move linear_to_fielded(linear-date) to fielded-date.
    move year to ol1-year.
    move month to ol1-month.
    move doy to ol1-doy.
    move dom to ol1-dom.
    move dow to ol1-dow.
    move linear-date to ol1-linear.
    move ts-hours to ol1-hours.
    move ts-minutes to ol1-minutes.
    move ts-seconds to ol1-seconds.
    move ts-tz-sign to ol1-tz-sign.
    move ts-tz-hours to ol1-tz-hours.
    move ts-tz-minutes to ol1-tz-minutes.
    display output-line-1.
    compute ws-dayname-index = dow + 1;
    move ws-dayname(ws-dayname-index) to ol2-dayname.
    move ws-monthname(month) to ol2-monthname.
    move dom to ol2-dayofmonth.
    move ts-hours to ol2-hours.
    move ts-minutes to ol2-minutes.
    move ts-seconds to ol2-seconds.
    move ts-tz-sign to ol2-tz-sign.
    move ts-tz-hours to ol2-tz-hours.
    move ts-tz-minutes to ol2-tz-minutes.
    move year to ol2-year.
    display output-line-2.
9000-end.
    goback.
end program today.
[/INST]{
  "id": "BR-001",
  "description": "The date is a valid date, otherwise display a message\\n*not valid*.

",
  "condition": "isvaliddate(year, month, dom)",
  "output": {
    "valid": "**valid** date",
    "invalid": "*not valid*"
  }
}[INST]       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       IDENTIFICATION DIVISION.
        PROGRAM-ID. CRDTCHK.
        AUTHOR. GOHILPR.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
        WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
       1 RETURN-DATA.
         2 CREDIT-CHECK-RESULT    PIC X(3)  VALUE '   '.
        LOCAL-STORAGE SECTION.
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 CRDTCHK-CONTAINER  PIC X(16) VALUE 'CREDITCHECKCONT '.
       1 PROG-NAMES.
         2 CREDIT-CHECK       PIC X(8) VALUE 'CRDTCHK '.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
        LINKAGE SECTION.
       PROCEDURE DIVISION .
       MAINLINE SECTION.
           EXEC CICS GET CONTAINER ( INPUT-CONTAINER )
                           INTO    ( ACCOUNT-NUMBER-IN )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           IF ACCOUNT-NUMBER-IN = '0001'
           THEN
             MOVE '998' TO CREDIT-CHECK-RESULT
           ELSE
             MOVE '537' TO CREDIT-CHECK-RESULT
           END-IF
           EXEC CICS DELAY FOR SECONDS(5)
           END-EXEC
           EXEC CICS PUT CONTAINER ( CRDTCHK-CONTAINER )
                           FROM    ( CREDIT-CHECK-RESULT )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       END PROGRAM 'CRDTCHK'.
[/INST]{
  "id": "BR-001",
  "description": "when `ACCOUNT-NUMBER-IN` is equal to `0001` then `CREDIT-CHECK-RESULT` is `998` otherwise it is `537`",
  "condition": "ACCOUNT-NUMBER-IN = '0001'",
  "output": {
    "true": "CREDIT-CHECK-RESULT = 998",
    "false": "CREDIT-CHECK-RESULT = 537"
  }
}[INST]       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       IDENTIFICATION DIVISION.
        PROGRAM-ID. CSSTATS2.
        AUTHOR. GOHILPR.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
        WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
       1 RETURN-DATA.
         2 CUSTOMER-IMPORTANCE    PIC X(8)  VALUE '        '.
        LOCAL-STORAGE SECTION.
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 CSSTATS2-CONTAINER PIC X(16) VALUE 'GETVIPSTATUS    '.
       1 PROG-NAMES.
         2 GETPOL             PIC X(8) VALUE 'GETPOL  '.
         2 GETSPND            PIC X(8) VALUE 'GETSPND '.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
       1 TRANSIDS.
         2 GET-POLICY-TRAN    PIC X(4) VALUE 'GETP'.
         2 GET-SPEND-TRAN     PIC X(4) VALUE 'SPND'.
       1 CHILD-TOKENS.
         2 GET-POLICY-TKN     PIC X(16).
         2 GET-SPEND-TKN      PIC X(16).
        LINKAGE SECTION.
       PROCEDURE DIVISION .
       MAINLINE SECTION.
           EXEC CICS GET CONTAINER ( INPUT-CONTAINER )
                           INTO    ( ACCOUNT-NUMBER-IN )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS RUN TRANSID      (GET-POLICY-TRAN)
                         CHILD        (GET-POLICY-TKN)
           END-EXEC
           EXEC CICS RUN TRANSID      (GET-SPEND-TRAN)
                         CHILD        (GET-SPEND-TKN)
           END-EXEC
           IF ACCOUNT-NUMBER-IN = '0001'
           THEN
             MOVE 'VERY VIP' TO CUSTOMER-IMPORTANCE
           ELSE
             MOVE 'REGULAR ' TO CUSTOMER-IMPORTANCE
           END-IF
           EXEC CICS PUT CONTAINER ( CSSTATS2-CONTAINER )
                           FROM    ( CUSTOMER-IMPORTANCE )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       END PROGRAM 'CSSTATS2'.
[/INST]{
  "id": "BR-001",
  "description": "A customer account number '0001' is classified as 'VERY VIP', all other accounts are classified as 'REGULAR'.",
  "condition": "ACCOUNT-NUMBER-IN = '0001'",
  "output": {
    "VIP": {
      "ACCOUNT-NUMBER-IN": "0001",
      "CUSTOMER-IMPORTANCE": "VERY VIP"
    },
    "REGULAR": {
      "CUSTOMER-IMPORTANCE": "REGULAR "
    }
  }
}[INST]       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       IDENTIFICATION DIVISION.
        PROGRAM-ID. CSSTATUS.
        AUTHOR. GOHILPR.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
        WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
       1 RETURN-DATA.
         2 CUSTOMER-IMPORTANCE    PIC X(8)  VALUE ' '.
        LOCAL-STORAGE SECTION.
       1 OK                 PIC S9(8) COMP.
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 CSSTATUS-CONTAINER PIC X(16) VALUE 'GETVIPSTATUS    '.
       1 PROG-NAMES.
         2 GETPOL             PIC X(8) VALUE 'GETPOL  '.
         2 GETSPND            PIC X(8) VALUE 'GETSPND '.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
        LINKAGE SECTION.
       PROCEDURE DIVISION .
       MAINLINE SECTION.
           EXEC CICS GET CONTAINER (INPUT-CONTAINER)
                           INTO    ( ACCOUNT-NUMBER-IN )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS LINK PROGRAM(GETPOL)
           END-EXEC
           EXEC CICS LINK PROGRAM(GETSPND)
           END-EXEC
           IF ACCOUNT-NUMBER-IN = '0001'
           THEN
             MOVE 'VERY VIP' TO CUSTOMER-IMPORTANCE
           ELSE
             MOVE 'REGULAR ' TO CUSTOMER-IMPORTANCE
           END-IF
           EXEC CICS PUT CONTAINER ( CSSTATUS-CONTAINER )
                           FROM    ( CUSTOMER-IMPORTANCE )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       END PROGRAM 'CSSTATUS'.
[/INST]{
  "id": "BR-001",
  "description": "If the account number is '0001', the customer is 'VERY VIP', otherwise the customer is 'REGULAR'.",
  "condition": "ACCOUNT-NUMBER-IN = '0001'",
  "output": {
    "very-vip": "CUSTOMER-IMPORTANCE = 'VERY VIP'",
    "regular": "CUSTOMER-IMPORTANCE = 'REGULAR '"
  }
}[INST]       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       IDENTIFICATION DIVISION.
        PROGRAM-ID. GETADDR.
        AUTHOR. GOHILPR.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
        WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
       1 RETURN-DATA.
         2 CUSTOMER-ADDRESS       PIC X(80) VALUE ' '.
         2 CUSTOMER-POSTCODE      PIC X(8)  VALUE ' '.
        LOCAL-STORAGE SECTION.
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 GETADDR-CONTAINER  PIC X(16) VALUE 'GETADDRCONTAINER'.
         2 GETPOST-CONTAINER  PIC X(16) VALUE 'GETPOSTCODE     '.
       1 PROG-NAMES.
         2 GET-ADDR           PIC X(8) VALUE 'GETADDR '.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
        LINKAGE SECTION.
       PROCEDURE DIVISION .
       MAINLINE SECTION.
           EXEC CICS GET CONTAINER (INPUT-CONTAINER)
                           INTO    ( ACCOUNT-NUMBER-IN )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           IF ACCOUNT-NUMBER-IN = '0001'
           THEN
             MOVE '1 HURSLEY PARK, WINCHESTER, UK' TO CUSTOMER-ADDRESS
             MOVE 'SO21 2JN'                       TO CUSTOMER-POSTCODE
           ELSE
             MOVE '123 HIGH STREET, LONDON, UK'    TO CUSTOMER-ADDRESS
             MOVE 'S14 4WG'                        TO CUSTOMER-POSTCODE
           END-IF
           EXEC CICS DELAY FOR SECONDS(5)
           END-EXEC
           EXEC CICS PUT CONTAINER ( GETADDR-CONTAINER )
                           FROM    ( CUSTOMER-ADDRESS )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS PUT CONTAINER ( GETPOST-CONTAINER )
                           FROM    ( CUSTOMER-POSTCODE )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       END PROGRAM 'GETADDR'.
[/INST]{
  "id": "BR-002",
  "description": "If the account number is '0001', the customer address is '1 HURSLEY PARK, WINCHESTER, UK' and the postcode is 'SO21 2JN'.",
  "condition": "ACCOUNT-NUMBER-IN = '0001'",
  "output": {
    "address": "1 HURSLEY PARK, WINCHESTER, UK",
    "postcode": "SO21 2JN"
  }
}
{
  "id": "BR-003",
  "description": "If the account number is not '0001', the customer address is '123 HIGH STREET, LONDON, UK' and the postcode is 'S14 4WG'.",
  "condition": "ACCOUNT-NUMBER-IN != '0001'",
  "output": {
    "address": "123 HIGH STREET, LONDON, UK",
    "postcode": "S14 4WG"
  }
}[INST]       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       IDENTIFICATION DIVISION.
        PROGRAM-ID. GETNAME.
        AUTHOR. GOHILPR.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
        WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
       1 RETURN-DATA.
         2 CUSTOMER-NAME          PIC X(80) VALUE ' '.
        LOCAL-STORAGE SECTION.
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 GETNAME-CONTAINER  PIC X(16) VALUE 'GETNAMECONTAINER'.
       1 PROG-NAMES.
         2 GET-NAME           PIC X(8) VALUE 'GETNAME '.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
        LINKAGE SECTION.
       PROCEDURE DIVISION .
       MAINLINE SECTION.
           EXEC CICS GET CONTAINER (INPUT-CONTAINER)
                           INTO    ( ACCOUNT-NUMBER-IN )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           IF ACCOUNT-NUMBER-IN = '0001'
           THEN
             MOVE 'PRADEEP GOHIL' TO CUSTOMER-NAME
           ELSE
             MOVE 'JOE BLOGS' TO CUSTOMER-NAME
           END-IF
           EXEC CICS PUT CONTAINER ( GETNAME-CONTAINER )
                           FROM    ( CUSTOMER-NAME )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       END PROGRAM 'GETNAME'.
[/INST]{
  "id": "BR-001",
  "description": "If the account number is 0001, the customer name must be PRADEEP GOHIL.",
  "condition": "ACCOUNT-NUMBER-IN = '0001'",
  "output": {
    "true": "CUSTOMER-NAME = 'PRADEEP GOHIL'"
  }
},
{
  "id": "BR-002",
  "description": "If the account number is not 0001, the customer name must be JOE BLOGS.",
  "condition": "ACCOUNT-NUMBER-IN != '0001'",
  "output": {
    "true": "CUSTOMER-NAME = 'JOE BLOGS'"
  }
}[INST]       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       IDENTIFICATION DIVISION.
        PROGRAM-ID. GETPOL.
        AUTHOR. GOHILPR.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
        WORKING-STORAGE SECTION.
        LOCAL-STORAGE SECTION.
        LINKAGE SECTION.
       PROCEDURE DIVISION .
       MAINLINE SECTION.
           EXEC CICS DELAY FOR SECONDS(2)
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       END PROGRAM 'GETPOL'.
[/INST]{
  "id": "BR-002",
  "description": "The program will delay for 2 seconds.",
  "condition": "EXEC CICS DELAY FOR SECONDS(2)",
  "output": {}
}[INST]       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       IDENTIFICATION DIVISION.
        PROGRAM-ID. GETSPND.
        AUTHOR. GOHILPR.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
        WORKING-STORAGE SECTION.
        LOCAL-STORAGE SECTION.
        LINKAGE SECTION.
       PROCEDURE DIVISION .
       MAINLINE SECTION.
           EXEC CICS DELAY FOR SECONDS(2)
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       END PROGRAM 'GETSPND'.
[/INST]{
  "id": "BR-001",  "description": "The program delays for 2 seconds before returning, allowing other processes to run during that time.",
  "condition": null,
  "output": null
}[INST]       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       IDENTIFICATION DIVISION.
        PROGRAM-ID. SEQPNT.
        AUTHOR. GOHILPR.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
        WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
       1 RETURN-DATA.
         2 CREDIT-CHECK-RESULT    PIC X(3)  VALUE ' '.
         2 CUSTOMER-NAME          PIC X(80) VALUE ' '.
         2 CUSTOMER-ADDRESS       PIC X(80) VALUE ' '.
         2 CUSTOMER-POSTCODE      PIC X(8)  VALUE ' '.
         2 CUSTOMER-IMPORTANCE    PIC X(8)  VALUE ' '.
         2 APPLICATION-RESULT     PIC X(7)  VALUE ' '.
       1 APPLICATION-SUCCESS  PIC X(7) VALUE 'SUCCESS'.
       1 APPLICATION-FAILED   PIC X(7) VALUE 'FAILED '.
       1 READ-INPUT.
         2 TRANID                 PIC X(4).
         2 FILLER                 PIC X(1).
         2 INPUTACCNUM            PIC X(4).
       1 READ-INPUT-LENGTH        PIC S9(4) COMP-5 SYNC VALUE 9.
       1 PRINT-LINE.
         2 PARENT-PROGRAM         PIC X(8)  VALUE 'SEQPNT  '.
         2 FILLER                 PIC X(5)  VALUE ' ACC#'.
         2 ACCOUNT-NUM            PIC X(4)  VALUE '    '.
         2 FILLER                 PIC X(1)  VALUE ' '.
         2 TRANSACTION-1          PIC X(4)  VALUE 'ICCK'.
         2 FILLER                 PIC X(1)  VALUE '('.
         2 TRAN1-STATUS           PIC X(1)  VALUE ' '.
         2 FILLER                 PIC X(2)  VALUE ') '.
         2 TRANSACTION-2          PIC X(4)  VALUE 'GETN'.
         2 FILLER                 PIC X(1)  VALUE '('.
         2 TRAN2-STATUS           PIC X(1)  VALUE ' '.
         2 FILLER                 PIC X(2)  VALUE ') '.
         2 TRANSACTION-3          PIC X(4)  VALUE 'GETA'.
         2 FILLER                 PIC X(1)  VALUE '('.
         2 TRAN3-STATUS           PIC X(1)  VALUE ' '.
         2 FILLER                 PIC X(2)  VALUE ') '.
         2 TRANSACTION-4          PIC X(4)  VALUE 'STUS'.
         2 FILLER                 PIC X(1)  VALUE '('.
         2 TRAN4-STATUS           PIC X(1)  VALUE ' '.
         2 FILLER                 PIC X(2)  VALUE ') '.
         2 TRANSACTION-5          PIC X(4)  VALUE 'UPDB'.
         2 FILLER                 PIC X(1)  VALUE '('.
         2 TRAN5-STATUS           PIC X(1)  VALUE ' '.
         2 FILLER                 PIC X(9)  VALUE ') RESULT-'.
         2 RESULT-TEXT            PIC X(7)  VALUE '       '.
        LOCAL-STORAGE SECTION.
       1 IS-TERMINAL-BASED    PIC X(1) VALUE 'N'.
       1 START-CODE           PIC X(2).
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 CRDTCHK-CONTAINER  PIC X(16) VALUE 'CREDITCHECKCONT '.
         2 UPDCSDB-CONTAINER  PIC X(16) VALUE 'UPDATEDB2       '.
         2 GETNAME-CONTAINER  PIC X(16) VALUE 'GETNAMECONTAINER'.
         2 GETADDR-CONTAINER  PIC X(16) VALUE 'GETADDRCONTAINER'.
         2 GETPOST-CONTAINER  PIC X(16) VALUE 'GETPOSTCODE     '.
         2 CSSTATUS-CONTAINER PIC X(16) VALUE 'GETVIPSTATUS    '.
       1 MYCHANNEL            PIC X(16) VALUE 'MYCHANNEL       '.
       1 PROG-NAMES.
         2 CREDIT-CHECK       PIC X(8) VALUE 'CRDTCHK '.
         2 DB-CACHE           PIC X(8) VALUE 'UPDCSDB '.
         2 GET-NAME           PIC X(8) VALUE 'GETNAME '.
         2 GET-ADDR           PIC X(8) VALUE 'GETADDR '.
         2 CSSTATUS           PIC X(8) VALUE 'CSSTATUS'.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
        LINKAGE SECTION.
       PROCEDURE DIVISION .
       MAINLINE SECTION.
           PERFORM GET-INPUT-ACCOUNT-NUMBER
           EXEC CICS PUT CONTAINER ( INPUT-CONTAINER )
                           FROM    ( ACCOUNT-NUMBER-IN )
                           CHANNEL ( MYCHANNEL)
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           MOVE '.' TO TRAN1-STATUS
           PERFORM PRINT-TEXT-TO-SCREEN
           EXEC CICS LINK PROGRAM ( CREDIT-CHECK )
                          CHANNEL ( MYCHANNEL )
                          RESP    ( COMMAND-RESP )
                          RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS GET CONTAINER (CRDTCHK-CONTAINER)
                           INTO    (CREDIT-CHECK-RESULT)
                           CHANNEL (MYCHANNEL)
                           RESP    (COMMAND-RESP)
                           RESP2   (COMMAND-RESP2)
           END-EXEC
           MOVE 'Y' TO TRAN1-STATUS
           PERFORM PRINT-TEXT-TO-SCREEN
           MOVE '.' TO TRAN2-STATUS
           PERFORM PRINT-TEXT-TO-SCREEN
           EXEC CICS LINK PROGRAM ( GET-NAME )
                          CHANNEL ( MYCHANNEL )
                          RESP    ( COMMAND-RESP )
                          RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS GET CONTAINER (GETNAME-CONTAINER)
                           CHANNEL (MYCHANNEL)
                           INTO    (CUSTOMER-NAME)
                           RESP    (COMMAND-RESP)
                           RESP2   (COMMAND-RESP2)
           END-EXEC
           MOVE 'Y' TO TRAN2-STATUS
           PERFORM PRINT-TEXT-TO-SCREEN
           MOVE '.' TO TRAN3-STATUS
           PERFORM PRINT-TEXT-TO-SCREEN
           EXEC CICS LINK PROGRAM ( GET-ADDR )
                          CHANNEL ( MYCHANNEL )
                          RESP    ( COMMAND-RESP )
                          RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS GET CONTAINER (GETADDR-CONTAINER)
                           CHANNEL (MYCHANNEL)
                           INTO    (CUSTOMER-ADDRESS)
                           RESP    (COMMAND-RESP)
                           RESP2   (COMMAND-RESP2)
           END-EXEC
           EXEC CICS GET CONTAINER (GETPOST-CONTAINER)
                           CHANNEL (MYCHANNEL)
                           INTO    (CUSTOMER-POSTCODE)
                           RESP    (COMMAND-RESP)
                           RESP2   (COMMAND-RESP2)
           END-EXEC
           MOVE 'Y' TO TRAN3-STATUS
           PERFORM PRINT-TEXT-TO-SCREEN
           MOVE '.' TO TRAN4-STATUS
           PERFORM PRINT-TEXT-TO-SCREEN
           EXEC CICS LINK PROGRAM ( CSSTATUS )
                          CHANNEL ( MYCHANNEL )
                          RESP    ( COMMAND-RESP )
                          RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS GET CONTAINER (CSSTATUS-CONTAINER)
                           CHANNEL (MYCHANNEL)
                           INTO    (CUSTOMER-IMPORTANCE)
                           RESP    (COMMAND-RESP)
                           RESP2   (COMMAND-RESP2)
           END-EXEC
           MOVE 'Y' TO TRAN4-STATUS
           PERFORM PRINT-TEXT-TO-SCREEN
           MOVE '.' TO TRAN5-STATUS
           PERFORM PRINT-TEXT-TO-SCREEN
           EXEC CICS LINK PROGRAM ( DB-CACHE )
                          CHANNEL ( MYCHANNEL )
                          RESP    ( COMMAND-RESP )
                          RESP2   ( COMMAND-RESP2 )
           END-EXEC
           MOVE 'Y' TO TRAN5-STATUS
           PERFORM PRINT-TEXT-TO-SCREEN
           MOVE APPLICATION-SUCCESS TO APPLICATION-RESULT
           MOVE APPLICATION-SUCCESS TO RESULT-TEXT
           PERFORM PRINT-TEXT-TO-SCREEN
           EXEC CICS PUT CONTAINER ('SEQPNT' )
                           FROM    ( RETURN-DATA )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS RETURN
           END-EXEC
           .
       GET-INPUT-ACCOUNT-NUMBER.
           EXEC CICS ASSIGN STARTCODE( START-CODE )
           END-EXEC
           IF START-CODE = 'TD'
           THEN
             MOVE 'Y' TO IS-TERMINAL-BASED
             EXEC CICS RECEIVE INTO     ( READ-INPUT )
                             LENGTH     ( READ-INPUT-LENGTH )
                             NOTRUNCATE
                             RESP       ( COMMAND-RESP )
                             RESP2      ( COMMAND-RESP2 )
             END-EXEC
             MOVE INPUTACCNUM TO CUST-NO-IN
             MOVE INPUTACCNUM TO ACCOUNT-NUM
             PERFORM PRINT-TEXT-TO-SCREEN
           ELSE
             EXEC CICS GET CONTAINER ('SEQPNT' )
                             INTO    ( ACCOUNT-NUMBER-IN )
                             RESP    ( COMMAND-RESP )
                             RESP2   ( COMMAND-RESP2 )
             END-EXEC
           END-IF
           .
       PRINT-TEXT-TO-SCREEN.
           IF IS-TERMINAL-BASED = 'Y' THEN
             EXEC CICS SEND TEXT FROM ( PRINT-LINE )
                       TERMINAL WAIT
                       FREEKB
                       ERASE
             END-EXEC
           END-IF
           .
       END PROGRAM 'SEQPNT'.
[/INST]{
  "id": "BR-001",
  "description": "If the transaction was started as a terminal based transaction (via 3270 emulator), then read the input from the terminal screen.",
  "condition": "START-CODE = 'TD'",
  "output": {
    "true": "Read the input from the terminal screen.",
    "false": "Get the account number from the input container."
  }
}[INST]       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       IDENTIFICATION DIVISION.
        PROGRAM-ID. UPDCSDB.
        AUTHOR. GOHILPR.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
        WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
        LOCAL-STORAGE SECTION.
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 CRDTCHK-CONTAINER  PIC X(16) VALUE 'CREDITCHECKCONT '.
         2 UPDCSDB-CONTAINER  PIC X(16) VALUE 'UPDATEDB2       '.
       1 PROG-NAMES.
         2 DB-CACHE           PIC X(8) VALUE 'UPDCSDB '.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
        LINKAGE SECTION.
       PROCEDURE DIVISION .
       MAINLINE SECTION.
           EXEC CICS DELAY FOR SECONDS(3)
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       END PROGRAM 'UPDCSDB'.
[/INST]{ 
   "id": "BR-001",  
   "description": "The CICS program has a delay of 3 seconds before it returns to terminal.",
   "condition": "EXEC CICS DELAY FOR SECONDS(3)", 
   "output": { 
      "delay": "delay of 3 seconds before returning to terminal" 
   } 
}[INST]       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       IDENTIFICATION DIVISION.
        PROGRAM-ID. ACCTCURR.
        AUTHOR. GOHILPR.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
        WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
       1 RETURN-DATA.
         2 NUMBER-OF-ACCOUNTS     PIC S9(4) COMP-5 SYNC VALUE 9. 
         2 ACCOUNT-DETAILS OCCURS 5 TIMES.
           3 ACCT-NUMBER     PIC X(8) VALUE ' '.
           3 BALANCE         PIC X(8) VALUE ' '.
           3 OVERDRAFT       PIC X(8) VALUE ' '.
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 ACCTCURR-CONTAINER PIC X(16) VALUE 'ACCTCURRCONT    '.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
        LINKAGE SECTION.
       PROCEDURE DIVISION .
       MAINLINE SECTION.
           EXEC CICS DELAY FOR SECONDS(3) END-EXEC
           EXEC CICS GET CONTAINER (INPUT-CONTAINER)
                           INTO    ( ACCOUNT-NUMBER-IN )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           IF ACCOUNT-NUMBER-IN = '0001'
           THEN
             MOVE 3 TO NUMBER-OF-ACCOUNTS
             MOVE '20140720' TO ACCT-NUMBER(1)
             MOVE '0.01    ' TO BALANCE(1)
             MOVE '0.00    ' TO OVERDRAFT(1)
             MOVE '25875343' TO ACCT-NUMBER(2)
             MOVE '45742.00' TO BALANCE(2)
             MOVE '1000.00 ' TO OVERDRAFT(2)
             MOVE '20170125' TO ACCT-NUMBER(3)
             MOVE '34533.23' TO BALANCE(3)
             MOVE '0.00    ' TO OVERDRAFT(3)
           ELSE
             MOVE 1 TO NUMBER-OF-ACCOUNTS
             MOVE '20170516' TO ACCT-NUMBER(1)
             MOVE '10.76   ' TO BALANCE(1)
             MOVE '0.00    ' TO OVERDRAFT(1)
           END-IF
           EXEC CICS PUT CONTAINER ( ACCTCURR-CONTAINER )
                           FROM    ( RETURN-DATA )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       END PROGRAM 'ACCTCURR'.[/INST]{
  "id": "BR-001",
  "description": "If ACCOUNT-NUMBER-IN has a value of ‘0001’, then the NUMBER-OF-ACCOUNTS must be set to 3. There will be a maximum of 5 account records.",
  "condition": "ACCOUNT-NUMBER-IN = ‘0001’",
  "output": {
    "success": "NUMBER-OF-ACCOUNTS set to 3 and max of 5 account records"
  }
},
{
  "id": "BR-002",
  "description": "If ACCOUNT-NUMBER-IN does not have a value of ‘0001’, then the NUMBER-OF-ACCOUNTS must be set to 1. There will only be 1 account record.",
  "condition": "ACCOUNT-NUMBER-IN != ‘0001’",
  "output": {
    "success": "NUMBER-OF-ACCOUNTS set to 1 and only 1 account record"
  }
}[INST]       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       IDENTIFICATION DIVISION.
        PROGRAM-ID. ACCTPTNR.
        AUTHOR. GOHILPR.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
        WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
       1 RETURN-DATA.
         2 NUMBER-OF-ACCOUNTS     PIC S9(4) COMP-5 SYNC VALUE 9. 
         2 ACCOUNT-DETAILS OCCURS 5 TIMES.
           3 ACCT-NUMBER     PIC X(8) VALUE ' '.
           3 BALANCE         PIC X(8) VALUE ' '.
           3 OVERDRAFT       PIC X(8) VALUE ' '.
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 ACCTPTNR-CONTAINER PIC X(16) VALUE 'ACCTPTNRCONT    '.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
        LINKAGE SECTION.
       PROCEDURE DIVISION .
       MAINLINE SECTION.
           EXEC CICS DELAY FOR SECONDS(4) END-EXEC
           EXEC CICS GET CONTAINER (INPUT-CONTAINER)
                           INTO    ( ACCOUNT-NUMBER-IN )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           IF ACCOUNT-NUMBER-IN = '0001'
           THEN
             MOVE 3 TO NUMBER-OF-ACCOUNTS
             MOVE '62837456' TO ACCT-NUMBER(1)
             MOVE '234.56  ' TO BALANCE(1)
             MOVE '0.00       ' TO OVERDRAFT(1)
             MOVE '64620987' TO ACCT-NUMBER(2)
             MOVE '3092.60 ' TO BALANCE(2)
             MOVE '1000.00 ' TO OVERDRAFT(2)
             MOVE '64563923' TO ACCT-NUMBER(3)
             MOVE '10123.98' TO BALANCE(3)
             MOVE '0.00    ' TO OVERDRAFT(3)
           ELSE
             MOVE 2 TO NUMBER-OF-ACCOUNTS
             MOVE '67849321' TO ACCT-NUMBER(1)
             MOVE '3.50    ' TO BALANCE(1)
             MOVE '0.00    ' TO OVERDRAFT(1)
             MOVE '63298568' TO ACCT-NUMBER(2)
             MOVE '52.48   ' TO BALANCE(2)
             MOVE '3000.00 ' TO OVERDRAFT(2)
           END-IF
           EXEC CICS PUT CONTAINER ( ACCTPTNR-CONTAINER )
                           FROM    ( RETURN-DATA )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       END PROGRAM 'ACCTPTNR'.[/INST]{
  "id": "BR-001",
  "description": "A responding account is returned for a given customer and account number",
  "condition": "ACCOUNT-NUMBER-IN = '0001'",
  "output": [
    {
      "name": "Acct-Number",
      "value": [
        "62837456",
        "64620987",
        "64563923"
      ]
    },
    {
      "name": "Balance",
      "value": [
        "234.56  ",
        "3092.60 ",
        "10123.98"
      ]
    },
    {
      "name": "Overdraft",
      "value": [
        "0.00       ",
        "1000.00 ",
        "0.00    "
      ]
    }
  ]
},
{
  "id": "BR-002",
  "description": "A non-responding account is returned for a given customer and account number",
  "condition": "ACCOUNT-NUMBER-IN <> '0001'",
  "output": [
    {
      "name": "Acct-Number",
      "value": [
        "67849321",
        "63298568"
      ]
    },
    {
      "name": "Balance",
      "value": [
        "3.50    ",
        "52.48   "
      ]
    },
    {
      "name": "Overdraft",
      "value": [
        "0.00    ",
        "3000.00 "
      ]
    }
  ]
}[INST]       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       IDENTIFICATION DIVISION.
        PROGRAM-ID. GETLOAN.
        AUTHOR. GOHILPR.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
        WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
       1 RETURN-DATA.
         2 LOAN-RATE          PIC X(8) VALUE ' '.
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 GETLOAN-CONTAINER  PIC X(16) VALUE 'GETLOANCONTAINER'.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
        LINKAGE SECTION.
       PROCEDURE DIVISION .
       MAINLINE SECTION.
           IF FUNCTION CURRENT-DATE(16:1) > 5
           THEN
             DISPLAY 'Loan quote service under heavy load. ETA 7 secs.'
             EXEC CICS DELAY FOR SECONDS(7) END-EXEC
           ELSE
             DISPLAY 'Loan quote service under normal load. ETA 4 secs.'
             EXEC CICS DELAY FOR SECONDS(4) END-EXEC
           END-IF
           EXEC CICS GET CONTAINER (INPUT-CONTAINER)
                           INTO    ( ACCOUNT-NUMBER-IN )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           IF ACCOUNT-NUMBER-IN = '0001'
           THEN
             MOVE '1.25' TO LOAN-RATE
           ELSE
             MOVE '7.20' TO LOAN-RATE
           END-IF
           EXEC CICS PUT CONTAINER ( GETLOAN-CONTAINER )
                           FROM    ( LOAN-RATE )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       END PROGRAM 'GETLOAN'.[/INST]{
  "id": "BR-002",
  "description": "If the loan request arrived before noon, the ETA is 4 seconds, otherwise it is 7 seconds.",
  "condition": "FUNCTION CURRENT-DATE(16:1)",
  "output": {
    "before_noon": "ETA 4 secs",
    "after_noon": "ETA 7 secs"
  }
},
{
  "id": "BR-003",
  "description": "The loan rate for customer number '0001' is 1.25, and for all other customers it is 7.20.",
  "condition": "ACCOUNT-NUMBER-IN",
  "output": {
    "0001": "1.25",
    "other": "7.20"
  }
}[INST]       PROCESS CICS,NODYNAM,NSYMBOL(NATIONAL),TRUNC(STD)
       IDENTIFICATION DIVISION.
        PROGRAM-ID. GETNAME.
        AUTHOR. GOHILPR.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
        WORKING-STORAGE SECTION.
       1 ACCOUNT-NUMBER-IN.
         2 CUST-NO-IN PIC X(4).
       1 RETURN-DATA.
         2 CUSTOMER-NAME          PIC X(65) VALUE ' '.
       1 CONTAINER-NAMES.
         2 INPUT-CONTAINER    PIC X(16) VALUE 'INPUTCONTAINER  '.
         2 GETNAME-CONTAINER  PIC X(16) VALUE 'GETNAMECONTAINER'.
       1 COMMAND-RESP  PIC S9(8) COMP.
       1 COMMAND-RESP2 PIC S9(8) COMP.
        LINKAGE SECTION.
       PROCEDURE DIVISION .
       MAINLINE SECTION.
           EXEC CICS DELAY FOR SECONDS(3) END-EXEC
           EXEC CICS GET CONTAINER (INPUT-CONTAINER)
                           INTO    ( ACCOUNT-NUMBER-IN )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EVALUATE ACCOUNT-NUMBER-IN
             WHEN '0001'
               MOVE 'Pradeep Gohil'     TO CUSTOMER-NAME
             WHEN '0002'
               MOVE 'Chris Poole'       TO CUSTOMER-NAME
             WHEN '0003'
               MOVE 'Jenny He'          TO CUSTOMER-NAME
             WHEN '0004'
               MOVE 'Julian Horn'       TO CUSTOMER-NAME
             WHEN '0005'
               MOVE 'Amy Reeve'         TO CUSTOMER-NAME
             WHEN '0006'
               MOVE 'Greg Lubel'        TO CUSTOMER-NAME
             WHEN '0007'
               MOVE 'Tony Papageorgiou' TO CUSTOMER-NAME
             WHEN OTHER
               MOVE 'Simon Rachman'     TO CUSTOMER-NAME
           END-EVALUATE
           EXEC CICS PUT CONTAINER ( GETNAME-CONTAINER )
                           FROM    ( CUSTOMER-NAME )
                           RESP    ( COMMAND-RESP )
                           RESP2   ( COMMAND-RESP2 )
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       END PROGRAM 'GETNAME'.[/INST]{
  "id": "BR-001",
  "description": "The customer name associated with an account number can only be retrieved after providing a valid account number.",
  "condition": "having a valid ACCOUNT-NUMBER-IN",
  "output": {
    "true": "retrieving the customer name"
  }
}[INST]       PROCESS NODYNAM,RENT,APOST,CICS,TRUNC(OPT)
       IDENTIFICATION DIVISION.
       PROGRAM-ID.              WLPCTRLW.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 WS-STORAGE.
          03 WS-TERMINAL-INPUT-NUM PIC 9(02)         VALUE ZERO.
          03 WS-TERMINAL-INPUT     PIC X(40)         VALUE SPACES.
          03 WS-START-CODE         PIC XX            VALUE SPACES.
          03 WS-TRANSID            PIC X(4)          VALUE SPACES.
          03 WS-LENGTH             PIC 9(4)  COMP    VALUE ZERO.
          03 WS-RESP               PIC S9(8) COMP    VALUE ZERO.
          03 WS-RESP2              PIC S9(8) COMP    VALUE ZERO.
          03 PGM-ERROR-COUNT       PIC 9     COMP    VALUE ZERO.
          03 ABSTIME               PIC S9(15) COMP-3 VALUE ZERO.
          03 PGM-ERROR-COUNT-MAX   PIC 9     COMP    VALUE 3.
          03 SLEEP-TIME-SEC        PIC S9(8) BINARY  VALUE 15.
          03 WS-RETURN-CODE        PIC 9     COMP    VALUE 9.
             88 SUCCESS                     VALUE 0.
             88 TERMINAL-INPUT-LENGERR      VALUE 1.
             88 TERMINAL-INPUT-NUMERR       VALUE 2.
             88 OPERERR                     VALUE 3.
             88 LINKERR                     VALUE 4.
             88 JAVAERR                     VALUE 5.
             88 START-INFO                  VALUE 9.
       01 RESPONSE-MSG.
          03 RESPONSE-HEADER      PIC X(10)     VALUE 'WLPCTRLW  '.
          03 DATE-AREA            PIC X(10).
          03 DATE-FILLER1         PIC X(1)      VALUE SPACE.
          03 TIME-AREA            PIC X(8).
          03 DATE-FILLER2         PIC X(1)      VALUE SPACE.
          03 RESPONSE-BODY        PIC X(256)    VALUE SPACES.
       01 USER-MSG-START          PIC X(22)
           VALUE 'BEGIN RUNNING WLPCTRLW'.
       01 USER-MSG-PAUSE          PIC X(36)
           VALUE 'LIBERTY HTTPENDPOINT HAS BEEN PAUSED'.
       01 USER-MSG-RESUME         PIC X(37)
           VALUE 'LIBERTY HTTPENDPOINT HAS BEEN RESUMED'.
       01 ERROR-LENGERR-MSG       PIC X(43)
           VALUE 'ERROR: INPUT PARAMETERS LENGTH IS INCORRECT'.
       01 ERROR-NUMERR-MSG        PIC X(43)
           VALUE 'ERROR: NUMBER OF INPUT PARAMETERS IS 1 or 2'.
       01 ERROR-OPERERR-MSG       PIC X(50)
           VALUE 'ERROR: 1st PARAMETER SHOULD BE "RESUME" OR "PAUSE"'.
       01 ERROR-LINKERR-MSG.
          03 FILLER               PIC X(17) VALUE 'ERROR LINKING TO '.
          03 ERROR-PROG           PIC X(8).
          03 FILLER               PIC X(7)  VALUE '- RESP:'.
          03 ERROR-RESP           PIC 9(8) DISPLAY.
          03 FILLER               PIC X(7) VALUE ' RESP2:'.
          03 ERROR-RESP2          PIC 9(8) DISPLAY.
       01 WLPDATA.
          03 RULE-OPERATION        PIC X(10)         VALUE SPACES.
             88 RULE-OPERATION-RESUME                VALUE 'RESUME'.
             88 RULE-OPERATION-PAUSE                 VALUE 'PAUSE'.
          03 RULE-ENDPOINT         PIC X(128)        VALUE SPACES.
       01 WLPRESP.
          03 WLP-RETURN-CODE       PIC 9(2).
          03 WLP-ERROR-MSG         PIC X(256)        VALUE SPACES.
          03 WLP-ERROR-MSG-LEN     PIC 9(4) COMP.
       01 WLPRESP-LEN              PIC S9(8) COMP.
       77 WLP-CHANNEL               PIC X(16) VALUE 'DFHTRANSACTION'.
       77 WLP-INPUT-CONTAINER-NAME  PIC X(16) VALUE 'WLPDATA'.
       77 WLP-OUTPUT-CONTAINER-NAME PIC X(16) VALUE 'WLPRESP'.
       77 WLP-CONTROL-PROGRAM       PIC X(8)  VALUE 'WLPCTRL'.
       PROCEDURE DIVISION.
       MAIN-PROCESSING SECTION.
           EXEC CICS ASSIGN STARTCODE(WS-START-CODE)
             RESP(WS-RESP) RESP2(WS-RESP2)
           END-EXEC.
           IF WS-START-CODE EQUAL 'S' THEN
             PERFORM PRINT-MESSAGE
           END-IF
           PERFORM GET-INPUT.
           PERFORM LINK-TO-LIBERTY UNTIL WS-RETURN-CODE < 9
           PERFORM PRINT-MESSAGE.
           EXEC CICS RETURN END-EXEC.
           GOBACK.
       GET-INPUT.
           IF WS-START-CODE EQUAL 'TD' THEN
             MOVE LENGTH OF WS-TERMINAL-INPUT TO WS-LENGTH
             EXEC CICS RECEIVE INTO(WS-TERMINAL-INPUT)
               LENGTH(WS-LENGTH)
             END-EXEC
             INITIALIZE WS-TERMINAL-INPUT-NUM
             UNSTRING WS-TERMINAL-INPUT DELIMITED BY ALL SPACES
               INTO WS-TRANSID, RULE-OPERATION, RULE-ENDPOINT
               TALLYING WS-TERMINAL-INPUT-NUM
               ON OVERFLOW
                 MOVE 1 TO WS-RETURN-CODE
                 PERFORM PRINT-MESSAGE
                 EXEC CICS RETURN END-EXEC
             END-UNSTRING
             IF WS-TERMINAL-INPUT-NUM EQUAL 2 THEN
                 MOVE 'defaultHttpEndpoint' TO RULE-ENDPOINT
             ELSE IF WS-TERMINAL-INPUT-NUM NOT EQUAL 3 THEN
                 MOVE 2 TO WS-RETURN-CODE
                 PERFORM PRINT-MESSAGE
                 EXEC CICS RETURN END-EXEC
             END-IF
           ELSE
               EXEC CICS GET CONTAINER('DFHEP.DATA.00030')
                 INTO(RULE-OPERATION) RESP(WS-RESP) RESP2(WS-RESP2)
               END-EXEC
               EXEC CICS GET CONTAINER('DFHEP.DATA.00031')
                 INTO(RULE-ENDPOINT) RESP(WS-RESP) RESP2(WS-RESP2)
               END-EXEC
           END-IF.
           IF NOT RULE-OPERATION-PAUSE
            AND NOT RULE-OPERATION-RESUME THEN
               MOVE 3 TO WS-RETURN-CODE
               PERFORM PRINT-MESSAGE
               EXEC CICS RETURN END-EXEC
           END-IF
           EXIT.
       LINK-TO-LIBERTY.
           EXEC CICS PUT CONTAINER(WLP-INPUT-CONTAINER-NAME)
             CHANNEL(WLP-CHANNEL) FROM(WLPDATA)
           END-EXEC
           EXEC CICS LINK PROGRAM(WLP-CONTROL-PROGRAM)
             CHANNEL(WLP-CHANNEL)
             RESP(ERROR-RESP) RESP2(ERROR-RESP2)
           END-EXEC.
           IF ERROR-RESP NOT EQUAL DFHRESP(NORMAL) THEN
              ADD 1 TO PGM-ERROR-COUNT
              IF PGM-ERROR-COUNT < PGM-ERROR-COUNT-MAX THEN
                 EXEC CICS DELAY FOR SECONDS(SLEEP-TIME-SEC)
                 END-EXEC
              ELSE
                 MOVE WLP-CONTROL-PROGRAM TO ERROR-PROG
                 MOVE 4 TO WS-RETURN-CODE
              END-IF
           ELSE
              MOVE LENGTH OF WLPRESP TO WLPRESP-LEN
              EXEC CICS GET CONTAINER(WLP-OUTPUT-CONTAINER-NAME)
                CHANNEL(WLP-CHANNEL) INTO(WLPRESP)
              END-EXEC
              IF WLP-RETURN-CODE EQUAL 0 THEN
                  MOVE 0 TO WS-RETURN-CODE
              ELSE
                  MOVE 5 TO WS-RETURN-CODE
           END-IF.
           EXIT.
       PRINT-MESSAGE.
           EVALUATE TRUE
               WHEN START-INFO
                       MOVE LENGTH OF USER-MSG-START TO WS-LENGTH
                       MOVE USER-MSG-START TO RESPONSE-BODY
               WHEN SUCCESS
                       IF RULE-OPERATION-RESUME THEN
                           MOVE LENGTH OF USER-MSG-RESUME TO WS-LENGTH
                           MOVE USER-MSG-RESUME TO RESPONSE-BODY
                       ELSE
                           MOVE LENGTH OF USER-MSG-PAUSE TO WS-LENGTH
                           MOVE USER-MSG-PAUSE TO RESPONSE-BODY
                       END-IF
               WHEN TERMINAL-INPUT-LENGERR
                       MOVE LENGTH OF ERROR-LENGERR-MSG TO WS-LENGTH
                       MOVE ERROR-LENGERR-MSG TO RESPONSE-BODY
               WHEN TERMINAL-INPUT-NUMERR
                       MOVE LENGTH OF ERROR-NUMERR-MSG TO WS-LENGTH
                       MOVE ERROR-NUMERR-MSG TO RESPONSE-BODY
               WHEN OPERERR
                       MOVE LENGTH OF ERROR-OPERERR-MSG TO WS-LENGTH
                       MOVE ERROR-OPERERR-MSG TO RESPONSE-BODY
               WHEN LINKERR
                       MOVE LENGTH OF ERROR-LINKERR-MSG TO WS-LENGTH
                       MOVE ERROR-LINKERR-MSG TO RESPONSE-BODY
               WHEN JAVAERR
                       MOVE WLP-ERROR-MSG-LEN TO WS-LENGTH
                       MOVE WLP-ERROR-MSG TO RESPONSE-BODY
           END-EVALUATE
           IF WS-START-CODE EQUAL 'TD' THEN
               EXEC CICS SEND TEXT FROM(RESPONSE-BODY)
                 ERASE FREEKB LENGTH(WS-LENGTH)
               END-EXEC
           ELSE
               ADD LENGTH OF RESPONSE-HEADER TO WS-LENGTH
               EXEC CICS ASKTIME ABSTIME(ABSTIME)
               END-EXEC
               EXEC CICS FORMATTIME
                     ABSTIME(ABSTIME)
                     MMDDYYYY(DATE-AREA)
                     DATESEP('/')
                     TIME(TIME-AREA)
                     TIMESEP(':')
               END-EXEC
               ADD LENGTH OF DATE-AREA TO WS-LENGTH
               ADD LENGTH OF TIME-AREA TO WS-LENGTH
               ADD LENGTH OF DATE-FILLER1 TO WS-LENGTH
               ADD LENGTH OF DATE-FILLER2 TO WS-LENGTH
               EXEC CICS WRITEQ TD QUEUE('CSSL') FROM(RESPONSE-MSG)
                 LENGTH(WS-LENGTH)
               END-EXEC
           END-IF
           EXIT.
[/INST]{
  "id": "BR-001",
  "description": "The start code is 'S' in the environment that is running the program.",
  "condition": "WS-START-CODE = 'S'",
  "output": {
    "S": "Start the program."
  }
},
{
  "id": "BR-002",
  "description": "A valid TD start code is entered to start the program.",
  "condition": "WS-START-CODE = 'TD'",
  "output": {
    "TD": "Start the program."
  }
},
{
  "id": "BR-003",
  "description": "The TD start code is correctly formatted.",
  "condition": "WS-TERMINAL-INPUT-NUM = 2 OR WS-TERMINAL-INPUT-NUM = 3",
  "output": {
    "2": "Correctly formatted.",
    "3": "Correctly formatted."
  }
},
{
  "id": "BR-004",
  "description": "The start code is R to resume or P to pause.",
  "condition": "(RULE-OPERATION = 'RESUME') OR (RULE-OPERATION = 'PAUSE')",
  "output": {
    "RESUME": "Resume the program.",
    "PAUSE": "Pause the program."
  }
}
}[INST]       01   DFHCOMMAREA.
           03  DATA-PAYLOAD.
              05 BINARY-DIGIT            PIC 9(4)       COMP.
              05 CHARACTER-STRING        PIC X(30).
              05 NUMERIC-STRING          PIC 9(18).
              05 PACKED-DIGIT            PIC 9(15)      COMP-3.
              05 PACKED-DIGIT-WITH-COMMA PIC 9(12)V9(3) COMP-3.
              05 SIGNED-PACKED           PIC S9(12)     COMP-3.
              05 BOOL                    PIC X.
                 88 BOOL-FALSE           value X'00'.
                 88 BOOL-TRUE            value X'01' through X'FF'.
              05 RESULT.
                 09 RESULT-CODE          PIC S9(5)      VALUE +0.
                 09 RESULT-TEXT          PIC X(25).
[/INST]{
  "id": "BR-001",
  "description": "The Binary Digit field has 4 digits and must not be negative.",
  "condition": "BINARY-DIGIT < 0 or BINARY-DIGIT > 9999",
  "output": {
    "false": "The Binary Digit field must be a positive integer with 4 digits"
  }
},
{
  "id": "BR-002",
  "description": "The Character String field must not exceed 30 characters.",
  "condition": "Length of CHARACTER-STRING > 30",
  "output": {
    "false": "The Character String field must not exceed 30 characters"
  }
},
{
  "id": "BR-003",
  "description": "The Numeric String field must not exceed 18 digits.",
  "condition": "Length of NUMERIC-STRING > 18",
  "output": {
    "false": "The Numeric String field must not exceed 18 digits."
  }
},
{
  "id": "BR-004",
  "description": "The Packed Digit field must not exceed 15 digits and must not be negative.",
  "condition": "PACKED-DIGIT < 0 or Length of PACKED-DIGIT > 15",
  "output": {
    "false": "The Packed Digit field must be a positive integer with 15 digits"
  }
},
{
  "id": "BR-005",
  "description": "The Packed Digit with Comma field must not exceed 12 digits and must not be negative.",
  "condition": "PACKED-DIGIT-WITH-COMMA < 0 or Length of PACKED-DIGIT-WITH-COMMA > 12",
  "output": {
    "false": "The Packed Digit with Comma field must be a positive integer with 12 digits"
  }
},
{
  "id": "BR-006",
  "description": "The Signed Packed field must not exceed 12 digits and can be negative.",
  "condition": "Length of SIGNED-PACKED > 12",
  "output": {
    "false": "The Signed Packed field must not exceed 12 digits"
  }
},
{
  "id": "BR-007",
  "description": "The Bool field must be either X'00' or X'01' through X'FF.",
  "condition": "BOOL not equal X'00' and BOOL not equal X'01' and BOOL not equal X'FF'",
  "output": {
    "false": "The Bool field must be either X'00' or X'01' through X'FF'"
  }
},
{
  "id": "BR-008",
  "description": "The Result Code field must be +0.",
  "condition": "RESULT-CODE != +0",
  "output": {
    "false": "The Result Code field must be +0"
  }
},
{
  "id": "BR-009",
  "description": "The Result Text field must not exceed 25 characters.",
  "condition": "Length of RESULT-TEXT > 25",
  "output": {
    "false": "The Result Text field must not exceed 25 characters"
  }
}[INST]       TITLE 'Sample program that treats different types of COBOL data'
       IDENTIFICATION DIVISION.
       PROGRAM-ID.    "EDUPGM".
       Author.        "Giovanni Creato/Italy/IBM".
       DATE-WRITTEN.   20/11/2014.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER.  IBM-zSeries WITH DEBUGGING MODE.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 Program-Description.
           03 NN.
              05 pic x(10)   value 'EDUPGM  : '.
       01 WS-VARIABLES.
           03 DISPLAYABLE-NUMERIC             PIC -z(3)9.
           03 REQUIRED-CA-LEN                 PIC S9(4)      VALUE +0.
           03  VALID-INPUT-PARAMETERS         PIC X.
              88 VALID-INPUT-PARAMETERS-FALSE value X'00'.
              88 VALID-INPUT-PARAMETERS-TRUE  value X'01' through X'FF'.
           03  Switches.
              05 Switch-condition       Pic X value space.
                 88 Switch-condition-1 value "A".
                 88 Switch-condition-2 value "B".
       LINKAGE SECTION.
           COPY EDUCPY.
       PROCEDURE DIVISION.
       MAIN-PROGRAM          section.
      D    DISPLAY NN 'Starting'
           PERFORM INPUT-PARAMETER-CHECK.
           if VALID-INPUT-PARAMETERS-TRUE  then
               PERFORM BUSINESS-LOGIC
           else
               MOVE -1 TO RESULT-CODE
               MOVE 'INVALID INPUT PARAMETERS'
                    TO RESULT-TEXT
           end-if.
      D    MOVE RESULT-CODE  TO DISPLAYABLE-NUMERIC.
      D    DISPLAY NN 'Returning with RESULT-CODE : '
      D                               DISPLAYABLE-NUMERIC.
           PERFORM END-PROGRAM.
       INPUT-PARAMETER-CHECK section.
           IF EIBCALEN IS EQUAL TO ZERO
               DISPLAY NN 'NO COMMAREA RECEIVED. ABENDING THE TASK'
               EXEC CICS ABEND ABCODE('LENG') NODUMP END-EXEC
           END-IF
      D    MOVE ZERO                       TO REQUIRED-CA-LEN
      D    ADD LENGTH OF BINARY-DIGIT      TO REQUIRED-CA-LEN
      D    ADD LENGTH OF CHARACTER-STRING  TO REQUIRED-CA-LEN
      D    ADD LENGTH OF NUMERIC-STRING    TO REQUIRED-CA-LEN
      D    ADD LENGTH OF PACKED-DIGIT      TO REQUIRED-CA-LEN
      D    MOVE REQUIRED-CA-LEN            TO DISPLAYABLE-NUMERIC
      D    DISPLAY NN 'PARTIAL SUM IS  : ' DISPLAYABLE-NUMERIC
      D    ADD LENGTH OF SIGNED-PACKED     TO REQUIRED-CA-LEN
      D    MOVE REQUIRED-CA-LEN            TO DISPLAYABLE-NUMERIC
      D    DISPLAY NN 'PARTIAL SUM IS  : ' DISPLAYABLE-NUMERIC
      D    ADD LENGTH OF BOOL              TO REQUIRED-CA-LEN
      D    ADD LENGTH OF RESULT-CODE       TO REQUIRED-CA-LEN
      D    MOVE REQUIRED-CA-LEN            TO DISPLAYABLE-NUMERIC
      D    DISPLAY NN 'PARTIAL SUM IS  : ' DISPLAYABLE-NUMERIC
      D    ADD LENGTH OF RESULT-TEXT       TO REQUIRED-CA-LEN
      D    MOVE REQUIRED-CA-LEN            TO DISPLAYABLE-NUMERIC
      D    DISPLAY NN 'PARTIAL SUM IS  : ' DISPLAYABLE-NUMERIC
           MOVE LENGTH OF DATA-PAYLOAD     TO REQUIRED-CA-LEN
      D    MOVE REQUIRED-CA-LEN            TO DISPLAYABLE-NUMERIC
      D    DISPLAY NN 'MINIMUM COMMAREA LENGTH IS : '
                                              DISPLAYABLE-NUMERIC
           IF EIBCALEN IS LESS THAN REQUIRED-CA-LEN
               MOVE EIBCALEN               TO DISPLAYABLE-NUMERIC
               DISPLAY NN 'COMMAREA SHORTER THAN : ' DISPLAYABLE-NUMERIC
                          '. ABEND THE TASK'
               EXEC CICS ABEND ABCODE('GCCO') NODUMP END-EXEC
           END-IF
           MOVE ZERO   TO RESULT-CODE
           MOVE SPACES TO RESULT-TEXT
           Set VALID-INPUT-PARAMETERS-TRUE to True.
           if CHARACTER-STRING IS NOT ALPHABETIC then
      D         DISPLAY NN 'CHARACTER-STRING IS NOT ALPHABETIC'
                Set VALID-INPUT-PARAMETERS-FALSE to TRUE.
           if NUMERIC-STRING IS NOT NUMERIC then
      D         DISPLAY NN 'NUMERIC-STRING IS NOT NUMERIC'
                Set VALID-INPUT-PARAMETERS-FALSE to TRUE.
           if PACKED-DIGIT IS NOT NUMERIC then
      D         DISPLAY NN 'PACKED-DIGIT IS NOT NUMERIC'
                Set VALID-INPUT-PARAMETERS-FALSE to TRUE.
           if SIGNED-PACKED IS NOT NUMERIC then
      D         DISPLAY NN 'SIGNED-PACKED IS NOT NUMERIC'
                Set VALID-INPUT-PARAMETERS-FALSE to TRUE.
           if BOOL IS NOT NUMERIC then
      D         DISPLAY NN 'BOOL IS NOT NUMERIC'
                Set VALID-INPUT-PARAMETERS-FALSE to TRUE.
       BUSINESS-LOGIC        section.
      D         DISPLAY NN 'Performing Business Logic'.
                MOVE ZERO TO RESULT-CODE.
                MOVE 'PARAMETERS ARE ALL OK'
                     TO RESULT-TEXT.
       END-PROGRAM           section.
      D         DISPLAY NN 'Performing END-PROGRAM'.
                EXEC CICS RETURN END-EXEC.
[/INST]{
  "id": "BR-001",
  "description": "The minimum length of an incoming commarea should be the sum of the length of all its fields.",
  "condition": "EIBCALEN < REQUIRED-CA-LEN",
  "output": {
    "abort": "The task is aborted."
  }
}
{
  "id": "BR-002",
  "description": "Business Logic should not be performed if there is invalid input.",
  "condition": "VALID-INPUT-PARAMETERS-TRUE",
  "output": {
    "continue": "BUSINESS-LOGIC is performed"
  }
}
{
  "id": "BR-003",
  "description": "If there is no incoming commarea, the task should be aborted.",
  "condition": "EIBCALEN = 0",
  "output": {
    "abort": "The task is aborted."
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. knuth-shuffle.
       DATA DIVISION.
       LOCAL-STORAGE SECTION.
       01  i                       PIC 9(2).
       01  j                       PIC 9(2).
       01  temp                    PIC 9(2).
       LINKAGE SECTION.
       78  Table-Len               VALUE 16.
       01  ttable-area.
           03  ttable              PIC 9(2) OCCURS Table-Len TIMES.
       PROCEDURE DIVISION USING ttable-area.
           MOVE FUNCTION RANDOM(FUNCTION CURRENT-DATE (11:6)) TO i
           PERFORM VARYING i FROM Table-Len BY -1 UNTIL i = 0
               COMPUTE j =
                   FUNCTION MOD(FUNCTION RANDOM * 10000, Table-Len) + 1
               MOVE ttable (i) TO temp
               MOVE ttable (j) TO ttable (i)
               MOVE temp TO ttable (j)
           END-PERFORM
           GOBACK
           .
[/INST]{
  "id": "BR-002",
  "description": "To shuffle a table the data of two randomly selected entries are swapped between each other.",
  "condition": "ttable (i) = temp",
  "output": {
    "swap": "ttable (i) = temp"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. log-deck.
       DATA DIVISION.
       LOCAL-STORAGE SECTION.
          01 IDX PIC 9(2).
       LINKAGE SECTION.
       78 NUM-CARDS               VALUE 16.
       01 DECK-REC.
         02 CARDS PIC 9(2) OCCURS NUM-CARDS TIMES.
       PROCEDURE DIVISION USING DECK-REC.
          DISPLAY " "
          PERFORM LOG-DECK VARYING IDX FROM 1 BY 1 UNTIL IDX>NUM-CARDS.
          GOBACK
          .
        LOG-DECK.
          DISPLAY 'deck [' IDX '] = ' CARDS (IDX).
[/INST]{
  "id": "BR-001",
  "description": "A deck has \\n16 cards, and it must be logged to display each card and its index.",
  "condition": null,
  "output": {
    "card": "deck [IDX] = CARDS (IDX)"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. log-kitty.
       DATA DIVISION.
       LOCAL-STORAGE SECTION.
          01 I PIC 9(2).
       LINKAGE SECTION.
       78 NUM-CARDS               VALUE 4.
       01 KITTY-REC.
         02 PRIZE-CARD PIC 9(2).
         02 KITTY-CARDS PIC 9(2) OCCURS NUM-CARDS TIMES.
       PROCEDURE DIVISION USING KITTY-REC.
          DISPLAY " "
          PERFORM SHOW-KITTY VARYING I FROM 1 BY 1 UNTIL I>NUM-CARDS.
          GOBACK
          .
        SHOW-KITTY.
          DISPLAY 'kitty [' I '] = ' KITTY-CARDS (I).
[/INST]{
  "id": "BR-001",
  "description": "The program displays the content of the array KITTY-CARDS with a header 'kitty' followed by the index in square brackets.",
  "condition": "KITTY-CARDS(I)",
  "output": {
    "display": "kitty [I] = KITTY-CARDS (I)"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. log-player.
       DATA DIVISION.
       LOCAL-STORAGE SECTION.
          01 I PIC 9(2).
       LINKAGE SECTION.
       78 NUM-CARDS               VALUE 4.
       01 PLAYER-REC.
          02 PLAYER-NAME PIC X(6).      
          02 PLAYER-BID PIC 9(2).
          02 PLAYER-POINTS PIC 9(2).
          02 PLAYER-STRATEGY PIC 9(1).
          02 PLAYER-HAND PIC 9(2) OCCURS NUM-CARDS TIMES.
       PROCEDURE DIVISION USING PLAYER-REC.
          DISPLAY " "
          DISPLAY "name: " PLAYER-NAME " (" PLAYER-STRATEGY ")"
          DISPLAY "bid: " PLAYER-BID
          DISPLAY "points: " PLAYER-POINTS
          PERFORM LOG-HAND VARYING I FROM 1 BY 1 UNTIL I > NUM-CARDS.
          GOBACK
          .
        LOG-HAND.
          DISPLAY 'hand [' I '] = ' PLAYER-HAND (I).
[/INST]{
  "id": "BR-001",
  "description": "Each player has a name, a bid, and a points amount",
  "condition": null,
  "output": {
    "attributes": [
      "PLAYER-NAME",
      "PLAYER-BID",
      "PLAYER-POINTS"
    ]
  }
}
{
  "id": "BR-002",
  "description": "Each player has a strategy, which is a single digit number",
  "condition": null,
  "output": {
    "attribute": "PLAYER-STRATEGY"
  }
}
{
  "id": "BR-003",
  "description": "Each player has a hand of cards, with each card being a two-digit number",
  "condition": null,
  "output": {
    "hand": "PLAYER-HAND"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. player-turn.
       DATA DIVISION.
       LOCAL-STORAGE SECTION.
          01 I PIC 9(2).
          78 STRATEGY-NEXT    VALUE 1.
          78 STRATEGY-MAX     VALUE 2.
          78 STRATEGY-NEAREST VALUE 3.
       LINKAGE SECTION.
       78 NUM-CARDS        VALUE 4.
       01 PRIZE-CARD PIC 9(2).
       01 PLAYER-REC.
         02 PLAYER-NAME PIC X(6).      
         02 PLAYER-BID PIC 9(2).
         02 PLAYER-POINTS PIC 9(2).
         02 PLAYER-STRATEGY PIC 9(1).
         02 PLAYER-HAND PIC 9(2) OCCURS NUM-CARDS TIMES.
       PROCEDURE DIVISION USING PRIZE-CARD, PLAYER-REC.
          MOVE 0 TO PLAYER-BID.
          PERFORM PICK-CARD VARYING I FROM 1 BY 1 UNTIL I > NUM-CARDS.
          GOBACK
          .
       PICK-CARD.
         IF PLAYER-BID = 0
           IF PLAYER-STRATEGY = STRATEGY-NEXT
             CALL "strategy-next" USING PRIZE-CARD, PLAYER-REC
           ELSE IF PLAYER-STRATEGY = STRATEGY-MAX
             CALL "strategy-max" USING PRIZE-CARD, PLAYER-REC
           ELSE IF PLAYER-STRATEGY = STRATEGY-NEAREST
             CALL "strategy-nearest" USING PRIZE-CARD, PLAYER-REC
           ELSE 
             DISPLAY "TRACER SEVERE ERROR P-S: " PLAYER-STRATEGY
           END-IF
         END-IF.
[/INST]{
  "id": "BR-001",  "description": "A strategy for the player to play the game is required.", "condition": "PLAYER-STRATEGY", "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. strategy-max.
       DATA DIVISION.
       LOCAL-STORAGE SECTION.
          01 I PIC 9(2).
          01 MAX-CARD PIC 9(2) VALUE 0.
          01 IDX-MAX-CARD PIC 9(1).
       LINKAGE SECTION.
       78 NUM-CARDS               VALUE 4.
       01 PRIZE-CARD PIC 9(2).
       01 PLAYER-REC.
         02 PLAYER-NAME PIC X(6).      
         02 PLAYER-BID PIC 9(2).
         02 PLAYER-POINTS PIC 9(2).
         02 PLAYER-STRATEGY PIC 9(1).
         02 PLAYER-HAND PIC 9(2) OCCURS NUM-CARDS TIMES.
       PROCEDURE DIVISION USING PRIZE-CARD, PLAYER-REC.
          MOVE 0 TO PLAYER-BID.
          MOVE 0 TO MAX-CARD.
          PERFORM FIND-MAX VARYING I FROM 1 BY 1 UNTIL I > NUM-CARDS.
          PERFORM SELECT-MAX.
          GOBACK
          .
       FIND-MAX.
         IF PLAYER-HAND (I) > MAX-CARD
           MOVE PLAYER-HAND (I) TO MAX-CARD
           MOVE I TO IDX-MAX-CARD 
         END-IF.
       SELECT-MAX.
         MOVE PLAYER-HAND (IDX-MAX-CARD) TO PLAYER-BID.
         MOVE 0 TO PLAYER-HAND (IDX-MAX-CARD). 
[/INST]{
  "id": "BR-001",
  "description": "The player's bid is the highest card in their hand.",
  "condition": "PLAYER-HAND (I) > MAX-CARD",
  "output": {
    "set-max-card": "MOVE PLAYER-HAND (I) TO MAX-CARD",
    "set-idx-max-card": "MOVE I TO IDX-MAX-CARD"
  }
},
{
  "id": "BR-002",
  "description": "After selecting the highest card, the player's bid is set to the highest card, and the highest card is removed from their hand.",
  "condition": "1 is true",
  "output": {
    "set-player-bid": "MOVE PLAYER-HAND (IDX-MAX-CARD) TO PLAYER-BID",
    "set-player-hand": "MOVE 0 TO PLAYER-HAND (IDX-MAX-CARD)"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. strategy-nearest.
       DATA DIVISION.
       LOCAL-STORAGE SECTION.
          01 I PIC 9(2).
          01 THIS-CARD-DISTANCE PIC 9(2).
          01 MIN-CARD-DISTANCE PIC 9(2) VALUE 99.
          01 IDX-NEAREST-CARD PIC 9(1).
       LINKAGE SECTION.
       78 NUM-CARDS               VALUE 4.
       01 PRIZE-CARD PIC 9(2).
       01 PLAYER-REC.
         02 PLAYER-NAME PIC X(6).      
         02 PLAYER-BID PIC 9(2).
         02 PLAYER-POINTS PIC 9(2).
         02 PLAYER-STRATEGY PIC 9(1).
         02 PLAYER-HAND PIC 9(2) OCCURS NUM-CARDS TIMES.
       PROCEDURE DIVISION USING PRIZE-CARD, PLAYER-REC.
          MOVE 0 TO PLAYER-BID.
          MOVE 99 TO MIN-CARD-DISTANCE.
          PERFORM FIND-NEAREST VARYING I FROM 1 BY 1 UNTIL I > NUM-CARDS.
          PERFORM SELECT-NEAREST.
          GOBACK
          .
       FIND-NEAREST.
         IF PLAYER-HAND (I) > 0
           COMPUTE THIS-CARD-DISTANCE = PRIZE-CARD - PLAYER-HAND (I)
           IF THIS-CARD-DISTANCE < 0
             COMPUTE THIS-CARD-DISTANCE = -1 * THIS-CARD-DISTANCE
           END-IF
           IF THIS-CARD-DISTANCE < MIN-CARD-DISTANCE
             MOVE THIS-CARD-DISTANCE TO MIN-CARD-DISTANCE
             MOVE I TO IDX-NEAREST-CARD 
           END-IF
         END-IF.
       SELECT-NEAREST.
         MOVE PLAYER-HAND (IDX-NEAREST-CARD) TO PLAYER-BID.
         MOVE 0 TO PLAYER-HAND (IDX-NEAREST-CARD). 
[/INST]{
  "id": "BR-002",
  "description": "To select the card closest to the prize card, compute the difference between the values of each player's hand and the prize card, and find the smallest difference.",
  "condition": "PLAYER-HAND (I) > 0",
  "output": {
    "true": "COMPUTE THIS-CARD-DISTANCE = PRIZE-CARD - PLAYER-HAND (I)"
  }
},
{
  "id": "BR-003",
  "description": "If the computed difference is negative, transform it to a positive value.",
  "condition": "THIS-CARD-DISTANCE < 0",
  "output": {
    "true": "COMPUTE THIS-CARD-DISTANCE = -1 * THIS-CARD-DISTANCE"
  }
},
{
  "id": "BR-004",
  "description": "If the computed difference is smaller than the minimum difference found so far, update the minimum difference and the index of the nearest card.",
  "condition": "THIS-CARD-DISTANCE < MIN-CARD-DISTANCE",
  "output": {
    "true": [
      "MOVE THIS-CARD-DISTANCE TO MIN-CARD-DISTANCE",
      "MOVE I TO IDX-NEAREST-CARD"
    ]
  }
},
{
  "id": "BR-005",
  "description": "Select the card closest to the prize card by moving its value to the player's bid and removing it from the player's hand.",
  "condition": null,
  "output": {
    "output": [
      "MOVE PLAYER-HAND (IDX-NEAREST-CARD) TO PLAYER-BID",
      "MOVE 0 TO PLAYER-HAND (IDX-NEAREST-CARD)."
    ]
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. strategy-next.
       DATA DIVISION.
       LOCAL-STORAGE SECTION.
          01 I PIC 9(2).
       LINKAGE SECTION.
       78 NUM-CARDS               VALUE 4.
       01 PRIZE-CARD PIC 9(2).
       01 PLAYER-REC.
         02 PLAYER-NAME PIC X(6).      
         02 PLAYER-BID PIC 9(2).
         02 PLAYER-POINTS PIC 9(2).
         02 PLAYER-STRATEGY PIC 9(1).
         02 PLAYER-HAND PIC 9(2) OCCURS NUM-CARDS TIMES.
       PROCEDURE DIVISION USING PRIZE-CARD, PLAYER-REC.
          MOVE 0 TO PLAYER-BID.
          PERFORM SELECT-NEXT VARYING I FROM 1 BY 1 UNTIL I > NUM-CARDS.
          GOBACK
          .
       SELECT-NEXT.
         IF PLAYER-BID = 0 AND PLAYER-HAND (I) > 0
           MOVE PLAYER-HAND (I) TO PLAYER-BID
           MOVE 0 TO PLAYER-HAND (I) 
         END-IF.
[/INST]{
  "id": "BR-001",
  "description": "The player bid becomes the card in hand if the bid is 0 and it is a greater than 0 card.",
  "condition": "PLAYER-BID = 0 AND PLAYER-HAND (I) > 0",
  "output": {
    "update_bid": "Move PLAYER-HAND (I) to PLAYER-BID.",
    "update_hand": "Move 0 to PLAYER-HAND (I)."
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. WARO.
       DATA DIVISION.
         WORKING-STORAGE SECTION.
         01 GREETING PIC A(10) VALUE 'WARO COBOL'.
         01 I PIC 9(2).
         01 J PIC 9(2).
         01 X PIC 9(2).
         01 Y PIC 9(2).
         01 HIGH-BID PIC 9(2).
         01 HIGH-POINTS PIC 9(2).
         01 IDX-ROUND-WINNER PIC 9(1).
         01 IDX-GAME-WINNER PIC 9(1).
         78 NUM-CARDS-HAND VALUE 4.
         78 NUM-CARDS-DECK VALUE 16.
         78 STRATEGY-NEXT VALUE 1.
         78 STRATEGY-MAX VALUE 2.
         78 STRATEGY-NEAREST VALUE 3.
         01 PLAYER1-REC.
            02 PLAYER1-NAME PIC X(6) VALUE '  Bach'.      
            02 PLAYER1-BID PIC 9(2).
            02 PLAYER1-POINTS PIC 9(2).
            02 PLAYER1-STRATEGY PIC 9(1) VALUE STRATEGY-NEXT.
            02 PLAYER1-HAND PIC 9(2) OCCURS NUM-CARDS-HAND TIMES.
         01 PLAYER2-REC.
            02 PLAYER2-NAME PIC X(6) VALUE 'Chopin'.      
            02 PLAYER2-BID PIC 9(2).
            02 PLAYER2-POINTS PIC 9(2).
            02 PLAYER2-STRATEGY PIC 9(1) VALUE STRATEGY-MAX.
            02 PLAYER2-HAND PIC 9(2) OCCURS NUM-CARDS-HAND TIMES.
         01 PLAYER3-REC.
            02 PLAYER3-NAME PIC X(6) VALUE 'Mozart'.      
            02 PLAYER3-BID PIC 9(2).
            02 PLAYER3-POINTS PIC 9(2).
            02 PLAYER3-STRATEGY PIC 9(1) VALUE STRATEGY-NEAREST.
            02 PLAYER3-HAND PIC 9(2) OCCURS NUM-CARDS-HAND TIMES.
         01 KITTY-REC.
            02 PRIZE-CARD PIC 9(2).
            02 KITTY-CARDS PIC 9(2) OCCURS NUM-CARDS-HAND TIMES.
         01 DECK-REC.
            02 DECK-CARDS PIC 9(2) OCCURS NUM-CARDS-DECK TIMES.
       PROCEDURE DIVISION.
       BEGIN.
         DISPLAY "TRACER : " GREETING.
         PERFORM INIT-DECK VARYING I FROM 1 BY 1 UNTIL I>NUM-CARDS-DECK.
         CALL 'knuth-shuffle' USING DECK-REC.
         CALL 'log-deck' USING DECK-REC.
         PERFORM ASSIGN-CARD 
           VARYING I FROM 1 BY 1 UNTIL I > NUM-CARDS-DECK.
         CALL 'log-kitty' USING KITTY-REC.
         CALL 'log-player' USING PLAYER1-REC.
         CALL 'log-player' USING PLAYER2-REC.
         CALL 'log-player' USING PLAYER3-REC.
         PERFORM PLAY-ROUND
           VARYING I FROM 1 BY 1 UNTIL I > NUM-CARDS-HAND.
         PERFORM PICK-GAME-WINNER.
         DISPLAY "TRACER Ready."
       STOP RUN.
       PICK-GAME-WINNER.
         MOVE PLAYER1-POINTS TO HIGH-POINTS.
         MOVE 1 TO IDX-GAME-WINNER.   
         IF PLAYER2-POINTS > HIGH-POINTS
           MOVE PLAYER2-POINTS TO HIGH-POINTS
           MOVE 2 TO IDX-GAME-WINNER   
         END-IF.
         IF PLAYER3-POINTS > HIGH-POINTS
           MOVE PLAYER3-POINTS TO HIGH-POINTS
           MOVE 3 TO IDX-GAME-WINNER  
         END-IF.
         IF IDX-GAME-WINNER = 1
           DISPLAY "TRACER WINNER: " PLAYER1-NAME
         ELSE IF IDX-GAME-WINNER = 2
           DISPLAY "TRACER WINNER: " PLAYER2-NAME
         ELSE IF IDX-GAME-WINNER = 3
           DISPLAY "TRACER WINNER: " PLAYER3-NAME
         ELSE 
           DISPLAY "TRACER SEVERE ERROR I-G-W: " IDX-GAME-WINNER
         END-IF.
       PLAY-ROUND.
         MOVE KITTY-CARDS (I) TO PRIZE-CARD.
         DISPLAY "TRACER round " I " prize: " PRIZE-CARD.
         CALL 'player-turn' USING PRIZE-CARD, PLAYER1-REC.
         CALL 'player-turn' USING PRIZE-CARD, PLAYER2-REC.
         CALL 'player-turn' USING PRIZE-CARD, PLAYER3-REC.
         PERFORM PICK-ROUND-WINNER.
         PERFORM AWARD-WINNER.
         CALL 'log-player' USING PLAYER1-REC.
         CALL 'log-player' USING PLAYER2-REC.
         CALL 'log-player' USING PLAYER3-REC.
       AWARD-WINNER.
         IF IDX-ROUND-WINNER = 1
           ADD PRIZE-CARD TO PLAYER1-POINTS
         ELSE IF IDX-ROUND-WINNER = 2
           ADD PRIZE-CARD TO PLAYER2-POINTS
         ELSE IF IDX-ROUND-WINNER = 3
           ADD PRIZE-CARD TO PLAYER3-POINTS
         ELSE
           DISPLAY "TRACER SEVERE ERROR I-R-W: " IDX-ROUND-WINNER
         END-IF.
       PICK-ROUND-WINNER.
         MOVE PLAYER1-BID TO HIGH-BID.
         MOVE 1 TO IDX-ROUND-WINNER.   
         IF PLAYER2-BID > HIGH-BID
           MOVE PLAYER2-BID TO HIGH-BID
           MOVE 2 TO IDX-ROUND-WINNER   
         END-IF.
         IF PLAYER3-BID > HIGH-BID
           MOVE PLAYER3-BID TO HIGH-BID
           MOVE 3 TO IDX-ROUND-WINNER  
         END-IF.
       ASSIGN-CARD.
         COMPUTE J = I - 1.
         DIVIDE NUM-CARDS-HAND INTO J GIVING X REMAINDER Y.
         ADD 1 TO Y.
         IF X = 0 
           MOVE DECK-CARDS (I) TO KITTY-CARDS (Y)
         ELSE IF X = 1
           MOVE DECK-CARDS (I) TO PLAYER1-HAND (Y)
         ELSE IF X = 2
           MOVE DECK-CARDS (I) TO PLAYER2-HAND (Y)
         ELSE IF X = 3
           MOVE DECK-CARDS (I) TO PLAYER3-HAND (Y)
         ELSE
           DISPLAY "TRACER SEVERE ERROR I: " I
         END-IF.
       INIT-DECK.
         MOVE I TO DECK-CARDS (I).
[/INST]{
  "id": "BR-001",
  "description": "The prize card in each round will belong to the player with the highest bid",
  "condition": "Player-bid > highest-bid",
  "output": {
    "wins": "Player with highest bid wins the prize card."
  }
}
{
  "id": "BR-002",
  "description": "The game winner is the player with the highest points at the end of all rounds.",
  "condition": "Player-points > highest-points",
  "output": {
    "wins": "Player with the highest points at the end is declared the game winner."
  }
}
{
  "id": "BR-003",
  "description": "In each round, 4 cards will be distributed evenly among 3 players & the kitty. For example, if the number of cards is 12, player 1 will get 3, player 2 will get 3, player 3 will get 3 and kitty will get 3 cards.",
  "condition": "Num-cards-hand div num-players-active = rounded(num-cards-hand/num-players-active)",
  "output": {
    "tie": "Each player and kitty gets equal number of cards. Number of cards for each player and kitty = num-cards-hand/num-players-active rounded off to an integer"
  }
}
{
  "id": "BR-004",
  "description": "The prize card will be the last card of the deck.",
  "condition": "Index-of-prize-card = num-cards-deck",
  "output": {
    "tie": "Last card is picked as the prize card."
  }
}
{
  "id": "BR-005",
  "description": "Each player will play \"next\" \"max\" or \"nearest\" strategy.",
  "condition": "player-strategy = some(next,max,nearest)",
  "output": {
    "tie": "Each player has a unique strategy."
  }
}[INST]//TOTCNTRY    JOB (COBOL),'COVID19',CLASS=A,MSGCLASS=H,MSGLEVEL=(0,0)   00000100
//COMPLINK   EXEC COBUCL                                                00000200
//COB.SYSLIB   DD DISP=SHR,DSNAME=SYS1.COBLIB                           00000300
//             DD DISP=SHR,DSNAME=SYS1.LINKLIB                          00000400
//COB.SYSPUNCH DD DUMMY                                                 00000500
//COB.SYSIN    DD *                                                     00000600
       IDENTIFICATION DIVISION.                                         00001400
       PROGRAM-ID.   'TOTCNTRY'.                                        00001500
       AUTHOR.       'DAVID ASTA'.                                      00001600
       INSTALLATION. 'MVS 3.8J TK4-'.                                   00001700
       DATE-WRITTEN. '14/07/2020'.                                      00001800
       DATE-COMPILED.                                                   00001900
       REMARKS.      'V1R1M0'.                                          00002000
       ENVIRONMENT DIVISION.                                            00002201
       INPUT-OUTPUT SECTION.                                            00002401
       FILE-CONTROL.                                                    00002501
           SELECT DAILY-FILE     ASSIGN DA-S-DAYFIL.                    00002601
           SELECT TOTCNTRY-FILE  ASSIGN DA-S-TOTCTR.                    00002702
       DATA DIVISION.                                                   00002901
       FILE SECTION.                                                    00003101
       FD  DAILY-FILE                                                   00003301
           LABEL RECORDS ARE STANDARD                                   00003501
           BLOCK CONTAINS 0 RECORDS                                     00003601
           RECORD CONTAINS 80 CHARACTERS.                               00003701
       01  DAILY-RECORD.                                                00003801
           05 DAY-DATE.                                                 00003901
              10 DAY-DATE-YYYY    PIC X(04).                            00004001
              10 DAY-DATE-MM      PIC X(02).                            00004101
              10 DAT-DATE-DD      PIC X(02).                            00004201
           05 DAY-CASES           PIC 9(08).                            00004301
           05 DAY-DEATHS          PIC 9(08).                            00004401
           05 DAY-COUNTRYCODE     PIC A(03).                            00004501
           05 DAY-COUNTRYNAME     PIC X(40).                            00004601
           05 FILLER              PIC X(13).                            00004701
       FD  TOTCNTRY-FILE                                                00004902
           RECORDING MODE F                                             00005102
           LABEL RECORDS ARE STANDARD                                   00005202
           BLOCK CONTAINS 0 RECORDS                                     00005302
           RECORD CONTAINS 59 CHARACTERS.                               00005402
       01  TOT-RECORD             PIC X(59).                            00005502
       WORKING-STORAGE SECTION.                                         00005701
       01  SWITCHES.                                                    00005901
           05 END-OF-FILE         PIC X      VALUE 'N'.                 00006002
              88 EOF                         VALUE 'Y'.                 00006102
       01  WS-TOTALS-RECORD.                                            00006202
           05 WS-TOT-COUNTRYCODE  PIC A(03).                            00006302
           05 WS-TOT-CASES        PIC 9(08).                            00006402
           05 WS-TOT-DEATHS       PIC 9(08).                            00006502
           05 WS-TOT-COUNTRYNAME  PIC X(40).                            00006603
       PROCEDURE DIVISION.                                              00006801
       0000-MAIN.                                                       00007001
           OPEN INPUT  DAILY-FILE,                                      00007102
                OUTPUT TOTCNTRY-FILE.                                   00007202
           PERFORM 1000-READ-DAILY-DATA THRU 1000-EXIT                  00007302
               UNTIL EOF.                                               00007402
           WRITE TOT-RECORD FROM WS-TOTALS-RECORD.                      00007503
           CLOSE DAILY-FILE,                                            00007602
                 TOTCNTRY-FILE.                                         00007702
       0000-EXIT.                                                       00007801
           STOP RUN.                                                    00007901
       1000-READ-DAILY-DATA.                                            00008102
           READ DAILY-FILE                                              00008302
               AT END MOVE 'Y' TO END-OF-FILE.                          00008402
           IF NOT EOF THEN                                              00008502
               PERFORM 2000-PROCESS-DAILY-DATA THRU 2000-EXIT.          00008602
       1000-EXIT.                                                       00008702
           EXIT.                                                        00008802
       2000-PROCESS-DAILY-DATA.                                         00009002
           IF DAY-COUNTRYNAME = WS-TOT-COUNTRYNAME THEN                 00009202
               ADD DAY-CASES  TO WS-TOT-CASES                           00009302
               ADD DAY-DEATHS TO WS-TOT-DEATHS                          00009402
           ELSE                                                         00009501
               PERFORM 2001-RECORD-TOTALS-DATA THRU 2001-EXIT           00009603
               MOVE DAY-CASES       TO WS-TOT-CASES                     00009702
               MOVE DAY-DEATHS      TO WS-TOT-DEATHS                    00009802
               MOVE DAY-COUNTRYCODE TO WS-TOT-COUNTRYCODE               00009903
               MOVE DAY-COUNTRYNAME TO WS-TOT-COUNTRYNAME.              00010003
       2000-EXIT.                                                       00010102
           EXIT.                                                        00010201
       2001-RECORD-TOTALS-DATA.                                         00010402
           IF WS-TOT-COUNTRYCODE IS ALPHABETIC THEN                     00010603
               WRITE TOT-RECORD     FROM WS-TOTALS-RECORD.              00010703
       2001-EXIT.                                                       00010802
           EXIT.                                                        00010902
/*                                                                      00011100
//LKED.SYSLIB  DD DISP=SHR,DSNAME=SYS1.COBLIB                           00011200
//             DD DISP=SHR,DSNAME=SYS1.LINKLIB                          00011300
//             DD DISP=SHR,DSNAME=COVID19.LINKLIB                       00011400
//LKED.SYSLMOD DD DISP=SHR,DSNAME=COVID19.LINKLIB(TOTCNTRY)             00011500
//                                                                      00011600
[/INST]{
  "id": "BR-001",
  "description": "Read a record from the input file DAILY-FILE.",
  "condition": "READ DAILY-FILE",
  "output": {
    "valid": "EOF is 'N'",
    "invalid": "EOF is 'Y'"
  }
},
{
  "id": "BR-002",
  "description": "The value of DAY-COUNTRYNAME must match the value of WS-TOT-COUNTRYNAME.",
  "condition": "DAY-COUNTRYNAME = WS-TOT-COUNTRYNAME",
  "output": {
    "valid": "match",
    "invalid": "no match"
  }
},
{
  "id": "BR-003",
  "description": "The value of WS-TOT-COUNTRYCODE must be alpha characters.",
  "condition": "WS-TOT-COUNTRYCODE IS ALPHABETIC",
  "output": {
    "valid": "alpha",
    "invalid": "not alpha"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. "DIDZORCHCANCELMOVIENIGHT".
       AUTHOR.     DBAUDISCH.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 TODAY PIC 9(1) VALUE ZERO.
       01 USER-INPUT PIC A(1) VALUE SPACE.
       01 INPUT-RESULT PIC A(1) VALUE SPACE.
       01 ISMOVIENIGHT PIC A(1) VALUE "y".
       01 ISCANCELLED PIC A(1) VALUE "y".
       PROCEDURE DIVISION.
       START-HERE.
           ACCEPT TODAY FROM DAY-OF-WEEK
           IF TODAY EQUAL 6 THEN
               DISPLAY "It is saturday!"
               DISPLAY "Should there be a movie night? (y/n)"
               PERFORM RECEIVE-USER-USER-INPUT
               IF INPUT-RESULT IS NOT EQUAL SPACE AND LOW-VALUE THEN
                   MOVE INPUT-RESULT TO ISMOVIENIGHT
               END-IF
               IF ISMOVIENIGHT EQUAL 'y' THEN
                   DISPLAY "Was ist cancelled? (y/n)"
                   PERFORM RECEIVE-USER-USER-INPUT
                   IF INPUT-RESULT IS NOT EQUAL SPACE AND LOW-VALUE THEN
                       MOVE INPUT-RESULT TO ISCANCELLED
                   END-IF
                   IF ISCANCELLED EQUAL 'y' THEN
                       DISPLAY "NOT AGAIN, ZORCH! >:("
                   ELSE
                       DISPLAY "See ya at movie night! :)"
                   END-IF
               ELSE
                   DISPLAY "Then there is no movie night!"
                   DISPLAY "Try again next saturday!"
               END-IF
           ELSE
               DISPLAY "It is not saturday!"
               DISPLAY "Try again tomorrow!"
           END-IF
           STOP RUN.
       RECEIVE-USER-USER-INPUT.
           MOVE SPACE TO USER-INPUT
           MOVE SPACE TO INPUT-RESULT
           ACCEPT USER-INPUT
           MOVE FUNCTION LOWER-CASE(USER-INPUT) TO USER-INPUT
           IF USER-INPUT IS NOT EQUAL 'y' THEN
               MOVE USER-INPUT TO INPUT-RESULT
           END-IF
           EXIT.
       END PROGRAM DIDZORCHCANCELMOVIENIGHT.
[/INST]{
  "id": "BR-002",  "description": "Movie night is only planned for saturday.",
  "condition": "TODAY=6",
  "output": {
    "saturday": "It is saturday!"
  }
}
{
  "id": "BR-003",  "description": "If movie night is planned and cancelled user gets a sarcastic response.",
  "condition": "ISMOVIENIGHT=y AND ISCANCELLED=y",
  "output": {
    "sarcastic response": "NOT AGAIN, ZORCH! >:(",
    "positive response": "See ya at movie night! :)"
  }
}[INST]       IDENTIFICATION DIVISION.
       program-id. anslutdb.
       ENVIRONMENT DIVISION.
       DATA DIVISION.         
       working-storage section.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01 username                PIC  X(30) VALUE SPACE.        
       01 dbname                  PIC  X(30) VALUE SPACE.
       01 dbpasswd                PIC  X(10) VALUE SPACE.
       01 record-cnt              PIC  9(04) VALUE ZERO.
       EXEC SQL END DECLARE SECTION END-EXEC.
       EXEC SQL INCLUDE SQLCA END-EXEC.        
       PROCEDURE DIVISION.
       000-main.
           COPY setupenv_openjensen. 
           DISPLAY "*** ANSLUTNINGSTEST STARTAS ***"
           DISPLAY "*** DB: openjensen TBL: tbl_user ***"           
           PERFORM A100-connect-to-database
           GOBACK
           .
       A100-connect-to-database.
           MOVE  "openjensen"    TO   dbname
           MOVE  "jensen"        TO   username
           MOVE  SPACE           TO   dbpasswd
           EXEC SQL
               CONNECT :username IDENTIFIED BY :dbpasswd USING :dbname 
           END-EXEC
           IF  SQLSTATE NOT = ZERO
               PERFORM A900-error-routine
               STOP RUN
           END-IF
           EXEC SQL 
               SELECT COUNT(*) INTO :record-cnt FROM tbl_user  
           END-EXEC
           IF  SQLSTATE NOT = ZERO
               PERFORM A900-error-routine
           END-IF
           IF SQLSTATE = ZERO
               DISPLAY "ANTALET POSTER: " record-cnt
           END-IF
           EXEC SQL
               DISCONNECT ALL
           END-EXEC
           IF SQLSTATE = ZERO
               DISPLAY "*** ANSLUTNINGSTEST OK ***"
           END-IF
           .
       A900-error-routine.
           DISPLAY "***SQL DATABAS FEL ***"
           DISPLAY "SQLSTATE: " SQLSTATE
           EVALUATE SQLSTATE
               WHEN  "02000"
                   DISPLAY "Inga poster funna!"
               WHEN  "08003"
               WHEN  "08001"
                   DISPLAY "AnslutningsfÃ¶rsÃ¶ket misslyckadades!"            
               WHEN  SPACE
                   DISPLAY "OkÃ¤nt databasfel!"
               WHEN  OTHER
                   DISPLAY "SQLCODE: "   SQLCODE
                   DISPLAY "SQLERRMC: "  SQLERRMC
           END-EVALUATE
           .            
[/INST]{
  "id": "BR-002",
  "description": "The program connects to a database called \\\"openjensen\\\" using the username/password \\\"jensen/SPACE\\\"",
  "condition": null,
  "output": null
},
{
  "id": "BR-003",
  "description": "The program counts the number of records in the \\\"tbl_user\\\" table and displays it",
  "condition": null,
  "output": null
},
{
  "id": "BR-004",
  "description": "If the connection to the database fails, the program displays a \\\"SQL DATABASE ERROR\\\" message and the SQLSTATE code",
  "condition": "SQLSTATE NOT = ZERO",
  "output": {
    "error": "SQL DATABASE ERROR"
  }
},
{
  "id": "BR-005",
  "description": "If the SQLSTATE code is \\\"02000\\\", the program displays \\\"No records found!\\\"",
  "condition": "SQLSTATE = \"02000\"",
  "output": {
    "error": "No records found!"
  }
},
{
  "id": "BR-006",
  "description": "If the SQLSTATE code is \\\"08003\\\" or \\\"08001\\\", the program displays \\\"Connection attempt failed!\\\"",
  "condition": "SQLSTATE = \"08003\" OR SQLSTATE = \"08001\"",
  "output": {
    "error": "Connection attempt failed!"
  }
},
{
  "id": "BR-007",
  "description": "If the SQLSTATE code is empty, the program displays \\\"Unknown database error!\\\"",
  "condition": "SQLSTATE = SPACE",
  "output": {
    "error": "Unknown database error!"
  }
},
{
  "id": "BR-008",
  "description": "If the SQLSTATE code is not empty and not one of the recognized error codes, the program displays the SQLCODE and SQLERRMC",
  "condition": "SQLSTATE NOT = SPACE AND SQLSTATE NOT IN (\"02000\", \"08003\", \"08001\")",
  "output": null
}[INST]       IDENTIFICATION DIVISION.
       IDENTIFICATION DIVISION.
       program-id. bktort.       
       DATA DIVISION.
       working-storage section.
       01  ws-tort-rec.
           05  ws-tort-ort         PIC  X(40).
           05  FILLER              PIC  X.
           05  ws-tort-postnummer  PIC  X(5).      
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  dbname                  PIC  X(30) VALUE SPACE.
       01  username                PIC  X(30) VALUE SPACE.
       01  dbpasswd                PIC  X(10) VALUE SPACE.
       01  tort-cnt                PIC  9(04).
       01  tort-rec-vars.
           05  tort-ort            PIC  X(40).
           05  tort-postnr         PIC  X(05).
       EXEC SQL END DECLARE SECTION END-EXEC.
       EXEC SQL INCLUDE SQLCA END-EXEC.
       PROCEDURE DIVISION.
       MAIN-RTN.
           DISPLAY "*** CONNECT STARTED ***".
           DISPLAY "*** DB: openjensen TBL: t_ort ***".
           MOVE  "openjensen"    TO   dbname.
           MOVE  "jensen"        TO   username.
           MOVE  SPACE           TO   dbpasswd.
           EXEC SQL
               CONNECT :username IDENTIFIED BY :dbpasswd USING :dbname 
           END-EXEC.
           IF  SQLSTATE NOT = ZERO PERFORM 900-error-routine STOP RUN.
           EXEC SQL 
               SELECT COUNT(*) INTO :tort-cnt FROM t_ort
           END-EXEC.
           IF  SQLSTATE NOT = ZERO PERFORM 900-error-routine.
           DISPLAY "TOTAL RECORD: " tort-cnt.                  
           EXEC SQL 
               DECLARE C1 CURSOR FOR
               SELECT postort, postnummer
                      FROM t_ort
                      ORDER BY postort
           END-EXEC.                  
           EXEC SQL
               OPEN C1
           END-EXEC.
           IF  SQLSTATE NOT = ZERO PERFORM 900-error-routine STOP RUN.                  
           DISPLAY "------------------------------------------------".
           DISPLAY "Postort                                Postnumer".
           DISPLAY "------------------------------------------------".
           EXEC SQL 
               FETCH C1 INTO :tort-ort, :tort-postnr
           END-EXEC.
           PERFORM UNTIL SQLSTATE NOT = ZERO
              MOVE  tort-ort      TO    ws-tort-ort
              MOVE  tort-postnr   TO    ws-tort-postnummer
              DISPLAY ws-tort-rec
              EXEC SQL 
                  FETCH C1 INTO :tort-ort, :tort-postnr
              END-EXEC
           END-PERFORM.
           IF  SQLSTATE NOT = "02000" PERFORM 900-error-routine STOP RUN.             
           EXEC SQL 
               CLOSE C1 
           END-EXEC. 
           EXEC SQL 
               COMMIT WORK
           END-EXEC.             
           EXEC SQL
               DISCONNECT ALL
           END-EXEC.
           DISPLAY "*** CONNECT FINISHED SUCCESFUL ***".
           STOP RUN.
       900-error-routine.
           DISPLAY "*** SQL ERROR ***".
           DISPLAY "SQLSTATE: " SQLSTATE.
           EVALUATE SQLSTATE
              WHEN  "02000"
                 DISPLAY "Record not found"
              WHEN  "08003"
              WHEN  "08001"
                 DISPLAY "Connection falied"
              WHEN  SPACE
                 DISPLAY "Undefined error"
              WHEN  OTHER
                 DISPLAY "SQLCODE: "   SQLCODE
                 DISPLAY "SQLERRMC: "  SQLERRMC
           END-EVALUATE.
[/INST]{
  "id": "BR-001",
  "description": "The total number of records in the t_ort table is stored in the tort-cnt variable.",
  "condition": null,
  "output": {
    "total_records": "TOTAL RECORD: "
  }
}[INST]       IDENTIFICATION DIVISION.
       program-id. cgi-add-betyg.
       DATA DIVISION.
       working-storage section.
       01   switches-add.
            03  is-db-connected-switch              PIC X   VALUE 'N'.
                88  is-db-connected                         VALUE 'Y'.
            03  is-valid-init-switch                PIC X   VALUE 'N'.
                88  is-valid-init                           VALUE 'Y'.
            03  grade-is-in-table-switch            PIC X   VALUE 'N'.
                88  grade-is-in-table                       VALUE 'Y'.
            03  is-valid-table-position-switch      PIC X   VALUE 'N'.
                88  is-valid-table-position                 VALUE 'Y'.
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-printscr-string      PIC X(40)  VALUE SPACE. 
       01  wc-pagetitle            PIC X(20) VALUE 'Addera lokal'.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  wc-database              PIC  X(30).
       01  wc-passwd                PIC  X(10).       
       01  wc-username              PIC  X(30).
       EXEC SQL END DECLARE SECTION END-EXEC.             
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  tbl-grade-rec-vars.       
           05  tbl-grade-grade-id        PIC  9(4).
           05  tbl-grade-grade-grade     PIC  X(40).
           05  tbl-grade-grade-comment   PIC  X(40).
           05  tbl-grade-user-id         PIC  9(4).
           05  tbl-grade-course-id       PIC  9(4).           
       EXEC SQL END DECLARE SECTION END-EXEC.
       01  wr-rec-vars.
           05  wn-grade-grade-id         PIC  9(4) VALUE ZERO.
           05  wc-grade-grade-grade      PIC  X(40) VALUE SPACE.
           05  wc-grade-grade-comment    PIC  X(40) VALUE SPACE.
           05  wn-grade-user-id          PIC  9(4) VALUE ZERO.
           05  wn-grade-course-id        PIC  9(4) VALUE ZERO.
       EXEC SQL INCLUDE SQLCA END-EXEC.
       PROCEDURE DIVISION.
       0000-main.
           COPY setupenv_openjensen. 
           PERFORM A0100-init
           IF is-valid-init
                PERFORM B0100-connect
                IF is-db-connected
                    PERFORM B0200-add-grade
                    PERFORM Z0200-disconnect
                END-IF
           END-IF
           PERFORM C0100-closedown
           GOBACK
           .
       A0100-init.       
           CALL 'wui-print-header' USING wn-rtn-code  
           CALL 'wui-start-html' USING wc-pagetitle
           CALL 'write-post-string' USING wn-rtn-code
           IF wn-rtn-code = ZERO
               PERFORM A0110-init-add-action
           END-IF
           . 
       A0110-init-add-action.
           SET is-valid-init TO TRUE
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'grade_grade' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                                       wc-post-name wc-post-value                           
           MOVE wc-post-value TO wc-grade-grade-grade
           IF wc-grade-grade-grade = SPACE
               MOVE 'Saknar betyget fÃ¶r student' TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string
               MOVE 'N' TO is-valid-init-switch
           END-IF           
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'grade_comment' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                                wc-post-name wc-post-value
           MOVE wc-post-value TO wc-grade-grade-comment
           IF wc-grade-grade-comment = SPACE
               MOVE 'Saknar kommentar pÃ¥ betyget' TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string
               MOVE 'N' TO is-valid-init-switch
           END-IF                   
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'user_id' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code wc-post-name
                                       wc-post-value
           IF wc-post-value = SPACE
               MOVE 'Saknar student id (user_id)' TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string
               MOVE 'N' TO is-valid-init-switch
           ELSE
               MOVE FUNCTION NUMVAL(wc-post-value) TO wn-grade-user-id           
           END-IF                                
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'course_id' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code wc-post-name
                                       wc-post-value
           IF wc-post-value = SPACE
              MOVE 'Saknar kurs id' TO wc-printscr-string
              CALL 'stop-printscr' USING wc-printscr-string
              MOVE 'N' TO is-valid-init-switch
           ELSE
              MOVE FUNCTION NUMVAL(wc-post-value) TO wn-grade-course-id           
           END-IF  
           . 
       B0100-connect.
           MOVE  "openjensen"    TO   wc-database
           MOVE  "jensen"        TO   wc-username
           MOVE  SPACE           TO   wc-passwd
           EXEC SQL
               CONNECT :wc-username IDENTIFIED BY :wc-passwd
                                                 USING :wc-database 
           END-EXEC
           IF  SQLSTATE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                SET is-db-connected TO TRUE
           END-IF  
           .       
       B0200-add-grade.
           PERFORM B0210-does-user-course-exist
           IF NOT grade-is-in-table
               PERFORM B0220-get-new-row-number
               IF is-valid-table-position
                   PERFORM B0230-add-new-grade-to-table
               END-IF
           ELSE
               MOVE 'Denna student har redan ett kursbetyg.'
                    TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string
           END-IF
           .
       B0210-does-user-course-exist.
           EXEC SQL
              DECLARE ADDCHK CURSOR FOR
                 SELECT user_id, course_id
                 FROM tbl_grade
           END-EXEC      
           EXEC SQL
                OPEN ADDCHK
           END-EXEC
           EXEC SQL
               FETCH ADDCHK
                   INTO :tbl-grade-user-id, :tbl-grade-course-id
           END-EXEC
           PERFORM UNTIL SQLCODE NOT = ZERO
               IF ( tbl-grade-user-id = wn-grade-user-id
                    AND tbl-grade-course-id = wn-grade-course-id )
                    SET grade-is-in-table TO TRUE
               END-IF
              EXEC SQL
                  FETCH ADDCHK
                      INTO :tbl-grade-user-id, :tbl-grade-course-id
              END-EXEC
           END-PERFORM           
           IF  SQLSTATE NOT = '02000'
               PERFORM Z0100-error-routine
           END-IF
           EXEC SQL 
               CLOSE ADDCHK 
           END-EXEC 
           .       
       B0220-get-new-row-number.
           EXEC SQL
             DECLARE NEWROW CURSOR FOR
                 SELECT grade_id
                 FROM tbl_grade
                 ORDER BY grade_id DESC
           END-EXEC   
           EXEC SQL
                OPEN NEWROW
           END-EXEC
           EXEC SQL
               FETCH NEWROW
                   INTO :tbl-grade-grade-id
           END-EXEC       
           IF  SQLCODE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
               SET is-valid-table-position TO TRUE
               COMPUTE tbl-grade-grade-id = tbl-grade-grade-id + 1
           END-IF
           EXEC SQL 
               CLOSE NEWROW 
           END-EXEC            
           .
       B0230-add-new-grade-to-table.
           MOVE wc-grade-grade-grade TO tbl-grade-grade-grade
           MOVE wc-grade-grade-comment TO tbl-grade-grade-comment
           MOVE wn-grade-user-id TO tbl-grade-user-id
           MOVE wn-grade-course-id TO tbl-grade-course-id
           EXEC SQL
               INSERT INTO tbl_grade
               VALUES ( :tbl-grade-grade-id,
                        :tbl-grade-grade-grade,
                        :tbl-grade-grade-comment,
                        :tbl-grade-user-id,
                        :tbl-grade-course-id )
           END-EXEC 
           IF  SQLCODE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                PERFORM B0240-commit-work
                MOVE 'Nytt betyg adderat' TO wc-printscr-string
                CALL 'ok-printscr' USING wc-printscr-string
           END-IF     
           .
       B0240-commit-work.
           EXEC SQL 
               COMMIT WORK
           END-EXEC
           .           
       C0100-closedown.
           CALL 'wui-end-html' USING wn-rtn-code 
           .
       Z0100-error-routine.
           COPY z0100-error-routine.
           .
       Z0200-disconnect. 
           EXEC SQL
               DISCONNECT ALL
           END-EXEC
           .
[/INST]{
  "id": "BR-001",  "description": "The name of a post variable must be at least one character long.  \\nThis is so that the program can read and interpret the different posts from the user.",
  "condition": "wc-post-name = SPACE",
  "output": {
    "valid": "Post variable name is valid",
    "invalid": "Post variable name must be at least one character"
  }
},
{
  "id": "BR-002",  "description": "A grade value cannot be empty.  \\nThis is to ensure that user's submitted grade is valid.",
  "condition": "wc-grade-grade-grade = SPACE",
  "output": {
    "valid": "grade value is valid",
    "invalid": "grade value cannot be empty"
  }
},
{
  "id": "BR-003",  "description": "A comment on a grade cannot be empty.  \\nThis is to ensure that user's submitted comment is valid and well defined.",
  "condition": "wc-grade-grade-comment = SPACE",
  "output": {
    "valid": "Comment value is valid",
    "invalid": "Comment value cannot be empty"
  }
},
{
  "id": "BR-004",  "description": "The user id associated to a grade cannot be empty.  \\nThis user id should be a valid number.",
  "condition": "wn-grade-user-id = ZERO",
  "output": {
    "valid": "User Id is valid",
    "invalid": "User Id can't be empty"
  }
},
{
  "id": "BR-005",  "description": "The course id associated to a grade cannot be empty.  \\nThis course id should be a valid number.",
  "condition": "wn-grade-course-id = ZERO",
  "output": {
    "valid": "Course Id is valid",
    "invalid": "Course Id can't be empty"
  }
},
{
  "id": "BR-006",  "description": "Every added grade must have a unique user id and course id.  \\nExisting grades must not be overwritten.",
  "condition": "grade-is-in-table",
  "output": {
    "unique": "user and course id are unique",
    "not unique": "user and course id already exist. No grade was added"
  }
}
[INST]       IDENTIFICATION DIVISION.
       program-id. cgi-add-local.
       DATA DIVISION.
       working-storage section.
       01   switches-add.
            03  is-db-connected-switch              PIC X   VALUE 'N'.
                88  is-db-connected                         VALUE 'Y'.
            03  is-valid-init-switch                PIC X   VALUE 'N'.
                88  is-valid-init                           VALUE 'Y'.
            03  name-is-in-table-switch             PIC X   VALUE 'N'.
                88  name-is-in-table                        VALUE 'Y'.
            03  is-valid-table-position-switch      PIC X   VALUE 'N'.
                88  is-valid-table-position                 VALUE 'Y'.
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-printscr-string      PIC X(40)  VALUE SPACE. 
       01  wc-pagetitle            PIC X(20) VALUE 'Addera lokal'.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  wc-database              PIC  X(30).
       01  wc-passwd                PIC  X(10).       
       01  wc-username              PIC  X(30).
       EXEC SQL END DECLARE SECTION END-EXEC.             
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  jlocal-rec-vars.       
           05  jlokal-lokal-id      PIC  9(4).
           05  jlokal-lokalnamn     PIC  X(40).
           05  jlokal-vaningsplan   PIC  X(40).
           05  jlokal-maxdeltagare  PIC  X(40).
       EXEC SQL END DECLARE SECTION END-EXEC.
       01  wr-rec-vars.
           05  wn-lokal-id         PIC  9(4) VALUE ZERO.
           05  wc-lokalnamn        PIC  X(40) VALUE SPACE.
           05  wc-vaningsplan      PIC  X(40) VALUE SPACE.
           05  wc-maxdeltagare     PIC  X(40) VALUE SPACE.     
       EXEC SQL INCLUDE SQLCA END-EXEC.
       PROCEDURE DIVISION.
       0000-main.
           COPY setupenv_openjensen. 
           PERFORM A0100-init
           IF is-valid-init
                PERFORM B0100-connect
                IF is-db-connected
                    PERFORM B0200-add-local
                    PERFORM Z0200-disconnect
                END-IF
           END-IF
           PERFORM C0100-closedown
           GOBACK
           .
       A0100-init.       
           CALL 'wui-print-header' USING wn-rtn-code  
           CALL 'wui-start-html' USING wc-pagetitle
           CALL 'write-post-string' USING wn-rtn-code
           IF wn-rtn-code = ZERO
               PERFORM A0110-init-add-action
           END-IF
           . 
       A0110-init-add-action.
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'local-sign-name' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                                       wc-post-name wc-post-value                           
           MOVE wc-post-value TO wc-lokalnamn
           IF wc-post-value = SPACE
              MOVE ZERO TO wn-rtn-code
              MOVE SPACE TO wc-post-value
              MOVE 'local-alt-name' TO wc-post-name
              CALL 'get-post-value' USING wn-rtn-code
                                  wc-post-name wc-post-value
              MOVE wc-post-value TO wc-lokalnamn
           END-IF
           IF wc-lokalnamn = SPACE
               MOVE 'Saknar namn pÃ¥ lokal' TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string
           ELSE
               SET is-valid-init TO TRUE
           END-IF
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'plan' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code wc-post-name
                                       wc-post-value                                     
           MOVE wc-post-value TO wc-vaningsplan
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'local-max' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                                       wc-post-name wc-post-value               
           MOVE wc-post-value TO wc-maxdeltagare       
           . 
       B0100-connect.
           MOVE  "openjensen"    TO   wc-database
           MOVE  "jensen"        TO   wc-username
           MOVE  SPACE           TO   wc-passwd
           EXEC SQL
               CONNECT :wc-username IDENTIFIED BY :wc-passwd
                                                 USING :wc-database 
           END-EXEC
           IF  SQLSTATE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                SET is-db-connected TO TRUE
           END-IF  
           .       
       B0200-add-local.
           PERFORM B0210-does-local-name-exist
           IF NOT name-is-in-table
               PERFORM B0220-get-new-row-number
               IF is-valid-table-position
                   PERFORM B0230-add-local-to-table
               END-IF
           ELSE
               MOVE 'Denna lokal finns redan upplagd'
                    TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string
           END-IF
           .
       B0210-does-local-name-exist.
           EXEC SQL
             DECLARE cursaddlocal CURSOR FOR
                 SELECT Lokal_id, Lokalnamn
                 FROM T_JLOKAL
           END-EXEC      
           EXEC SQL
                OPEN cursaddlocal
           END-EXEC
           MOVE wc-lokalnamn TO jlokal-lokalnamn
           EXEC SQL
               FETCH cursaddlocal
                   INTO :jlokal-lokal-id, :jlokal-lokalnamn
           END-EXEC
           PERFORM UNTIL SQLCODE NOT = ZERO
               IF FUNCTION UPPER-CASE (wc-lokalnamn) =
                  FUNCTION UPPER-CASE (jlokal-lokalnamn)
                        SET name-is-in-table TO TRUE
               END-IF
               EXEC SQL
                   FETCH cursaddlocal
                       INTO :jlokal-lokal-id, :jlokal-lokalnamn
               END-EXEC
           END-PERFORM
           IF  SQLSTATE NOT = '02000'
                PERFORM Z0100-error-routine
           END-IF                 
           EXEC SQL 
               CLOSE cursaddlocal 
           END-EXEC 
           .       
       B0220-get-new-row-number.
           EXEC SQL
             DECLARE cursaddid CURSOR FOR
                 SELECT Lokal_id
                 FROM T_JLOKAL
                 ORDER BY Lokal_id DESC
           END-EXEC   
           EXEC SQL
                OPEN cursaddid
           END-EXEC
           EXEC SQL
               FETCH cursaddid
                   INTO :jlokal-lokal-id
           END-EXEC       
           IF  SQLCODE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
               SET is-valid-table-position TO TRUE
               COMPUTE wn-lokal-id = jlokal-lokal-id + 1             
           END-IF
           EXEC SQL 
               CLOSE cursaddid 
           END-EXEC            
           .
       B0230-add-local-to-table.
           MOVE wn-lokal-id TO jlokal-lokal-id
           MOVE wc-lokalnamn TO jlokal-lokalnamn
           MOVE wc-vaningsplan TO jlokal-vaningsplan
           MOVE wc-maxdeltagare TO jlokal-maxdeltagare
           EXEC SQL
               INSERT INTO T_JLOKAL
               VALUES (:jlokal-lokal-id, :jlokal-lokalnamn,
                       :jlokal-vaningsplan, :jlokal-maxdeltagare)
           END-EXEC 
           IF  SQLCODE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                PERFORM B0240-commit-work
                MOVE 'Lokal adderad' TO wc-printscr-string
                CALL 'ok-printscr' USING wc-printscr-string
           END-IF     
           .
       B0240-commit-work.
           EXEC SQL 
               COMMIT WORK
           END-EXEC
           .           
       C0100-closedown.
           CALL 'wui-end-html' USING wn-rtn-code 
           .
       Z0100-error-routine.
           COPY z0100-error-routine.
           .
       Z0200-disconnect. 
           EXEC SQL
               DISCONNECT ALL
           END-EXEC
           .
[/INST]{
  "id": "BR-001",
  "description": "A new local must have a unique name.",
  "condition": "name-is-in-table",
  "output": {
    "error": "Denna lokal finns redan upplagd"
  }
}
{
  "id": "BR-002",
  "description": "The name of a local must not be empty.",
  "condition": "wc-lokalnamn = SPACE",
  "output": {
    "error": "Saknar namn pÃ¥ lokal"
  }
}[INST]       IDENTIFICATION DIVISION.
       program-id. cgi-edit-betyg.
       DATA DIVISION.
       working-storage section.
       01   switches-edit.
            03  is-db-connected-switch              PIC X   VALUE 'N'.
                88  is-db-connected                         VALUE 'Y'.
            03  is-valid-init-switch                PIC X   VALUE 'N'.
                88  is-valid-init                           VALUE 'Y'.             
            03  grade-id-is-in-table-switch         PIC X   VALUE 'N'.
                88  grade-id-is-in-table                    VALUE 'Y'.                             
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-printscr-string      PIC X(40)  VALUE SPACE.        
       01  wc-pagetitle            PIC X(20) VALUE 'Uppdatera betyg'.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  wc-database              PIC  X(30).
       01  wc-passwd                PIC  X(10).       
       01  wc-username              PIC  X(30).
       EXEC SQL END DECLARE SECTION END-EXEC.              
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  tbl-grade-rec-vars.       
           05  tbl-grade-grade-id       PIC  9(4).
           05  tbl-grade-grade          PIC  X(40).
           05  tbl-grade-comment        PIC  X(40).
       EXEC SQL END DECLARE SECTION END-EXEC.
       01  wr-rec-vars.
           05  wn-grade-id         PIC  9(4) VALUE ZERO.
           05  wc-grade            PIC  X(40) VALUE SPACE.
           05  wc-comment          PIC  X(40) VALUE SPACE.  
       01  wr-cur-rec-vars.
           05  wn-cur-grade-id         PIC  9(4) VALUE ZERO.     
           05  wc-cur-grade        PIC  X(40) VALUE SPACE. 
           05  wc-cur-comment      PIC  X(40) VALUE SPACE.
       EXEC SQL INCLUDE SQLCA END-EXEC.
       PROCEDURE DIVISION.
       0000-main.
           COPY setupenv_openjensen. 
           PERFORM A0100-init
           IF is-valid-init
                PERFORM B0100-connect
                IF is-db-connected
                    PERFORM B0200-edit-grade
                    PERFORM Z0200-disconnect
                END-IF
           END-IF
           PERFORM C0100-closedown
           GOBACK
           .
       A0100-init.       
           CALL 'wui-print-header' USING wn-rtn-code  
           CALL 'wui-start-html' USING wc-pagetitle
           CALL 'write-post-string' USING wn-rtn-code
           IF wn-rtn-code = ZERO
                PERFORM A0110-init-edit-action
           END-IF
           .
       A0110-init-edit-action.
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'grade_id' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                               wc-post-name wc-post-value
           MOVE FUNCTION NUMVAL(wc-post-value) TO wn-grade-id
           IF wc-post-value = SPACE
               MOVE 'Saknar ett angivet grade id'
                    TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string      
           ELSE                 
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'grade_grade' TO wc-post-name
               CALL 'get-post-value' USING wn-rtn-code
                                    wc-post-name wc-post-value
               MOVE wc-post-value TO wc-grade   
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'grade_comment' TO wc-post-name
               CALL 'get-post-value' USING wn-rtn-code wc-post-name
                                            wc-post-value                                     
               MOVE wc-post-value TO wc-comment           
               IF wc-grade NOT = SPACE OR
                  wc-comment NOT = SPACE
                        SET is-valid-init TO TRUE                  
               ELSE
                   MOVE 'Ingen kolumn att uppdatera'
                        TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string
               END-IF   
           END-IF
           . 
       B0100-connect.
           MOVE  "openjensen"    TO   wc-database
           MOVE  "jensen"        TO   wc-username
           MOVE  SPACE           TO   wc-passwd
           EXEC SQL
               CONNECT :wc-username IDENTIFIED BY :wc-passwd
                                                 USING :wc-database 
           END-EXEC
           IF  SQLSTATE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                SET is-db-connected TO TRUE
           END-IF  
           .       
       B0200-edit-grade.
           PERFORM B0210-does-grade-id-exist
           IF grade-id-is-in-table
               PERFORM B0220-change-grade-item
           ELSE
               MOVE 'Denna student finns ej'
                    TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string
           END-IF
           .
       B0210-does-grade-id-exist.
           EXEC SQL
             DECLARE cursedit CURSOR FOR
                 SELECT grade_id, grade_grade, grade_comment
                 FROM tbl_grade
           END-EXEC      
           EXEC SQL
                OPEN cursedit
           END-EXEC
           MOVE wn-grade-id TO tbl-grade-grade-id
           EXEC SQL
               FETCH cursedit
                   INTO :tbl-grade-grade-id, :tbl-grade-grade,
                        :tbl-grade-comment
           END-EXEC
           PERFORM UNTIL SQLCODE NOT = ZERO
               IF wn-grade-id = tbl-grade-grade-id
                    SET grade-id-is-in-table TO TRUE
               MOVE tbl-grade-grade-id TO wn-cur-grade-id
               MOVE tbl-grade-grade TO wc-cur-grade
               MOVE tbl-grade-comment TO wc-cur-comment
               END-IF
               EXEC SQL
                   FETCH cursedit
                       INTO :tbl-grade-grade-id, :tbl-grade-grade,
                            :tbl-grade-comment
               END-EXEC
           END-PERFORM
           IF  SQLSTATE NOT = '02000'
                PERFORM Z0100-error-routine
           END-IF                 
           EXEC SQL 
               CLOSE cursedit 
           END-EXEC    
           .
       B0220-change-grade-item.
           IF wc-grade NOT = wc-cur-grade
               MOVE wc-grade TO tbl-grade-grade
           ELSE    
               MOVE wc-cur-grade TO tbl-grade-grade
           END-IF
           IF wc-comment NOT = wc-cur-comment
               MOVE wc-comment TO tbl-grade-comment
           ELSE
               MOVE wc-cur-comment TO tbl-grade-comment
           END-IF
           MOVE wn-grade-id TO tbl-grade-grade-id
           EXEC SQL
               UPDATE tbl_grade
                   SET grade_grade = :tbl-grade-grade,
                       grade_comment = :tbl-grade-comment
               WHERE grade_id = :tbl-grade-grade-id
           END-EXEC
           IF  SQLCODE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                PERFORM B0230-commit-work
                MOVE 'Betyg data Ã¤ndrad' TO wc-printscr-string
                CALL 'ok-printscr' USING wc-printscr-string      
           END-IF
           .           
       B0230-commit-work.
           EXEC SQL 
               COMMIT WORK
           END-EXEC
           .                    
       C0100-closedown.
           CALL 'wui-end-html' USING wn-rtn-code 
           .
       Z0100-error-routine.
           COPY z0100-error-routine.
           .
       Z0200-disconnect. 
           EXEC SQL
               DISCONNECT ALL
           END-EXEC
           .
[/INST]{
  "id": "BR-001",
  "description": "A Grade ID must be provided to process Edit action in the Edit Grade page.",
  "condition": "wc-post-value = SPACE",
  "output": {
    "action_error": "Saknar ett angivet grade id"
  }
},
{
  "id": "BR-002",
  "description": "The Grade ID must exist in the database for Edit action to be executed.",
  "condition": "!grade-id-is-in-table",
  "output": {
    "action_error": "Denna student finns ej"
  }
},
{
  "id": "BR-003",
  "description": "At least one column - Grade or Comment - must be populated to execute Edit Grade action.",
  "condition": "wc-grade = SPACE AND wc-comment = SPACE",
  "output": {
    "action_error": "Ingen kolumn att uppdatera"
  }
}[INST]       IDENTIFICATION DIVISION.
       program-id. cgi-edit-local.
       DATA DIVISION.
       working-storage section.
       01   switches-edit.
            03  is-db-connected-switch              PIC X   VALUE 'N'.
                88  is-db-connected                         VALUE 'Y'.
            03  is-valid-init-switch                PIC X   VALUE 'N'.
                88  is-valid-init                           VALUE 'Y'.             
            03  local-id-is-in-table-switch         PIC X   VALUE 'N'.
                88  local-id-is-in-table                    VALUE 'Y'.                             
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-printscr-string      PIC X(40)  VALUE SPACE.        
       01  wc-pagetitle            PIC X(20) VALUE 'Uppdatera lokaler'.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  wc-database              PIC  X(30).
       01  wc-passwd                PIC  X(10).       
       01  wc-username              PIC  X(30).
       EXEC SQL END DECLARE SECTION END-EXEC.              
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  jlocal-rec-vars.       
           05  jlokal-lokal-id      PIC  9(4).
           05  jlokal-lokalnamn     PIC  X(40).
           05  jlokal-vaningsplan   PIC  X(40).
           05  jlokal-maxdeltagare  PIC  X(40).
       EXEC SQL END DECLARE SECTION END-EXEC.
       01  wr-rec-vars.
           05  wn-lokal-id         PIC  9(4) VALUE ZERO.
           05  wc-lokalnamn        PIC  X(40) VALUE SPACE.
           05  wc-vaningsplan      PIC  X(40) VALUE SPACE.
           05  wc-maxdeltagare     PIC  X(40) VALUE SPACE.     
       01  wr-cur-rec-vars.
           05  wn-cur-lokal-id         PIC  9(4) VALUE ZERO.     
           05  wc-cur-lokalnamn        PIC  X(40) VALUE SPACE. 
           05  wc-cur-vaningsplan      PIC  X(40) VALUE SPACE.
           05  wc-cur-maxdeltagare     PIC  X(40) VALUE SPACE.           
       EXEC SQL INCLUDE SQLCA END-EXEC.
       PROCEDURE DIVISION.
       0000-main.
           COPY setupenv_openjensen. 
           PERFORM A0100-init
           IF is-valid-init
                PERFORM B0100-connect
                IF is-db-connected
                    PERFORM B0200-edit-local
                    PERFORM Z0200-disconnect
                END-IF
           END-IF
           PERFORM C0100-closedown
           GOBACK
           .
       A0100-init.       
           CALL 'wui-print-header' USING wn-rtn-code  
           CALL 'wui-start-html' USING wc-pagetitle
           CALL 'write-post-string' USING wn-rtn-code
           IF wn-rtn-code = ZERO
                PERFORM A0110-init-edit-action
           END-IF
           .
       A0110-init-edit-action.
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'local-id' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                               wc-post-name wc-post-value
           MOVE FUNCTION NUMVAL(wc-post-value) TO wn-lokal-id
           IF wc-post-value = SPACE
               MOVE 'Saknar ett angivet lokal id'
                    TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string      
           ELSE                 
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'local-sign-name' TO wc-post-name
               CALL 'get-post-value' USING wn-rtn-code
                                    wc-post-name wc-post-value
               MOVE wc-post-value TO wc-lokalnamn   
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'plan' TO wc-post-name
               CALL 'get-post-value' USING wn-rtn-code wc-post-name
                                            wc-post-value                                     
               MOVE wc-post-value TO wc-vaningsplan
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'local-max' TO wc-post-name
               CALL 'get-post-value' USING wn-rtn-code
                                            wc-post-name wc-post-value               
               MOVE wc-post-value TO wc-maxdeltagare              
               IF wc-lokalnamn NOT = SPACE OR
                  wc-vaningsplan NOT = SPACE OR
                  wc-maxdeltagare NOT = SPACE
                        SET is-valid-init TO TRUE                  
               ELSE
                   MOVE 'Ingen kolumn att uppdatera'
                        TO wc-printscr-string
                   CALL 'stop-printscr' USING wc-printscr-string
               END-IF   
           END-IF
           . 
       B0100-connect.
           MOVE  "openjensen"    TO   wc-database
           MOVE  "jensen"        TO   wc-username
           MOVE  SPACE           TO   wc-passwd
           EXEC SQL
               CONNECT :wc-username IDENTIFIED BY :wc-passwd
                                                 USING :wc-database 
           END-EXEC
           IF  SQLSTATE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                SET is-db-connected TO TRUE
           END-IF  
           .       
       B0200-edit-local.
           PERFORM B0210-does-local-id-exist
           IF local-id-is-in-table
               PERFORM B0220-change-local-item
           ELSE
               MOVE 'Denna lokal finns ej'
                    TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string
           END-IF
           .
       B0210-does-local-id-exist.
           EXEC SQL
             DECLARE curseditlocal CURSOR FOR
                 SELECT Lokal_id, Lokalnamn, Vaningsplan, Maxdeltagare
                 FROM T_JLOKAL
           END-EXEC      
           EXEC SQL
                OPEN curseditlocal
           END-EXEC
           MOVE wn-lokal-id TO jlokal-lokal-id
           EXEC SQL
               FETCH curseditlocal
                   INTO :jlokal-lokal-id, :jlokal-lokalnamn,
                        :jlokal-vaningsplan, :jlokal-maxdeltagare 
           END-EXEC
           PERFORM UNTIL SQLCODE NOT = ZERO
               IF wn-lokal-id = jlokal-lokal-id
                    SET local-id-is-in-table TO TRUE
               MOVE jlokal-lokal-id TO wn-cur-lokal-id
               MOVE jlokal-lokalnamn TO wc-cur-lokalnamn
               MOVE jlokal-vaningsplan TO wc-cur-vaningsplan
               MOVE jlokal-maxdeltagare TO wc-cur-maxdeltagare
               END-IF
               EXEC SQL
                   FETCH curseditlocal
                       INTO :jlokal-lokal-id, :jlokal-lokalnamn,
                            :jlokal-vaningsplan, :jlokal-maxdeltagare
               END-EXEC
           END-PERFORM
           IF  SQLSTATE NOT = '02000'
                PERFORM Z0100-error-routine
           END-IF                 
           EXEC SQL 
               CLOSE curseditlocal 
           END-EXEC    
           .
       B0220-change-local-item.
           IF wc-lokalnamn NOT = wc-cur-lokalnamn
               MOVE wc-lokalnamn TO jlokal-lokalnamn
           ELSE    
               MOVE wc-cur-lokalnamn TO jlokal-lokalnamn
           END-IF
           IF wc-vaningsplan NOT = wc-cur-vaningsplan
               MOVE wc-vaningsplan TO jlokal-vaningsplan
           ELSE
               MOVE wc-cur-vaningsplan TO jlokal-vaningsplan
           END-IF
           IF wc-cur-maxdeltagare NOT = wc-cur-maxdeltagare
               MOVE wc-lokalnamn TO jlokal-maxdeltagare
           ELSE    
               MOVE wc-cur-maxdeltagare TO jlokal-maxdeltagare
           END-IF
           MOVE wn-lokal-id TO jlokal-lokal-id
           EXEC SQL
               UPDATE T_JLOKAL
                   SET Lokalnamn = :jlokal-lokalnamn,
                       Vaningsplan = :jlokal-vaningsplan,
                       Maxdeltagare = :jlokal-maxdeltagare
               WHERE Lokal_id = :jlokal-lokal-id
           END-EXEC
           IF  SQLCODE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                PERFORM B0230-commit-work
                MOVE 'Lokal Ã¤ndrad' TO wc-printscr-string
                CALL 'ok-printscr' USING wc-printscr-string      
           END-IF
           .           
       B0230-commit-work.
           EXEC SQL 
               COMMIT WORK
           END-EXEC
           .                    
       C0100-closedown.
           CALL 'wui-end-html' USING wn-rtn-code 
           .
       Z0100-error-routine.
           COPY z0100-error-routine.
           .
       Z0200-disconnect. 
           EXEC SQL
               DISCONNECT ALL
           END-EXEC
           .
[/INST]{
  "id": "BR-001",
  "description": "To be able to edit a local, it must exist in the database.",
  "condition": "LocalId EXISTS IN T_JLOKAL",
  "output": {
    "true": "The local exists in the database",
    "false": "The local does not exist in the database."
  }
},
{
  "id": "BR-002",
  "description": "To be able to edit a local, there must be at least one item to update.",
  "condition": "fieldName NOT = space",
  "output": {
    "true": "There is at least one column to be updated",
    "false": "There is no column to be updated."
  }
},
{
  "id": "BR-003",
  "description": "To update a local it must be connected to the database.",
  "condition": "is-db-connected",
  "output": {
    "true": "The local is connected to the database",
    "false": "The local is not connected to the database."
  }
},
{
  "id": "BR-004",
  "description": "To update a local, the local-id must match with the local-id of an existing local.",
  "condition": "wn-lokal-id = jlokal-lokal-id",
  "output": {
    "true": "The local-id entered, matches with the id of an existing local.",
    "false": "The local-id entered, does not match with the id of an existing local."
  }
}[INST]       IDENTIFICATION DIVISION.
       program-id. cgi-edit-profile.
       DATA DIVISION.
       working-storage section.
       01   switches-edit.
            03  is-db-connected-switch              PIC X   VALUE 'N'.
                88  is-db-connected                         VALUE 'Y'.
            03  is-valid-init-switch                PIC X   VALUE 'N'.
                88  is-valid-init                           VALUE 'Y'.
            03  is-id-in-table-switch               PIC X   VALUE 'N'.
                88  is-id-in-table                          VALUE 'Y'.
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-printscr-string      PIC X(40)  VALUE SPACE.
       01  wc-pagetitle        PIC X(20) VALUE 'Uppdatera profil'.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  wc-database              PIC  X(30).
       01  wc-passwd                PIC  X(10).
       01  wc-username              PIC  X(30).
       EXEC SQL END DECLARE SECTION END-EXEC.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  users-rec-vars.
             05  t-user-id             PIC  9(4)  VALUE ZERO.
             05  t-user-firstname      PIC  X(40) VALUE SPACE.
             05  t-user-lastname       PIC  X(40) VALUE SPACE.
             05  t-user-email          PIC  X(40) VALUE SPACE.
             05  t-user-phonenumber    PIC  X(40) VALUE SPACE.
       EXEC SQL END DECLARE SECTION END-EXEC.
       01  wr-users-rec-vars.
             05  wn-user-id            PIC  9(4)  VALUE ZERO.
             05  wc-user-firstname     PIC  X(40) VALUE SPACE.
             05  wc-user-lastname      PIC  X(40) VALUE SPACE.
             05  wc-user-email         PIC  X(40) VALUE SPACE.
             05  wc-user-phonenumber   PIC  X(40) VALUE SPACE.
       01  wr-cur-rec-vars.
             05  wn-cur-user-id           PIC  9(4)  VALUE ZERO.
             05  wc-cur-user-firstname    PIC  X(40) VALUE SPACE.
             05  wc-cur-user-lastname     PIC  X(40) VALUE SPACE.
             05  wc-cur-user-email        PIC  X(40) VALUE SPACE.
             05  wc-cur-user-phonenumber  PIC  X(40) VALUE SPACE.
       EXEC SQL INCLUDE SQLCA END-EXEC.
       PROCEDURE DIVISION.
       0000-main.
           COPY setupenv_openjensen.
           PERFORM A0100-init
           IF is-valid-init
                PERFORM B0100-connect
                IF is-db-connected
                    PERFORM B0200-edit-dataitem
                    PERFORM Z0200-disconnect
                END-IF
           END-IF
           PERFORM C0100-closedown
           GOBACK
           .
       A0100-init.
           CALL 'wui-print-header' USING wn-rtn-code
           CALL 'wui-start-html' USING wc-pagetitle
           CALL 'write-post-string' USING wn-rtn-code
           IF wn-rtn-code = ZERO
                PERFORM A0110-init-edit-action
           END-IF
           .
       A0110-init-edit-action.
           MOVE ZERO TO wn-rtn-code
           MOVE SPACE TO wc-post-value
           MOVE 'user-id' TO wc-post-name
           CALL 'get-post-value' USING wn-rtn-code
                               wc-post-name wc-post-value
           MOVE FUNCTION NUMVAL(wc-post-value) TO wn-user-id
           IF wc-post-value = SPACE
               MOVE 'Saknar ett angivet anvÃ¤ndar id'
                    TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string
           ELSE
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'firstname' TO wc-post-name
               call 'get-post-value'
                    using wn-rtn-code wc-post-name wc-post-value
               IF wn-rtn-code = ZERO
                   MOVE wc-post-value TO wc-user-firstname
                   SET is-valid-init TO true
               END-IF
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'lastname' TO wc-post-name
               call 'get-post-value'
                    using wn-rtn-code wc-post-name wc-post-value
               IF wn-rtn-code = ZERO
                   MOVE wc-post-value TO wc-user-lastname
                   SET is-valid-init TO true
               END-IF
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'email' TO wc-post-name
               CALL 'get-post-value'
                    USING wn-rtn-code wc-post-name wc-post-value
               IF wn-rtn-code = ZERO
                   MOVE wc-post-value TO wc-user-email
                   SET is-valid-init TO true
               END-IF
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'phone' TO wc-post-name
               CALL 'get-post-value'
                    USING wn-rtn-code wc-post-name wc-post-value
               IF wn-rtn-code = ZERO
                   MOVE wc-post-value TO wc-user-phonenumber
                   SET is-valid-init TO true
               END-IF
           END-IF
           .
       B0100-connect.
           MOVE  "openjensen"    TO   wc-database
           MOVE  "jensen"        TO   wc-username
           MOVE  SPACE           TO   wc-passwd
           EXEC SQL
               CONNECT :wc-username IDENTIFIED BY :wc-passwd
                                            USING :wc-database
           END-EXEC
           IF  SQLSTATE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                SET is-db-connected TO TRUE
           END-IF
           .
       B0200-edit-dataitem.
           PERFORM B0210-does-id-exist
           IF is-id-in-table
               PERFORM B0220-change-dataitem
           ELSE
               MOVE 'Denna anvÃ¤ndare finns ej'
                    TO wc-printscr-string
               CALL 'stop-printscr' USING wc-printscr-string
           END-IF
           .
       B0210-does-id-exist.
           EXEC SQL
            SELECT user_id,
                   user_firstname,
                   user_lastname,
                   user_email,
                   user_phonenumber
             INTO :t-user-id,
                  :t-user-firstname,
                  :t-user-lastname,
                  :t-user-email,
                  :t-user-phonenumber
             FROM tbl_user
             WHERE user_id = :wn-user-id
           END-EXEC
           IF  SQLSTATE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                IF wn-user-id = t-user-id
                     SET is-id-in-table TO TRUE
                MOVE t-user-id TO wn-cur-user-id
                MOVE t-user-firstname TO wc-cur-user-firstname
                MOVE t-user-lastname TO wc-cur-user-lastname
                MOVE t-user-email TO wc-cur-user-email
                MOVE t-user-phonenumber TO wc-cur-user-phonenumber
           END-IF
           .
       B0220-change-dataitem.
           IF wc-user-firstname NOT = wc-cur-user-firstname
                MOVE wc-user-firstname TO t-user-firstname
           ELSE
                MOVE wc-cur-user-firstname TO t-user-firstname
           END-IF
           IF wc-user-lastname NOT = wc-cur-user-lastname
                MOVE wc-user-lastname TO t-user-lastname
           ELSE
                MOVE wc-cur-user-lastname TO t-user-lastname
           END-IF
           IF wc-user-email NOT = wc-cur-user-email
                MOVE wc-user-email TO t-user-email
           ELSE
                MOVE wc-cur-user-email TO t-user-email
           END-IF
           IF wc-user-phonenumber NOT = wc-cur-user-phonenumber
                MOVE wc-user-phonenumber TO t-user-phonenumber
           ELSE
                MOVE wc-cur-user-phonenumber TO t-user-phonenumber
           END-IF
           MOVE wn-user-id TO t-user-id
           EXEC SQL
               UPDATE tbl_user
                 SET
                    user_firstname = :t-user-firstname,
                    user_lastname = :t-user-lastname,
                    user_email = :t-user-email,
                    user_phonenumber = :t-user-phonenumber
                 WHERE user_id = :t-user-id
           END-EXEC
           IF  SQLCODE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                PERFORM B0230-commit-work
                MOVE 'AnvÃ¤ndar profilen Ã¤ndrad' TO wc-printscr-string
                CALL 'ok-printscr' USING wc-printscr-string
           END-IF
           .
       B0230-commit-work.
           EXEC SQL
               COMMIT WORK
           END-EXEC
           .
       C0100-closedown.
            CALL 'wui-end-html' USING wn-rtn-code
           .
       Z0100-error-routine.
           COPY z0100-error-routine.
           .
       Z0200-disconnect.
           EXEC SQL
               DISCONNECT ALL
           END-EXEC
           .
[/INST]{
  "id": "BR-001",
  "description": "The user id is valid for an existing user if the user id gets a match in the table `tbl_user`",
  "condition": "if wn-user-id = t-user-id",
  "output": {
    "valid": "is-id-in-table = TRUE",
    "invalid": "is-id-in-table = FALSE"
  }
},
{
  "id": "BR-002",
  "description": "To change a user's data in the database, the user id must exist in the table `tbl_user` and the user with id `wn-user-id` must match with the id in the table `tbl_user` ",
  "condition": "if wn-user-id = t-user-id",
  "output": {
    "valid": "The id exists in the database",
    "invalid": "The id doesn't exist in the database"
  }
},
{
  "id": "BR-003",
  "description": "To change the user's first name, the value of `wc-user-firstname` must not be equal to the value of `wc-cur-user-firstname`",
  "condition": "if wc-user-firstname not = wc-cur-user-firstname",
  "output": {
    "valid": "The first name is changed",
    "invalid": "The first name is not changed"
  }
},
{
  "id": "BR-004",
  "description": "To change the user's last name, the value of `wc-user-lastname` must not be equal to the value of `wc-cur-user-lastname`",
  "condition": "if wc-user-lastname not = wc-cur-user-lastname",
  "output": {
    "valid": "The last name is changed",
    "invalid": "The last name is not changed"
  }
},
{
  "id": "BR-005",
  "description": "To change the user's email, the value of `wc-user-email` must not be equal to the value of `wc-cur-user-email`",
  "condition": "if wc-user-email not = wc-cur-user-email",
  "output": {
    "valid": "The email is changed",
    "invalid": "The email is not changed"
  }
},
{
  "id": "BR-006",
  "description": "To change the user's phone number, the value of `wc-user-phonenumber` must not be equal to the value of `wc-cur-user-phonenumber`",
  "condition": "if wc-user-phonenumber not = wc-cur-user-phonenumber",
  "output": {
    "valid": "The phone number is changed",
    "invalid": "The phone number is not changed"
  }
}[INST]       IDENTIFICATION DIVISION.
       program-id. cgi-list-local.
       DATA DIVISION.
       working-storage section.
       01   switches.
            03  is-db-connected-switch      PIC X   VALUE 'N'.
                88  is-db-connected                 VALUE 'Y'.
            03  is-valid-init-switch        PIC X   VALUE 'N'.
                88  is-valid-init                   VALUE 'Y'.
            03  is-real-locals-switch     PIC X   VALUE 'N'.
                88  is-real-locals                VALUE 'Y'.                
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-printscr-string      PIC X(40)  VALUE SPACE.   
       01  wc-pagetitle            PIC X(20) VALUE 'Lista lokaler'.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  wc-database              PIC  X(30).
       01  wc-passwd                PIC  X(10).       
       01  wc-username              PIC  X(30).
       EXEC SQL END DECLARE SECTION END-EXEC.       
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  jlocal-rec-vars.       
           05  jlokal-lokal-id      PIC  9(4).
           05  jlokal-lokalnamn     PIC  X(40).
           05  jlokal-vaningsplan   PIC  X(40).
           05  jlokal-maxdeltagare  PIC  X(40).
       EXEC SQL END DECLARE SECTION END-EXEC.
       01  wr-rec-vars.
           05  wn-lokal-id         PIC  9(4) VALUE ZERO.          
           05  wc-lokalnamn        PIC  X(40) VALUE SPACE.
           05  wc-vaningsplan      PIC  X(40) VALUE SPACE.
           05  wc-maxdeltagare     PIC  X(40) VALUE SPACE.     
       EXEC SQL INCLUDE SQLCA END-EXEC.
       PROCEDURE DIVISION.
       0000-main.
           COPY setupenv_openjensen. 
           PERFORM A0100-init
           IF is-valid-init
                PERFORM B0100-connect
                IF is-db-connected
                    PERFORM B0200-list-locals
                    PERFORM B0300-disconnect
                END-IF
           END-IF
           PERFORM C0100-closedown
           GOBACK
           .
       A0100-init.       
           CALL 'wui-print-header' USING wn-rtn-code  
           CALL 'wui-start-html' USING wc-pagetitle
           CALL 'write-post-string' USING wn-rtn-code
           IF wn-rtn-code = ZERO
               SET is-valid-init TO TRUE
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'jensen-only' TO wc-post-name
               CALL 'get-post-value' USING wn-rtn-code
                                           wc-post-name wc-post-value
               IF wc-post-value = 'on'
                   SET is-real-locals TO TRUE
               END-IF
           END-IF
           .
       B0100-connect.
           MOVE  "openjensen"    TO   wc-database.
           MOVE  "jensen"        TO   wc-username.
           MOVE  SPACE           TO   wc-passwd.
           EXEC SQL
               CONNECT :wc-username IDENTIFIED BY :wc-passwd
                                                 USING :wc-database 
           END-EXEC
           IF  SQLSTATE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                SET is-db-connected TO TRUE
           END-IF  
           .       
       B0200-list-locals.
           IF is-real-locals
               PERFORM B0210-list-real-locals
           ELSE
               PERFORM B0220-list-all-locals 
           END-IF
           .
       B0210-list-real-locals.
           EXEC SQL 
               DECLARE curslocal CURSOR FOR
               SELECT Lokal_id, Lokalnamn, Vaningsplan, Maxdeltagare
                      FROM T_JLOKAL
                      WHERE Vaningsplan IS NOT NULL
           END-EXEC
           EXEC SQL
               OPEN curslocal
           END-EXEC
           EXEC SQL 
               FETCH curslocal INTO :jlokal-lokal-id,:jlokal-lokalnamn,
                          :jlokal-vaningsplan,:jlokal-maxdeltagare
           END-EXEC
           PERFORM UNTIL SQLCODE NOT = ZERO
              MOVE  jlokal-lokal-id      TO    wn-lokal-id
              MOVE  jlokal-lokalnamn     TO    wc-lokalnamn
              MOVE  jlokal-vaningsplan   TO    wc-vaningsplan
              MOVE  jlokal-maxdeltagare  TO    wc-maxdeltagare
              PERFORM Z0200-display-row
              INITIALIZE jlocal-rec-vars
               EXEC SQL 
                    FETCH curslocal INTO :jlokal-lokal-id,
                                :jlokal-lokalnamn,:jlokal-vaningsplan,
                                :jlokal-maxdeltagare
               END-EXEC
           END-PERFORM
           IF  SQLSTATE NOT = '02000'
                PERFORM Z0100-error-routine
           END-IF              
           EXEC SQL 
               CLOSE curslocal 
           END-EXEC 
           .       
       B0220-list-all-locals.
           EXEC SQL 
               DECLARE cursall CURSOR FOR
               SELECT Lokal_id, Lokalnamn, Vaningsplan, Maxdeltagare
                      FROM T_JLOKAL
                      ORDER BY Lokal_id
           END-EXEC
           EXEC SQL
               OPEN cursall
           END-EXEC
           EXEC SQL 
               FETCH cursall INTO :jlokal-lokal-id,:jlokal-lokalnamn,
                          :jlokal-vaningsplan,:jlokal-maxdeltagare
           END-EXEC
           PERFORM UNTIL SQLCODE NOT = ZERO
              MOVE  jlokal-lokal-id      TO    wn-lokal-id
              MOVE  jlokal-lokalnamn     TO    wc-lokalnamn
              MOVE  jlokal-vaningsplan   TO    wc-vaningsplan
              MOVE  jlokal-maxdeltagare  TO    wc-maxdeltagare
              PERFORM Z0200-display-row
              INITIALIZE jlocal-rec-vars
               EXEC SQL 
                    FETCH cursall INTO :jlokal-lokal-id,
                                :jlokal-lokalnamn,:jlokal-vaningsplan,
                                :jlokal-maxdeltagare
               END-EXEC
           END-PERFORM
           IF  SQLSTATE NOT = '02000'
                PERFORM Z0100-error-routine
           END-IF              
           EXEC SQL 
               CLOSE cursall 
           END-EXEC 
           .
       B0300-disconnect. 
           EXEC SQL
               DISCONNECT ALL
           END-EXEC
           .
       C0100-closedown.
           CALL 'wui-end-html' USING wn-rtn-code 
           .
       Z0100-error-routine.
           COPY z0100-error-routine.
           .
       Z0200-display-row.            
           DISPLAY
                "<br>|" wn-lokal-id "|" wc-lokalnamn "|"
                          wc-vaningsplan "|" wc-maxdeltagare "|"
           END-DISPLAY
           .            
[/INST]{
  "id": "BR-001",
  "description": "If the Vaningsplan is null, do not include the record in the list.",
  "condition": "Vaningsplan IS NOT NULL",
  "output": []
}
[
  {
    "id": "BR-002",
    "description": "If is-real-locals is true, list only the locals where the Vaningsplan is not null.",
    "condition": "is-real-locals",
    "output": [
      "PERFORM B0210-list-real-locals"
    ]
  },
  {
    "id": "BR-003",
    "description": "If is-real-locals is false, list all the locals.",
    "condition": "NOT is-real-locals",
    "output": [
      "PERFORM B0220-list-all-locals"
    ]
  }
][INST]       IDENTIFICATION DIVISION.
       program-id. cgi-remove-local.
       DATA DIVISION.
       working-storage section.
       01   switches.
            03  is-valid-post-switch        PIC X   VALUE 'N'.
                88  is-valid-post                   VALUE 'Y'.
            03  is-valid-transaction-switch PIC X   VALUE 'N'.
                88  is-valid-transaction            VALUE 'Y'.
            03  is-db-connected-switch      PIC X   VALUE 'N'.
                88  is-db-connected                 VALUE 'Y'.
            03  is-valid-init-switch        PIC X   VALUE 'N'.
                88  is-valid-init                   VALUE 'Y'.
            03  is-lokal-id-found-switch    PIC X   VALUE 'N'.
                88  is-lokal-id-found               VALUE 'Y'.                              
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-printscr-string      PIC X(40)  VALUE SPACE.          
       01  wc-pagetitle            PIC X(20)  VALUE 'Tag bort lokal'.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  wc-database              PIC  X(30).
       01  wc-passwd                PIC  X(10).       
       01  wc-username              PIC  X(30).
       EXEC SQL END DECLARE SECTION END-EXEC.           
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  jlocal-rec-vars.       
           05  jlokal-lokal-id      PIC  9(4).
           05  jlokal-lokalnamn     PIC  X(40).
           05  jlokal-vaningsplan   PIC  X(40).
           05  jlokal-maxdeltagare  PIC  X(40).
       EXEC SQL END DECLARE SECTION END-EXEC.
       01  wr-rec-vars.
           05  wn-lokal-id         PIC  9(4) VALUE ZERO.
           05  wc-lokalnamn        PIC  X(40) VALUE SPACE.
           05  wc-vaningsplan      PIC  X(40) VALUE SPACE.
           05  wc-maxdeltagare     PIC  X(40) VALUE SPACE.     
       EXEC SQL INCLUDE SQLCA END-EXEC.
       PROCEDURE DIVISION.
       0000-main.
           COPY setupenv_openjensen. 
           PERFORM A0100-init
           IF is-valid-post AND is-valid-init
                PERFORM B0100-connect
                IF is-db-connected
                    PERFORM B0200-cgi-delete-row
                END-IF
           END-IF
           PERFORM C0100-closedown
           GOBACK
           .
       A0100-init.       
           CALL 'wui-print-header' USING wn-rtn-code  
           CALL 'wui-start-html' USING wc-pagetitle
           CALL 'write-post-string' USING wn-rtn-code
           IF wn-rtn-code = ZERO
               SET is-valid-init TO TRUE
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'local-id' TO wc-post-name               
               CALL 'get-post-value' USING wn-rtn-code
                                           wc-post-name wc-post-value
               MOVE FUNCTION NUMVAL(wc-post-value) TO wn-lokal-id                                                               
           END-IF                                            
           IF wn-lokal-id = 0
                MOVE 'Saknar lokalens identifikation'
                    TO wc-printscr-string
                CALL 'stop-printscr' USING wc-printscr-string
           ELSE
                SET is-valid-post TO TRUE
           END-IF           
           .
       B0100-connect.
           MOVE  "openjensen"    TO   wc-database.
           MOVE  "jensen"        TO   wc-username.
           MOVE  SPACE           TO   wc-passwd.
           EXEC SQL
               CONNECT :wc-username IDENTIFIED BY :wc-passwd
                                                 USING :wc-database 
           END-EXEC
           IF  SQLCODE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                SET is-db-connected TO TRUE
           END-IF  
           .
       B0200-cgi-delete-row.      
           IF wn-lokal-id NOT = 0  
                MOVE wn-lokal-id TO jlokal-lokal-id
                PERFORM B0210-is-lokal-id-data-found
                IF is-lokal-id-found
                     EXEC SQL 
                         DELETE FROM T_JLOKAL
                                  WHERE Lokal_id = :jlokal-lokal-id
                     END-EXEC
                END-IF
                IF  SQLCODE = ZERO
                    MOVE 'Lokal bortagen'
                    TO wc-printscr-string
                    CALL 'ok-printscr' USING wc-printscr-string        
                ELSE
                    PERFORM Z0100-error-routine
                END-IF
           END-IF
           PERFORM B0300-commit-work
           PERFORM B0310-disconnect
           .
       B0210-is-lokal-id-data-found.
           EXEC SQL
             DECLARE curs1 CURSOR FOR
                 SELECT Lokal_id
                 FROM T_JLOKAL
                     WHERE Lokal_id = :jlokal-lokal-id
           END-EXEC.      
           EXEC SQL
                OPEN curs1
           END-EXEC
           EXEC SQL
               FETCH curs1
                   INTO :wn-lokal-id
           END-EXEC
           IF SQLCODE = ZERO
               SET is-lokal-id-found TO TRUE
           END-IF
           . 
       B0300-commit-work.
           EXEC SQL 
               COMMIT WORK
           END-EXEC
           .           
       B0310-disconnect.
           EXEC SQL
               DISCONNECT ALL
           END-EXEC
           .
       C0100-closedown.
           CALL 'wui-end-html' USING wn-rtn-code
           .
       Z0100-error-routine.
           COPY z0100-error-routine.
           .
[/INST]{
  "id": "BR-001",
  "description": "A local ID must be provided in order to delete a local.",
  "condition": "wn-lokal-id != 0",
  "output": {
    "missing": "Saknar lokalens identifikation"
  }
}
{
  "id": "BR-002",
  "description": "A valid post must be submitted to delete a local.",
  "condition": "is-valid-post",
  "output": {}
}
{
  "id": "BR-003",
  "description": "A local must be found in the database in order to delete it.",
  "condition": "is-lokal-id-found",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       program-id. cgi-remove-user.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01   switches.
            03  is-valid-post-switch        PIC X   VALUE 'N'.
                88  is-valid-post                   VALUE 'Y'.
            03  is-valid-transaction-switch PIC X   VALUE 'N'.
                88  is-valid-transaction            VALUE 'Y'.
            03  is-db-connected-switch      PIC X   VALUE 'N'.
                88  is-db-connected                 VALUE 'Y'.
            03  is-valid-init-switch        PIC X   VALUE 'N'.
                88  is-valid-init                   VALUE 'Y'.
            03  is-id-found-switch          PIC X   VALUE 'N'.
                88  is-id-found                     VALUE 'Y'.
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-printscr-string      PIC X(40)  VALUE SPACE.
       01  wc-pagetitle       PIC X(20)  VALUE 'Tag bort användare'.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  wc-database              PIC  X(30).
       01  wc-passwd                PIC  X(10).
       01  wc-username              PIC  X(30).
       EXEC SQL END DECLARE SECTION END-EXEC.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
         01  users-rec-vars.
             05  t-user-id            PIC  9(4).
             05  t-user-firstname     PIC  X(40).
             05  t-user-lastname      PIC  X(40).
             05  t-user-email         PIC  X(40).
             05  t-user-phonenumber   PIC  X(40).
             05  t-user-username      PIC  X(40).
             05  t-user-password      PIC  X(40).
             05  t-user-lastlogin     PIC  X(40).
             05  t-user-usertype-id   PIC  9(4).
             05  t-user-program-id    PIC  9(4).
       EXEC SQL END DECLARE SECTION END-EXEC.
       01  wr-rec-vars.
             05  wn-user-id           PIC  9(4) VALUE ZERO.
             05  wc-firstname         PIC  X(40) VALUE SPACE.
             05  wc-lastname          PIC  X(40) VALUE SPACE.
             05  wc-user-email        PIC  X(40) VALUE SPACE.
             05  wc-user-phonenumber  PIC  X(40) VALUE SPACE.
             05  wc-user-username     PIC  X(40) VALUE SPACE.
             05  wc-user-password     PIC  X(40) VALUE SPACE.
             05  wn-user-usertype-id  PIC  9(4) VALUE ZERO.
             05  wn-user-program-id   PIC  9(4) VALUE ZERO.
       EXEC SQL INCLUDE SQLCA END-EXEC.
       PROCEDURE DIVISION.
       0000-main.
           COPY setupenv_openjensen.
           PERFORM a0100-init
           IF is-valid-post AND is-valid-init
                PERFORM B0100-connect
                IF is-db-connected
                    PERFORM B0200-cgi-delete-row
                END-IF
           END-IF
           PERFORM c0100-closedown
           goback
        .
       A0100-init.
           CALL 'wui-print-header' USING wn-rtn-code
           CALL 'wui-start-html' USING wc-pagetitle
           CALL 'write-post-string' USING wn-rtn-code
           IF wn-rtn-code = ZERO
               SET is-valid-init TO true
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-VALUE
               MOVE 'user_id' TO wc-post-name
               CALL 'get-post-value' USING wn-rtn-code
                                           wc-post-name wc-post-value
               MOVE function numval(wc-post-value) TO wn-user-id
           END-IF
           IF wn-user-id = 0
                MOVE 'Saknar användarens identifikation'
                    TO wc-printscr-string
                CALL 'stop-printscr' USING wc-printscr-string
           ELSE
                SET is-valid-post TO true
           END-IF
        .
       B0100-connect.
           MOVE  "openjensen"    TO   wc-database
           MOVE  "jensen"        TO   wc-username
           MOVE  SPACE        TO   wc-passwd
           EXEC SQL
               CONNECT :wc-username IDENTIFIED BY :wc-passwd
                                            USING :wc-database
           END-EXEC
           IF  SQLSTATE NOT = ZERO
                PERFORM Z0100-error-routine
           ELSE
                SET is-db-connected TO true
           END-IF
        .
       B0200-cgi-delete-row.
           IF wn-user-id NOT = 0
                MOVE wn-user-id TO t-user-id
                PERFORM B0210-is-id-found
                IF is-id-found
                     EXEC SQL
                         DELETE FROM tbl_user
                                  WHERE user_id = :t-user-id
                     END-EXEC
                END-IF
                IF  sqlstate = ZERO
                    MOVE 'Användaren bortagen'
                    TO wc-printscr-string
                    CALL 'ok-printscr' USING wc-printscr-string
                ELSE
                    PERFORM Z0100-error-routine
                END-IF
           END-IF
           PERFORM B0300-commit-work
           PERFORM B0310-disconnect
        .
       B0210-is-id-found.
           EXEC SQL
             DECLARE curs1 CURSOR FOR
                 SELECT user_id
                 FROM tbl_user
                     WHERE user_id = :t-user-id
           END-EXEC
           EXEC SQL
                OPEN curs1
           END-EXEC
           EXEC SQL
               FETCH curs1
                   INTO :wn-user-id
           END-EXEC
           EXEC SQL
                CLOSE cur1
           END-EXEC
           IF SQLSTATE = ZERO
               SET is-id-found TO true
           END-IF
        .
       B0300-commit-work.
           EXEC SQL
               COMMIT WORK
           END-EXEC
        .
       B0310-disconnect.
           EXEC SQL
               DISCONNECT ALL
           END-EXEC
        .
       C0100-closedown.
          CALL 'wui-end-html' USING wn-rtn-code
        .
       Z0100-error-routine.
           COPY z0100-error-routine.
        .
[/INST]{
  "id": "BR-001",
  "description": "An SQL statement can be used for both removing rows and updating rows in a database table.",
  "condition": "EXEC SQL\\nDELETE FROM tbl_user\\nWHERE user_id = :t-user-id\\nEND-EXEC",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       program-id. error-printscr IS INITIAL.
       ENVIRONMENT DIVISION.
       input-output section.
       file-control.
           SELECT OPTIONAL ojlogfile
              ASSIGN TO '../data/openjensen.log'
              ORGANIZATION IS LINE SEQUENTIAL.
       DATA DIVISION.
       file section.
       FD  ojlogfile.
       01  fd-ojlogfile-post.
           03  fc-yyyy                    PIC X(4).
           03  fc-sep-1                   PIC X.
           03  fc-monthmonth              PIC X(2).
           03  fc-sep-2                   PIC X.
           03  fc-dd                      PIC X(2).
           03  fc-sep-3                   PIC X.
           03  fc-hh                      PIC X(2).
           03  fc-sep-4                   PIC X.
           03  fc-mm                      PIC X(2).
           03  fc-sep-5                   PIC X.           
           03  fc-ss                      PIC X(2).
           03  fc-sep-6                   PIC X.
           03  fc-tt                      PIC X(2).
           03  fc-sep-7                   PIC X.           
           03  fc-err-state               PIC X(5).
           03  fc-sep-8                   PIC X.      
           03  fc-err-msg                 PIC X(40).
           03  fc-sep-9                   PIC X.       
       working-storage section.       
       01  wr-log-date-time.
           03  wr-yyyymmdd.
               05 wn-year     PIC 9(4) VALUE ZERO.
               05 wn-month    PIC 9(2) VALUE ZERO.
               05 wn-day      PIC 9(2) VALUE ZERO.
           03  wr-hhmmss.
               05 wn-hour     PIC 9(2) VALUE ZERO.
               05 wn-minute   PIC 9(2) VALUE ZERO.
               05 wn-second   PIC 9(2) VALUE ZERO.
               05 wn-hundred  PIC 9(2) VALUE ZERO.               
           03  wc-other       PIC X(5) VALUE SPACE.    
       01  wc-is-debug             PIC X(40) VALUE SPACE.
       01  wc-is-errlog            PIC X(40) VALUE SPACE.       
       linkage section.
       01  lc-err-state         PIC X(5).
       01  lc-err-msg           PIC X(70).
       PROCEDURE DIVISION USING lc-err-state lc-err-msg.
       A000-error-printscr.
           ACCEPT wc-is-debug FROM ENVIRONMENT 'OJ_DBG'
           IF wc-is-debug = '1'
               DISPLAY '<br>ERROR: |' lc-err-state '|' lc-err-msg
           END-IF
           ACCEPT wc-is-errlog FROM ENVIRONMENT 'OJ_LOG'
           IF wc-is-errlog = '1'
               PERFORM A0100-append-msg-to-error-file
           END-IF
           EXIT PROGRAM
           .
       A0100-append-msg-to-error-file.
           MOVE FUNCTION CURRENT-DATE TO wr-log-date-time
           OPEN EXTEND ojlogfile
           MOVE wn-year TO fc-yyyy  
           MOVE '-' TO fc-sep-1   
           MOVE wn-month TO fc-monthmonth   
           MOVE '-' TO fc-sep-2    
           MOVE wn-day TO fc-dd     
           MOVE 'T' TO fc-sep-3     
           MOVE wn-hour TO fc-hh      
           MOVE ':' TO fc-sep-4                 
           MOVE wn-minute TO fc-mm    
           MOVE ':' TO fc-sep-5                  
           MOVE wn-second TO fc-ss
           MOVE ',' TO fc-sep-6
           MOVE wn-hundred TO fc-tt               
           MOVE '|' TO fc-sep-7               
           MOVE lc-err-state TO fc-err-state      
           MOVE '|' TO fc-sep-8          
           MOVE lc-err-msg TO fc-err-msg
           MOVE '|' TO fc-sep-9        
           WRITE fd-ojlogfile-post
           CLOSE ojlogfile
           .
<[/INST]{
  "id": "BR-001",
  "description": "When debugging, display the error message on the console.",
  "condition": "wc-is-debug = '1'",
  "output": {
    "true": "DISPLAY '<br>ERROR: |' lc-err-state '|' lc-err-msg"
  }
},
{
  "id": "BR-002",
  "description": "If logging is enabled, write the error message to a file.",
  "condition": "wc-is-errlog = '1'",
  "output": {
    "true": "PERFORM A0100-append-msg-to-error-file"
  }
},
{
  "id": "BR-003",
  "description": "The file name of the error log is '../data/openjensen.log'.",
  "condition": "ASSIGN TO '../data/openjensen.log'",
  "output": {}
},
{
  "id": "BR-004",
  "description": "Error messages are stored in the variable lc-err-msg.",
  "condition": "MOVE lc-err-msg TO fc-err-msg",
  "output": {}
}
```[INST]       IDENTIFICATION DIVISION.
       program-id. get-post-value IS INITIAL.
       ENVIRONMENT DIVISION.
       input-output section.
       file-control. 
           SELECT OPTIONAL postfilein
               ASSIGN TO '../data/postfile.dat'
               ORGANIZATION IS LINE SEQUENTIAL.             
       DATA DIVISION.
       file section.
       FD  postfilein.
       01  fd-postfile-post. 
           03  fc-post-name               PIC X(64).
           03  fc-post-separator          PIC X.      
           03  fc-post-value              PIC X(64).            
       working-storage section.
       01   switches.
            03  value-is-found-switch     PIC X         VALUE 'N'.
                88  value-is-found                      VALUE 'Y'.
            03  is-eof-input-switch      PIC X          VALUE 'N'.
                88  is-eof-input                        VALUE 'Y'.
       01  wc-cnv-post-string   PIC X(40) VALUE SPACE.
       01  wc-post-string       PIC X(40) VALUE SPACE.
       01  wc-urlchars          PIC X(5)  VALUE SPACE.
       01  wn-index             PIC 9(3)  VALUE 1.
       01  wn-str-length        PIC 9(3)  VALUE ZERO.
       01  wn-tmp-lengt         PIC 9(3)  VALUE ZERO.
       01  wn-field-length      PIC 9(3)  VALUE ZERO.
       01  wn-incounter         PIC 99    VALUE 1.
       01  wn-outcounter        PIC 99    VALUE 1.
       01  wc-final-string      PIC X(40) VALUE SPACE.
       linkage section.
       01  ln-rtn-code                    PIC  S99.
       01  lc-post-name                   PIC X(40).         
       01  lc-post-value                  PIC X(40).
       PROCEDURE DIVISION USING ln-rtn-code lc-post-name lc-post-value.
       0000-main.
           PERFORM A0100-init
           PERFORM B0100-get-post-value
           PERFORM C0100-closedown  
           EXIT PROGRAM
           .
       A0100-init.
           MOVE -1 TO ln-rtn-code
           OPEN INPUT postfilein
           .
       B0100-get-post-value.
           READ postfilein
              AT END
                   SET is-eof-input TO TRUE
           END-READ
           IF NOT is-eof-input
              MOVE ZERO TO ln-rtn-code
              PERFORM UNTIL is-eof-input OR value-is-found
                 IF fc-post-name = lc-post-name
                     PERFORM B0110-convert-to-utf8
                     INSPECT wc-final-string CONVERTING "+" to " " 
                     MOVE wc-final-string TO lc-post-value
                     SET value-is-found TO TRUE
                 END-IF
                 READ postfilein
                      AT END
                          SET is-eof-input TO TRUE
                 END-READ              
              END-PERFORM
           END-IF
           .
       B0110-convert-to-utf8.   
           MOVE SPACE TO wc-post-string
           MOVE SPACE TO wc-cnv-post-string
           MOVE fc-post-value TO wc-post-string
           MOVE FUNCTION LENGTH(wc-post-string) TO wn-field-length
           INSPECT wc-post-string TALLYING wn-tmp-lengt
                                                 FOR TRAILING SPACES
           COMPUTE wn-str-length = wn-field-length - wn-tmp-lengt.          
           PERFORM VARYING wn-index FROM 1 BY 1
               UNTIL wn-index > wn-str-length
               IF wc-post-string(wn-index:1) = '%'
                   EVALUATE wc-post-string(wn-index:6)
                     WHEN '%C3%A5'
                         MOVE x'c3a5' TO wc-cnv-post-string(wn-index:2)
                     WHEN '%C3%A4'
                         MOVE x'c3a4' TO wc-cnv-post-string(wn-index:2)
                     WHEN '%C3%B6'
                         MOVE x'c3b6' TO wc-cnv-post-string(wn-index:2)
                     WHEN '%C3%85'
                         MOVE x'c385' TO wc-cnv-post-string(wn-index:2)
                     WHEN '%C3%84'
                         MOVE x'c384' TO wc-cnv-post-string(wn-index:2)
                     WHEN '%C3%96'
                         MOVE x'c396' TO wc-cnv-post-string(wn-index:2)            
                   END-EVALUATE
                   ADD 5 TO wn-index
               ELSE
                   MOVE wc-post-string(wn-index:1) TO
                                wc-cnv-post-string(wn-index:1)
               END-IF
           END-PERFORM
           PERFORM B0120-remove-empty-bytes
           .
       B0120-remove-empty-bytes.
           MOVE SPACE TO wc-final-string
           MOVE 1 TO wn-outcounter
           PERFORM VARYING wn-incounter FROM 1 BY 1
               UNTIL wn-incounter > wn-field-length
               IF wc-cnv-post-string(wn-incounter:1) NOT = SPACE
                   MOVE wc-cnv-post-string(wn-incounter:1) TO
                           wc-final-string(wn-outcounter:1)
                   ADD 1 TO wn-outcounter
               END-IF
           END-PERFORM
           .          
       C0100-closedown.
           CLOSE postfilein
           .
[/INST]{
  "id": "BR-001",
  "description": "The value of a POST parameter is returned if the corresponding POST parameter name has been found in the POST data file.",
  "condition": "POST parameter name = POST parameter name in POST data file",
  "output": {
    "found": "The value of the POST parameter is returned.",
    "not_found": "The corresponding POST parameter name is not found."
  }
}
{
  "id": "BR-002",
  "description": "The POST data file is read sequentially.",
  "condition": "Sequential read",
  "output": {}
}
{
  "id": "BR-003",
  "description": "The POST data is converted from a URL encoded string to UTF-8 format.",
  "condition": "URL encoded string --> UTF-8",
  "output": {}
}
{
  "id": "BR-004",
  "description": "Empty bytes are removed from the converted UTF-8 string.",
  "condition": "Empty bytes removed",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       program-id. ok-printscr IS INITIAL.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       working-storage section.
       01  wc-debug         PIC X(40) VALUE SPACE.
       linkage section.
       01  lc-string        PIC X(40).
       PROCEDURE DIVISION USING lc-string.
       000-ok-printscr.
           ACCEPT wc-debug FROM ENVIRONMENT 'OJ_DBG'
           IF wc-debug = '1'
               DISPLAY '<br>OK: ' lc-string
           END-IF
           EXIT PROGRAM
           .
[/INST]{
  "id": "BR-001",  "description": "For debugging purposes, if the value of the environment variable OJ_DBG is '1', the program will print the value of the variable lc-string.",
  "condition": "wc-debug = '1'",
  "output": {
    "debug": "<br>OK: lc-string"
  }
}[INST]       IDENTIFICATION DIVISION.
       program-id. readtbltort.
       ENVIRONMENT DIVISION.
       input-output section.
       file-control.
           select webinput assign to KEYBOARD
           file status is in-status.                
       DATA DIVISION.
       file section.
       fd  webinput.
       01  chunk-of-post     PIC X(1024).            
       working-storage section.
       01  content-length       PIC X(5)  VALUE SPACE.
       01  pagetitle    PIC X(20)  VALUE 'LÃ¤s tabell t_ort'.
       01  dummy        PIC X      VALUE SPACE.
       01  newline      PIC X      VALUE x'0a'.
       01  in-status            PIC 9999.        
       01  value-string  PIC X(256) VALUE SPACE.
       01  ws-tort-rec-vars.
           05  ws-ort_id           PIC   9(5).
           05  FILLER              PIC  X.            
           05  ws-enhetsnamn       PIC  X(40).
           05  FILLER              PIC  X.                  
           05  ws-gatunamn         PIC  X(40).
           05  FILLER              PIC  X.                  
           05  ws-gatunummer       PIC  X(40).
           05  FILLER              PIC  X.                  
           05  ws-postort          PIC  X(40).
           05  FILLER              PIC  X.                  
           05  ws-postnummer       PIC  X(5).
           05  FILLER              PIC  X.                  
           05  ws-email            PIC  X(40).
           05  FILLER              PIC  X.                  
           05  ws-arbetstfn        PIC  X(40).           
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  username                PIC  X(30) VALUE SPACE.        
       01  dbname                  PIC  X(30) VALUE SPACE.
       01  dbpasswd                PIC  X(10) VALUE SPACE.
       01  tort-rec-vars.
          05  ort_id               PIC   9(5).
          05  enhetsnamn           PIC  X(40).
          05  gatunamn             PIC  X(40).
          05  gatunummer           PIC  X(40).
          05  postort              PIC  X(40).           
          05  postnummer           PIC  X(5).
          05  email                PIC  X(40).            
          05  arbetstfn            PIC  X(40).            
       EXEC SQL END DECLARE SECTION END-EXEC.
       EXEC SQL INCLUDE SQLCA END-EXEC.        
       PROCEDURE DIVISION.
       000-main.
           COPY setupenv_openjensen.        
           CALL 'wui-print-header' USING BY REFERENCE dummy.
           CALL 'wui-start-html' USING BY CONTENT pagetitle
           ACCEPT content-length FROM ENVIRONMENT 'CONTENT_LENGTH'
           DISPLAY
                "<h3>*** LÃS TABELL T_ORT ***</h3>"
                "<p>Content length (bytes): "
                content-length
                "</p>"
           END-DISPLAY
           PERFORM 050-set-post-variables            
           PERFORM 100-read-table
           CALL 'wui-end-html' USING BY REFERENCE dummy.                
           GOBACK
           .
        050-set-post-variables.
           ACCEPT value-string FROM ENVIRONMENT
                'REQUEST_METHOD'
           END-ACCEPT
           DISPLAY
                "<p>"
                "REQUEST_METHOD"
                ": "
                function trim (value-string trailing)
                "</p>"
           END-DISPLAY
           IF function trim (value-string trailing) NOT = 'POST'
                DISPLAY
                    "<p> *** ERROR NOT A POST ***</p>"
                END-DISPLAY
                STOP RUN
           END-IF
           OPEN INPUT webinput
           IF in-status < 10 THEN
               READ
                    webinput
               END-READ
               IF in-status > 9 THEN
                    MOVE SPACES TO chunk-of-post
               END-IF
           END-IF
           CLOSE webinput
           DISPLAY
                "<p>"
                "POST is: " chunk-of-post(1:72)
                "</p>"
           END-DISPLAY
           .    
       100-read-table.
           MOVE  "openjensen"    TO   dbname.
           MOVE  "jensen"        TO   username.
           MOVE  SPACE           TO   dbpasswd.
           EXEC SQL
               CONNECT :username IDENTIFIED BY :dbpasswd USING :dbname 
           END-EXEC.
           IF  SQLSTATE NOT = ZERO
               PERFORM 900-error-routine
               STOP RUN
           END-IF
           EXEC SQL 
                DECLARE C1 CURSOR FOR
                SELECT ort_id, enhetsnamn, gatunamn, gatunummer,
                      postort, postnummer
                      FROM t_ort
           END-EXEC.
           EXEC SQL
                OPEN C1
           END-EXEC.
           IF  SQLSTATE NOT = ZERO
                PERFORM 900-error-routine
                STOP RUN
           END-IF
           EXEC SQL 
               FETCH C1 INTO :ort_id, :enhetsnamn, :gatunamn,
                    :gatunummer, :postort
                    :arbetstfn
           END-EXEC.
           PERFORM UNTIL SQLSTATE NOT = ZERO
                MOVE ort_id        TO    ws-ort_id
                MOVE enhetsnamn    TO    ws-enhetsnamn 
                MOVE gatunamn      TO    ws-gatunamn
                MOVE gatunummer    TO    ws-gatunummer  
                MOVE postort       TO    ws-postort           
                MOVE postnummer    TO    ws-postnummer 
                DISPLAY "<br>" ws-tort-rec-vars
                EXEC SQL
                    FETCH C1 INTO :ort_id, :enhetsnamn, :gatunamn,
                        :gatunummer, :postort, :postnummer
                END-EXEC
           END-PERFORM.
           IF  SQLSTATE NOT = "02000"
                PERFORM 900-error-routine
                STOP RUN
           END-IF
           EXEC SQL 
                CLOSE C1 
           END-EXEC. 
           EXEC SQL 
                COMMIT WORK
           END-EXEC.            
           EXEC SQL
                DISCONNECT ALL
           END-EXEC.
           IF SQLSTATE = ZERO
                DISPLAY
                    "<p>"            
                    "<h3>*** SLUT PÃ DATA ***</h3>"
                    "</p>"
                END-DISPLAY
           END-IF
           .
       900-error-routine.
           DISPLAY
                "<p>"
                "<h3>***SQL DATABAS FEL ***</h3>"
                "<br>"
                "SQLSTATE: " SQLSTATE
                "</p>"
           END-DISPLAY
           EVALUATE SQLSTATE
                WHEN  "02000"
                DISPLAY
                    "<p>"     
                     "Inga poster funna!"
                    "</p>"
                END-DISPLAY
                WHEN  "08003"
                WHEN  "08001"
                DISPLAY
                    "<p>"                  
                    "AnslutningsfÃ¶rsÃ¶ket misslyckadades!"
                    "</p>"
                END-DISPLAY                 
                WHEN  SPACE
                DISPLAY
                    "<p>"    
                    "OkÃ¤nt databasfel!"
                    "</p>"
                END-DISPLAY  
                WHEN  OTHER
                DISPLAY
                    "<p>"                  
                    "SQLCODE: "   SQLCODE
                    "<br>"
                    "SQLERRMC: "  SQLERRMC
                    "</p>"
                END-DISPLAY                   
           END-EVALUATE
           .            
[/INST]{
  "id": "BR-001",
  "description": "The input request must be a POST request, otherwise it is an error.",
  "condition": "If function trim (value-string trailing) NOT = 'POST'",
  "output": {
    "error": "*** ERROR NOT A POST ***"
  }
}
{
  "id": "BR-002",
  "description": "If the 'in-status' value is less then 10, then the program will accept user input. Otherwise, the program will close the file.",
  "condition": "IF in-status < 10 THEN",
  "output": {
    "accept": "READ webinput\nEND-READ",
    "close": "CLOSE webinput"
  }
}
{
  "id": "BR-003",
  "description": "If SQLSTATE is not equal to zero, then the program will perform the '900-error-routine' and stop running.",
  "condition": "IF  SQLSTATE NOT = ZERO",
  "output": {
    "error": "PERFORM 900-error-routine\nSTOP RUN"
  }
}
{
  "id": "BR-004",
  "description": "If SQLSTATE is equal to '02000', then the program will display a message saying 'Inga poster funna!' (No records found!).",
  "condition": "WHEN  \"02000\"",
  "output": {
    "no_records_error": "DISPLAY\n<p>\nInga poster funna!\n</p>"
  }
}
{
  "id": "BR-005",
  "description": "If SQLSTATE is equal to '08003' or '08001', then the program will display a message saying 'AnslutningsfÃ¶rsÃ¶ket misslyckadades!' (Connection attempt failed!).",
  "condition": "WHEN  \"08003\"\nWHEN  \"08001\"",
  "output": {
    "connection_error": "DISPLAY\n<p>\nAnslutningsfÃ¶rsÃ¶ket misslyckadades!\n</p>"
  }
}[INST]       IDENTIFICATION DIVISION.
       program-id. stop-printscr IS INITIAL.
       ENVIRONMENT DIVISION.
       input-output section.
       file-control.
           SELECT OPTIONAL ojlogfile
              ASSIGN TO '../data/openjensen.log'
              ORGANIZATION IS LINE SEQUENTIAL. 
       DATA DIVISION.
       file section.
       FD  ojlogfile.
       01  fd-ojlogfile-post.
           03  fc-yyyy                    PIC X(4).
           03  fc-sep-1                   PIC X.
           03  fc-monthmonth              PIC X(2).
           03  fc-sep-2                   PIC X.
           03  fc-dd                      PIC X(2).
           03  fc-sep-3                   PIC X.
           03  fc-hh                      PIC X(2).
           03  fc-sep-4                   PIC X.
           03  fc-mm                      PIC X(2).
           03  fc-sep-5                   PIC X.           
           03  fc-ss                      PIC X(2).
           03  fc-sep-6                   PIC X.
           03  fc-tt                      PIC X(2).
           03  fc-sep-7                   PIC X.           
           03  fc-err-state               PIC X(5).
           03  fc-sep-8                   PIC X.      
           03  fc-err-msg                 PIC X(40).
           03  fc-sep-9                   PIC X.      
       working-storage section.
       01  wr-log-date-time.
           03  wr-yyyymmdd.
               05 wn-year     PIC 9(4) VALUE ZERO.
               05 wn-month    PIC 9(2) VALUE ZERO.
               05 wn-day      PIC 9(2) VALUE ZERO.
           03  wr-hhmmss.
               05 wn-hour     PIC 9(2) VALUE ZERO.
               05 wn-minute   PIC 9(2) VALUE ZERO.
               05 wn-second   PIC 9(2) VALUE ZERO.
               05 wn-hundred  PIC 9(2) VALUE ZERO.               
           03  wc-other       PIC X(5) VALUE SPACE. 
       01  wc-is-debug        PIC X(40) VALUE SPACE.
       01  wc-is-errlog       PIC X(40) VALUE SPACE.      
       linkage section.
       01  lc-err-msg          PIC X(40).
       PROCEDURE DIVISION USING lc-err-msg.
       000-stop-printscr.
           ACCEPT wc-is-debug FROM ENVIRONMENT 'OJ_DBG'
           IF wc-is-debug = '1'
               DISPLAY '<br>STOP: ' lc-err-msg
           END-IF
           IF wc-is-errlog = '1'
               PERFORM A0100-append-msg-to-error-file
           END-IF
           EXIT PROGRAM
           .
       A0100-append-msg-to-error-file.
           MOVE FUNCTION CURRENT-DATE TO wr-log-date-time
           OPEN EXTEND ojlogfile
           MOVE wn-year TO fc-yyyy  
           MOVE '-' TO fc-sep-1   
           MOVE wn-month TO fc-monthmonth   
           MOVE '-' TO fc-sep-2    
           MOVE wn-day TO fc-dd     
           MOVE 'T' TO fc-sep-3     
           MOVE wn-hour TO fc-hh      
           MOVE ':' TO fc-sep-4                 
           MOVE wn-minute TO fc-mm    
           MOVE ':' TO fc-sep-5                  
           MOVE wn-second TO fc-ss
           MOVE ',' TO fc-sep-6
           MOVE wn-hundred TO fc-tt               
           MOVE '|' TO fc-sep-7               
           MOVE 'STOP:' TO fc-err-state      
           MOVE '|' TO fc-sep-8          
           MOVE lc-err-msg TO fc-err-msg
           MOVE '|' TO fc-sep-9        
           WRITE fd-ojlogfile-post
           CLOSE ojlogfile
           .
[/INST]{
  "id": "BR-001",
  "description": "The date is stored as YYYYMMDD.",
  "condition": null,
  "output": null
}[INST]       IDENTIFICATION DIVISION.
       program-id. test-php-unlink.
       ENVIRONMENT DIVISION.
       input-output section.
       file-control.           
           SELECT OPTIONAL statusfile 
              ASSIGN TO '../data/status'
              ORGANIZATION IS LINE SEQUENTIAL.              
       DATA DIVISION.
       file section.     
       FD  statusfile.
       01  fd-fileout-status         PIC  X(1) VALUE SPACE. 
       working-storage section.
       01 wc-file-name               PIC  X(60) VALUE SPACE.
       01 wc-dest-path               PIC  X(80) VALUE SPACE.
       PROCEDURE DIVISION.
       0000-main.
           PERFORM Z0100-write-status-ok-file
           GOBACK
           .
       Z0100-write-status-ok-file.
           MOVE '../data/phpunlinktest' TO wc-file-name
           OPEN EXTEND statusfile           
           CLOSE statusfile
           MOVE SPACE TO wc-dest-path    
           STRING wc-file-name DELIMITED BY SPACE 
                          '.'  DELIMITED BY SPACE
              'OK' DELIMITED BY SPACE
                               INTO wc-dest-path
           CALL 'CBL_COPY_FILE' USING '../data/status', wc-dest-path
           CALL 'CBL_DELETE_FILE' USING '../data/status'           
           .
[/INST]{
  "id": "BR-001",
  "description": "If a statusfile exists, touch it and rename it with a suffix .OK",
  "condition": "statusfile exists",
  "output": {
    "write_and_close": "OPEN EXTEND statusfile\\nCLOSE statusfile",
    "rename": "CALL 'CBL_COPY_FILE' USING '../data/status', wc-dest-path",
    "delete": "CALL 'CBL_DELETE_FILE' USING '../data/status'"
  }
}[INST]       IDENTIFICATION DIVISION.
       program-id. test-utf8.
       DATA DIVISION.
       working-storage section.
       01  wn-rtn-code             PIC  S99   VALUE ZERO.
       01  wc-post-name            PIC X(40)  VALUE SPACE.
       01  wc-post-value           PIC X(40)  VALUE SPACE.
       01  wc-pagetitle            PIC X(20) VALUE 'Test utf-8'.
       PROCEDURE DIVISION.
       0000-main.
           PERFORM A0100-init
           PERFORM C0100-closedown
           GOBACK
           .
       A0100-init.       
           CALL 'wui-print-header'  USING wn-rtn-code  
           CALL 'wui-start-html'    USING wc-pagetitle
           CALL 'write-post-string' USING wn-rtn-code
           IF wn-rtn-code = ZERO
               MOVE ZERO TO wn-rtn-code
               MOVE SPACE TO wc-post-value
               MOVE 'text-utf8' TO wc-post-name
               CALL 'get-post-value' USING wn-rtn-code
                                           wc-post-name wc-post-value
               IF wc-post-value NOT = SPACE
                   DISPLAY wc-post-value
               END-IF
           END-IF
           .
       C0100-closedown.
           CALL 'wui-end-html' USING wn-rtn-code 
           .
[/INST]{
  "id": "BR-001",
  "description": "The post-value with the name text-utf8 should be displayed if it exists.",
  "condition": "NOT (wc-post-value = SPACE)",
  "output": {
    "display-post-value": "DISPLAY wc-post-value"
  }
}[INST]       IDENTIFICATION DIVISION.
       program-id. toolchaindisplaytest.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       working-storage section.
       01  accept-char PIC X VALUE SPACE.
       linkage section.
       01  username    PIC X(15).        
       PROCEDURE DIVISION USING username.
       000-consolesubmain.
           DISPLAY '[sub justdisplay] You passed: ' username
           DISPLAY '[sub justdisplay] Press Enter key to return...'
           ACCEPT accept-char
           EXIT PROGRAM
           .
[/INST]{
  "id": "BR-002",  "description": "The program will display 'YOU PASSED: username' to the console.",
  "condition": null,
  "output": {
    "display": "[SUB JUSTDISPLAY] You passed: ",
    "display_post_input": "[SUB JUSTDISPLAY] Press Enter key to return..."
  }
}[INST]       IDENTIFICATION DIVISION.
       program-id. toolchaintest.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       working-storage section.
       01  ws-meny-number      PIC 9     VALUE ZERO.
       01  ws-user-name        PIC X(15) VALUE SPACE.
       01  ws-num-of-spaces    PIC 99 VALUE 0.
       01  env-name            PIC X(40) VALUE SPACE.
       01  env-value           PIC X(40) VALUE SPACE.
       PROCEDURE DIVISION.
       000-toolchaintest.
           PERFORM A100-display-menu UNTIL ws-meny-number = 9
           GOBACK
           .
       A100-display-menu.
           DISPLAY '**************************************'
           DISPLAY '1 - Initial simple test (no libs used)'
           DISPLAY '2 - Call your created (shared) function'            
           DISPLAY '3 - Use a built-in OpenCobol function'
           DISPLAY SPACE
           DISPLAY '9 - Quit'
                    DISPLAY SPACE
           DISPLAY 'Enter your choice: ' WITH NO ADVANCING
           ACCEPT ws-meny-number
           EVALUATE ws-meny-number
                WHEN 1 PERFORM B100-initial
                WHEN 2 PERFORM B200-call-my-subroutine
                WHEN 3 PERFORM B300-call-built-in-function
           END-EVALUATE
           .
       B100-initial.
           DISPLAY 'Enter your name: ' WITH NO ADVANCING
           ACCEPT ws-user-name
           DISPLAY 'Thank you ' ws-user-name
           .
       B200-call-my-subroutine.        
           MOVE 'COB_LIBRARY_PATH' TO env-name
           DISPLAY '*** Environment required for CALLs ***'
           ACCEPT env-value FROM ENVIRONMENT env-name
           DISPLAY '|' env-name '|' env-value '|'
           DISPLAY SPACE
           INSPECT ws-user-name TALLYING ws-num-of-spaces
               FOR ALL SPACE
           IF FUNCTION LENGTH(ws-user-name) NOT = ws-num-of-spaces   
               CALL 'toolchaindisplaytest' USING BY
                                               CONTENT ws-user-name
           ELSE
               DISPLAY 'Ooops..Enter your name with (1)'
               DISPLAY 'Please enter a name first!'
           END-IF
           .
       B300-call-built-in-function. 
           MOVE 'COB_LIBRARY_PATH' TO env-name
           DISPLAY env-name
           DISPLAY 'Use built-in function reverse above text'
           DISPLAY 'Reversed: ' function reverse (env-name)
           DISPLAY SPACE
           .
[/INST]{
  "id": "BR-001",
  "description": "A valid input should not be empty.",
  "condition": "FUNCTION LENGTH(ws-user-name) NOT = ws-num-of-spaces",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       program-id. url-charconv.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       working-storage section.
       01  cnv-post-string      PIC X(256) VALUE SPACE.
       01  ws-post-string       PIC X(256) VALUE SPACE.
       01  urlchars             PIC X(5)   VALUE SPACE.
       01  cindex               PIC 9(3)   VALUE 1.
       linkage section.
       01  rtnflag              PIC X.        
       01  raw-post-string      PIC X(256).
       01  num-len-cnt          PIC 9(5).        
       PROCEDURE DIVISION USING rtnflag raw-post-string num-len-cnt.
       000-convert-to-utf8.
           MOVE raw-post-string TO ws-post-string
           PERFORM VARYING cindex FROM 1 BY 1
               UNTIL cindex > num-len-cnt
                IF ws-post-string(cindex:1) = '%'
                    EVALUATE ws-post-string(cindex:6)
                        WHEN '%C3%A5'
                            MOVE x'c3a5' TO cnv-post-string(cindex:2)
                        WHEN '%C3%A4'
                            MOVE x'c3a4' TO cnv-post-string(cindex:2)
                        WHEN '%C3%B6'
                            MOVE x'c3b6' TO cnv-post-string(cindex:2)
                        WHEN '%C3%85'
                            MOVE x'c385' TO cnv-post-string(cindex:2)
                        WHEN '%C3%84'
                             MOVE x'c384' TO cnv-post-string(cindex:2)
                        WHEN '%C3%96'
                            MOVE x'c396' TO cnv-post-string(cindex:2)            
                    END-EVALUATE
                    ADD 5 TO cindex
                ELSE
                    MOVE ws-post-string(cindex:1) TO
                                cnv-post-string(cindex:1)
                END-IF
           END-PERFORM
           MOVE cnv-post-string TO raw-post-string
           EXIT PROGRAM
           .
[/INST]{
  "id": "BR-001",
  "description": "Convert '%C3%A5' to x'c3a5'",
  "condition": "ws-post-string(cindex:6) = '%C3%A5'",
  "output": {
    "before": "%C3%A5",
    "after": "x'c3a5'"
  }
},
{
  "id": "BR-002",
  "description": "Convert '%C3%A4' to x'c3a4'",
  "condition": "ws-post-string(cindex:6) = '%C3%A4'",
  "output": {
    "before": "%C3%A4",
    "after": "x'c3a4'"
  }
},
{
  "id": "BR-003",
  "description": "Convert '%C3%B6' to x'c3b6'",
  "condition": "ws-post-string(cindex:6) = '%C3%B6'",
  "output": {
    "before": "%C3%B6",
    "after": "x'c3b6'"
  }
},
{
  "id": "BR-004",
  "description": "Convert '%C3%85' to x'c385'",
  "condition": "ws-post-string(cindex:6) = '%C3%85'",
  "output": {
    "before": "%C3%85",
    "after": "x'c385'"
  }
},
{
  "id": "BR-005",
  "description": "Convert '%C3%84' to x'c384'",
  "condition": "ws-post-string(cindex:6) = '%C3%84'",
  "output": {
    "before": "%C3%84",
    "after": "x'c384'"
  }
},
{
  "id": "BR-006",
  "description": "Convert '%C3%96' to x'c396'",
  "condition": "ws-post-string(cindex:6) = '%C3%96'",
  "output": {
    "before": "%C3%96",
    "after": "x'c396'"
  }
}[INST]       IDENTIFICATION DIVISION.
       program-id. write-post-string IS INITIAL.
       ENVIRONMENT DIVISION.
       input-output section.
       file-control.
           SELECT webinput ASSIGN TO KEYBOARD
              FILE STATUS IS wn-instatus.
           SELECT postfileout 
              ASSIGN TO '../data/postfile.dat'
              ORGANIZATION IS LINE SEQUENTIAL.         
       DATA DIVISION.
       file section.
       FD  webinput.
       01  fd-chunk-of-posts              PIC X(512).
       FD  postfileout.
       01  fd-postfile-post. 
           03  fc-post-name               PIC X(64).
           03  fc-post-separator          PIC X.      
           03  fc-post-value              PIC X(64). 
       working-storage section.
       01  wn-instatus                    PIC 9(4)      VALUE ZERO.  
       01  wc-env-length                  PIC X(3)      VALUE SPACE.
       01  wn-content-length              PIC 9(4)      VALUE ZERO.
       01  wc-raw-post-string             PIC X(512)    VALUE SPACE.
       01  wn-number-of-value-pairs       PIC 99        VALUE ZERO.        
       01  wn-pair-counter                PIC 99        VALUE ZERO.        
       01  wc-tmp-name-value              PIC X(128)    VALUE SPACE.
       01  wc-tmp-name                    PIC X(64)     VALUE SPACE.
       01  wc-tmp-value                   PIC X(64)     VALUE SPACE.
       01  wn-unstring-next-position      PIC 9(3)      VALUE 1.
       linkage section.
       01  ln-rtn-code                    PIC  S99.
       PROCEDURE DIVISION USING ln-rtn-code.
       0000-main.
           PERFORM A0100-init
           PERFORM B0100-write-post-to-file
           PERFORM C0100-closedown
           EXIT PROGRAM
           .
       A0100-init.
           ACCEPT wc-env-length FROM ENVIRONMENT 'CONTENT_LENGTH'
           COMPUTE wn-content-length = FUNCTION NUMVAL(wc-env-length)          
           MOVE SPACE TO wc-raw-post-string
           OPEN INPUT webinput
              IF wn-instatus < 10 THEN
                   READ
                       webinput
                   END-READ
                   IF wn-instatus > 9 THEN
                       MOVE SPACES TO fd-chunk-of-posts
                   END-IF
           END-IF
           CLOSE webinput
           MOVE fd-chunk-of-posts(1:wn-content-length)
                                      TO wc-raw-post-string
           OPEN OUTPUT postfileout
           MOVE ZERO TO ln-rtn-code
           .
       B0100-write-post-to-file.
            MOVE ZERO TO wn-number-of-value-pairs
            INSPECT wc-raw-post-string
                TALLYING wn-number-of-value-pairs FOR ALL '&'
            ADD 1 TO wn-number-of-value-pairs
            MOVE 1 TO wn-unstring-next-position
            PERFORM VARYING wn-pair-counter FROM 1 BY 1
                UNTIL wn-pair-counter > wn-number-of-value-pairs
                PERFORM B0200-process-value-pair
            END-PERFORM
            .
       B0200-process-value-pair.
            MOVE SPACE TO wc-tmp-name-value
            MOVE SPACE TO wc-tmp-name
            MOVE SPACE TO wc-tmp-value
            UNSTRING wc-raw-post-string DELIMITED BY '&'
                INTO wc-tmp-name-value
                WITH POINTER wn-unstring-next-position
            END-UNSTRING
            UNSTRING wc-tmp-name-value DELIMITED BY '='
                INTO wc-tmp-name wc-tmp-value
            END-UNSTRING 
            MOVE wc-tmp-name TO fc-post-name
            MOVE '=' TO fc-post-separator
            MOVE wc-tmp-value TO fc-post-value
            WRITE fd-postfile-post
            .
       C0100-closedown.
           CLOSE postfileout
           .
[/INST]{
  "id": "BR-002",
  "description": "The CONTENT_LENGTH environment variable must be provided.",
  "condition": "wc-env-length must be non empty",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       program-id. wui-end-html.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       working-storage section.      
       linkage section.
       01  ln-rtn-code    PIC S99.      
       PROCEDURE DIVISION USING ln-rtn-code.
       000-end-html.
           DISPLAY
               "</body>"
               "</html>"          
           END-DISPLAY        
           EXIT PROGRAM
           .
[/INST]{
  "id": "BR-001",
  "description": "The end of an HTML document is marked by the </body> and </html> tags.",
  "output": {
    "end-html": "</body>\n</html>"
  }
}[INST]       IDENTIFICATION DIVISION.
       program-id. wui-print-header.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       working-storage section.
       01  wc-newline     PIC X VALUE x'0a'.        
       linkage section.
       01  ln-rtn-code    PIC S99.    
       PROCEDURE DIVISION USING ln-rtn-code.
       000-print-html-header.
           DISPLAY
               "Content-Type: text/html; charset=utf-8"
               wc-newline
               wc-newline
           END-DISPLAY        
           EXIT PROGRAM
           .
[/INST]{
  "id": "BR-001",
  "description": "The page will be displayed in HTML format.",
  "condition": "Content-Type: text/html; charset=utf-8",
  "output": null
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. sqllog.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT OPTIONAL sqllogfile
                  ASSIGN TO 'sqlerror.log'
                  ORGANIZATION IS LINE SEQUENTIAL.
       DATA DIVISION.
       FILE SECTION.
       FD  sqllogfile.
       01  fd-sqllogfile-post.
           03  fc-yyyy                    PIC X(4).
           03  fc-sep-1                   PIC X.
           03  fc-monthmonth              PIC X(2).
           03  fc-sep-2                   PIC X.
           03  fc-dd                      PIC X(2).
           03  fc-sep-3                   PIC X.
           03  fc-hh                      PIC X(2).
           03  fc-sep-4                   PIC X.
           03  fc-mm                      PIC X(2).
           03  fc-sep-5                   PIC X.
           03  fc-ss                      PIC X(2).
           03  fc-sep-6                   PIC X.
           03  fc-tt                      PIC X(2).
           03  fc-sep-7                   PIC X.
           03  fc-log-text                PIC X(80).
           03  fc-sep-8                   PIC X.
       WORKING-STORAGE SECTION.
       01  wr-log-date-time.
           03  wr-yyyymmdd.
               05 wn-year     PIC 9(4) VALUE ZERO.
               05 wn-month    PIC 9(2) VALUE ZERO.
               05 wn-day      PIC 9(2) VALUE ZERO.
               03  wr-hhmmss.
                   05 wn-hour     PIC 9(2) VALUE ZERO.
                   05 wn-minute   PIC 9(2) VALUE ZERO.
                   05 wn-second   PIC 9(2) VALUE ZERO.
                   05 wn-hundred  PIC 9(2) VALUE ZERO.
           03  wc-other       PIC X(5) VALUE SPACE.
       LINKAGE SECTION.
       01  lc-log-text                  PIC X(80).
       PROCEDURE DIVISION USING lc-log-text.
       000-sql-log.
           PERFORM A0100-append-msg-to-error-file
           EXIT PROGRAM
           .
       A0100-append-msg-to-error-file.
           MOVE FUNCTION CURRENT-DATE TO wr-log-date-time
           OPEN EXTEND sqllogfile
           MOVE wn-year TO fc-yyyy
           MOVE '-' TO fc-sep-1
           MOVE wn-month TO fc-monthmonth
           MOVE '-' TO fc-sep-2
           MOVE wn-day TO fc-dd
           MOVE 'T' TO fc-sep-3
           MOVE wn-hour TO fc-hh
           MOVE ':' TO fc-sep-4
           MOVE wn-minute TO fc-mm
           MOVE ':' TO fc-sep-5
           MOVE wn-second TO fc-ss
           MOVE ',' TO fc-sep-6
           MOVE wn-hundred TO fc-tt
           MOVE '|' TO fc-sep-7
           MOVE lc-log-text TO fc-log-text
           MOVE '|' TO fc-sep-8
           WRITE fd-sqllogfile-post
           CLOSE sqllogfile
           .
[/INST]{
  "id": "BR-001",
  "description": "The date and time of the error message is recorded in the log file.",
  "condition": null,
  "output": null
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. STRLEN.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  SWITCHES.
           05  LENGTH-DETERMINATED-SW  PIC X   VALUE 'N'.
               88  LENGTH-DETERMINATED         VALUE 'Y'.

       LINKAGE SECTION.
       01  TEXT-LENGTH                 PIC S9(4) COMP.

       01  WORK-TABLE.
           05  WT-CHARACTER            OCCURS 1 TO 254 TIMES
                                       DEPENDING ON TEXT-LENGTH
                                       PIC X.

       PROCEDURE DIVISION USING TEXT-LENGTH WORK-TABLE.

       000-DETERMINE-STRING-LENGTH.

           MOVE 'N' TO LENGTH-DETERMINATED-SW
           PERFORM 100-EXAMINE-LAST-CHARACTER UNTIL LENGTH-DETERMINATED
           EXIT PROGRAM
       .

       100-EXAMINE-LAST-CHARACTER.

           IF WT-CHARACTER(TEXT-LENGTH) = SPACE
               SUBTRACT 1 FROM TEXT-LENGTH
           ELSE
               SET LENGTH-DETERMINATED TO TRUE.
           IF TEXT-LENGTH = ZERO
              SET LENGTH-DETERMINATED TO TRUE.
[/INST]{
  "id": "BR-002",
  "description": "The value of TEXT-LENGTH is equal to the number of non-space characters in WORK-TABLE, starting from the first character.",
  "condition": "WT-CHARACTER(x) = ' '"
}[INST]       ID DIVISION.
       PROGRAM-ID. AESMPUT.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
            SELECT R-LOG ASSIGN TO 'AESLOG'
                   ORGANIZATION IS SEQUENTIAL
                   ACCESS MODE  IS SEQUENTIAL
                   FILE STATUS  IS FS-LOG.
       DATA DIVISION.
       FILE SECTION.
       FD R-LOG LABEL RECORD STANDARD.
       01 LOG.
          COPY 'AESFLOG.cpy'.
       WORKING-STORAGE SECTION.
         01 FS.
            05 FS-LOG                  PIC 9(02).
               88 FS-LOG-OK                      VALUE 0.
               88 FS-LOG-EOF                     VALUE 10.
               88 FS-LOG-AOP                     VALUE 41.
         01 AUX-DATA.
            02 SDATE.
               03 SYYYY                PIC 9(04).
               03 SMM                  PIC 9(02).
               03 SDD                  PIC 9(02).
            02 STIME.
               03 SHH                  PIC 9(02).
               03 SMN                  PIC 9(02).
               03 SSS                  PIC 9(02).
               03 SMS                  PIC 9(02).
       LINKAGE SECTION.
         01 LS.
            COPY 'AESLLOG.cpy'.
       PROCEDURE DIVISION USING LS.
       MAINLINE.
            IF CFILE = SPACES OR LOW-VALUES
              IF LMESSAGE-LEVEL >= LLOG-LEVEL
                PERFORM LOG-MESSAGE
              END-IF
            ELSE
              PERFORM CLOSE-FILE
            END-IF.
            GOBACK.
       LOG-MESSAGE.
            IF ISOPEN = SPACES OR LOW-VALUES
              PERFORM OPEN-FILE
            END-IF.
            PERFORM SET-DATA.
            PERFORM WRITE-FILE.
       SET-DATA.
            ACCEPT SDATE                  FROM DATE YYYYMMDD.
            ACCEPT STIME                  FROM TIME.
            MOVE SDD                        TO DD.
            MOVE SMM                        TO MM.
            MOVE SYYYY                      TO YYYY.
            MOVE SHH                        TO HH.
            MOVE SMN                        TO MN.
            MOVE SSS                        TO SS.
            MOVE '.'                        TO TST1
                                               TST2.
            MOVE SPACE                      TO TST3.
            MOVE ':'                        TO TST4
                                               TST5.
            MOVE '|'                        TO SEP1
                                               SEP2.
            MOVE LTEXT                      TO RTEXT.
       OPEN-FILE.
            OPEN OUTPUT R-LOG.
            IF FS-LOG-OK OR FS-LOG-AOP
              MOVE 'O'                      TO ISOPEN
            ELSE
              DISPLAY 'ERROR OPENING LOG: ' FS-LOG
              STOP RUN
            END-IF.
       WRITE-FILE.
            WRITE LOG.
            IF FS-LOG-OK
              CONTINUE
            ELSE
              DISPLAY 'ERROR WRITTING LOG: ' FS-LOG
              STOP RUN
            END-IF.
       CLOSE-FILE.
            CLOSE R-LOG.
            IF FS-LOG-OK
              CONTINUE
            ELSE
              DISPLAY 'ERROR CLOSING LOG: ' FS-LOG
              STOP RUN
            END-IF.
[/INST]{
  "id": "BR-001",
  "description": "If the input file is not present or empty, and the log level is greater than or equal to the user-defined log level, then a log message should be generated.",
  "condition": "CFILE = SPACES OR LOW-VALUES AND LMESSAGE-LEVEL >= LLOG-LEVEL",
  "output": null
},
{
  "id": "BR-002",
  "description": "If the log file is not open, then it should be opened before writing to it.",
  "condition": "ISOPEN = SPACES OR LOW-VALUES",
  "output": null
},
{
  "id": "BR-003",
  "description": "Before writing to the log file, the data should be set properly, including the date, time, and separator characters.",
  "condition": null,
  "output": null
},
{
  "id": "BR-004",
  "description": "If the log file is successfully opened, then the 'O' character should be assigned to the ISOPEN variable to indicate that it is open.",
  "condition": "FS-LOG-OK OR FS-LOG-AOP",
  "output": {
    "open": "ISOPEN = 'O'"
  }
},
{
  "id": "BR-005",
  "description": "If the log file is successfully written to, then the program should continue without errors.",
  "condition": "FS-LOG-OK",
  "output": {
    "continue": "CONTINUE"
  }
},
{
  "id": "BR-006",
  "description": "If the log file is successfully closed, then the program should continue without errors.",
  "condition": "FS-LOG-OK",
  "output": {
    "continue": "CONTINUE"
  }
}[INST]       ID DIVISION.
       PROGRAM-ID. AESTEST.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
            SELECT R-DAT ASSIGN TO 'AESIDAT'
                   ORGANIZATION IS SEQUENTIAL
                   ACCESS MODE  IS SEQUENTIAL
                   FILE STATUS  IS FS-DAT.
       DATA DIVISION.
       FILE SECTION.
       FD R-DAT LABEL RECORD STANDARD.
       01 DAT                            PIC X(32).
       WORKING-STORAGE SECTION.
         01 FS.
            05 FS-DAT                   PIC 9(02).
               88 FS-DAT-OK                       VALUE 0.
               88 FS-DAT-EOF                      VALUE 10.
         01 AES-MAIN.
            COPY "AESLMAIN.cpy".
         01 DAT-MOVE.
            05 D1                      PIC X(16)
            VALUE '0001020304050607'.
            05 D2                      PIC X(16)
            VALUE '08090A0B0C0D0E0F'.
            05 D3                      PIC X(16)
            VALUE '1011121314151617'.
            05 D4                      PIC X(16)
            VALUE '18191A1B1C1D1E1F'.
         66 DAT-MOVE-32   RENAMES D1 THRU D2.
         66 DAT-MOVE-48   RENAMES D1 THRU D3.
         77 DAT-MODE                   PIC X(15) 
            VALUE 'ECBCBCCFBOFBCTR'.
         77 DAT-MODE-R    REDEFINES DAT-MODE
                          OCCURS 5     PIC X(03).
         77 DAT-BITS                   PIC 9(09) 
            VALUE 128192256.
         77 DAT-BITS-R    REDEFINES DAT-BITS
                          OCCURS 3     PIC 9(03).
         77 DAT-I                      PIC 9(01).
         77 DAT-J                      PIC 9(01).
         01 FILLER        OCCURS 5.
             05 FILLER    OCCURS 2.
                10 FILLER OCCURS 3.
                   15 DAT-RES          PIC X(32).
       PROCEDURE DIVISION.
       MAINLINE.
            PERFORM LOAD-RESULTS.
            PERFORM VARYING DAT-J FROM 1 BY 1
              UNTIL DAT-J > 3
            PERFORM VARYING DAT-I FROM 1 BY 1
              UNTIL DAT-I > 5
              DISPLAY '---------------------------------------------'
              DISPLAY '* TESTING CIPHER (' DAT-MODE-R(DAT-I) ')'
              DISPLAY '* BIT LENGTH: ' DAT-BITS-R(DAT-J)
              DISPLAY '---------------------------------------------'
              PERFORM CIPHER
              MOVE SPACES                        TO LMAIN-DATA-GET
                                                    LMAIN-TEXT-GET
                                                    LMAIN-TEXT-PUT
                                                    LMAIN-PUT-MESSAGE
              MOVE 'CIPHER  '                    TO LMAIN-ACTION
              MOVE DAT-MODE-R(DAT-I)             TO LMAIN-MODE
              MOVE DAT-BITS-R(DAT-J)             TO LMAIN-BITS
              EVALUATE DAT-J
                WHEN 1
                  MOVE DAT-MOVE-32               TO LMAIN-KEY
                WHEN 2
                  MOVE DAT-MOVE-48               TO LMAIN-KEY
                WHEN 3
                  MOVE DAT-MOVE                  TO LMAIN-KEY
              END-EVALUATE
              MOVE DAT-MOVE-32                   TO LMAIN-IV
              SET LMAIN-LEVEL-INF                TO TRUE
              CALL 'AESMAIN' USING AES-MAIN
              DISPLAY '---------------------------------------------'
              DISPLAY 'EXPECTED:' DAT-RES(DAT-I, 1, DAT-J) 
                      ' ' DAT-RES(DAT-I, 2, DAT-J)
              DISPLAY '---------------------------------------------'
              DISPLAY SPACES
              DISPLAY '---------------------------------------------'
              DISPLAY '* TESTING DECIPHER (' DAT-MODE-R(DAT-I) ')'
              DISPLAY '* BIT LENGTH: ' DAT-BITS-R(DAT-J)
              DISPLAY '---------------------------------------------'
              PERFORM DECIPHER
              MOVE SPACES                        TO LMAIN-DATA-GET
                                                    LMAIN-TEXT-GET
                                                    LMAIN-TEXT-PUT
                                                    LMAIN-PUT-MESSAGE
              MOVE 'DECIPHER'                    TO LMAIN-ACTION
              MOVE DAT-MODE-R(DAT-I)             TO LMAIN-MODE
              MOVE DAT-BITS-R(DAT-J)             TO LMAIN-BITS
              EVALUATE DAT-J
                WHEN 1
                  MOVE DAT-MOVE-32               TO LMAIN-KEY
                WHEN 2
                  MOVE DAT-MOVE-48               TO LMAIN-KEY
                WHEN 3
                  MOVE DAT-MOVE                  TO LMAIN-KEY
              END-EVALUATE
              MOVE DAT-MOVE-32                   TO LMAIN-IV
              SET LMAIN-LEVEL-INF                TO TRUE
              CALL 'AESMAIN' USING AES-MAIN
              DISPLAY '---------------------------------------------'
              DISPLAY 'EXPECTED: 00112233445566778899AABBCCDDEEFF'
              DISPLAY '---------------------------------------------'
            END-PERFORM
            END-PERFORM.
            STOP RUN.
       CIPHER.
            OPEN OUTPUT R-DAT.
            IF FS-DAT-OK
              CONTINUE
            ELSE
              DISPLAY 'ERROR ON OPEN: ' FS-DAT
              STOP RUN
            END-IF.
            MOVE '00112233445566778899AABBCCDDEEFF'   
              TO DAT.
            WRITE DAT.
            IF FS-DAT-OK
              CONTINUE
            ELSE
              DISPLAY 'ERROR ON WRITTING: ' FS-DAT
              STOP RUN
            END-IF.
            MOVE '00112233445566778899AABBCCDDEEFF'   
              TO DAT.
            WRITE DAT.
            IF FS-DAT-OK
              CONTINUE
            ELSE
              DISPLAY 'ERROR ON WRITTING: ' FS-DAT
              STOP RUN
            END-IF.
            CLOSE R-DAT.
            IF FS-DAT-OK
              CONTINUE
            ELSE
              DISPLAY 'ERORR ON CLOSING: ' FS-DAT
              STOP RUN
            END-IF.
       DECIPHER.
            OPEN OUTPUT R-DAT.
            IF FS-DAT-OK
              CONTINUE
            ELSE
              DISPLAY 'ERROR ON OPEN: ' FS-DAT
              STOP RUN
            END-IF.
            MOVE DAT-RES(DAT-I, 1, DAT-J)   TO DAT.
            WRITE DAT.
            IF FS-DAT-OK
              CONTINUE
            ELSE
              DISPLAY 'ERROR ON WRITTING: ' FS-DAT
              STOP RUN
            END-IF.
            MOVE DAT-RES(DAT-I, 2, DAT-J)   TO DAT.
            WRITE DAT.
            IF FS-DAT-OK
              CONTINUE
            ELSE
              DISPLAY 'ERROR ON WRITTING: ' FS-DAT
              STOP RUN
            END-IF.
            CLOSE R-DAT.
            IF FS-DAT-OK
              CONTINUE
            ELSE
              DISPLAY 'ERORR ON CLOSING: ' FS-DAT
              STOP RUN
            END-IF.
       LOAD-RESULTS.
            MOVE '69C4E0D86A7B0430D8CDB78070B4C55A'   
            TO DAT-RES(1, 1, 1).
            MOVE '69C4E0D86A7B0430D8CDB78070B4C55A'   
            TO DAT-RES(1, 2, 1).
            MOVE '76D0627DA1D290436E21A4AF7FCA94B7'   
            TO DAT-RES(2, 1, 1).
            MOVE '32A06AF3E0DF74A359A0D1F48889E615'   
            TO DAT-RES(2, 2, 1).
            MOVE '0A852986053B9632795A3EE30A8E04A5'   
            TO DAT-RES(3, 1, 1).
            MOVE 'CCEFB18FAB11BCA67C621A7B947C0F3C'   
            TO DAT-RES(3, 2, 1).
            MOVE '0A852986053B9632795A3EE30A8E04A5'   
            TO DAT-RES(4, 1, 1).
            MOVE 'AEF63C960582C83C63F9147795E2589C'   
            TO DAT-RES(4, 2, 1).
            MOVE '735731A6D195D269C1E21758A929C3F5'   
            TO DAT-RES(5, 1, 1).
            MOVE '49C7A560DDCEC0FB6B10D0D3AC5C5E62'   
            TO DAT-RES(5, 2, 1).
            MOVE 'DDA97CA4864CDFE06EAF70A0EC0D7191'   
            TO DAT-RES(1, 1, 2).
            MOVE 'DDA97CA4864CDFE06EAF70A0EC0D7191'   
            TO DAT-RES(1, 2, 2).
            MOVE '9CA47EFF6FD2880B742263496D1C3D3E'   
            TO DAT-RES(2, 1, 2).
            MOVE 'B4A7657757AF7498049138B990DE9445'   
            TO DAT-RES(2, 2, 2).
            MOVE '00719DCD02D62DCF52C5531DD32FCE51'   
            TO DAT-RES(3, 1, 2).
            MOVE 'F0610E02E49F48F8EFA27D48906564B3'   
            TO DAT-RES(3, 2, 2).
            MOVE '00719DCD02D62DCF52C5531DD32FCE51'   
            TO DAT-RES(4, 1, 2).
            MOVE '2E95E921E70C71C716BC0819F12C7123'   
            TO DAT-RES(4, 2, 2).
            MOVE '495F1A690F6AC9C09B734613C4BF89E8'   
            TO DAT-RES(5, 1, 2).
            MOVE 'DB1230B8F318425B0BDBE89D3B17CB39'   
            TO DAT-RES(5, 2, 2).
            MOVE '8EA2B7CA516745BFEAFC49904B496089'   
            TO DAT-RES(1, 1, 3).
            MOVE '8EA2B7CA516745BFEAFC49904B496089'   
            TO DAT-RES(1, 2, 3).
            MOVE '78E16B06817A4453ABEF8A235FA9FA51'   
            TO DAT-RES(2, 1, 3).
            MOVE '6AEA1E8929F1A7A7EEB3450822E766F8'   
            TO DAT-RES(2, 2, 3).
            MOVE '5A7F26644CAE17E178B7FF86CE1E486D'   
            TO DAT-RES(3, 1, 3).
            MOVE '2E05F8BBE5166FBBD52A771A3D4FC393'   
            TO DAT-RES(3, 2, 3).
            MOVE '5A7F26644CAE17E178B7FF86CE1E486D'   
            TO DAT-RES(4, 1, 3).
            MOVE 'CDED0706755E931CA62E2019960099AE'   
            TO DAT-RES(4, 2, 3).
            MOVE 'F04C549D0EECF9922E6F318A841FD8C2'   
            TO DAT-RES(5, 1, 3).
            MOVE '0EAD97EDF179E5CA8031038ED4F17F66'   
            TO DAT-RES(5, 2, 3).
[/INST]{
  "id": "BR-001",
  "description": "The file R-DAT is opened in both cipher and decipher procedures.",
  "condition": null,
  "output": null
},
{
  "id": "BR-002",
  "description": "Record is written to the file R-DAT after checking the status of the file opening.",
  "condition": "IF FS-DAT-OK",
  "output": null
},
{
  "id": "BR-003",
  "description": "The file R-DAT is closed in both cipher and decipher procedures.",
  "condition": null,
  "output": null
},
{
  "id": "BR-004",
  "description": "Record is written to the file R-DAT after checking the status of the file opening.",
  "condition": "IF FS-DAT-OK",
  "output": null
},
{
  "id": "BR-005",
  "description": "The file R-DAT is opened in both cipher and decipher procedures.",
  "condition": null,
  "output": null
},
{
  "id": "BR-006",
  "description": "Record is written to the file R-DAT after checking the status of the file opening.",
  "condition": "IF FS-DAT-OK",
  "output": null
},
{
  "id": "BR-007",
  "description": "The file R-DAT is opened in both cipher and decipher procedures.",
  "condition": null,
  "output": null
},
{
  "id": "BR-008",
  "description": "Record is written to the file R-DAT after checking the status of the file opening.",
  "condition": "IF FS-DAT-OK",
  "output": null
},
{
  "id": "BR-009",
  "description": "The file R-DAT is closed in both cipher and decipher procedures.",
  "condition": null,
  "output": null
},
{
  "id": "BR-010",
  "description": "Record is written to the file R-DAT after checking the status of the file opening.",
  "condition": "IF FS-DAT-OK",
  "output": null
},
{
  "id": "BR-011",
  "description": "Record is written to the file R-DAT after checking the status of the file opening.",
  "condition": "IF FS-DAT-OK",
  "output": null
}[INST]       ID DIVISION.
       PROGRAM-ID. AESTGET.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
            SELECT R-tab ASSIGN TO 'AESTAB'
                   ORGANIZATION IS SEQUENTIAL
                   ACCESS MODE  IS SEQUENTIAL
                   FILE STATUS  IS FS-TAB.
       DATA DIVISION.
       FILE SECTION.
       FD R-TAB LABEL RECORD STANDARD.
       01 TAB.
          COPY 'AESTAB.cpy'.
       WORKING-STORAGE SECTION.
         01 FS.
            05 FS-TAB                  PIC 9(02).
               88 FS-TAB-OK                      VALUE 0.
               88 FS-TAB-EOF                     VALUE 10.
               88 FS-TAB-AOF                     VALUE 41.
         01 PMW.
            COPY 'AESLLOG.cpy'.
       LINKAGE SECTION.
         01 LS.
            02 PUT-MESSAGE-LS          PIC X(2178).
            COPY 'AESLDGET.cpy'.
       PROCEDURE DIVISION USING LS.
       MAINLINE.
            MOVE PUT-MESSAGE-LS             TO PMW.
            MOVE 'OK '                      TO LDG-STATUS.
            IF LDG-CFILE = SPACES OR LOW-VALUES
              IF LDG-ISOPEN = SPACES OR LOW-VALUES
                MOVE 'OPENING AESTAB FILE'  TO LTEXT OF PMW
                SET LLEVEL-INF OF PMW       TO TRUE
                CALL PUT-MESSAGE USING PMW
                PERFORM OPEN-FILE 
              END-IF
              MOVE 'READING AESTAB FILE'    TO LTEXT OF PMW
              SET LLEVEL-INF OF PMW         TO TRUE
              CALL PUT-MESSAGE USING PMW
              PERFORM READ-FILE
            ELSE
              MOVE 'CLOSING AESTAB FILE'    TO LTEXT OF PMW
              SET LLEVEL-INF OF PMW         TO TRUE
              CALL PUT-MESSAGE USING PMW
              PERFORM CLOSE-FILE
            END-IF.
            IF FS-TAB-EOF
              MOVE 'EOF'                    TO LDG-STATUS
            END-IF
            GOBACK.
       OPEN-FILE.
            OPEN INPUT R-TAB.
            IF FS-TAB-OK OR FS-TAB-AOF
              MOVE 'O'                      TO ISOPEN
            ELSE
              STRING 'ERROR OPENING AESTABLE FILE ' 
                     FS-TAB
              DELIMITED BY SIZE           INTO LTEXT OF PMW
              SET LLEVEL-ERR                TO TRUE
              CALL PUT-MESSAGE USING PMW
              PERFORM END-ON-ERROR
            END-IF.
       READ-FILE.
            READ R-TAB.
            EVALUATE TRUE
              WHEN FS-TAB-OK 
                CONTINUE
              WHEN FS-TAB-EOF
                MOVE 'END-OF-FILE AESTAB'   TO LTEXT OF PMW
                SET LLEVEL-INF              TO TRUE
                CALL PUT-MESSAGE USING PMW
              WHEN OTHER
                STRING 'ERROR READING AESTAB FILE '
                       FS-TAB
                DELIMITED BY SIZE         INTO LTEXT OF PMW
                SET LLEVEL-ERR              TO TRUE
                CALL PUT-MESSAGE USING PMW
                PERFORM END-ON-ERROR
            END-EVALUATE.
            PERFORM MOVE-TO-LS.
       CLOSE-FILE.
            CLOSE R-TAB.
            IF FS-TAB-OK
              CONTINUE
            ELSE
              STRING 'ERROR CLOSING AESTAB FILE '
                     FS-TAB
              DELIMITED BY SIZE           INTO LTEXT OF PMW
              SET LLEVEL-ERR OF PMW         TO TRUE
              CALL PUT-MESSAGE USING PMW
              PERFORM END-ON-ERROR
            END-IF.
       MOVE-TO-LS.
            MOVE TAB                        TO LDG-TEXT.
       END-ON-ERROR.
         MOVE 'ERR'                         TO LDG-STATUS.
         GOBACK.
[/INST]{
  "id": "BR-001",
  "description": "An open file status of 'O' is considered a valid open file.",
  "condition": "ISOPEN = 'O'",
  "output": {
    "open": "File Open was successful"
  }
}
{
  "id": "BR-002",
  "description": "A file status of 'EOF' is considered the end of file.",
  "condition": "FS-TAB-EOF",
  "output": {
    "eof": "End of file reached"
  }
}[INST]       ID DIVISION.
       PROGRAM-ID. AESTPUT.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
            SELECT R-DAT ASSIGN TO 'AESODAT'
                   ORGANIZATION IS SEQUENTIAL
                   ACCESS MODE  IS SEQUENTIAL
                   FILE STATUS  IS FS-DAT.
       DATA DIVISION.
       FILE SECTION.
       FD R-DAT LABEL RECORD STANDARD.
       01 DAT.
          02 OUTPUT-DATA.
             03 ODT OCCURS 32.
                04 OD-ITEM             PIC X(01).
       WORKING-STORAGE SECTION.
         01 FS.
            05 FS-DAT                  PIC 9(02).
               88 FS-DAT-OK                      VALUE 0.
               88 FS-DAT-EOF                     VALUE 10.
               88 FS-DAT-AOF                     VALUE 41.
         01 PMW.
            COPY 'AESLLOG.cpy'.
       LINKAGE SECTION.
         01 LS.
            02 PUT-MESSAGE-LS          PIC X(2178).
            COPY 'AESLTPUT.cpy'.
       PROCEDURE DIVISION USING LS.
       MAINLINE.
            MOVE PUT-MESSAGE-LS             TO PMW.
            MOVE 'OK '                      TO LXP-STATUS.
            IF LXP-CFILE = SPACES OR LOW-VALUES
              IF LXP-ISOPEN = SPACES OR LOW-VALUES
                MOVE 'OPENING FILE'         TO LTEXT OF PMW
                SET LLEVEL-INF OF PMW       TO TRUE
                CALL PUT-MESSAGE USING PMW
                PERFORM OPEN-FILE
              END-IF
              MOVE 'WRITTING FILE'          TO LTEXT OF PMW
              SET LLEVEL-INF OF PMW         TO TRUE
              CALL PUT-MESSAGE USING PMW
              PERFORM WRITE-FILE
            ELSE
              MOVE 'CLOSING FILE'           TO LTEXT OF PMW
              SET LLEVEL-INF OF PMW         TO TRUE
              CALL PUT-MESSAGE USING PMW
              PERFORM CLOSE-FILE
            END-IF.
            GOBACK.
       OPEN-FILE.
            OPEN OUTPUT R-DAT.
            IF FS-DAT-OK OR FS-DAT-AOF
              MOVE 'O'                      TO ISOPEN
            ELSE
              STRING 'ERROR OPENING OUTPUT FILE '
                     FS-DAT
              DELIMITED BY SIZE           INTO LTEXT OF PMW
              SET LLEVEL-ERR OF PMW         TO TRUE
              CALL PUT-MESSAGE USING PMW
              PERFORM END-ON-ERROR
            END-IF.
       WRITE-FILE.
            MOVE SPACES                     TO OUTPUT-DATA.
            MOVE LXP-TEXT(1:LXP-TLENGTH)    TO OUTPUT-DATA.
            WRITE DAT.
            IF FS-DAT-OK
              CONTINUE
            ELSE
              STRING 'ERROR WRITTING OUTPUT FILE '
                     FS-DAT
              DELIMITED BY SIZE           INTO LTEXT OF PMW
              SET LLEVEL-ERR OF PMW         TO TRUE
              CALL PUT-MESSAGE USING PMW
              PERFORM END-ON-ERROR
            END-IF.
       CLOSE-FILE.
            CLOSE R-DAT.
            IF FS-DAT-OK
              CONTINUE
            ELSE
              STRING 'ERROR CLOSING OUTPUT FILE '
                     FS-DAT
              DELIMITED BY SIZE           INTO LTEXT OF PMW
              SET LLEVEL-ERR OF PMW         TO TRUE
              CALL PUT-MESSAGE USING PMW
              PERFORM END-ON-ERROR
            END-IF.
       END-ON-ERROR.
            MOVE 'ERR'                      TO LXP-STATUS.
            GOBACK.
[/INST]{
  "id": "BR-001",
  "description": "The file status FS-DAT must be 'OK' before opening, writing, or closing the file.",
  "condition": "FS-DAT-OK",
  "output": {
    "ok": "Open, write, and close actions can be performed.",
    "not ok": "An error message will be displayed and the end-on-error procedure will be performed."
  }
}[INST]       ID DIVISION.
       PROGRAM-ID. AESXGET.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
            SELECT R-DAT ASSIGN TO 'AESIDAT'
                   ORGANIZATION IS SEQUENTIAL
                   ACCESS MODE  IS SEQUENTIAL
                   FILE STATUS  IS FS-DAT.
       DATA DIVISION.
       FILE SECTION.
       FD R-DAT LABEL RECORD STANDARD.
       01 DAT.
          02 INPUT-DATA.   
             03 IDT OCCURS 32.
                04 ID-ITEM             PIC X(1).
       WORKING-STORAGE SECTION.
         01 FS.
            05 FS-DAT                  PIC 9(02).
               88 FS-DAT-OK                      VALUE 0.
               88 FS-DAT-EOF                     VALUE 10.
               88 FS-DAT-AOF                     VALUE 41.
         01 PMW.
            COPY 'AESLLOG.cpy'.
       LINKAGE SECTION.
         01 LS.
            02 PUT-MESSAGE-LS          PIC X(2178).
            COPY 'AESLXGET.cpy'.
       PROCEDURE DIVISION USING LS.
       MAINLINE.
            MOVE PUT-MESSAGE-LS             TO PMW.
            MOVE 'OK '                      TO LXG-STATUS.
            IF LXG-CFILE = SPACES OR LOW-VALUES
              IF LXG-ISOPEN = SPACES OR LOW-VALUES
                MOVE 'OPENING AESIDAT FILE' TO LTEXT OF PMW
                SET LLEVEL-INF OF PMW       TO TRUE
                CALL PUT-MESSAGE USING PMW
                PERFORM OPEN-FILE
              END-IF
              MOVE 'READING AESIDAT FILE'   TO LTEXT OF PMW
              SET LLEVEL-INF OF PMW         TO TRUE
              CALL PUT-MESSAGE USING PMW
              PERFORM READ-FILE
            ELSE
              MOVE 'CLOSING AESIDATA FILE'  TO LTEXT OF PMW
              SET LLEVEL-INF OF PMW         TO TRUE
              CALL PUT-MESSAGE USING PMW
              PERFORM CLOSE-FILE
            END-IF.
            IF FS-DAT-EOF
              MOVE 'EOF'                    TO LXG-STATUS
            END-IF
            GOBACK.
       OPEN-FILE.
            OPEN INPUT R-DAT.
            IF FS-DAT-OK OR FS-DAT-AOF
              MOVE 'O'                      TO ISOPEN
            ELSE
              STRING 'ERROR OPENING AESIDAT FILE ' 
                     FS-DAT
              DELIMITED BY SIZE           INTO LTEXT OF PMW
              SET LLEVEL-ERR                TO TRUE
              CALL PUT-MESSAGE USING PMW
              PERFORM END-ON-ERROR
            END-IF.
       READ-FILE.
            READ R-DAT.
            EVALUATE TRUE
              WHEN FS-DAT-OK 
                CONTINUE
              WHEN FS-DAT-EOF
                MOVE 'END-OF-FILE(AESIDAT)' TO LTEXT OF PMW
                SET LLEVEL-INF              TO TRUE
                CALL PUT-MESSAGE USING PMW
              WHEN OTHER
                STRING 'ERROR READING AESIDAT FILE '
                       FS-DAT
                DELIMITED BY SIZE         INTO LTEXT OF PMW
                SET LLEVEL-ERR              TO TRUE
                CALL PUT-MESSAGE USING PMW
                PERFORM END-ON-ERROR
            END-EVALUATE.
            PERFORM MOVE-TO-LS.
       CLOSE-FILE.
            CLOSE R-DAT.
            IF FS-DAT-OK
              CONTINUE
            ELSE
              STRING 'ERROR CLOSING AESIDAT FILE '
                     FS-DAT
              DELIMITED BY SIZE           INTO LTEXT OF PMW
              SET LLEVEL-ERR OF PMW         TO TRUE
              CALL PUT-MESSAGE USING PMW
              PERFORM END-ON-ERROR
            END-IF.
       MOVE-TO-LS.
            MOVE DAT                        TO LXG-TEXT.
            MOVE 32                         TO LXG-TLENGTH.
       END-ON-ERROR.
         MOVE 'ERR'                         TO LXG-STATUS.
         GOBACK.
[/INST]{
  "id": "BR-001",
  "description": "The file named 'AESIDAT' must be closed before opening it.",
  "condition": "LXG-ISOPEN = SPACES OR LOW-VALUES",
  "output": {
    "open": "OPENING AESIDAT FILE",
    "read": "READING AESIDAT FILE",
    "close": "CLOSING AESIDATA FILE"
  }
}[INST]       ID DIVISION.
       PROGRAM-ID. ITGEN.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
            SELECT R-DAT ASSIGN TO 'AESIDAT'
                   ORGANIZATION IS SEQUENTIAL
                   ACCESS MODE  IS SEQUENTIAL
                   FILE STATUS  IS FS-DAT.
       DATA DIVISION.
       FILE SECTION.
       FD R-DAT LABEL RECORD STANDARD.
       01 DAT                            PIC X(32).
       WORKING-STORAGE SECTION.
         01 FS.
            05 FS-DAT                   PIC 9(02).
               88 FS-DAT-OK                       VALUE 0.
               88 FS-DAT-EOF                      VALUE 10.
       LINKAGE SECTION.
       PROCEDURE DIVISION.
       MAINLINE.
            OPEN OUTPUT R-DAT.
            IF FS-DAT-OK
              CONTINUE
            ELSE
              DISPLAY 'ERROR ON OPEN: ' FS-DAT
              STOP RUN
            END-IF.
            MOVE 
              '00112233445566778899AABBCCDDEEFF'
              TO DAT.
            WRITE DAT.
            IF FS-DAT-OK
              CONTINUE
            ELSE
              DISPLAY 'ERROR ON WRITTING: ' FS-DAT
              STOP RUN
            END-IF.
            WRITE DAT.
            IF FS-DAT-OK
              CONTINUE
            ELSE
              DISPLAY 'ERROR ON WRITTING: ' FS-DAT
              STOP RUN
            END-IF.
            CLOSE R-DAT.
            IF FS-DAT-OK
              CONTINUE
            ELSE
              DISPLAY 'ERORR ON CLOSING: ' FS-DAT
              STOP RUN
            END-IF.
            STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "If the file R-DAT opens successfully, continue processing.",
  "condition": "FS-DAT = FS-DAT-OK",
  "output": {}
},
{
  "id": "BR-002",
  "description": "If there is an error opening the file R-DAT, display the error message and stop the program.",
  "condition": "FS-DAT <> FS-DAT-OK",
  "output": {
    "error": "ERROR ON OPEN: " + "FS-DAT"
  }
},
{
  "id": "BR-003",
  "description": "If the write operation to the file R-DAT is successful, continue processing.",
  "condition": "FS-DAT = FS-DAT-OK",
  "output": {}
},
{
  "id": "BR-004",
  "description": "If there is an error writing to the file R-DAT, display the error message and stop the program.",
  "condition": "FS-DAT <> FS-DAT-OK",
  "output": {
    "error": "ERROR ON WRITTING: " + "FS-DAT"
  }
},
{
  "id": "BR-005",
  "description": "If the close operation on the file R-DAT is successful, continue processing.",
  "condition": "FS-DAT = FS-DAT-OK",
  "output": {}
},
{
  "id": "BR-006",
  "description": "If there is an error closing the file R-DAT, display the error message and stop the program.",
  "condition": "FS-DAT <> FS-DAT-OK",
  "output": {
    "error": "ERORR ON CLOSING: " + "FS-DAT"
  }
}[INST]       ID DIVISION.
       PROGRAM-ID. EPSCMORT.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. IBM-FLEX-ES.
       OBJECT-COMPUTER. IBM-FLEX-ES.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  W-FLAGS.
           10  W-SEND-FLAG                    PIC X.
               88  SEND-ERASE                   VALUE '1'.
               88  SEND-DATAONLY                VALUE '2'.
               88  SEND-MAPONLY                 VALUE '3'.
               88  SEND-DATAONLY-ALARM          VALUE '4'.
               88  SEND-ALL                     VALUE '5'.
       01 W-CONVERSIONS.
           05  W-PMT-CNVRT     PIC X(12).
           05  W-PMT-NUMBER
               REDEFINES W-PMT-CNVRT
                               PIC 9(10)V99.
           05  WS-FORMAT-NUMBER PIC Z,ZZZ,ZZ9.99.
           05  W-PRINC-CNVRT   PIC X(12).
           05  W-PRINC-NUMBER
               REDEFINES W-PRINC-CNVRT
                               PIC 9(10)V99.
       01 W-CALL-PROGRAM                      PIC X(8).
       01 W-RETIREMENT-WA                     PIC 9(4).
       01 W-COMAREA-LENGTH                    PIC 9(4) COMP.
       01  SQL-ERROR-MSG.
           03  FILLER              PIC X(11)      VALUE 'SQL ERROR: '.
           03  SQL-ERROR-CODE      PIC 9(5) DISPLAY.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
           EXEC SQL DECLARE SYSIBM.SYSDUMMY1 TABLE
           ( IBMREQD                        CHAR(1) NOT NULL
           ) END-EXEC.
       01 IBMREQD                           PIC X(1).
       01  END-OF-TRANS-MSG                 PIC X(30)
             VALUE 'END OF TRANSACTION - THANK YOU'.
       01  BLANK-MSG                        PIC X(1) VALUE ' '.
           COPY DFHAID.
           COPY EPSMORT.
       01  W-COMMUNICATION-AREA.
           COPY EPSMTCOM.
       COPY EPSNBRPM.
       LINKAGE SECTION.
       01 DFHCOMMAREA.
       COPY EPSMTCOM.
       PROCEDURE DIVISION USING DFHCOMMAREA.
       EPSCMORT-MAINLINE.
           PERFORM A805-DUMMY-SQL-CALL
           MOVE LENGTH OF DFHCOMMAREA to W-COMAREA-LENGTH.
           MOVE DFHCOMMAREA to W-COMMUNICATION-AREA.
           EVALUATE TRUE
               WHEN EIBCALEN = ZERO
                   MOVE LOW-VALUES TO EPMENUO
                   SET SEND-ERASE TO TRUE
                   PERFORM A300-SEND-MAP
                   MOVE '3' TO
                      PROCESS-INDICATOR OF W-COMMUNICATION-AREA
               WHEN EIBAID = DFHCLEAR
                   MOVE LOW-VALUES TO EPMENUO
                   SET SEND-ERASE TO TRUE
                   PERFORM A300-SEND-MAP
               WHEN EIBAID = DFHPF3 OR DFHPF12
                  IF PROCESS-INDICATOR OF W-COMMUNICATION-AREA = '3'
                      EXEC CICS
                         SEND TEXT FROM (END-OF-TRANS-MSG)
                         ERASE
                         FREEKB
                      END-EXEC
                      EXEC CICS
                           RETURN
                      END-EXEC
                   ELSE
                      SET SEND-ALL TO TRUE
                      EXEC CICS
                         SEND TEXT FROM (BLANK-MSG)
                         ERASE
                         FREEKB
                      END-EXEC
                      PERFORM A300-SEND-MAP
                      MOVE '3' TO
                          PROCESS-INDICATOR OF W-COMMUNICATION-AREA
                   END-IF
               WHEN EIBAID = DFHPF9
                   MOVE '9' TO
                      PROCESS-INDICATOR OF W-COMMUNICATION-AREA
                   EXEC CICS LINK PROGRAM( 'EPSMLIST' )
                          COMMAREA( W-COMMUNICATION-AREA )
                   END-EXEC
               WHEN EIBAID = DFHENTER
                   IF PROCESS-INDICATOR OF W-COMMUNICATION-AREA = '3'
                      PERFORM A100-PROCESS-MAP
                   ELSE
                      EXEC CICS LINK PROGRAM('EPSMLIST')
                             COMMAREA( W-COMMUNICATION-AREA )
                      END-EXEC
                   END-IF
               WHEN OTHER
                    IF PROCESS-INDICATOR OF W-COMMUNICATION-AREA = '3'
                      PERFORM A600-CALCULATE-MORTGAGE
                      EXEC CICS RETURN END-EXEC
                    END-IF
           END-EVALUATE
           EXEC CICS
               RETURN TRANSID('EPSP')
               COMMAREA(W-COMMUNICATION-AREA)
               LENGTH(W-COMAREA-LENGTH)
           END-EXEC.
       A100-PROCESS-MAP.
           PERFORM A400-RECEIVE-MAP.
           PERFORM A600-CALCULATE-MORTGAGE
           SET SEND-DATAONLY TO TRUE
           PERFORM A300-SEND-MAP
               .
       A300-SEND-MAP.
           EVALUATE TRUE
              WHEN SEND-MAPONLY
                   EXEC CICS
                     SEND MAP ('EPMENU')
                       MAPSET('EPSMORT')
                       MAPONLY
                       CURSOR
                   END-EXEC
              WHEN SEND-ERASE
                   EXEC CICS
                     SEND MAP ('EPMENU')
                         MAPSET('EPSMORT')
                         FROM(EPMENUO)
                         ERASE
                         CURSOR
                   END-EXEC
              WHEN SEND-DATAONLY
                   EXEC CICS
                     SEND MAP ('EPMENU')
                         MAPSET('EPSMORT')
                         FROM(EPMENUO)
                         DATAONLY
                         CURSOR
                   END-EXEC
              WHEN SEND-ALL
                   EXEC CICS
                     SEND MAP ('EPMENU')
                         MAPSET('EPSMORT')
                         FROM(EPMENUO)
                     END-EXEC.
       A400-RECEIVE-MAP.
           EXEC CICS
                RECEIVE MAP('EPMENU')
                   MAPSET('EPSMORT')
                   INTO (EPMENUI)
           END-EXEC.
           MOVE EPLOANI        TO EPSPARM-VALIDATE-DATA.
           MOVE LENGTH OF EPLOANI
                               TO EPSPARM-MAX-LENGTH.
           CALL 'EPSNBRVL' USING EPS-NUMBER-VALIDATION.
           COMPUTE EPSPCOM-PRINCIPLE-DATA
                OF W-COMMUNICATION-AREA
                = EPSPARM-NUMBER + EPSPARM-DECIMAL.
           MOVE EPYEARSI             TO EPSPARM-VALIDATE-DATA.
           MOVE LENGTH OF EPYEARSI   TO EPSPARM-MAX-LENGTH.
           CALL 'EPSNBRVL' USING EPS-NUMBER-VALIDATION.
           COMPUTE EPSPCOM-NUMBER-OF-YEARS
                OF W-COMMUNICATION-AREA
                = EPSPARM-NUMBER + EPSPARM-DECIMAL.
           MOVE EPRATEI              TO EPSPARM-VALIDATE-DATA.
           MOVE LENGTH OF EPRATEI    TO EPSPARM-MAX-LENGTH.
           CALL 'EPSNBRVL' USING EPS-NUMBER-VALIDATION.
           COMPUTE EPSPCOM-QUOTED-INTEREST-RATE
                OF W-COMMUNICATION-AREA
                = EPSPARM-NUMBER + EPSPARM-DECIMAL.
       A600-CALCULATE-MORTGAGE.
           MOVE 'Y' TO EPSPCOM-YEAR-MONTH-IND
                           OF W-COMMUNICATION-AREA.
           MOVE 'EPSCSMRT' TO W-CALL-PROGRAM
           EXEC CICS LINK PROGRAM( W-CALL-PROGRAM )
                          COMMAREA( W-COMMUNICATION-AREA )
           END-EXEC
           .
           MOVE EPSPCOM-RETURN-MONTH-PAYMENT
                             OF W-COMMUNICATION-AREA
                             TO WS-FORMAT-NUMBER.
           MOVE WS-FORMAT-NUMBER
                             TO EPPAYMNTO.
           MOVE EPSPCOM-ERRMSG
                             OF W-COMMUNICATION-AREA
                             TO MSGERRO.
       A805-DUMMY-SQL-CALL.
           EXEC SQL
               SELECT IBMREQD
                    INTO :IBMREQD
                    FROM SYSIBM.SYSDUMMY1
           END-EXEC.
           IF SQLCODE = 100
               MOVE 'No rows found on SYSDUMM1.' TO MSGERRO
           ELSE
               IF SQLCODE NOT = 0
                   MOVE SQLCODE TO SQL-ERROR-CODE
                   MOVE SQL-ERROR-MSG TO MSGERRO
               END-IF
           END-IF.
[/INST]{
  "id": "BR-001",
  "description": "A transaction with a process indicator of 3 needs to perform a dummy SQL call in order to initialize SQL.",
  "condition": "PROCESS-INDICATOR OF W-COMMUNICATION-AREA = '3'",
  "output": null
},
{
  "id": "BR-002",
  "description": "A function 'EPSNBRVL' is called to validate the data entered by the user.",
  "condition": null,
  "output": null
},
{
  "id": "BR-003",
  "description": "When the user enters a value in the 'loan amount' field, the system will calculate the principle data by combining the number and decimal portions of the value.",
  "condition": "EPSPCOM-PRINCIPLE-DATA OF W-COMMUNICATION-AREA = EPSPARM-NUMBER + EPSPARM-DECIMAL",
  "output": null
},
{
  "id": "BR-004",
  "description": "When the user enters a value in the 'years' field, the system will calculate the number of years by combining the number and decimal portions of the value.",
  "condition": "EPSPCOM-NUMBER-OF-YEARS OF W-COMMUNICATION-AREA = EPSPARM-NUMBER + EPSPARM-DECIMAL",
  "output": null
},
{
  "id": "BR-005",
  "description": "When the user enters a value in the 'interest rate' field, the system will calculate the quoted interest rate by combining the number and decimal portions of the value.",
  "condition": "EPSPCOM-QUOTED-INTEREST-RATE OF W-COMMUNICATION-AREA = EPSPARM-NUMBER + EPSPARM-DECIMAL",
  "output": null
},
{
  "id": "BR-006",
  "description": "The system will use the 'year/month indicator' to determine the format of the payment amount.",
  "condition": "EPSPCOM-YEAR-MONTH-IND OF W-COMMUNICATION-AREA = 'Y'",
  "output": null
},
{
  "id": "BR-007",
  "description": "The system will call the 'EPSCSMRT' program to calculate the mortgage payment.",
  "condition": "W-CALL-PROGRAM = 'EPSCSMRT'",
  "output": null
}[INST]   CBL NUMPROC(MIG),FLAG(I,W),RENT
       ID DIVISION.
       PROGRAM-ID. EPSCSMRT.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. FLEX-ES.
       OBJECT-COMPUTER. FLEX-ES.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-CALLED-PROGRAM    PIC X(8).
       01  STATIC-CALLED-PROGRAMS.
           03 STATIC-CALLED-PROGRAM-TABLE.
              05 FILLER            PIC X(8) VALUE 'EPSMPMT'.
              05 FILLER            PIC X(8) VALUE 'NOT VLD'.
              05 FILLER            PIC X(8) VALUE ' '.
           03 CALLED-PROGRAM-TABLE
                        REDEFINES STATIC-CALLED-PROGRAM-TABLE
                        OCCURS 3 TIMES.
              05 CALLED-PROGRAM-NAME PIC X(8).
       COPY EPSPDATA.
       LINKAGE SECTION.
       01 DFHCOMMAREA.
       COPY EPSMTCOM.
       PROCEDURE DIVISION USING DFHCOMMAREA.
       A000-MAINLINE.
           MOVE EPSPCOM-PRINCIPLE-DATA  TO EPSPDATA-PRINCIPLE-DATA.
           MOVE EPSPCOM-NUMBER-OF-YEARS TO EPSPDATA-NUMBER-OF-YEARS.
           MOVE 'Y'                     TO EPSPDATA-YEAR-MONTH-IND.
           MOVE EPSPCOM-QUOTED-INTEREST-RATE
                                        TO
                                   EPSPDATA-QUOTED-INTEREST-RATE.
           MOVE CALLED-PROGRAM-NAME(1)  TO WS-CALLED-PROGRAM.
           MOVE SPACES                  TO EPSPDATA-RETURN-ERROR.
           CALL WS-CALLED-PROGRAM USING EPSPDATA.
           MOVE EPSPDATA-RETURN-MONTH-PAYMENT
                                        TO
                                        EPSPCOM-RETURN-MONTH-PAYMENT.
           MOVE EPSPDATA-RETURN-ERROR   TO EPSPCOM-ERRMSG.
           IF EPSPDATA-RETURN-ERROR = SPACES
              MOVE ZERO TO EPSPCOM-PROGRAM-RETCODE
           ELSE
              MOVE 8 TO EPSPCOM-PROGRAM-RETCODE
           END-IF.
           GOBACK
           .
[/INST]{
  "id": "BR-001",
  "description": "The value of the 'Principle Data' in the input Commarea should be copied to the 'Principle Data' of the output Commarea.",
  "condition": null,
  "output": {
    "output_value": "EPSPCOM-PRINCIPLE-DATA = EPSPDATA-PRINCIPLE-DATA"
  }
},
{
  "id": "BR-002",
  "description": "The value of the 'Number of Years' in the input Commarea should be copied to the 'Number of Years' of the output Commarea.",
  "condition": null,
  "output": {
    "output_value": "EPSPCOM-NUMBER-OF-YEARS = EPSPDATA-NUMBER-OF-YEARS"
  }
},
{
  "id": "BR-003",
  "description": "The value 'Y' should be copied to the 'Year Month Indicator' of the output Commarea.",
  "condition": null,
  "output": {
    "output_value": "EPSPDATA-YEAR-MONTH-IND = 'Y'"
  }
},
{
  "id": "BR-004",
  "description": "The value of the 'Quoted Interest Rate' in the input Commarea should be copied to the 'Quoted Interest Rate' of the output Commarea.",
  "condition": null,
  "output": {
    "output_value": "EPSPCOM-QUOTED-INTEREST-RATE = EPSPDATA-QUOTED-INTEREST-RATE"
  }
},
{
  "id": "BR-005",
  "description": "The first 8 characters of the 'Called Program Table' should be copied to the 'Called Program' Work Storage field.",
  "condition": null,
  "output": {
    "output_value": "WS-CALLED-PROGRAM = CALLED-PROGRAM-NAME(1)"
  }
},
{
  "id": "BR-006",
  "description": "The 'Return Error' field of the output Commarea should be cleared before calling the program.",
  "condition": null,
  "output": {
    "output_value": "EPSPDATA-RETURN-ERROR = SPACES"
  }
},
{
  "id": "BR-007",
  "description": "The 'Return Month Payment' from the output Commarea should be copied to the 'Return Month Payment' of the input Commarea.",
  "condition": "EPSPDATA-RETURN-ERROR = SPACES",
  "output": {
    "output_value": "EPSPCOM-RETURN-MONTH-PAYMENT = EPSPDATA-RETURN-MONTH-PAYMENT"
  }
},
{
  "id": "BR-008",
  "description": "The 'Return Error' from the output Commarea should be copied to the error message field of the input Commarea.",
  "condition": "EPSPDATA-RETURN-ERROR = SPACES",
  "output": {
    "output_value": "EPSPCOM-ERRMSG = EPSPDATA-RETURN-ERROR"
  }
},
{
  "id": "BR-009",
  "description": "The program return code should be set to 0 if there is no error.",
  "condition": "EPSPDATA-RETURN-ERROR = SPACES",
  "output": {
    "output_value": "EPSPCOM-PROGRAM-RETCODE = 0"
  }
},
{
  "id": "BR-010",
  "description": "The program return code should be set to 8 if there is an error.",
  "condition": "EPSPDATA-RETURN-ERROR != SPACES",
  "output": {
    "output_value": "EPSPCOM-PROGRAM-RETCODE = 8"
  }
}[INST]       ID DIVISION.
       PROGRAM-ID. EPSMLIST.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. IBM-FLEX-ES.
       OBJECT-COMPUTER. IBM-FLEX-ES.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  W-FLAGS.
           10  W-SEND-FLAG                    PIC X.
               88  SEND-ERASE                   VALUE '1'.
               88  SEND-DATAONLY                VALUE '2'.
               88  SEND-MAPONLY                 VALUE '3'.
               88  SEND-DATAONLY-ALARM          VALUE '4'.
       01 W-CONVERSIONS.
           05  W-PMT-CNVRT     PIC X(12).
           05  W-PMT-NUMBER
               REDEFINES W-PMT-CNVRT
                               PIC 9(10)V99.
           05  WS-FORMAT-NUMBER PIC Z,ZZZ,ZZ9.99.
           05  W-PRINC-CNVRT   PIC X(12).
           05  W-PRINC-NUMBER
               REDEFINES W-PRINC-CNVRT
                               PIC 9(10)V99.
       01 W-CALL-PROGRAM                      PIC X(8).
       01 RESPONSE                            PIC S9(8) COMP.
       01 INTERNAL-PROGRAM-VARIABLES.
           05 RID-LENGTH                      PIC S9(9) COMP.
           05 DISP-COUNT                      PIC S9(4) COMP.
           05 MAX-LOOP                        PIC S9(4) COMP
                                              VALUE IS 8.
           05 END-OF-FILE                     PIC X.
           05 CLOSE-FILE                      PIC X.
       01 W-RETIREMENT-WA                     PIC 9(4).
       01 W-COMAREA-LENGTH                    PIC 9(4) COMP.
       01 SAVE-COMM-AREA.
          COPY EPSMTCOM.
       01  END-OF-TRANS-MSG                 PIC X(30)
             VALUE 'END OF TRANSACTION - THANK YOU'.
           COPY DFHAID.
           COPY EPSMLIS.
       01  OUTMAP REDEFINES EPSMLISI.
           03 FILLER PIC X(110).
           03 OUTMAP-REPEATE OCCURS 8 TIMES.
              05 FILLER                    PIC X(5).
              05 OUTMAP-COMPANY            PIC X(24).
              05 FILLER                    PIC X(5).
              05 OUTMAP-PHONE-NUM          PIC X(13).
              05 FILLER                    PIC X(5).
              05 OUTMAP-RATE               PIC X(5).
              05 FILLER                    PIC X(5).
              05 OUTMAP-LOAN               PIC X(12).
              05 FILLER                    PIC X(5).
              05 OUTMAP-YEARS              PIC X(2).
           03 FILLER                       PIC X(5).
           03 OUTMAP-MSG                   PIC X(40).
           COPY EPSNBRPM.
           COPY EPSMORTF.
       01  W-COMMUNICATION-AREA.
           COPY EPSMTCOM.
       LINKAGE SECTION.
       01 DFHCOMMAREA.
       COPY EPSMTCOM.
       PROCEDURE DIVISION USING DFHCOMMAREA.
       EPSCMORT-MAINLINE.
           MOVE LENGTH OF DFHCOMMAREA to W-COMAREA-LENGTH.
           MOVE DFHCOMMAREA           TO SAVE-COMM-AREA.
           EVALUATE TRUE
               WHEN EIBCALEN = ZERO
                   PERFORM A100-PROCESS-MAP
               WHEN EIBAID = DFHCLEAR
                   EXEC CICS
                        RETURN
                   END-EXEC
               WHEN EIBAID = DFHPF3 OR DFHPF12
                   EXEC CICS
                        RETURN
                   END-EXEC
               WHEN EIBAID = DFHENTER
                   PERFORM A100-PROCESS-MAP
               WHEN OTHER
                   PERFORM A100-PROCESS-MAP
           END-EVALUATE
           .
           MOVE SAVE-COMM-AREA TO DFHCOMMAREA.
           EXEC CICS RETURN END-EXEC.
       A100-PROCESS-MAP.
           PERFORM A310-ERASE-MAP.
           MOVE 0      TO RID-LENGTH.
           MOVE 'N'    TO CLOSE-FILE.
           MOVE 'N'    TO END-OF-FILE.
           EXEC CICS STARTBR DATASET('EPSMORTF')
                     RIDFLD(RID-LENGTH) RBA
                     EQUAL
                     RESP(RESPONSE) END-EXEC.
           IF (RESPONSE = DFHRESP(NORMAL))
              MOVE 'Y' TO CLOSE-FILE
              MOVE 1   TO DISP-COUNT
              PERFORM A150-PROCESS-FILE
                      UNTIL END-OF-FILE = 'Y'
                      OR    DISP-COUNT  > MAX-LOOP
           ELSE
              MOVE 'ERROR WITH START'         TO EPCMP1O
              MOVE RESPONSE                   TO EPLOAN1O
           END-IF
           .
           IF CLOSE-FILE = 'Y'
            EXEC CICS ENDBR FILE('EPSMORTF') END-EXEC
           END-IF
           .
           PERFORM A300-SEND-MAP.
       A150-PROCESS-FILE.
           EXEC CICS READNEXT FILE('EPSMORTF')
                    INTO(MORTGAGE-COMPANY-INFO)
                    RIDFLD(RID-LENGTH)
                    RBA RESP(RESPONSE)
           END-EXEC
           .
           IF (RESPONSE = DFHRESP(NORMAL))
              IF  EPSPCOM-PRINCIPLE-DATA OF SAVE-COMM-AREA
                                          < MORT-FILE-LOAN
              AND EPSPCOM-QUOTED-INTEREST-RATE OF SAVE-COMM-AREA
                                          > MORT-FILE-RATE
                 MOVE MORT-FILE-COMPANY
                                       TO OUTMAP-COMPANY(DISP-COUNT)
                 MOVE MORT-FILE-PHONE-NUM
                                       TO OUTMAP-PHONE-NUM(DISP-COUNT)
                 PERFORM A600-CALCULATE-MORTGAGE
                 MOVE MORT-FILE-RATE
                                       TO WS-FORMAT-NUMBER
                 MOVE WS-FORMAT-NUMBER(7:5)
                                       TO OUTMAP-RATE(DISP-COUNT)
                 MOVE EPSPCOM-RETURN-MONTH-PAYMENT OF DFHCOMMAREA
                                       TO WS-FORMAT-NUMBER
                 MOVE WS-FORMAT-NUMBER TO OUTMAP-LOAN(DISP-COUNT)
                 MOVE MORT-FILE-YEARS
                                       TO OUTMAP-YEARS(DISP-COUNT)
                 ADD 1                 TO DISP-COUNT
              END-IF
           ELSE
              IF (RESPONSE NOT = DFHRESP(ENDFILE))
                 MOVE 'ERROR WITH READ NEXT' TO EPCMP1O
                 MOVE RESPONSE               TO EPLOAN1O
              ELSE
                 MOVE 'Y' TO END-OF-FILE
              END-IF
           END-IF
           .
       A300-SEND-MAP.
                   EXEC CICS
                     SEND MAP ('EPSMLIS')
                         MAPSET('EPSMLIS')
                         FROM(EPSMLISO)
                   END-EXEC.
       A310-ERASE-MAP.
            MOVE LOW-VALUES TO EPSMLISO.
            EXEC CICS
                SEND MAP ('EPSMLIS')
                     MAPSET('EPSMLIS')
                     FROM(EPSMLISO)
                     ERASE
            END-EXEC.
       A600-CALCULATE-MORTGAGE.
           MOVE SAVE-COMM-AREA   TO DFHCOMMAREA.
           MOVE 'Y' TO EPSPCOM-YEAR-MONTH-IND
                                 OF DFHCOMMAREA.
           MOVE MORT-FILE-RATE   TO EPSPCOM-QUOTED-INTEREST-RATE
                                 OF DFHCOMMAREA.
           MOVE MORT-FILE-YEARS  TO EPSPCOM-NUMBER-OF-YEARS
                                 OF DFHCOMMAREA.
           MOVE 'EPSCSMRT' TO W-CALL-PROGRAM
           EXEC CICS LINK PROGRAM( W-CALL-PROGRAM )
                          COMMAREA( DFHCOMMAREA )
           END-EXEC
           MOVE EPSPCOM-RETURN-MONTH-PAYMENT
                                 OF DFHCOMMAREA
                                 TO WS-FORMAT-NUMBER.
           MOVE WS-FORMAT-NUMBER TO OUTMAP-LOAN(DISP-COUNT).
[/INST]{
  "id": "BR-001",
  "description": "A mortgage is considered attractive if the interest rate is greater than the quoted interest rate and the loan amount is less than the principal.",
  "condition": "(MORT-FILE-RATE > EPSPCOM-QUOTED-INTEREST-RATE) AND (MORT-FILE-LOAN < EPSPCOM-PRINCIPLE-DATA)",
  "output": {}
}[INST]   CBL NUMPROC(MIG),FLAG(I,W),RENT
       ID DIVISION.
       PROGRAM-ID. EPSMPMT.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. FLEX-ES.
       OBJECT-COMPUTER. FLEX-ES.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 WS-STATIC-DATA.
           03 STATIC-MAXIMUM-PRINCIPLE    PIC 9(9)V99
                                VALUE 100000000.01.
           03 STATIC-ERRORS.
              05 FILLER                  PIC 99 VALUE 1.
              05 FILLER                  PIC X(80)
              VALUE 'PRINCIPLE AMOUNT IS NEGATIVE'.
              05 FILLER                  PIC 99 VALUE 2.
              05 FILLER                  PIC X(80)
              VALUE 'PRINCIPLE EXCEEDED MAXIMUM AMOUNT'.
              05 FILLER                  PIC 99 VALUE 3.
              05 FILLER                  PIC X(80)
              VALUE 'NEGATIVE INTEREST RATE'.
              05 FILLER                  PIC 99 VALUE 4.
              05 FILLER                  PIC X(80)
              VALUE 'YEARS INDICATED, BUT YEARS ZERO OR LESS'.
              05 FILLER                  PIC 99 VALUE 5.
              05 FILLER                  PIC X(80)
              VALUE 'ZERO OR LESS MONTHS'.
              05 FILLER                  PIC 99 VALUE 6.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 7.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 8.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 9.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 10.
              05 FILLER                  PIC X(80)
              VALUE ' '.
           03 STATIC-ERROR-TBL REDEFINES STATIC-ERRORS.
              05 STATIC-ERROR-TABLE OCCURS 10 TIMES.
                07 ERROR-INDICATOR         PIC 99.
                07 ERROR-TEXT              PIC X(80).
       01  WS-INDICATORS-AND-FLAGS.
           03 VALIDATION-INDICATOR   PIC 9.
       01  WS-WORK-AMOUNTS.
           03 WS-NUMBER-OF-MONTHS    PIC 9(9)V99   COMP.
           03 WS-CALC-INTEREST       COMP-1.
       01  Loan             Pic 9(9)V99.
       01  Payment          Pic 9(9)V99.
       01  Interest         Pic 9(9)V9999.
       01  Number-Periods   Pic 999.
       LINKAGE SECTION.
       COPY EPSPDATA.
       PROCEDURE DIVISION USING EPSPDATA.
       A000-MAINLINE.
           MOVE 0 TO VALIDATION-INDICATOR.
           MOVE 0 TO WS-NUMBER-OF-MONTHS.
           PERFORM A100-VALIDATE-INPUT.
           IF VALIDATION-INDICATOR = 0
              PERFORM A200-CALULATE-MONTH-PAYMENT
           ELSE
              PERFORM A999-RETURN-ERROR-TEXT
           END-IF.
           GOBACK
           .
       A100-VALIDATE-INPUT.
           MOVE SPACES TO EPSPDATA-RETURN-ERROR.
           IF EPSPDATA-PRINCIPLE-DATA > 0
              IF EPSPDATA-PRINCIPLE-DATA > STATIC-MAXIMUM-PRINCIPLE
                 MOVE 2 TO VALIDATION-INDICATOR
              END-IF
           ELSE
              MOVE 1 TO VALIDATION-INDICATOR
           END-IF
           .
           IF VALIDATION-INDICATOR = 0
              IF EPSPDATA-QUOTED-INTEREST-RATE <= 0
                 MOVE 3 TO VALIDATION-INDICATOR
              ELSE
                 IF EPSPDATA-YEAR-MONTH-IND = 'Y'
                    COMPUTE WS-NUMBER-OF-MONTHS =
                               EPSPDATA-NUMBER-OF-YEARS * 12
                 ELSE
                    MOVE EPSPDATA-NUMBER-OF-MONTHS TO
                            WS-NUMBER-OF-MONTHS
                 END-IF
              END-IF
           END-IF
           .
           COMPUTE WS-CALC-INTEREST =
                              (EPSPDATA-QUOTED-INTEREST-RATE / 100) / 12
           .
       A200-CALULATE-MONTH-PAYMENT.
           COMPUTE EPSPDATA-RETURN-MONTH-PAYMENT
                   = EPSPDATA-PRINCIPLE-DATA *
                     (WS-CALC-INTEREST *
                     (1 + WS-CALC-INTEREST) ** WS-NUMBER-OF-MONTHS) /
                     (((1 + WS-CALC-INTEREST )
           .
       A300-TRY2.
           MOVE EPSPDATA-PRINCIPLE-DATA TO Loan.
           COMPUTE Interest = EPSPDATA-QUOTED-INTEREST-RATE / 100.
           MOVE WS-NUMBER-OF-MONTHS TO Number-Periods.
           Compute Payment =
           Loan * Function Annuity((Interest / 12) Number-Periods)
           DISPLAY 'Verify Payment = ' Payment.
       A999-RETURN-ERROR-TEXT.
           MOVE ERROR-TEXT(VALIDATION-INDICATOR) TO
                                                 EPSPDATA-RETURN-ERROR
           GOBACK
           .
[/INST]{
  "id": "BR-002",  "description": "principle amount must be greater than 0",
  "condition": "EPSPDATA-PRINCIPLE-DATA > 0",
  "output": {
    "error": "PRINCIPLE AMOUNT IS NEGATIVE"
  }
}
{
  "id": "BR-003",  "description": "principle amount cannot exceed 100000000.01",
  "condition": "EPSPDATA-PRINCIPLE-DATA > STATIC-MAXIMUM-PRINCIPLE",
  "output": {
    "error": "PRINCIPLE EXCEEDED MAXIMUM AMOUNT"
  }
}
{
  "id": "BR-004",  "description": "interest rate must be greater than 0",
  "condition": "EPSPDATA-QUOTED-INTEREST-RATE > 0",
  "output": {
    "error": "NEGATIVE INTEREST RATE"
  }
}
{
  "id": "BR-005",  "description": "when years are indicated, years cannot be zero or less",
  "condition": "EPSPDATA-YEAR-MONTH-IND = Y",
  "output": {
    "error": "YEARS INDICATED, BUT YEARS ZERO OR LESS"
  }
}
{
  "id": "BR-006",  "description": "when months are indicated, months cannot be zero or less",
  "condition": "EPSPDATA-YEAR-MONTH-IND != Y",
  "output": {
    "error": "ZERO OR LESS MONTHS"
  }
}[INST]       ID DIVISION.
       PROGRAM-ID. EPSNBRVL
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. FLEX-ES.
       OBJECT-COMPUTER. FLEX-ES.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 WS-STATIC-DATA.
           03 STATIC-ERRORS.
              05 FILLER                  PIC 99 VALUE 1.
              05 FILLER                  PIC X(80)
              VALUE 'NO NUMBER PRESENT'.
              05 FILLER                  PIC 99 VALUE 2.
              05 FILLER                  PIC X(80)
              VALUE 'SPACES IN NUMBER'.
              05 FILLER                  PIC 99 VALUE 3.
              05 FILLER                  PIC X(80)
              VALUE 'TOO MANY DEICMAL POINTS'.
              05 FILLER                  PIC 99 VALUE 4.
              05 FILLER                  PIC X(80)
              VALUE 'YEARS INDICATED, BUT YEARS ZERO OR LESS'.
              05 FILLER                  PIC 99 VALUE 5.
              05 FILLER                  PIC X(80)
              VALUE 'ZERO OR LESS MONTHS'.
              05 FILLER                  PIC 99 VALUE 6.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 7.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 8.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 9.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 10.
              05 FILLER                  PIC X(80)
              VALUE ' '.
           03 STATIC-ERROR-TBL REDEFINES STATIC-ERRORS.
              05 STATIC-ERROR-TABLE OCCURS 10 TIMES.
                07 ERROR-INDICATOR         PIC 99.
                07 ERROR-TEXT              PIC X(80).
       01  WS-WORK-AMOUNTS.
           03 WS-LEADING-SPACES      PIC 9(4) COMP VALUE 1.
           03 WS-TRAILING-SPACES     PIC 9(4) COMP VALUE 0.
           03 WS-END-SPACE           PIC 9(4) COMP VALUE 0.
           03 WS-DECIMAL-SPACE       PIC 99        VALUE 0.
           03 WS-IDX                 PIC 9(2) COMP.
           03 WS-DEC-IDX             PIC 9(2) COMP.
           03 WS-NUM-IDX             PIC 9(2) COMP.
           03 WS-MAX-NUMBER-LGTH     PIC 9(2) COMP.
           03 WS-MAX-FIELD           PIC 9(2) COMP.
           03 WS-DEC-ADJUST          PIC 9.
       LINKAGE SECTION.
       COPY EPSNBRPM.
       PROCEDURE DIVISION USING EPS-NUMBER-VALIDATION.
       A000-MAINLINE.
           MOVE EPSPARM-MAX-LENGTH              TO WS-IDX.
           MOVE LENGTH OF EPSPARM-VALIDATE-DATA TO WS-MAX-FIELD
           IF WS-IDX > WS-MAX-FIELD
              MOVE WS-MAX-FIELD TO WS-IDX
           ELSE
              MOVE WS-IDX       TO WS-MAX-FIELD
           END-IF.
           MOVE ZERO   TO WS-END-SPACE.
           MOVE SPACES TO EPSPARM-RETURN-ERROR.
           MOVE ZERO   TO EPSPARM-BINARY-NUMBER
                          EPSPARM-NUMBER
                          EPSPARM-DECIMAL.
           PERFORM UNTIL WS-IDX = 0
              IF EPSPARM-VALIDATE-DATA(WS-IDX:1) = SPACES
                ADD 1      TO WS-TRAILING-SPACES
                SUBTRACT 1 FROM WS-IDX
              ELSE
                MOVE WS-IDX TO WS-END-SPACE
                MOVE 0 TO WS-IDX
              END-IF
           END-PERFORM.
           MOVE 1 TO WS-LEADING-SPACES.
           IF WS-END-SPACE NOT = 0
              MOVE 1 TO WS-IDX
              PERFORM UNTIL WS-IDX >= WS-END-SPACE
                IF EPSPARM-VALIDATE-DATA(WS-IDX:1) = SPACES
                   ADD 1 TO WS-LEADING-SPACES
                   ADD 1 TO WS-IDX
                ELSE
                   COMPUTE WS-IDX = WS-END-SPACE + 1
                END-IF
              END-PERFORM
           ELSE
              MOVE STATIC-ERROR-TABLE(1) TO EPSPARM-RETURN-ERROR
           END-IF.
           MOVE WS-LEADING-SPACES TO WS-IDX.
           MOVE 1                 TO WS-DEC-IDX.
           MOVE 0                 TO WS-DECIMAL-SPACE.
           PERFORM A002-COMPUTE-DECIMAL
                   UNTIL WS-IDX > WS-END-SPACE
           .
           IF WS-DECIMAL-SPACE > 0
              COMPUTE WS-END-SPACE = WS-DECIMAL-SPACE - 1
           END-IF.
           MOVE WS-END-SPACE             TO WS-IDX.
           MOVE LENGTH OF EPSPARM-NUMBER TO WS-NUM-IDX.
           PERFORM A001-COMPUTE-INTEGER
                   UNTIL WS-IDX < WS-LEADING-SPACES
           .
           IF EPSPARM-RETURN-ERROR = SPACES
              COMPUTE EPSPARM-BINARY-NUMBER = EPSPARM-NUMBER
                                            + EPSPARM-DECIMAL
           END-IF.
           GOBACK
           .
       A001-COMPUTE-INTEGER.
           IF EPSPARM-VALIDATE-DATA(WS-IDX:1) = ','
              SUBTRACT 1 FROM WS-IDX
           ELSE
              IF EPSPARM-VALIDATE-DATA(WS-IDX:1) = SPACE
              OR EPSPARM-VALIDATE-DATA(WS-IDX:1) IS NOT NUMERIC
                 MOVE STATIC-ERROR-TABLE(2) TO EPSPARM-RETURN-ERROR
                 MOVE 0 TO WS-IDX
              ELSE
                 MOVE EPSPARM-VALIDATE-DATA(WS-IDX:1) TO
                      EPSPARM-NUMBER(WS-NUM-IDX:1)
                 SUBTRACT 1 FROM WS-IDX
                                 WS-NUM-IDX
              END-IF
           END-IF
           .
       A002-COMPUTE-DECIMAL.
           IF WS-DECIMAL-SPACE = 0
              IF EPSPARM-VALIDATE-DATA(WS-IDX:1) = '.'
                 MOVE WS-IDX TO WS-DECIMAL-SPACE
              END-IF
           ELSE
              IF EPSPARM-VALIDATE-DATA(WS-IDX:1) = '.'
                 MOVE STATIC-ERROR-TABLE(3) TO EPSPARM-RETURN-ERROR
                 MOVE WS-END-SPACE TO WS-IDX
                 MOVE 1            TO WS-DEC-IDX
              ELSE
                 MOVE EPSPARM-VALIDATE-DATA(WS-IDX:1) TO
                      EPSPARM-DECIMAL(WS-DEC-IDX:1)
                 ADD 1 TO WS-DEC-IDX
              END-IF
           END-IF
           ADD 1 TO WS-IDX
           .
[/INST]{
  "id": "BR-001",
  "description": "A number cannot have more than one decimal point.",
  "condition": "WS-DECIMAL-SPACE = 0 --> EPSPARM-VALIDATE-DATA(WS-IDX:1) = '.' --> STATIC-ERROR-TABLE(3)",
  "output": {
    "error": "TOO MANY DEICMAL POINTS"
  }
},
{
  "id": "BR-002",
  "description": "A number cannot have years indicated but years zero or less.",
  "condition": "years is indicated --> years <= 0 --> STATIC-ERROR-TABLE(4)",
  "output": {
    "error": "YEARS INDICATED, BUT YEARS ZERO OR LESS"
  }
},
{
  "id": "BR-003",
  "description": "A number cannot have zero or less months.",
  "condition": "months <= 0 --> STATIC-ERROR-TABLE(5)",
  "output": {
    "error": "ZERO OR LESS MONTHS"
  }
},
{
  "id": "BR-004",
  "description": "Leading spaces in a number are ignored.",
  "condition": "EPSPARM-VALIDATE-DATA(WS-IDX:1) = SPACE --> ADD 1 TO WS-LEADING-SPACES",
  "output": {}
},
{
  "id": "BR-005",
  "description": "Trailing spaces in a number are ignored.",
  "condition": "EPSPARM-VALIDATE-DATA(WS-IDX:1) = SPACE --> ADD 1 TO WS-TRAILING-SPACES",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    demo.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01 alabel               usage pointer.
       PROCEDURE DIVISION.
           invoke SUPER "addform" returning SELF.
            move  "GuiCOBOL TEST with a label blue with yellow "  to "caption" of self
            invoke self "addlabel" using " blue label with yellow back" returning alabel.
            move "blue" to "textcolor" of alabel
            move "yellow" to "backcolor" of alabel.
            move "arial" to "font" of alabel.
            move "300%" to "fontsize" of alabel.
            invoke  self "show"
           invoke SELF "run"
           stop run.
       end program demo.
[/INST]{
  "id": "BR-002",
  "description": "The label text is initialized to a fixed string.",
  "condition": null,
  "output": {
    "caption": "GuiCOBOL TEST with a label blue with yellow "
  }
},
{
  "id": "BR-003",
  "description": "The label text color is initialized to blue.",
  "condition": null,
  "output": {
    "textcolor": "blue"
  }
},
{
  "id": "BR-004",
  "description": "The label background color is initialized to yellow.",
  "condition": null,
  "output": {
    "backcolor": "yellow"
  }
},
{
  "id": "BR-005",
  "description": "The label font is initialized to Arial.",
  "condition": null,
  "output": {
    "font": "arial"
  }
},
{
  "id": "BR-006",
  "description": "The label font size is initialized to 300%.",
  "condition": null,
  "output": {
    "fontsize": "300%"
  }
}[INST]000010  IDENTIFICATION DIVISION.
000020  PROGRAM-ID.    demo1.
000030  ENVIRONMENT DIVISION.
000040  DATA DIVISION.
        WORKING-STORAGE SECTION.
        01 xagar-struct        usage pointer.
000110  01 buffer usage pointer.
000110  01 xagar-stringa  pic x(100) based.
        01 stringa       pic is  x(100).
        01 ageneric        usage pointer external.
        01 attivo        usage pointer external.
        01 abox         usage pointer external.
        01 abox1         usage pointer external.
        01 atext        usage pointer external.
        01 atext1       usage pointer external.
        01 abutton      usage pointer external.
        01 abutton1     usage pointer external.
        01 abutton2     usage pointer external.
        01 alabel       usage pointer external.
        01 aradio       usage pointer external.
        01 acheck       usage pointer external.
        01 i           pic x(10).
000240  PROCEDURE DIVISION.
000260
000270           invoke SUPER "addform" returning SELF.
                 invoke SELF "size" using 900  500
                 invoke self "addspaceshoriz"
                 move "MIDDLERIGHT" TO "position" of self
                 move  "GuiCOBOL TEST FOR GNUCOBOL "  to "caption" of self
                 move "orangered" to "backcolor" of self.
                 move "darkgreen" to "textcolor" of self.
                 move "120%" to "fontsize" of self.
                 move spaces to stringa.
                 move "caption" of  self  to stringa.
                invoke self "addpane" using "v" returning abox abox1.
                move agar-true  to "homogenous" of abox.
                invoke self "addlabel" using "this is a label" returning alabel. 
                invoke abox "addtext" using "First name " returning atext
                move "federico" to "name" of atext.
                move "90%" to "fontsize" of atext.
                move "blue" to "backcolor" of atext.
                move "yellow" to "textcolor" of atext.
                move "x(30)" to "render" of atext
                move "write your first name here"      to "text" OF atext.
                invoke atext "refresh"
                invoke abox "addtext" using "Second name " returning atext1
                 move "90%" to "fontsize" of atext1.
                move "blue" to "backcolor" of atext1.
                move "yellow" to "textcolor" of atext1.
                invoke self "addspaceshoriz"
                invoke abox1 "addfixed" returning abox.
                invoke abox "size" using 400 110
                move "gray" to "backcolor" of abox
                move "red" to "color" of abox
                 invoke abox  "addbuttonto" using "+" "incrementa" returning abutton
                 move "button" to "name" of abutton
                 move 10   to "top" of abutton
                 move 280  to "left" of abutton
                 move 150   to "width" of abutton
                 move 25   to "height" of abutton
                invoke abox "addcombo" using z"Gender"   returning abutton
                move 150 to "width" of abutton
                move 25  to "height" of abutton
                move "width" of abutton to i 
                move i to "text" of atext.
                move 10   to "top" of abutton
                move 100  to "left" of abutton
                  move "x(10)" to "render" of abutton.
                  move 2 to "maxitem" of abutton.
                  invoke abutton "additem"  using "male"
                  invoke abutton "additem"  using "female"
                invoke abox "addbox" returning abox
                 PERFORM 5 TIMES
                 Invoke abox "addspaceshoriz"
                 END-PERFORM.
                 invoke abox1 "addbox" returning abox.
                 invoke abox  "addradioto" using "pressedkey"  returning aradio
                 move "h" to "disposition" of aradio
                 invoke aradio "additem"  using "choice one"
                 invoke aradio  "additem"  using "choice two"
                 invoke aradio  "additem"  using "choice three"
                 invoke aradio  "additem"  using "choice four"
                 invoke aradio  "additem"  using "choice five"
                 invoke self "show"
                 invoke SELF  "Closed" using "exitForm"
                 invoke SELF "run"
000280
001080           stop run.
001090
001100  end program demo1.
001120  identification division.
001130  program-id. exitForm.
001140  data division.
001150  working-storage section.
001160
001260  procedure division.
                     invoke self "close".
                     invoke self  "stoprun".
001350  exit program.
001360  end program exitForm.
001110
       identification division.
       program-id. DefaultOpened.
       data division.
       working-storage section.
       linkage section.
       procedure division .
               display "sono in Defaultopen".
       exit program.
       end program DefaultOpened.
001130  method-id. pressedkey.
001160
001260  procedure division.
                move "you pressed a radio options" to "info" of self
001350  exit program.
        end method.
        identification division.
        program-id. incrementa.
        data division.
        working-storage section.
       01 ag-event based.
          05 event-name                pic x(32).
          05 event-flags               usage binary-long unsigned sync.
          05 event-function            pic x(624) sync.
          05 filler                    pic x(4).
          05 event-argc                usage binary-long sync.
          05 event-argc0               usage binary-long sync.
          05 filler                    pic x(8).
          05 event-argv occurs 7 times.
            10 variable-name           pic x(36).
            10 variable-type           usage binary-long sync.
            10 variable-mutex          usage pointer sync.
            10 variable-info.
               15 variable-key         usage pointer.
               15 variable-var         usage pointer.
            10 variable-function       pic x(624).
            10 variable-data.
               15 variable-ptr         usage pointer.
               15 filler               pic x(8).
            10 variable-vars           pic x(16).
          05 events                    pic x(16).
        linkage section.
        01 evnt usage pointer.
        procedure division.
                move "increment" to "info" of self
                invoke self "find" using "federico" returning agar-widget
                display "esco con" agar-widget.
001350  exit program.
        end program incrementa.
[/INST]{
  "id": "BR-001",
  "description": "The size of the combobox is determined by the width and height.",
  "condition": "invoked method addcombo",
  "output": {
    "width": "width",
    "height": "height"
  }
}
{
  "id": "BR-002",
  "description": "The first and the last names should be no longer than 100 characters.",
  "condition": "invoked method \"addtext\" using \"First name  or \"Second name\" ",
  "output": {
    "length": "100"
  }
}
{
  "id": "BR-003",
  "description": "The combobox can't contain more than 10 elements.",
  "condition": "move i to \"text\" of atext",
  "output": {
    "max item length": "10"
  }
}[INST]000010  identification division.
000020  program-id. sample.
000030
000040  environment division.
000050  configuration section.
000060
000070  data division.
000080  working-storage section.
000090  01 rc usage binary-long.
000100  01 win usage pointer.
000110  01 extraneous-pointer usage pointer.
000110  01 label1             usage pointer.
000110  01 agar-widget        usage pointer.
000110  01 agar-struct        usage pointer.
000110  01 buffer usage pointer.
000110  01 agar-string  pic x(100) based.
000120  01 agar-text pic x(40) Value "questa e' la stringa".
000130  procedure division.
000140  sample-main.
000150            call "AG_InitCore" using null by value 0 returning rc
000160             on exception display "error: no libagar" upon syserr
000170            end-call
000180           if rc = -1 then
000190           display "error: AG_InitCore failure" upon syserr
000200           goback
000210           end-if 
000220           call static "AG_InitGraphics" using by value 0
000230              returning rc
000240           if rc = -1 then
000250           display "error: AG_InitGraphics failure" upon syserr
000260           goback
000270          end-if
000310
000340         call "AG_WindowNew" using by value 0 returning win
70		       call "AG_LabelNew" using
000380		           by value win 0
000390		           by reference "ciao Federico"
000400		       returning label1
               call static "AG_ObjectGetName" 
                using by value label1
                  returning agar-struct.
                set address of agar-string  TO agar-struct.
                move agar-string      to agar-text.
                display "cerco label0"
                call  "ag_object_find_child" 
                    using by value win
                     by content  "label0"
                      returning agar-widget.
                display "finchild riporta" 
                 agar-widget.    
                call static "AG_LabelSizeHint"
                   using by value label1
                    by reference agar-text.
                 call  "AG_SetStyle" using
                   by value label1
                  by reference     "background-color"
000057            by reference  "blue".
                call "AG_SetStyle" using
                   by value label1
                  by reference  "text-color"
000057            by reference  "red".
                 call "AG_ObjectGetClassName" 
                   using by value win
017040                 by value 0  returning buffer
017060                
017070            set address of agar-string  TO buffer.
000410        call "AG_WindowShow" using by value win returning omitted
000420		        call "AG_EventLoop" returning rc
000430		                call static "AG_LabelNew" using
000440	                by value win 0
000450           by reference "ciao "
000460            returning extraneous-pointer
000470          call static "AG_WindowShow" using by value win 
000480           returning omitted
000490          call  static "AG_EventLoop" returning rc
000500          display  "Agar rc = " rc
000510          goback.
000520 end program sample.
[/INST]{
  "id": "BR-001",
  "description": "The label0 widget is a child of the main window.",
  "condition": "ag_object_find_child(win, \"label0\")",
  "output": {
    "found": "label0 is a child of the main window."
  }
}
{
  "id": "BR-002",
  "description": "The label1 widget uses the string pointed by the agar-string pointer as its text.",
  "condition": "Set address of agar-string TO agar-struct",
  "output": {
    "set": "The label1 widget uses the string pointed by the agar-string pointer as its text."
  }
}
{
  "id": "BR-003",
  "description": "The background-color of the label1 widget is set to blue.",
  "condition": "AG_SetStyle(label1, \"background-color\", \"blue\")",
  "output": {
    "set": "The background-color of the label1 widget is set to blue."
  }
}
{
  "id": "BR-004",
  "description": "The text-color of the label1 widget is set to red.",
  "condition": "AG_SetStyle(label1, \"text-color\", \"red\")",
  "output": {
    "set": "The text-color of the label1 widget is set to red."
  }
}[INST]ï»¿       class-id COBOLCalc.Window1 is partial
                 inherits type System.Windows.Window.
       working-storage section. *> section of code that holds class scope variables
           01 ws-lastInput decimal value is 0.
           01 ws-operator string value is "none".
           01 ws-decimalFlag condition-value value is false.
           01 ws-firstDigitFlag condition-value value is true. *>condition-values are essentially booleans
       method-id NEW.
       procedure division.
           invoke self::InitializeComponent()
           goback.
       end method.
       method-id btnOne_Click. *>Click event raised from UI
       procedure division using by value sender as object e as type System.Windows.RoutedEventArgs. *> procedure division contains parameters and method logic
           invoke numberPrint("1") *>calls another method
       end method.
       method-id btnTwo_Click.
       procedure division using by value sender as object e as type System.Windows.RoutedEventArgs.
           invoke numberPrint("2")
       end method.
       method-id btnThree_Click.
       procedure division using by value sender as object e as type System.Windows.RoutedEventArgs.
           invoke numberPrint("3")
       end method.
       method-id btnFour_Click.
       procedure division using by value sender as object e as type System.Windows.RoutedEventArgs.
           invoke numberPrint("4")
       end method.
       method-id btnFive_Click.
       procedure division using by value sender as object e as type System.Windows.RoutedEventArgs.
           invoke numberPrint("5")
       end method.
       method-id btnSix_Click.
       procedure division using by value sender as object e as type System.Windows.RoutedEventArgs.
           invoke numberPrint("6")
       end method.
       method-id btnSeven_Click.
       procedure division using by value sender as object e as type System.Windows.RoutedEventArgs.
           invoke numberPrint("7")
       end method.
       method-id btnEight_Click.
       procedure division using by value sender as object e as type System.Windows.RoutedEventArgs.
           invoke numberPrint("8")
       end method.
       method-id btnNine_Click.
       procedure division using by value sender as object e as type System.Windows.RoutedEventArgs.
           invoke numberPrint("9")
       end method.
       method-id btnZero_Click.
       procedure division using by value sender as object e as type System.Windows.RoutedEventArgs.
           invoke numberPrint("0")
       end method.
       method-id btnDecimal_Click.
       local-storage section. *>local method variables must be declared in local-storage section, which always comes before procedure
           01 ls-post string.
       procedure division using by value sender as object e as type System.Windows.RoutedEventArgs.
	       if ws-decimalFlag equals false then
		       set ws-decimalFlag to true
               if OutputBox::Text equals "0" or ws-firstDigitFlag equals true then
			       set OutputBox::Text to "0."
		       else 
			       string OutputBox::Text delimited by size *>string verb allows us to concatenate strings
				       "." delimited by size
				       into ls-post
			       end-string
			       set OutputBox::Text to ls-post
		       end-if
               set ws-firstDigitFlag to false
	       end-if.
       end method.
       method-id btnC_Click.
       procedure division using by value sender as object e as type System.Windows.RoutedEventArgs.
           set ws-lastInput to 0.
           set ws-operator to "none".
           set ws-decimalFlag to false.
           set ws-firstDigitFlag to true.
           set OutputBox::Text to "0"
       end method.
       method-id btnPlus_Click.
       procedure division using by value sender as object e as type System.Windows.RoutedEventArgs.
           invoke operatorAlt("plus")
       end method.
       method-id btnMinus_Click.
       procedure division using by value sender as object e as type System.Windows.RoutedEventArgs.
           invoke operatorAlt("minus")
       end method.
       method-id btnMultiply_Click.
       procedure division using by value sender as object e as type System.Windows.RoutedEventArgs.
           invoke operatorAlt("multiply")
       end method.
       method-id btnDivide_Click.
       procedure division using by value sender as object e as type System.Windows.RoutedEventArgs.
           invoke operatorAlt("divide")
       end method.
       method-id operatorAlt.
       local-storage section.
           01 ls-temp pic x(25) value is OutputBox::Text. *>pic aka picture clause allows us to set size in bytes and content type. x refers to alphanumeric
       procedure division using paramB as string.
           set ws-decimalFlag to false
           set ws-firstDigitFlag to true
           set ws-lastInput = function numval(ls-temp) *>numval is an intristic function that allows us to cast a string into a number
           set ws-operator to paramB
       end method.
       method-id numberPrint.
       local-storage section.
           01 ls-post string.
       procedure division using paramA as string.
           if ws-firstDigitFlag equals true or OutputBox::Text equals "0" then
                set OutputBox::Text to paramA
                set ws-firstDigitFlag to false
            else
                string OutputBox::Text delimited by size
                    paramA delimited by size
                    into ls-post
                end-string
                set OutputBox::Text to ls-post
            end-if.
       end method.
       method-id calculate. 
       procedure division using paramA as decimal.
           if ws-operator equals "plus" then
               set ws-lastInput to ws-lastInput + paramA
           else if ws-operator equals "minus" then
               set ws-lastInput to ws-lastInput - paramA
           else if ws-operator equals "multiply" then
               set ws-lastInput to ws-lastInput * paramA
           else if ws-operator equals "divide" and paramA not equals 0 then
               set ws-lastInput to ws-lastInput / paramA
           else if ws-operator equals "none" then
               set ws-lastInput to paramA
           end-if.
           set ws-operator to "none"
       end method.
       method-id btnPlusMinus_Click.
       local-storage section.
           01 ls-temp pic x(25) value is OutputBox::Text.
           01 ls-number decimal value is 0.
       procedure division using by value sender as object e as type System.Windows.RoutedEventArgs.
           set ls-number = function numval(ls-temp)
           set ls-number to ls-number * -1
           set OutputBox::Text to ls-number
       end method.
       method-id btnEqual_Click.
       procedure division using by value sender as object e as type System.Windows.RoutedEventArgs.
           invoke Equate
       end method.
       method-id Equate.
       local-storage section.
           01 ls-temp pic x(25) value is OutputBox::Text.
           01 ls-number decimal value is 0.
       procedure division.
           set ls-number = function numval(ls-temp)
           invoke calculate(ls-number)
           set OutputBox::Text to ws-lastInput
           set ws-firstDigitFlag to true
       end method.
       end class.
[/INST]{
  "id": "BR-001",
  "description": " Pressing the decimal button will only place a decimal point if there is currently no decimal or the value is 0.",
  "condition": "ws-decimalFlag equals false and (OutputBox::Text equals \\\"0\\\" or ws-firstDigitFlag equals true)",
  "output": {
    "decimal": "0.",
    "no decimal": "ls-post"
  }
}[INST]              IDENTIFICATION DIVISION.
              PROGRAM-ID.  AcceptAndDisplay.
              AUTHOR.  GITSALAH
              DATA DIVISION.
              WORKING-STORAGE SECTION.
              01 StudentDetails.
                 02  StudentId       PIC 9(7).
                 02  StudentName.
                     03 Surname      PIC X(8).
                     03 Initials     PIC XX.
                 02  CourseCode      PIC X(4).
                 02  Gender          PIC X.
              01 CurrentDate.
                 02  CurrentYear     PIC 9(4).
                 02  CurrentMonth    PIC 99.
                 02  CurrentDay      PIC 99.
              01 DayOfYear.
                 02  FILLER          PIC 9(4).
                 02  YearDay         PIC 9(3).
              01 CurrentTime.
                 02  CurrentHour     PIC 99.
                 02  CurrentMinute   PIC 99.
                 02  FILLER          PIC 9(4).
              PROCEDURE DIVISION.
              Begin.
                  DISPLAY "Enter student details using template below".
                  DISPLAY "Enter - ID,Surname,Initials,CourseCode,Gender"
                  DISPLAY "SSSSSSSNNNNNNNNIICCCCG".
                  ACCEPT  StudentDetails.
                  ACCEPT  CurrentDate FROM DATE YYYYMMDD.
                  ACCEPT  DayOfYear FROM DAY YYYYDDD.
                  ACCEPT  CurrentTime FROM TIME.
                  DISPLAY "Name is ", Initials SPACE Surname.
                  DISPLAY "Date is " CurrentDay SPACE CurrentMonth SPACE CurrentYear.
                  DISPLAY "Today is day " YearDay " of the year".
                  DISPLAY "The time is " CurrentHour ":" CurrentMinute.
                  STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "The today's date can be accepted in the specific format of YYYYMMDD",
  "condition": "DATE YYYYMMDD",
  "output": {
    "input": "YYYYMMDD"
  }
},
{
  "id": "BR-002",
  "description": "The time can be accepted in the specific format of TIME",
  "condition": "TIME",
  "output": {
    "input": "TIME"
  }
},
{
  "id": "BR-003",
  "description": "The day of the year can be accepted in the specific format of DAY YYYYDDD",
  "condition": "DAY YYYYDDD",
  "output": {
    "input": "DAY YYYYDDD"
  }
},
{
  "id": "BR-004",
  "description": "Student details can be accepted in the template SSSSSSSSSNNNNNNNNIICCCCG",
  "condition": "SSSSSSSNNNNNNNNIICCCCG",
  "output": {
    "template": "SSSSSSSNNNNNNNNIICCCCG"
  }
}[INST]IDENTIFICATION DIVISION.
PROGRAM-ID. CELEVEN.
DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-NAME PIC X(15).
01 WS-SUB1 PIC 999V99.
01 WS-SUB2 PIC 999V99.
01 WS-SUB3 PIC 999V99.
01 WS-TOTAL PIC 999V99.
01 WS-PER PIC 999V99.
PROCEDURE DIVISION.

PERFORM SNAME-PARA THRU SGR-PARA 2 TIMES.
STOP RUN.

SNAME-PARA. 
 DISPLAY "ENTER NAME :"
 ACCEPT WS-NAME.
 DISPLAY "HELLO ," WS-NAME " !!".
 DISPLAY "ENTER MARKS OF 3 SUB".
STOT-PARA. 
 ACCEPT WS-SUB1 .
 ACCEPT WS-SUB2 .
 ACCEPT WS-SUB3.
 COMPUTE WS-TOTAL = WS-SUB1 + WS-SUB2 +  WS-SUB3.
 DISPLAY "TOTAL : " WS-TOTAL.
SPER-PARA. 
 COMPUTE WS-PER = WS-TOTAL / 3 .
 DISPLAY "PERCETANGE: " WS-PER.
SGR-PARA. 
 IF WS-PER >= 80
  DISPLAY "GRADE : A "
 ELSE IF WS-PER >= 70 AND WS-PER < 79
  DISPLAY "GRADE : B "
 ELSE IF WS-PER >= 60 AND WS-PER < 69
  DISPLAY "GRADE : C "
 ELSE IF WS-PER >= 50 AND WS-PER < 59
  DISPLAY "GRADE : D " 
 ELSE 
  DISPLAY "SORRY".
  
 
 

[/INST]{
  "id": "BR-001",
  "description": "A student is in grade A if the average of the three subjects is greater than or equal to 80.",
  "condition": "WS-PER >= 80",
  "output": {
    "grade": "A"
  }
},
{
  "id": "BR-002",
  "description": "A student is in grade B if the average of the three subjects is greater than or equal to 70 and less than 79.",
  "condition": "WS-PER >= 70 AND WS-PER < 79",
  "output": {
    "grade": "B"
  }
},
{
  "id": "BR-003",
  "description": "A student is in grade C if the average of the three subjects is greater than or equal to 60 and less than 69.",
  "condition": "WS-PER >= 60 AND WS-PER < 69",
  "output": {
    "grade": "C"
  }
},
{
  "id": "BR-004",
  "description": "A student is in grade D if the average of the three subjects is greater than or equal to 50 and less than 59.",
  "condition": "WS-PER >= 50 AND WS-PER < 59",
  "output": {
    "grade": "D"
  }
},
{
  "id": "BR-005",
  "description": "A student is failed if the average of the three subjects is less than 50.",
  "condition": "WS-PER < 50",
  "output": {
    "grade": "FAIL"
  }
}[INST]IDENTIFICATION DIVISION.
PROGRAM-ID. CFIVE.
DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-A PIC 99 VALUE 12.
01 WS-B PIC 99 VALUE 10.
01 WS-C PIC 999 VALUE 13.
01 WS-D PIC 999 VALUE 16.
01 WS-E PIC 999 VALUE 20.
PROCEDURE DIVISION.
 ADD WS-A TO WS-B.
 DISPLAY "WS-B :" WS-B.
 ADD WS-A WS-B WS-C TO WS-D.
 DISPLAY "WS-D :" WS-D.
 ADD 15  WS-A WS-B TO WS-B.
 DISPLAY "NEW WS-B:" WS-B.
 ADD WS-A TO WS-B GIVING WS-C.
 DISPLAY "WS-C:" WS-C.
 ADD WS-A TO WS-B GIVING WS-C WS-D WS-E.
 DISPLAY "WS-E: " WS-E.
 DISPLAY "WS-D: " WS-D.
 DISPLAY "WS-C: " WS-C.
 STOP RUN.
[/INST]{
  "id": "BR-002",
  "description": "The sum of WS-A and WS-B is stored in WS-B.",
  "condition": "WS-A + WS-B",
  "output": {
    "sum": "WS-B"
  }
},
{
  "id": "BR-003",
  "description": "The sum of WS-A, WS-B, and WS-C is stored in WS-D.",
  "condition": "WS-A + WS-B + WS-C",
  "output": {
    "sum": "WS-D"
  }
},
{
  "id": "BR-004",
  "description": "The sum of 15, WS-A, and WS-B is stored in WS-B.",
  "condition": "15 + WS-A + WS-B",
  "output": {
    "sum": "WS-B"
  }
},
{
  "id": "BR-005",
  "description": "The sum of WS-A and WS-B is stored in WS-C.",
  "condition": "WS-A + WS-B",
  "output": {
    "sum": "WS-C"
  }
},
{
  "id": "BR-006",
  "description": "The sum of WS-A and WS-B is stored in WS-C, WS-D, and WS-E.",
  "condition": "WS-A + WS-B",
  "output": {
    "sum": "WS-C, WS-D, WS-E"
  }
}[INST]IDENTIFICATION DIVISION.
PROGRAM-ID. CNINE.
DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-NAME PIC X(15).
01 WS-SUB1 PIC 999V99.
01 WS-SUB2 PIC 999V99.
01 WS-SUB3 PIC 999V99.
01 WS-TOTAL PIC 999V99.
01 WS-PER PIC 999V99.
PROCEDURE DIVISION.
 ACCEPT WS-NAME.
 DISPLAY "HELLO ," WS-NAME " !!".
 DISPLAY "ENTER MARKS OF 3 SUB".
 ACCEPT WS-SUB1 .
 ACCEPT WS-SUB2 .
 ACCEPT WS-SUB3.
 COMPUTE WS-TOTAL = WS-SUB1 + WS-SUB2 +  WS-SUB3.
 DISPLAY "TOTAL : " WS-TOTAL.
 COMPUTE WS-PER = WS-TOTAL / 3 .
 DISPLAY "PERCETANGE: " WS-PER.
 IF WS-PER >= 80
  DISPLAY "GRADE : A "
 ELSE IF WS-PER >= 70 AND WS-PER < 79
  DISPLAY "GRADE : B "
 ELSE IF WS-PER >= 60 AND WS-PER < 69
  DISPLAY "GRADE : C "
 ELSE IF WS-PER >= 50 AND WS-PER < 59
  DISPLAY "GRADE : D 
 ELSE 
  DISPLAY "SORRY" 
 STOP RUN.

[/INST]{
 "id": "BR-002", "description": "The user needs to enter their name before the computation of scores.", "condition": "ACCEPT WS-NAME", "output": null
},
{
 "id": "BR-003", "description": "The user needs to enter three values for three different subjects.", "condition": "ACCEPT WS-SUB1, WS-SUB2, WS-SUB3", "output": null
},
{
 "id": "BR-004", "description": "The total of the 3 subject marks is computed and is displayed.", "condition": "COMPUTE WS-TOTAL = WS-SUB1 + WS-SUB2 + WS-SUB3", "output": "WS-TOTAL"
},
{
 "id": "BR-005", "description": "The percentage is computed from the total score.", "condition": "COMPUTE WS-PER = WS-TOTAL / 3", "output": "WS-PER"
},
{
 "id": "BR-006", "description": "Performance is graded based on percentage ranges.", "condition": "IF WS-PER >= 80", "output": {
  "A": "WS-PER >= 80",
  "B": "WS-PER >= 70 AND WS-PER < 79",
  "C": "WS-PER >= 60 AND WS-PER < 69",
  "D": "WS-PER >= 50 AND WS-PER < 59",
  "FAIL": "ELSE IF WS-PER < 50"
}
}[INST]IDENTIFICATION DIVISION.
PROGRAM-ID. CTEN.
DATA DIVISION.
WORKING-STORAGE SECTION.
01 WS-CH PIC X(1).
01 WS-NAME PIC X(25).
01 WS-ISU PIC X(10).
PROCEDURE DIVISION.
A-PARA.
PERFORM B-PARA UNTIL WS-CH = 'N' OR 'n'. 
STOP RUN.
B-PARA.
DISPLAY "ENTER CHOICE (Y/N)"
ACCEPT WS-CH.
DISPLAY "ENTER NAME : ".
ACCEPT WS-NAME.
DISPLAY "ENTER ISU : ".
ACCEPT WS-ISU.
DISPLAY "NAME :" WS-NAME.
DISPLAY "ISU :" WS-ISU.

[/INST]{
  "id": "BR-002",
  "description": "The program will continue to take inputs if the user enters 'Y' (Yes) and terminate if the user enters 'N' (No).",
  "condition": "WS-CH = 'Y' or 'y'",
  "output": {
    "continue": "Continue taking inputs",
    "stop": "Terminate the program"
  }
}[INST]       ID DIVISION.
       PROGRAM-ID. EPSCMORT.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. IBM-FLEX-ES.
       OBJECT-COMPUTER. IBM-FLEX-ES.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  W-FLAGS.
           10  W-SEND-FLAG                    PIC X.
               88  SEND-ERASE                   VALUE '1'.
               88  SEND-DATAONLY                VALUE '2'.
               88  SEND-MAPONLY                 VALUE '3'.
               88  SEND-DATAONLY-ALARM          VALUE '4'.
               88  SEND-ALL                     VALUE '5'.
       01 W-CONVERSIONS.
           05  W-PMT-CNVRT     PIC X(12).
           05  W-PMT-NUMBER
               REDEFINES W-PMT-CNVRT
                               PIC 9(10)V99.
           05  WS-FORMAT-NUMBER PIC Z,ZZZ,ZZ9.99.
           05  W-PRINC-CNVRT   PIC X(12).
           05  W-PRINC-NUMBER
               REDEFINES W-PRINC-CNVRT
                               PIC 9(10)V99.
       01 W-CALL-PROGRAM                      PIC X(8).
       01 W-RETIREMENT-WA                     PIC 9(4).
       01 W-COMAREA-LENGTH                    PIC 9(4) COMP.
       01  SQL-ERROR-MSG.
           03  FILLER              PIC X(11)      VALUE 'SQL ERROR: '.
           03  SQL-ERROR-CODE      PIC 9(5) DISPLAY.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
           EXEC SQL DECLARE SYSIBM.SYSDUMMY1 TABLE
           ( IBMREQD                        CHAR(1) NOT NULL
           ) END-EXEC.
       01 IBMREQD                           PIC X(1).
       01  END-OF-TRANS-MSG                 PIC X(30)
             VALUE 'END OF TRANSACTION - THANK YOU'.
       01  BLANK-MSG                        PIC X(1) VALUE ' '.
           COPY DFHAID.
           COPY EPSMORT.
       01  W-COMMUNICATION-AREA.
           COPY EPSMTCOM.
       COPY EPSNBRPM.
       LINKAGE SECTION.
       01 DFHCOMMAREA.
       COPY EPSMTCOM.
       PROCEDURE DIVISION USING DFHCOMMAREA.
       EPSCMORT-MAINLINE.
           PERFORM A805-DUMMY-SQL-CALL
           MOVE LENGTH OF DFHCOMMAREA to W-COMAREA-LENGTH.
           MOVE DFHCOMMAREA to W-COMMUNICATION-AREA.
           EVALUATE TRUE
               WHEN EIBCALEN = ZERO
                   MOVE LOW-VALUES TO EPMENUO
                   SET SEND-ERASE TO TRUE
                   PERFORM A300-SEND-MAP
                   MOVE '3' TO
                      PROCESS-INDICATOR OF W-COMMUNICATION-AREA
               WHEN EIBAID = DFHCLEAR
                   MOVE LOW-VALUES TO EPMENUO
                   SET SEND-ERASE TO TRUE
                   PERFORM A300-SEND-MAP
               WHEN EIBAID = DFHPF3 OR DFHPF12
                  IF PROCESS-INDICATOR OF W-COMMUNICATION-AREA = '3'
                      EXEC CICS
                         SEND TEXT FROM (END-OF-TRANS-MSG)
                         ERASE
                         FREEKB
                      END-EXEC
                      EXEC CICS
                           RETURN
                      END-EXEC
                   ELSE
                      SET SEND-ALL TO TRUE
                      EXEC CICS
                         SEND TEXT FROM (BLANK-MSG)
                         ERASE
                         FREEKB
                      END-EXEC
                      PERFORM A300-SEND-MAP
                      MOVE '3' TO
                          PROCESS-INDICATOR OF W-COMMUNICATION-AREA
                   END-IF
               WHEN EIBAID = DFHPF9
                   MOVE '9' TO
                      PROCESS-INDICATOR OF W-COMMUNICATION-AREA
                   EXEC CICS LINK PROGRAM( 'EPSMLIST' )
                          COMMAREA( W-COMMUNICATION-AREA )
                   END-EXEC
               WHEN EIBAID = DFHENTER
                   IF PROCESS-INDICATOR OF W-COMMUNICATION-AREA = '3'
                      PERFORM A100-PROCESS-MAP
                   ELSE
                      EXEC CICS LINK PROGRAM('EPSMLIST')
                             COMMAREA( W-COMMUNICATION-AREA )
                      END-EXEC
                   END-IF
               WHEN OTHER
                    IF PROCESS-INDICATOR OF W-COMMUNICATION-AREA = '3'
                      PERFORM A600-CALCULATE-MORTGAGE
                      EXEC CICS RETURN END-EXEC
                    END-IF
           END-EVALUATE
           EXEC CICS
               RETURN TRANSID('EPSP')
               COMMAREA(W-COMMUNICATION-AREA)
               LENGTH(W-COMAREA-LENGTH)
           END-EXEC.
       A100-PROCESS-MAP.
           PERFORM A400-RECEIVE-MAP.
           PERFORM A600-CALCULATE-MORTGAGE
           SET SEND-DATAONLY TO TRUE
           PERFORM A300-SEND-MAP
               .
       A300-SEND-MAP.
           EVALUATE TRUE
              WHEN SEND-MAPONLY
                   EXEC CICS
                     SEND MAP ('EPMENU')
                       MAPSET('EPSMORT')
                       MAPONLY
                       CURSOR
                   END-EXEC
              WHEN SEND-ERASE
                   EXEC CICS
                     SEND MAP ('EPMENU')
                         MAPSET('EPSMORT')
                         FROM(EPMENUO)
                         ERASE
                         CURSOR
                   END-EXEC
              WHEN SEND-DATAONLY
                   EXEC CICS
                     SEND MAP ('EPMENU')
                         MAPSET('EPSMORT')
                         FROM(EPMENUO)
                         DATAONLY
                         CURSOR
                   END-EXEC
              WHEN SEND-ALL
                   EXEC CICS
                     SEND MAP ('EPMENU')
                         MAPSET('EPSMORT')
                         FROM(EPMENUO)
                     END-EXEC.
       A400-RECEIVE-MAP.
           EXEC CICS
                RECEIVE MAP('EPMENU')
                   MAPSET('EPSMORT')
                   INTO (EPMENUI)
           END-EXEC.
           MOVE EPLOANI        TO EPSPARM-VALIDATE-DATA.
           MOVE LENGTH OF EPLOANI
                               TO EPSPARM-MAX-LENGTH.
           CALL 'EPSNBRVL' USING EPS-NUMBER-VALIDATION.
           COMPUTE EPSPCOM-PRINCIPLE-DATA
                OF W-COMMUNICATION-AREA
                = EPSPARM-NUMBER + EPSPARM-DECIMAL.
           MOVE EPYEARSI             TO EPSPARM-VALIDATE-DATA.
           MOVE LENGTH OF EPYEARSI   TO EPSPARM-MAX-LENGTH.
           CALL 'EPSNBRVL' USING EPS-NUMBER-VALIDATION.
           COMPUTE EPSPCOM-NUMBER-OF-YEARS
                OF W-COMMUNICATION-AREA
                = EPSPARM-NUMBER + EPSPARM-DECIMAL.
           MOVE EPRATEI              TO EPSPARM-VALIDATE-DATA.
           MOVE LENGTH OF EPRATEI    TO EPSPARM-MAX-LENGTH.
           CALL 'EPSNBRVL' USING EPS-NUMBER-VALIDATION.
           COMPUTE EPSPCOM-QUOTED-INTEREST-RATE
                OF W-COMMUNICATION-AREA
                = EPSPARM-NUMBER + EPSPARM-DECIMAL.
       A600-CALCULATE-MORTGAGE.
           MOVE 'Y' TO EPSPCOM-YEAR-MONTH-IND
                           OF W-COMMUNICATION-AREA.
           MOVE 'EPSCSMRT' TO W-CALL-PROGRAM
           EXEC CICS LINK PROGRAM( W-CALL-PROGRAM )
                          COMMAREA( W-COMMUNICATION-AREA )
           END-EXEC
           .
           MOVE EPSPCOM-RETURN-MONTH-PAYMENT
                             OF W-COMMUNICATION-AREA
                             TO WS-FORMAT-NUMBER.
           MOVE WS-FORMAT-NUMBER
                             TO EPPAYMNTO.
           MOVE EPSPCOM-ERRMSG
                             OF W-COMMUNICATION-AREA
                             TO MSGERRO.
       A805-DUMMY-SQL-CALL.
           EXEC SQL
               SELECT IBMREQD
                    INTO :IBMREQD
                    FROM SYSIBM.SYSDUMMY1
           END-EXEC.
           IF SQLCODE = 100
               MOVE 'No rows found on SYSDUMM1.' TO MSGERRO
           ELSE
               IF SQLCODE NOT = 0
                   MOVE SQLCODE TO SQL-ERROR-CODE
                   MOVE SQL-ERROR-MSG TO MSGERRO
               END-IF
           END-IF.
[/INST]{
  "id": "BR-001",
  "description": "For users who wish to clear data from the screen, the SEND-ERASE business rule is used to clear the screen and send the updated map with the clear data.",
  "condition": "EIBAID = DFHCLEAR",
  "output": {
    "default": "SEND MAP ('EPMENU')\nMAPSET('EPSMORT')\nFROM(EPMENUO)\nERASE\nCURSOR"
  }
}
{
  "id": "BR-002",
  "description": "The SEND-DATAONLY business rule sends the received map data to the screen without clearing it.",
  "condition": "SEND-DATAONLY",
  "output": {
    "default": "SEND MAP ('EPMENU')\nMAPSET('EPSMORT')\nFROM(EPMENUO)\nDATAONLY\nCURSOR"
  }
}
{
  "id": "BR-003",
  "description": "The SEND-ALL business rule sends all data on the screen after receiving the data from the server.",
  "condition": "SEND-ALL",
  "output": {
    "default": "SEND MAP ('EPMENU')\nMAPSET('EPSMORT')\nFROM(EPMENUO)"
  }
}
{
  "id": "BR-004",
  "description": "The SEND-MAPONLY business rule is triggered when a user wants to only send the fields indicated on the map. It does not update the screen.",
  "condition": "SEND-MAPONLY",
  "output": {
    "default": "SEND MAP ('EPMENU')\nMAPSET('EPSMORT')\nMAPONLY\nCURSOR"
  }
}[INST]   CBL NUMPROC(MIG),FLAG(I,W),RENT
       ID DIVISION.
       PROGRAM-ID. EPSCSMRT.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. FLEX-ES.
       OBJECT-COMPUTER. FLEX-ES.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-CALLED-PROGRAM    PIC X(8).
       01  STATIC-CALLED-PROGRAMS.
           03 STATIC-CALLED-PROGRAM-TABLE.
              05 FILLER            PIC X(8) VALUE 'EPSMPMT'.
              05 FILLER            PIC X(8) VALUE 'NOT VLD'.
              05 FILLER            PIC X(8) VALUE ' '.
           03 CALLED-PROGRAM-TABLE
                        REDEFINES STATIC-CALLED-PROGRAM-TABLE
                        OCCURS 3 TIMES.
              05 CALLED-PROGRAM-NAME PIC X(8).
       COPY EPSPDATA.
       LINKAGE SECTION.
       01 DFHCOMMAREA.
       COPY EPSMTCOM.
       PROCEDURE DIVISION USING DFHCOMMAREA.
       A000-MAINLINE.
           MOVE EPSPCOM-PRINCIPLE-DATA  TO EPSPDATA-PRINCIPLE-DATA.
           MOVE EPSPCOM-NUMBER-OF-YEARS TO EPSPDATA-NUMBER-OF-YEARS.
           MOVE 'Y'                     TO EPSPDATA-YEAR-MONTH-IND.
           MOVE EPSPCOM-QUOTED-INTEREST-RATE
                                        TO
                                   EPSPDATA-QUOTED-INTEREST-RATE.
           MOVE CALLED-PROGRAM-NAME(1)  TO WS-CALLED-PROGRAM.
           MOVE SPACES                  TO EPSPDATA-RETURN-ERROR.
           CALL WS-CALLED-PROGRAM USING EPSPDATA.
           MOVE EPSPDATA-RETURN-MONTH-PAYMENT
                                        TO
                                        EPSPCOM-RETURN-MONTH-PAYMENT.
           MOVE EPSPDATA-RETURN-ERROR   TO EPSPCOM-ERRMSG.
           IF EPSPDATA-RETURN-ERROR = SPACES
              MOVE ZERO TO EPSPCOM-PROGRAM-RETCODE
           ELSE
              MOVE 8 TO EPSPCOM-PROGRAM-RETCODE
           END-IF.
           GOBACK
           .
[/INST]{
  "id": "BR-002",
  "description": "The program will always use the first entry in the `STATIC-CALLED-PROGRAM-TABLE`.",
  "condition": null,
  "output": null
}[INST]       ID DIVISION.
       PROGRAM-ID. EPSMLIST.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. IBM-FLEX-ES.
       OBJECT-COMPUTER. IBM-FLEX-ES.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  W-FLAGS.
           10  W-SEND-FLAG                    PIC X.
               88  SEND-ERASE                   VALUE '1'.
               88  SEND-DATAONLY                VALUE '2'.
               88  SEND-MAPONLY                 VALUE '3'.
               88  SEND-DATAONLY-ALARM          VALUE '4'.
       01 W-CONVERSIONS.
           05  W-PMT-CNVRT     PIC X(12).
           05  W-PMT-NUMBER
               REDEFINES W-PMT-CNVRT
                               PIC 9(10)V99.
           05  WS-FORMAT-NUMBER PIC Z,ZZZ,ZZ9.99.
           05  W-PRINC-CNVRT   PIC X(12).
           05  W-PRINC-NUMBER
               REDEFINES W-PRINC-CNVRT
                               PIC 9(10)V99.
       01 W-CALL-PROGRAM                      PIC X(8).
       01 RESPONSE                            PIC S9(8) COMP.
       01 INTERNAL-PROGRAM-VARIABLES.
           05 RID-LENGTH                      PIC S9(9) COMP.
           05 DISP-COUNT                      PIC S9(4) COMP.
           05 MAX-LOOP                        PIC S9(4) COMP
                                              VALUE IS 8.
           05 END-OF-FILE                     PIC X.
           05 CLOSE-FILE                      PIC X.
       01 W-RETIREMENT-WA                     PIC 9(4).
       01 W-COMAREA-LENGTH                    PIC 9(4) COMP.
       01 SAVE-COMM-AREA.
          COPY EPSMTCOM.
       01  END-OF-TRANS-MSG                 PIC X(30)
             VALUE 'END OF TRANSACTION - THANK YOU'.
           COPY DFHAID.
           COPY EPSMLIS.
       01  OUTMAP REDEFINES EPSMLISI.
           03 FILLER PIC X(110).
           03 OUTMAP-REPEATE OCCURS 8 TIMES.
              05 FILLER                    PIC X(5).
              05 OUTMAP-COMPANY            PIC X(24).
              05 FILLER                    PIC X(5).
              05 OUTMAP-PHONE-NUM          PIC X(13).
              05 FILLER                    PIC X(5).
              05 OUTMAP-RATE               PIC X(5).
              05 FILLER                    PIC X(5).
              05 OUTMAP-LOAN               PIC X(12).
              05 FILLER                    PIC X(5).
              05 OUTMAP-YEARS              PIC X(2).
           03 FILLER                       PIC X(5).
           03 OUTMAP-MSG                   PIC X(40).
           COPY EPSNBRPM.
           COPY EPSMORTF.
       01  W-COMMUNICATION-AREA.
           COPY EPSMTCOM.
       LINKAGE SECTION.
       01 DFHCOMMAREA.
       COPY EPSMTCOM.
       PROCEDURE DIVISION USING DFHCOMMAREA.
       EPSCMORT-MAINLINE.
           MOVE LENGTH OF DFHCOMMAREA to W-COMAREA-LENGTH.
           MOVE DFHCOMMAREA           TO SAVE-COMM-AREA.
           EVALUATE TRUE
               WHEN EIBCALEN = ZERO
                   PERFORM A100-PROCESS-MAP
               WHEN EIBAID = DFHCLEAR
                   EXEC CICS
                        RETURN
                   END-EXEC
               WHEN EIBAID = DFHPF3 OR DFHPF12
                   EXEC CICS
                        RETURN
                   END-EXEC
               WHEN EIBAID = DFHENTER
                   PERFORM A100-PROCESS-MAP
               WHEN OTHER
                   PERFORM A100-PROCESS-MAP
           END-EVALUATE
           .
           MOVE SAVE-COMM-AREA TO DFHCOMMAREA.
           EXEC CICS RETURN END-EXEC.
       A100-PROCESS-MAP.
           PERFORM A310-ERASE-MAP.
           MOVE 0      TO RID-LENGTH.
           MOVE 'N'    TO CLOSE-FILE.
           MOVE 'N'    TO END-OF-FILE.
           EXEC CICS STARTBR DATASET('EPSMORTF')
                     RIDFLD(RID-LENGTH) RBA
                     EQUAL
                     RESP(RESPONSE) END-EXEC.
           IF (RESPONSE = DFHRESP(NORMAL))
              MOVE 'Y' TO CLOSE-FILE
              MOVE 1   TO DISP-COUNT
              PERFORM A150-PROCESS-FILE
                      UNTIL END-OF-FILE = 'Y'
                      OR    DISP-COUNT  > MAX-LOOP
           ELSE
              MOVE 'ERROR WITH START'         TO EPCMP1O
              MOVE RESPONSE                   TO EPLOAN1O
           END-IF
           .
           IF CLOSE-FILE = 'Y'
            EXEC CICS ENDBR FILE('EPSMORTF') END-EXEC
           END-IF
           .
           PERFORM A300-SEND-MAP.
       A150-PROCESS-FILE.
           EXEC CICS READNEXT FILE('EPSMORTF')
                    INTO(MORTGAGE-COMPANY-INFO)
                    RIDFLD(RID-LENGTH)
                    RBA RESP(RESPONSE)
           END-EXEC
           .
           IF (RESPONSE = DFHRESP(NORMAL))
              IF  EPSPCOM-PRINCIPLE-DATA OF SAVE-COMM-AREA
                                          < MORT-FILE-LOAN
              AND EPSPCOM-QUOTED-INTEREST-RATE OF SAVE-COMM-AREA
                                          > MORT-FILE-RATE
                 MOVE MORT-FILE-COMPANY
                                       TO OUTMAP-COMPANY(DISP-COUNT)
                 MOVE MORT-FILE-PHONE-NUM
                                       TO OUTMAP-PHONE-NUM(DISP-COUNT)
                 PERFORM A600-CALCULATE-MORTGAGE
                 MOVE MORT-FILE-RATE
                                       TO WS-FORMAT-NUMBER
                 MOVE WS-FORMAT-NUMBER(7:5)
                                       TO OUTMAP-RATE(DISP-COUNT)
                 MOVE EPSPCOM-RETURN-MONTH-PAYMENT OF DFHCOMMAREA
                                       TO WS-FORMAT-NUMBER
                 MOVE WS-FORMAT-NUMBER TO OUTMAP-LOAN(DISP-COUNT)
                 MOVE MORT-FILE-YEARS
                                       TO OUTMAP-YEARS(DISP-COUNT)
                 ADD 1                 TO DISP-COUNT
              END-IF
           ELSE
              IF (RESPONSE NOT = DFHRESP(ENDFILE))
                 MOVE 'ERROR WITH READ NEXT' TO EPCMP1O
                 MOVE RESPONSE               TO EPLOAN1O
              ELSE
                 MOVE 'Y' TO END-OF-FILE
              END-IF
           END-IF
           .
       A300-SEND-MAP.
                   EXEC CICS
                     SEND MAP ('EPSMLIS')
                         MAPSET('EPSMLIS')
                         FROM(EPSMLISO)
                   END-EXEC.
       A310-ERASE-MAP.
            MOVE LOW-VALUES TO EPSMLISO.
            EXEC CICS
                SEND MAP ('EPSMLIS')
                     MAPSET('EPSMLIS')
                     FROM(EPSMLISO)
                     ERASE
            END-EXEC.
       A600-CALCULATE-MORTGAGE.
           MOVE SAVE-COMM-AREA   TO DFHCOMMAREA.
           MOVE 'Y' TO EPSPCOM-YEAR-MONTH-IND
                                 OF DFHCOMMAREA.
           MOVE MORT-FILE-RATE   TO EPSPCOM-QUOTED-INTEREST-RATE
                                 OF DFHCOMMAREA.
           MOVE MORT-FILE-YEARS  TO EPSPCOM-NUMBER-OF-YEARS
                                 OF DFHCOMMAREA.
           MOVE 'EPSCSMRT' TO W-CALL-PROGRAM
           EXEC CICS LINK PROGRAM( W-CALL-PROGRAM )
                          COMMAREA( DFHCOMMAREA )
           END-EXEC
           MOVE EPSPCOM-RETURN-MONTH-PAYMENT
                                 OF DFHCOMMAREA
                                 TO WS-FORMAT-NUMBER.
           MOVE WS-FORMAT-NUMBER TO OUTMAP-LOAN(DISP-COUNT).
[/INST]{
  "id": "BR-001",
  "description": "Only records that have a smaller principle data and higher quoted interest rate than the values on the request should be included in the output.",
  "condition": "EPSPCOM-PRINCIPLE-DATA < MORT-FILE-LOAN\nAND EPSPCOM-QUOTED-INTEREST-RATE > MORT-FILE-RATE",
  "output": {}
}[INST]   CBL NUMPROC(MIG),FLAG(I,W),RENT
       ID DIVISION.
       PROGRAM-ID. EPSMPMT.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. FLEX-ES.
       OBJECT-COMPUTER. FLEX-ES.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 WS-STATIC-DATA.
           03 STATIC-MAXIMUM-PRINCIPLE    PIC 9(9)V99
                                VALUE 100000000.01.
           03 STATIC-ERRORS.
              05 FILLER                  PIC 99 VALUE 1.
              05 FILLER                  PIC X(80)
              VALUE 'PRINCIPLE AMOUNT IS NEGATIVE'.
              05 FILLER                  PIC 99 VALUE 2.
              05 FILLER                  PIC X(80)
              VALUE 'PRINCIPLE EXCEEDED MAXIMUM AMOUNT'.
              05 FILLER                  PIC 99 VALUE 3.
              05 FILLER                  PIC X(80)
              VALUE 'NEGATIVE INTEREST RATE'.
              05 FILLER                  PIC 99 VALUE 4.
              05 FILLER                  PIC X(80)
              VALUE 'YEARS INDICATED, BUT YEARS ZERO OR LESS'.
              05 FILLER                  PIC 99 VALUE 5.
              05 FILLER                  PIC X(80)
              VALUE 'ZERO OR LESS MONTHS'.
              05 FILLER                  PIC 99 VALUE 6.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 7.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 8.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 9.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 10.
              05 FILLER                  PIC X(80)
              VALUE ' '.
           03 STATIC-ERROR-TBL REDEFINES STATIC-ERRORS.
              05 STATIC-ERROR-TABLE OCCURS 10 TIMES.
                07 ERROR-INDICATOR         PIC 99.
                07 ERROR-TEXT              PIC X(80).
       01  WS-INDICATORS-AND-FLAGS.
           03 VALIDATION-INDICATOR   PIC 9.
       01  WS-WORK-AMOUNTS.
           03 WS-NUMBER-OF-MONTHS    PIC 9(9)V99   COMP.
           03 WS-CALC-INTEREST       COMP-1.
       01  Loan             Pic 9(9)V99.
       01  Payment          Pic 9(9)V99.
       01  Interest         Pic 9(9)V9999.
       01  Number-Periods   Pic 999.
       LINKAGE SECTION.
       COPY EPSPDATA.
       PROCEDURE DIVISION USING EPSPDATA.
       A000-MAINLINE.
           MOVE 0 TO VALIDATION-INDICATOR.
           MOVE 0 TO WS-NUMBER-OF-MONTHS.
           PERFORM A100-VALIDATE-INPUT.
           IF VALIDATION-INDICATOR = 0
              PERFORM A200-CALULATE-MONTH-PAYMENT
           ELSE
              PERFORM A999-RETURN-ERROR-TEXT
           END-IF.
           GOBACK
           .
       A100-VALIDATE-INPUT.
           MOVE SPACES TO EPSPDATA-RETURN-ERROR.
           IF EPSPDATA-PRINCIPLE-DATA > 0
              IF EPSPDATA-PRINCIPLE-DATA > STATIC-MAXIMUM-PRINCIPLE
                 MOVE 2 TO VALIDATION-INDICATOR
              END-IF
           ELSE
              MOVE 1 TO VALIDATION-INDICATOR
           END-IF
           .
           IF VALIDATION-INDICATOR = 0
              IF EPSPDATA-QUOTED-INTEREST-RATE <= 0
                 MOVE 3 TO VALIDATION-INDICATOR
              ELSE
                 IF EPSPDATA-YEAR-MONTH-IND = 'Y'
                    COMPUTE WS-NUMBER-OF-MONTHS =
                               EPSPDATA-NUMBER-OF-YEARS * 12
                 ELSE
                    MOVE EPSPDATA-NUMBER-OF-MONTHS TO
                            WS-NUMBER-OF-MONTHS
                 END-IF
              END-IF
           END-IF
           .
           COMPUTE WS-CALC-INTEREST =
                              (EPSPDATA-QUOTED-INTEREST-RATE / 100) / 12
           .
       A200-CALULATE-MONTH-PAYMENT.
           COMPUTE EPSPDATA-RETURN-MONTH-PAYMENT
                   = EPSPDATA-PRINCIPLE-DATA *
                     (WS-CALC-INTEREST *
                     (1 + WS-CALC-INTEREST) ** WS-NUMBER-OF-MONTHS) /
                     (((1 + WS-CALC-INTEREST )
           .
       A300-TRY2.
           MOVE EPSPDATA-PRINCIPLE-DATA TO Loan.
           COMPUTE Interest = EPSPDATA-QUOTED-INTEREST-RATE / 100.
           MOVE WS-NUMBER-OF-MONTHS TO Number-Periods.
           Compute Payment =
           Loan * Function Annuity((Interest / 12) Number-Periods)
           DISPLAY 'Verify Payment = ' Payment.
       A999-RETURN-ERROR-TEXT.
           MOVE ERROR-TEXT(VALIDATION-INDICATOR) TO
                                                 EPSPDATA-RETURN-ERROR
           GOBACK
           .
[/INST]```json
{
  "id": "BR-001",
  "description": "Principle amount cannot be negative.",
  "condition": "EPSPDATA-PRINCIPLE-DATA < 0",
  "output": {
    "error": "PRINCIPLE AMOUNT IS NEGATIVE"
  }
}
```[INST]       ID DIVISION.
       PROGRAM-ID. EPSNBRVL
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. FLEX-ES.
       OBJECT-COMPUTER. FLEX-ES.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 WS-STATIC-DATA.
           03 STATIC-ERRORS.
              05 FILLER                  PIC 99 VALUE 1.
              05 FILLER                  PIC X(80)
              VALUE 'NO NUMBER PRESENT'.
              05 FILLER                  PIC 99 VALUE 2.
              05 FILLER                  PIC X(80)
              VALUE 'SPACES IN NUMBER'.
              05 FILLER                  PIC 99 VALUE 3.
              05 FILLER                  PIC X(80)
              VALUE 'TOO MANY DEICMAL POINTS'.
              05 FILLER                  PIC 99 VALUE 4.
              05 FILLER                  PIC X(80)
              VALUE 'YEARS INDICATED, BUT YEARS ZERO OR LESS'.
              05 FILLER                  PIC 99 VALUE 5.
              05 FILLER                  PIC X(80)
              VALUE 'ZERO OR LESS MONTHS'.
              05 FILLER                  PIC 99 VALUE 6.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 7.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 8.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 9.
              05 FILLER                  PIC X(80)
              VALUE ' '.
              05 FILLER                  PIC 99 VALUE 10.
              05 FILLER                  PIC X(80)
              VALUE ' '.
           03 STATIC-ERROR-TBL REDEFINES STATIC-ERRORS.
              05 STATIC-ERROR-TABLE OCCURS 10 TIMES.
                07 ERROR-INDICATOR         PIC 99.
                07 ERROR-TEXT              PIC X(80).
       01  WS-WORK-AMOUNTS.
           03 WS-LEADING-SPACES      PIC 9(4) COMP VALUE 1.
           03 WS-TRAILING-SPACES     PIC 9(4) COMP VALUE 0.
           03 WS-END-SPACE           PIC 9(4) COMP VALUE 0.
           03 WS-DECIMAL-SPACE       PIC 99        VALUE 0.
           03 WS-IDX                 PIC 9(2) COMP.
           03 WS-DEC-IDX             PIC 9(2) COMP.
           03 WS-NUM-IDX             PIC 9(2) COMP.
           03 WS-MAX-NUMBER-LGTH     PIC 9(2) COMP.
           03 WS-MAX-FIELD           PIC 9(2) COMP.
           03 WS-DEC-ADJUST          PIC 9.
       LINKAGE SECTION.
       COPY EPSNBRPM.
       PROCEDURE DIVISION USING EPS-NUMBER-VALIDATION.
       A000-MAINLINE.
           MOVE EPSPARM-MAX-LENGTH              TO WS-IDX.
           MOVE LENGTH OF EPSPARM-VALIDATE-DATA TO WS-MAX-FIELD
           IF WS-IDX > WS-MAX-FIELD
              MOVE WS-MAX-FIELD TO WS-IDX
           ELSE
              MOVE WS-IDX       TO WS-MAX-FIELD
           END-IF.
           MOVE ZERO   TO WS-END-SPACE.
           MOVE SPACES TO EPSPARM-RETURN-ERROR.
           MOVE ZERO   TO EPSPARM-BINARY-NUMBER
                          EPSPARM-NUMBER
                          EPSPARM-DECIMAL.
           PERFORM UNTIL WS-IDX = 0
              IF EPSPARM-VALIDATE-DATA(WS-IDX:1) = SPACES
                ADD 1      TO WS-TRAILING-SPACES
                SUBTRACT 1 FROM WS-IDX
              ELSE
                MOVE WS-IDX TO WS-END-SPACE
                MOVE 0 TO WS-IDX
              END-IF
           END-PERFORM.
           MOVE 1 TO WS-LEADING-SPACES.
           IF WS-END-SPACE NOT = 0
              MOVE 1 TO WS-IDX
              PERFORM UNTIL WS-IDX >= WS-END-SPACE
                IF EPSPARM-VALIDATE-DATA(WS-IDX:1) = SPACES
                   ADD 1 TO WS-LEADING-SPACES
                   ADD 1 TO WS-IDX
                ELSE
                   COMPUTE WS-IDX = WS-END-SPACE + 1
                END-IF
              END-PERFORM
           ELSE
              MOVE STATIC-ERROR-TABLE(1) TO EPSPARM-RETURN-ERROR
           END-IF.
           MOVE WS-LEADING-SPACES TO WS-IDX.
           MOVE 1                 TO WS-DEC-IDX.
           MOVE 0                 TO WS-DECIMAL-SPACE.
           PERFORM A002-COMPUTE-DECIMAL
                   UNTIL WS-IDX > WS-END-SPACE
           .
           IF WS-DECIMAL-SPACE > 0
              COMPUTE WS-END-SPACE = WS-DECIMAL-SPACE - 1
           END-IF.
           MOVE WS-END-SPACE             TO WS-IDX.
           MOVE LENGTH OF EPSPARM-NUMBER TO WS-NUM-IDX.
           PERFORM A001-COMPUTE-INTEGER
                   UNTIL WS-IDX < WS-LEADING-SPACES
           .
           IF EPSPARM-RETURN-ERROR = SPACES
              COMPUTE EPSPARM-BINARY-NUMBER = EPSPARM-NUMBER
                                            + EPSPARM-DECIMAL
           END-IF.
           GOBACK
           .
       A001-COMPUTE-INTEGER.
           IF EPSPARM-VALIDATE-DATA(WS-IDX:1) = ','
              SUBTRACT 1 FROM WS-IDX
           ELSE
              IF EPSPARM-VALIDATE-DATA(WS-IDX:1) = SPACE
              OR EPSPARM-VALIDATE-DATA(WS-IDX:1) IS NOT NUMERIC
                 MOVE STATIC-ERROR-TABLE(2) TO EPSPARM-RETURN-ERROR
                 MOVE 0 TO WS-IDX
              ELSE
                 MOVE EPSPARM-VALIDATE-DATA(WS-IDX:1) TO
                      EPSPARM-NUMBER(WS-NUM-IDX:1)
                 SUBTRACT 1 FROM WS-IDX
                                 WS-NUM-IDX
              END-IF
           END-IF
           .
       A002-COMPUTE-DECIMAL.
           IF WS-DECIMAL-SPACE = 0
              IF EPSPARM-VALIDATE-DATA(WS-IDX:1) = '.'
                 MOVE WS-IDX TO WS-DECIMAL-SPACE
              END-IF
           ELSE
              IF EPSPARM-VALIDATE-DATA(WS-IDX:1) = '.'
                 MOVE STATIC-ERROR-TABLE(3) TO EPSPARM-RETURN-ERROR
                 MOVE WS-END-SPACE TO WS-IDX
                 MOVE 1            TO WS-DEC-IDX
              ELSE
                 MOVE EPSPARM-VALIDATE-DATA(WS-IDX:1) TO
                      EPSPARM-DECIMAL(WS-DEC-IDX:1)
                 ADD 1 TO WS-DEC-IDX
              END-IF
           END-IF
           ADD 1 TO WS-IDX
           .
[/INST]{
  "id": "BR-001",
  "description": "If the field has any spaces in it, the program will flag that there are spaces in the number.",
  "condition": "spaces in the number",
  "output": {
    "error": "SPACES IN NUMBER"
  }
}
{
  "id": "BR-002",
  "description": "If there are any decimal points in the number greater than 1, the program will flag that there are too many decimal points.",
  "condition": "decimal points > 1",
  "output": {
    "error": "TOO MANY DECIMAL POINTS"
  }
}
{
  "id": "BR-003",
  "description": "If there are no numbers present in the field the program will flag the error.",
  "condition": "no numbers present",
  "output": {
    "error": "NO NUMBER PRESENT"
  }
}
{
  "id": "BR-004",
  "description": "If there are years indicated but years are zero or less, the program will flag the error.",
  "condition": "years indicated but years are zero or less",
  "output": {
    "error": "YEARS INDICATED, BUT YEARS ZERO OR LESS"
  }
}
{
  "id": "BR-005",
  "description": "If there are zero months or less, the program will flag the error.",
  "condition": "zero months or less",
  "output": {
    "error": "ZERO OR LESS MONTHS"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.     HELLO.
       PROCEDURE DIVISION.
           DISPLAY "Hello world!".
           STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "The program displays \\\"Hello world!\\\"",
  "condition": "DISPLAY \"Hello world!\"",
  "output": {
    "message": "Hello world!"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  TEST1.
       PROCEDURE DIVISION.
           DISPLAY "One".
           STOP RUN.[/INST]{
  "id": "BR-002",
  "description": "The execution of the program starts with displaying \\\"One\\\"",
  "condition": null,
  "output": {
    "display": "\\\"One\\\""
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  TEST10.
       PROCEDURE DIVISION.
           DISPLAY "Ten".
           STOP RUN.[/INST]{
  "id": "BR-002",
  "description": "The program prints out the number 10.",
  "condition": "N/A",
  "output": {
    "message": "Ten"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  TEST2.
       PROCEDURE DIVISION.
           DISPLAY "Two".
           STOP RUN.[/INST]{
  "id": "BR-001",
  "description": "The program will terminate and display 'Two'.",
  "condition": null,
  "output": "Two"
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  TEST3.
       PROCEDURE DIVISION.
           DISPLAY "Three".
           STOP RUN.[/INST]{
  "id": "BR-002",
  "description": "The program's output will be always 'Three'",
  "condition": null,
  "output": {
    "constant": "Three"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  TEST4.
       PROCEDURE DIVISION.
           DISPLAY "Four".
           STOP RUN.[/INST]{
  "id": "BR-002",
  "description": "The program should display the String 'Four'.",
  "output": {
    "four": "Four"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  TEST5.
       PROCEDURE DIVISION.
           DISPLAY "Five".
           STOP RUN.[/INST]{
  "id": "BR-002",  "description": "The program displays the word \"Five\".",
  "condition": true,
  "output": {
    "ok": "Five"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  TEST6.
       PROCEDURE DIVISION.
           DISPLAY "Six".
           STOP RUN.[/INST]{
  "id": "BR-002",
  "description": "The program will always display 'Six'.",
  "condition": null,
  "output": {
    "display": "Six"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  TEST7.
       PROCEDURE DIVISION.
           DISPLAY "Seven".
           STOP RUN.[/INST]{
  "id": "BR-002",  "description": "The program should print the word \"Seven\"",
  "condition": "None",
  "output": {
    "display": "\"Seven\""
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  TEST8.
       PROCEDURE DIVISION.
           DISPLAY "Eight".
           STOP RUN.[/INST]{
  "id": "BR-001",
  "description": "The program displays the word \\\"Eight\\\" when executed."
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  TEST9.
       PROCEDURE DIVISION.
           DISPLAY "Nine".
           STOP RUN.[/INST]{
  "id": "BR-001",
  "description": "Display \"Nine\"",
  "condition": null,
  "output": {
    "displayNine": "Nine"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    FXSORT
       AUTHOR.        Jeff Bisti
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT FXLIST-B ASSIGN TO FXBOSS.
           SELECT FXLIST-M ASSIGN TO FXMXR.
           SELECT FXLIST-J ASSIGN TO FXJHS.
           SELECT FXLIST-WORK ASSIGN TO WRK.
           SELECT FXLIST-MERGE ASSIGN TO FXLSTMRG.
           SELECT FXLIST-SORTED ASSIGN TO FXSORTED.
       DATA DIVISION.
       FILE SECTION.
       SD  FXLIST-WORK.
       01  FX-REC.
           05 FX-NAME-W      PIC X(50).
           05 FX-PRICE-W     PIC $$,$$$,$$9.99.
           05 FILLER PIC X(17).
       FD  FXLIST-MERGE RECORDING MODE F.
       01 FX-MERG.
           05 FX-NAME-M      PIC X(50).
           05 FX-PRICE-M     PIC $$,$$$,$$9.99.
           05 FILLER PIC X(17).
       FD  FXLIST-SORTED RECORDING MODE F.
       01  PRINT-REC.
           05  FX-NAME-S      PIC X(50).
           05  FX-PRICE-S     PIC $$,$$$,$$9.99.
           05  FILLER PIC X(17).
       FD  FXLIST-B RECORDING MODE F.
       01  BOSS-FIELDS.
           05  FX-NAME-B      PIC X(50).
           05  FX-PRICE-B     PIC $$,$$$,$$9.99.
           05  FILLER PIC X(17).
       FD  FXLIST-M RECORDING MODE F.
       01  MXR-FIELDS.
           05  FX-NAME-M       PIC X(50).
           05  FX-PRICE-M     PIC $$,$$$,$$9.99.
           05  FILLER PIC X(17).
       FD  FXLIST-J RECORDING MODE F.
       01  JHS-FIELDS.
           05  FX-NAME-I       PIC X(50).
           05  FX-PRICE-I     PIC $$,$$$,$$9.99.
           05  FILLER PIC X(17).
       PROCEDURE DIVISION.
       PROCESS-RECORDS.
           DISPLAY "MERGING FILES"
           MERGE FXLIST-WORK ON ASCENDING KEY FX-NAME-W IN FX-REC
           USING FXLIST-B, FXLIST-M, FXLIST-J GIVING FXLIST-MERGE
           DISPLAY "SORTING RECORDS".
           SORT FXLIST-WORK ON ASCENDING KEY FX-PRICE-W IN FX-REC
           USING FXLIST-MERGE GIVING FXLIST-SORTED
           .
       CLOSE-STOP.
           DISPLAY "NOW I'M STOPPING".
           STOP RUN.[/INST]{
  "id": "BR-001",
  "description": "The sort key for the work file FXLIST-WORK is FX-NAME-W",
  "condition": null,
  "output": null
}
{
  "id": "BR-002",
  "description": "The sort key for the merge file FXLIST-MERGE is FX-PRICE-W",
  "condition": null,
  "output": null
}[INST]CBL CODEPAGE(DCBS)
       Identification division.
         Program-id. json_parse.
       Data division.
        Working-storage section.
         1 jtxt-1047-client-data.
          3 pic x(16)  value '{"client-data":{'.
          3 pic x(28)  value ' "account-num":123456789012,'.
          3 pic x(19)  value ' "balance":-125.53,'.
          3 pic x(17)  value ' "billing-info":{'.
          3 pic x(22)  value '  "name-first":"Matt",'.
          3 pic x(22)  value '  "name-last":"CUZ",'.
          3 pic x(37)  value '  "addr-street":"2455 South Rd",'.
          3 pic x(25)  value '  "addr-city":"Pok",'.
          3 pic x(27)  value '  "addr-region":"New York",'.
          3 pic x(21)  value '  "addr-code":"12601"'.
          3 pic x(3)   value '  }'.
          3 pic x(2)   value ' }'.
          3 pic x(1)   value '}'.
        1 jtxt-1047-transactions.
          3 pic x(16)  value '{"transactions":'.
          3 pic x(14)  value ' {"tx-record":'.
          3 pic x(3)   value '  ['.
          3 pic x(4)   value '   {'.
          3 pic x(19)  value '    "tx-uid":107,'.
          3 pic x(34)  value '    "tx-item-desc":"prod a ver 1",'.
          3 pic x(30)  value '    "tx-item-uid":"ab142424",'.
          3 pic x(26)  value '    "tx-priceinUS$":12.34,'.
          3 pic x(35)  value '    "tx-comment":"express shipping"'.
          3 pic x(5)   value '   },'.
          3 pic x(4)   value '   {'.
          3 pic x(19)  value '    "tx-uid":1904,'.
          3 pic x(35)  value '    "tx-item-desc":"prod g ver 2",'.
          3 pic x(30)  value '    "tx-item-uid":"gb051533",'.
          3 pic x(27)  value '    "tx-priceinUS$":833.22,'.
          3 pic x(35)  value '    "tx-comment":"digital download"'.
          3 pic x(5)   value '   } '.
          3 pic x(3)   value '  ]'.
          3 pic x(2)   value ' }'.
          3 pic x(1)   value '}'.
         1 jtxt-1208 pic x(1000) value is all x'20'.
         77 txnum pic 999999 usage display  value zero .
         1 client-data.
          3 account-num   pic 999,999,999,999.
          3 balance       pic $$$9.99CR.
          3 billing-info.
           5 name-first  pic n(20).
           5 name-last   pic n(20).
           5 addr-street pic n(20).
           5 addr-city   pic n(20).
           5 addr-region pic n(20).
           5 addr-code   pic n(10).
          3 transactions.
           5 tx-record occurs 0 to 100 depending txnum.
            7 tx-uid       pic 99999 usage display.
            7 tx-item-desc pic x(50).
            7 tx-item-uid  pic AA/9999B99.
            7 tx-price     pic $$$9.99.
            7 tx-comment   pic n(20).
       Procedure division.
           Initialize jtxt-1208 all value.
           Move function display-of(
            function national-of(
            jtxt-1047-client-data) 1208)
             to jtxt-1208(1:function length(jtxt-1047-client-data)).
           Json parse jtxt-1208 into client-data
             with detail
             suppress transactions
             not on exception
               display "Successful JSON Parse"
           end-json.
           Display "Account Number:"
           Display "  " account-num
           Display "Balance:"
           Display "  " balance
           Display "Client Information: "
           Display "  Name:"
           Display "    " function display-of(name-last)
           Display "    " function display-of(name-first)
           Display "  Address:"
           Display "    " function display-of(addr-street)
           Display "    " function display-of(addr-city)
           Display "    " function display-of(addr-region)
           Display "    " function display-of(addr-code).
           Move 2 to txnum.
           Initialize jtxt-1208 all value.
           Move function display-of(
            function national-of(
            jtxt-1047-transactions) 1208)
             to jtxt-1208(1:function length(jtxt-1047-transactions)).
           Json parse jtxt-1208 into transactions
             with detail
             name tx-price is 'tx-priceinUS$'
             not on exception
               display "Successful JSON Parse"
           end-json.
           Display "Transactions:"
           Display "  Record 1:"
           Display "    TXID:        " tx-uid(1)
           Display "    Description: " tx-item-desc(1)
           Display "    Item ID:     " tx-item-uid(1)
           Display "    Price:       " tx-price(1)
           Display "    Comment:     "
             function display-of(tx-comment(1))
           Display "  Record 2:"
           Display "    TXID:        " tx-uid(2)
           Display "    Description: " tx-item-desc(2)
           Display "    Item ID:     " tx-item-uid(2)
           Display "    Price:       " tx-price(2)
           Display "    Comment:     "
             function display-of(tx-comment(2))
           Goback.
       End program json_parse.[/INST]{
  "id": "BR-001",
  "description": "The account number is formatted as a 12-digit string.",
  "condition": "Numeric",
  "length": 12,
  "output": {
    "valid": "Account number is valid",
    "invalid": "Account number is invalid"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCAPDB01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCAPDB01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-RESP                   PIC S9(8) COMP.
       COPY HCERRSWS.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  DB2-OUT.
           03 DB2-PATIENT-ID        PIC S9(9) COMP.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE HCCMAREA
           END-EXEC.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           INITIALIZE DB2-OUT.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           PERFORM Obtain-Patient-Id.
           PERFORM INSERT-PATIENT.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       Obtain-Patient-Id.
           MOVE CA-PATIENT-ID TO DB2-PATIENT-ID.
       INSERT-PATIENT.
           MOVE ' INSERT PATIENT' TO EM-SQLREQ
             EXEC SQL
               INSERT INTO PATIENT
                         ( PATIENTID,
                           USERNAME,
                           FIRSTNAME,
                           LASTNAME,
                           DATEOFBIRTH,
                           INSCARDNUMBER,
                           ADDRESS,
                           CITY,
                           POSTCODE,
                           PHONEMOBILE,
                           EMAILADDRESS )
                  VALUES ( DEFAULT,
                           :CA-USERID,
                           :CA-FIRST-NAME,
                           :CA-LAST-NAME,
                           :CA-DOB,
                           :CA-INS-CARD-NUM,
                           :CA-ADDRESS,
                           :CA-CITY,
                           :CA-POSTCODE,
                           :CA-PHONE-MOBILE,
                           :CA-EMAIL-ADDRESS )
             END-EXEC
             IF SQLCODE NOT EQUAL 0
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
             ELSE
               EXEC SQL
                    SET :DB2-PATIENT-ID = IDENTITY_VAL_LOCAL()
               END-EXEC
             END-IF
           MOVE DB2-PATIENT-ID TO CA-PATIENT-ID.
           EXIT.
       COPY HCERRSPD.[/INST]{
  "id": "BR-002",
  "description": "The commarea length should not be less than the required commarea length.",
  "condition": "EIBCALEN < WS-REQUIRED-CA-LEN",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCAPDB02.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCAPDB02------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-RESP                   PIC S9(8) COMP.
       COPY HCERRSWS.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  DB2-OUT.
           03 DB2-PATIENT-ID           PIC S9(9) COMP.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE HCCMAREA
           END-EXEC.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           INITIALIZE DB2-OUT.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           MOVE CA-PATIENT-ID  TO DB2-PATIENT-ID.
           PERFORM INSERT-USER.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       INSERT-USER.
           MOVE ' INSERT USER' TO EM-SQLREQ
           EXEC SQL
               INSERT INTO USER
                         ( PATIENTID,
                           USERNAME,
                           USERPASSWORD )
                  VALUES ( :DB2-PATIENT-ID,
                           :CA-USERID,
                           :CA-USERID )
             END-EXEC
             IF SQLCODE NOT EQUAL 0
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
             END-IF
           EXIT.
       COPY HCERRSPD.[/INST]{
  "id": "BR-001",
  "description": "The DFHCOMMAREA must have a length greater than or equal to the required length of the commarea.",
  "condition": "EIBCALEN >= WS-REQUIRED-CA-LEN",
  "output": {
    "true": "Continue processing.",
    "false": "Return an error code of '98' and end processing."
  }
},
{
  "id": "BR-002",
  "description": "The SQL INSERT statement must be successful.",
  "condition": "SQLCODE = 0",
  "output": {
    "true": "Continue processing.",
    "false": "Return an error code of '90' and end processing."
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCATDB01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCATDB01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-RESP                   PIC S9(8) COMP.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  DB2-OUT.
           03 DB2-PATIENT-ID        PIC S9(9) COMP.
       COPY HCERRSWS.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE HCCMAREA
           END-EXEC.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           INITIALIZE DB2-OUT.
           MOVE CA-PATIENT-ID TO DB2-PATIENT-ID.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           PERFORM INSERT-PATIENT-THRESHOLD.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       INSERT-PATIENT-THRESHOLD.
           MOVE ' INSERT THRESHOLD' TO EM-SQLREQ
             EXEC SQL
               INSERT INTO THRESHOLD
                         ( PATIENTID,
                           HEARTRATE,
                           BLOODPRESSURE )
                  VALUES ( :DB2-PATIENT-ID,
                           :CA-HR-THRESHOLD,
                           :CA-BP-THRESHOLD )
             END-EXEC
             IF SQLCODE NOT EQUAL 0
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
             END-IF
           MOVE DB2-PATIENT-ID TO CA-PATIENT-ID.
           EXIT.
       COPY HCERRSPD.[/INST]{
  "id": "BR-001",
  "description": "The database table THRESHOLD captures the heart rate and blood pressure thresholds of patients.",
  "condition": null,
  "output": null
},
{
  "id": "BR-002",
  "description": "The application inserts patient thresholds into the THRESHOLD database table.",
  "condition": null,
  "output": null
},
{
  "id": "BR-003",
  "description": "When adding a patient threshold, the application expects EIBCALEN to equal the expected length of the commarea as defined in WS-REQUIRED-CA-LEN.",
  "condition": "EIBCALEN = WS-REQUIRED-CA-LEN",
  "output": null
},
{
  "id": "BR-004",
  "description": "If the length of the commarea received (EIBCALEN) is less than the expected length (WS-REQUIRED-CA-LEN), the application returns an error with CA-RETURN-CODE set to '98'.",
  "condition": "EIBCALEN < WS-REQUIRED-CA-LEN",
  "output": {
    "error": "CA-RETURN-CODE = '98'"
  }
},
{
  "id": "BR-005",
  "description": "If the SQLCODE is not equal to 0 after attempting to insert the patient threshold into the database, the application returns an error with CA-RETURN-CODE set to '90'.",
  "condition": "SQLCODE != 0",
  "output": {
    "error": "CA-RETURN-CODE = '90'"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCAVDB01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCAPDB01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-RESP                   PIC S9(8) COMP.
       COPY HCERRSWS.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  DB2-OUT.
           03 DB2-PATIENT-ID        PIC S9(9) COMP.
           03 DB2-TIMESTAMP         PIC X(26).
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE HCCMAREA
           END-EXEC.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           INITIALIZE DB2-OUT.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           MOVE CA-PATIENT-ID TO DB2-PATIENT-ID.
           MOVE CA-VISIT-DATE   TO DB2-TIMESTAMP(1:10)
           MOVE SPACE           TO DB2-TIMESTAMP (11:1)
           MOVE CA-VISIT-TIME   TO DB2-TIMESTAMP(12:10)
           PERFORM INSERT-BLOODPRESSURE.
           PERFORM INSERT-HEARTRATE.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       INSERT-BLOODPRESSURE.
           MOVE ' INSERT BLOODPRESSURE' TO EM-SQLREQ
             EXEC SQL
               INSERT INTO BLOODPRESSURE
                         ( PATIENTID,
                           BPDATETIME,
                           BLOODPRESSURE )
                  VALUES ( :DB2-PATIENT-ID,
                           :DB2-TIMESTAMP,
                           :CA-BLOOD-PRESSURE )
             END-EXEC
             IF SQLCODE NOT EQUAL 0
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
             END-IF
           MOVE DB2-PATIENT-ID TO CA-PATIENT-ID.
           EXIT.
       INSERT-HEARTRATE.
           MOVE ' INSERT HEARTRATE' TO EM-SQLREQ
             EXEC SQL
               INSERT INTO HEARTRATE
                         ( PATIENTID,
                           HRDATETIME,
                           HEARTRATE )
                  VALUES ( :DB2-PATIENT-ID,
                           :DB2-TIMESTAMP,
                           :CA-HEART-RATE )
             END-EXEC
             IF SQLCODE NOT EQUAL 0
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
             END-IF
           MOVE DB2-PATIENT-ID TO CA-PATIENT-ID.
           EXIT.
       COPY HCERRSPD.[/INST]{
  "id": "BR-001",
  "description": "The commarea length received from CICS must be equal to the expected length.",
  "condition": "EIBCALEN != 0",
  "output": {
    "valid": "Commarea length received from CICS is valid.",
    "invalid": "Commarea length received from CICS is invalid."
  }
},
{
  "id": "BR-002",
  "description": "The commarea length received from CICS must be greater than or equal to the required commarea length.",
  "condition": "EIBCALEN < WS-REQUIRED-CA-LEN",
  "output": {
    "valid": "Commarea length received from CICS is greater than or equal to the required commarea length.",
    "invalid": "Commarea length received from CICS is less than the required commarea length."
  }
},
{
  "id": "BR-003",
  "description": "The SQLCODE returned from the INSERT INTO BLOODPRESSURE statement must be 0.",
  "condition": "SQLCODE = 0",
  "output": {
    "success": "The INSERT INTO BLOODPRESSURE statement was successful.",
    "failure": "The INSERT INTO BLOODPRESSURE statement failed."
  }
},
{
  "id": "BR-004",
  "description": "The SQLCODE returned from the INSERT INTO HEARTRATE statement must be 0.",
  "condition": "SQLCODE = 0",
  "output": {
    "success": "The INSERT INTO HEARTRATE statement was successful.",
    "failure": "The INSERT INTO HEARTRATE statement failed."
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCAZERRS.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-FLAG                   PIC X.
       01  WS-RESP                   PIC S9(8) COMP.
       01  WS-STARTCODE              PIC XX Value spaces.
       01  WS-INVOKEPROG             PIC X(8) Value spaces.
       01  WS-PRINSYSID              PIC XXXX Value spaces.
       01  WS-RECV.
         03 WS-RECV-TRANID           PIC X(5).
         03 WS-RECV-DATA             PIC X(74).
       01  WS-RECV-LEN               PIC S9(4) COMP Value 80.
       01  WRITE-MSG.
         03 WRITE-MSG-SYSID          PIC X(4).
         03 FILLER-X                 PIC X Value SPACES.
         03 WRITE-MSG-MSG            PIC X(90).
       01  FILLER REDEFINES WRITE-MSG.
         03 FILLER                   PIC X(5).
         03 FILLER                   PIC X(7).
         03 WRITE-MSG-REST           PIC X(83).
       01  STSQ.
         03  STSQ-NAME                 PIC X(8).
       01  FILLER REDEFINES STSQ.
         03 FILLER                   PIC X(4).
         03 STSQ-EXT                 PIC X(4).
       01 TEMPO                      PIC X(90) VALUE SPACES.
       77 STDQ-NAME                  PIC X(4)  VALUE 'CSMT'.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
         02  COMMA-DATA              PIC X(90).
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           MOVE SPACES TO WRITE-MSG.
           MOVE SPACES TO WS-RECV.
           EXEC CICS ASSIGN SYSID(WRITE-MSG-SYSID)
                RESP(WS-RESP)
           END-EXEC.
           EXEC CICS ASSIGN STARTCODE(WS-STARTCODE)
                RESP(WS-RESP)
           END-EXEC.
           EXEC CICS ASSIGN PRINSYSID(WS-PRINSYSID)
                RESP(WS-RESP)
           END-EXEC.
           EXEC CICS ASSIGN INVOKINGPROG(WS-INVOKEPROG)
                RESP(WS-RESP)
           END-EXEC.
           IF WS-INVOKEPROG NOT = SPACES
              MOVE 'C' To WS-FLAG
              MOVE COMMA-DATA  TO WRITE-MSG-MSG
              MOVE EIBCALEN    TO WS-RECV-LEN
           ELSE
              EXEC CICS RECEIVE INTO(WS-RECV)
                  LENGTH(WS-RECV-LEN)
                  RESP(WS-RESP)
              END-EXEC
              MOVE 'R' To WS-FLAG
              MOVE WS-RECV-DATA  TO WRITE-MSG-MSG
              SUBTRACT 5 FROM WS-RECV-LEN
           END-IF.
           MOVE 'HCAZERRS' TO STSQ-NAME.
           ADD 5 TO WS-RECV-LEN.
           EXEC CICS WRITEQ TD QUEUE(STDQ-NAME)
                     FROM(WRITE-MSG)
                     RESP(WS-RESP)
                     LENGTH(WS-RECV-LEN)
           END-EXEC.
           EXEC CICS WRITEQ TS QUEUE(STSQ-NAME)
                     FROM(WRITE-MSG)
                     RESP(WS-RESP)
                     NOSUSPEND
                     LENGTH(WS-RECV-LEN)
           END-EXEC.
           If WS-FLAG = 'R' Then
             EXEC CICS SEND TEXT FROM(FILLER-X)
              WAIT
              ERASE
              LENGTH(1)
              FREEKB
             END-EXEC.
           EXEC CICS RETURN
           END-EXEC.
       A-EXIT.
           EXIT.
           GOBACK.[/INST]{
  "id": "BR-001",
  "description": "If the program is invoked, then the message in the COMMAREA is written to the queue `STDQ-NAME`",
  "condition": "WS-INVOKEPROG != SPACES",
  "output": {
    "message": "WRITEQ TD QUEUE(STDQ-NAME)"
  }
},
{
  "id": "BR-002",
  "description": "If the program is not invoked, then the message from the RECEIVE is written to the queue `STDQ-NAME`",
  "condition": "WS-INVOKEPROG = SPACES",
  "output": {
    "message": "WRITEQ TD QUEUE(STDQ-NAME)"
  }
},
{
  "id": "BR-003",
  "description": "If the program is not invoked, then the message from the RECEIVE is written to the queue `STSQ-NAME`",
  "condition": "WS-INVOKEPROG = SPACES",
  "output": {
    "message": "WRITEQ TS QUEUE(STSQ-NAME)"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCAZMENU.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-RESP                   PIC S9(8) COMP.
       77 MSGEND                       PIC X(24) VALUE
                                        'Transaction ended      '.
        COPY HCMAPS.
        01 COMM-AREA.
        COPY HCCMAREA.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           IF EIBCALEN > 0
              GO TO A-GAIN.
           Initialize HCZMENUI.
           Initialize HCZMENUO.
           Initialize COMM-AREA.
           EXEC CICS SEND MAP ('HCZMENU')
                     FROM(HCZMENUO)
                     MAPSET ('HCMAPS')
                     ERASE
                     RESP(WS-RESP)
                     END-EXEC.
       A-GAIN.
           EXEC CICS HANDLE AID
                     CLEAR(CLEARIT)
                     PF3(ENDIT) END-EXEC.
           EXEC CICS HANDLE CONDITION
                     MAPFAIL(ENDIT)
                     END-EXEC.
           EXEC CICS RECEIVE MAP('HCZMENU')
                     INTO(HCZMENUI) ASIS TERMINAL
                     MAPSET('HCMAPS') END-EXEC.
           EVALUATE HCZINPUTI
             WHEN '1'
                EXEC CICS RETURN
                          TRANSID('HCPA')
                          IMMEDIATE
                END-EXEC
             WHEN '2'
                EXEC CICS RETURN
                          TRANSID('HCP1')
                          IMMEDIATE
                END-EXEC
             WHEN '3'
                EXEC CICS RETURN
                          TRANSID('HCMA')
                          IMMEDIATE
                END-EXEC
             WHEN '4'
                EXEC CICS RETURN
                          TRANSID('HCM1')
                          IMMEDIATE
                END-EXEC
             WHEN '5'
                EXEC CICS RETURN
                          TRANSID('HCVA')
                          IMMEDIATE
                END-EXEC
             WHEN '6'
                EXEC CICS RETURN
                          TRANSID('HCV1')
                          IMMEDIATE
                END-EXEC
             WHEN '7'
                EXEC CICS RETURN
                          TRANSID('HCTA')
                          IMMEDIATE
                END-EXEC
             WHEN '8'
                EXEC CICS RETURN
                          TRANSID('HCT1')
                          IMMEDIATE
                END-EXEC
             WHEN OTHER
                 Move 'Please enter a valid option, or PF3 to exit'
                   To  HCZMSGO
                 Move -1 To HCZINPUTL
                 EXEC CICS SEND MAP ('HCZMENU')
                           FROM(HCZMENUO)
                           MAPSET ('HCMAPS')
                           CURSOR
                 END-EXEC
                 GO TO ENDIT-STARTIT
           END-EVALUATE.
           EXEC CICS RETURN
           END-EXEC.
       ENDIT-STARTIT.
           EXEC CICS RETURN
                TRANSID('HCAZ')
                COMMAREA(COMM-AREA)
                END-EXEC.
       ENDIT.
           EXEC CICS SEND TEXT
                     FROM(MSGEND)
                     LENGTH(LENGTH OF MSGEND)
                     ERASE
                     FREEKB
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       CLEARIT.
           Initialize HCZMENUI.
           EXEC CICS SEND MAP ('HCZMENU')
                     MAPSET ('HCMAPS')
                     MAPONLY
           END-EXEC
           EXEC CICS RETURN
                TRANSID('HCAZ')
                COMMAREA(COMM-AREA)
                END-EXEC.[/INST]{
  "id": "BR-002",
  "description": "When the user enters an invalid option, the program displays an error message and resets the input field.",
  "condition": "HCZINPUTI NOT IN ['1', '2', '3', '4', '5', '6', '7', '8']",
  "output": {
    "error message": "Please enter a valid option, or PF3 to exit",
    "reset input field": "Move -1 To HCZINPUTL"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCIMDB01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCIMDB01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADERTRAILER-LEN  PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
           03 WS-COUNTER               PIC S9(4)      VALUE +0.
       01  DB2-IN.
           03 DB2-MEDICATION-ID     PIC S9(9) COMP.
           03 DB2-PATIENT-ID        PIC X(10).
           03 DB2-DRUG-NAME         PIC X(50).
           03 DB2-STRENGTH          PIC X(20).
           03 DB2-AMOUNT            PIC S9(4) COMP.
           03 DB2-ROUTE             PIC X(20).
           03 DB2-FREQUENCY         PIC X(20).
           03 DB2-IDENTIFIER        PIC X(20).
           03 DB2-BIOMED-TYPE       PIC X(2).
       COPY HCERRSWS.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE HCCMARE2
           END-EXEC.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADERTRAILER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           MOVE CA-PATIENT-ID TO DB2-PATIENT-ID
           MOVE CA-PATIENT-ID TO EM-PATNUM
           EXEC SQL
               DECLARE c CURSOR FOR
               SELECT MEDICATIONID,
                      DRUGNAME,
                      STRENGTH,
                      AMOUNT,
                      ROUTE,
                      FREQUENCY,
                      IDENTIFIER,
                      TYPE
               FROM MEDICATION
               WHERE PATIENTID = :DB2-PATIENT-ID
           END-EXEC
           PERFORM OPEN-CURSOR.
           PERFORM GET-MEDICATION-INFO
             UNTIL SQLCODE NOT EQUAL 0
                OR ws-counter EQUAL 50.
           EXEC SQL CLOSE c END-EXEC.
       MAINLINE-END.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       OPEN-CURSOR.
            EXEC SQL OPEN c END-EXEC.
            EXEC SQL
                 FETCH c
                 INTO :DB2-MEDICATION-ID,
                      :DB2-DRUG-NAME,
                      :DB2-STRENGTH,
                      :DB2-AMOUNT,
                      :DB2-ROUTE,
                      :DB2-FREQUENCY,
                      :DB2-IDENTIFIER,
                      :DB2-BIOMED-TYPE
            END-EXEC.
           Evaluate SQLCODE
             When 0
               MOVE '00' TO CA-RETURN-CODE
               PERFORM LOAD-COMMAREA
             When 100
               MOVE '01' TO CA-RETURN-CODE
             When -913
               MOVE '01' TO CA-RETURN-CODE
             When Other
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
           END-Evaluate.
           EXIT.
       GET-MEDICATION-INFO.
            EXEC SQL
                FETCH c
                INTO :DB2-MEDICATION-ID,
                      :DB2-DRUG-NAME,
                      :DB2-STRENGTH,
                      :DB2-AMOUNT,
                      :DB2-ROUTE,
                      :DB2-FREQUENCY,
                      :DB2-IDENTIFIER,
                      :DB2-BIOMED-TYPE
           END-EXEC.
           Evaluate SQLCODE
             When 0
               MOVE '00' TO CA-RETURN-CODE
               PERFORM LOAD-COMMAREA
             When 100
               IF ws-counter > 0
                  MOVE '00' TO CA-RETURN-CODE
               ELSE
                  MOVE '01' TO CA-RETURN-CODE
               END-IF
             When -913
               MOVE '01' TO CA-RETURN-CODE
             When Other
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
           END-Evaluate.
           EXIT.
       LOAD-COMMAREA.
           ADD 1 to ws-counter.
           MOVE DB2-MEDICATION-ID, TO CA-MEDICATION-ID
                                   OF CA-MEDICATIONS (ws-counter)
           MOVE DB2-DRUG-NAME      TO CA-DRUG-NAME
                                   OF CA-MEDICATIONS (ws-counter)
           MOVE DB2-STRENGTH       TO CA-STRENGTH
                                   OF CA-MEDICATIONS (ws-counter)
           MOVE DB2-AMOUNT         TO CA-AMOUNT
                                   OF CA-MEDICATIONS (ws-counter)
           MOVE DB2-ROUTE          TO CA-ROUTE
                                   OF CA-MEDICATIONS (ws-counter)
           MOVE DB2-FREQUENCY      TO CA-FREQUENCY
                                   OF CA-MEDICATIONS (ws-counter)
           MOVE DB2-IDENTIFIER     TO CA-IDENTIFIER
                                   OF CA-MEDICATIONS (ws-counter)
           MOVE DB2-BIOMED-TYPE    TO CA-TYPE
                                   OF CA-MEDICATIONS (ws-counter)
           MOVE ws-counter to CA-NUM-MEDICATIONS.
           EXIT.
       COPY HCERRSPD.[/INST]{
  "id": "BR-001",
  "description": "Commarea must be present",
  "condition": "EIBCALEN IS EQUAL TO ZERO",
  "output": {
    "not present": "NO COMMAREA RECEIVED"
  }
}
{
  "id": "BR-002",
  "description": "Commarea must be valid",
  "condition": "EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN",
  "output": {}
}
{
  "id": "BR-003",
  "description": "Maximum of 50 records in a result set",
  "condition": "WS-COUNTER EQUAL 50",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCIPDB01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCIPDB01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       COPY HCERRSWS.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADERTRAILER-LEN  PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  DB2-IN.
           03 DB2-PATIENT-ID           PIC S9(9) COMP.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE HCCMAREA
           END-EXEC.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADERTRAILER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           MOVE CA-PATIENT-ID TO DB2-PATIENT-ID
           MOVE CA-PATIENT-ID TO EM-PATNUM
           PERFORM GET-PATIENT-INFO.
       MAINLINE-END.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       GET-PATIENT-INFO.
           EXEC SQL
               SELECT FIRSTNAME,
                      LASTNAME,
                      DATEOFBIRTH,
                      insCardNumber,
                      ADDRESS,
                      CITY,
                      POSTCODE,
                      PHONEMOBILE,
                      EMAILADDRESS,
                      USERNAME
               INTO  :CA-FIRST-NAME,
                     :CA-LAST-NAME,
                     :CA-DOB,
                     :CA-INS-CARD-NUM,
                     :CA-ADDRESS,
                     :CA-CITY,
                     :CA-POSTCODE,
                     :CA-PHONE-MOBILE,
                     :CA-EMAIL-ADDRESS,
                     :CA-USERID
               FROM PATIENT
               WHERE PATIENTID = :DB2-PATIENT-ID
               END-EXEC.
           Evaluate SQLCODE
             When 0
               MOVE '00' TO CA-RETURN-CODE
             When 100
               MOVE '01' TO CA-RETURN-CODE
             When -913
               MOVE '01' TO CA-RETURN-CODE
             When Other
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
           END-Evaluate.
           EXIT.
       COPY HCERRSPD.[/INST]{
  "id": "BR-001",
  "description": "A commarea received from a CICS caller MUST have a minimum length.",
  "condition": "EIBCALEN < WS-REQUIRED-CA-LEN",
  "output": {
    "success": "00",
    "missing_commarea": "98"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCITDB01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCITDB01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADERTRAILER-LEN  PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  DB2-IN.
           03 DB2-PATIENT-ID           PIC X(10).
       COPY HCERRSWS.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE HCCMAREA
           END-EXEC.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADERTRAILER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           MOVE CA-PATIENT-ID TO DB2-PATIENT-ID
           MOVE CA-PATIENT-ID TO EM-PATNUM
           PERFORM GET-THRESHOLD-INFO.
       MAINLINE-END.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       GET-THRESHOLD-INFO.
           display 'in get threshold info'
           display DB2-PATIENT-ID
           EXEC SQL
               SELECT HEARTRATE,
                      BLOODPRESSURE
               INTO  :CA-HR-THRESHOLD,
                     :CA-BP-THRESHOLD
               FROM THRESHOLD
               WHERE PATIENTID = :DB2-PATIENT-ID
               END-EXEC.
           MOVE SPACES to CA-MS-THRESHOLD
           display sqlcode
           Evaluate SQLCODE
             When 0
               MOVE '00' TO CA-RETURN-CODE
             When 100
               MOVE '01' TO CA-RETURN-CODE
             When -913
               MOVE '01' TO CA-RETURN-CODE
             When Other
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
           END-Evaluate.
           EXIT.
       COPY HCERRSPD.[/INST]{
  "id": "BR-002",
  "description": "The commarea address must be set to the DFHCOMMAREA data in order to access the values within it.",
  "condition": "WS-ADDR-DFHCOMMAREA SET TO ADDRESS OF DFHCOMMAREA",
  "output": {
    "success": "Commarea address is set to DFHCOMMAREA data.",
    "error": "Commarea address is not set to DFHCOMMAREA data."
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCIVDB01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCIVDB01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       COPY HCERRSWS.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADERTRAILER-LEN  PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  DB2-IN.
           03 DB2-PATIENT-ID           PIC S9(9) COMP.
           03 DB2-TIMESTAMP            PIC X(26).
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE HCCMAREA
           END-EXEC.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADERTRAILER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           MOVE CA-PATIENT-ID TO DB2-PATIENT-ID
           MOVE CA-PATIENT-ID TO EM-PATNUM
           MOVE CA-VISIT-DATE   TO DB2-TIMESTAMP(1:10)
           MOVE SPACE           TO DB2-TIMESTAMP (11:1)
           IF CA-VISIT-TIME(10:) EQUAL SPACE
              MOVE '.0' TO CA-VISIT-TIME(9:2)
           END-IF
           MOVE CA-VISIT-TIME   TO DB2-TIMESTAMP(12:10)
           MOVE '00000'         TO DB2-TIMESTAMP(22:5)
           PERFORM GET-BLOODPRESSURE.
           PERFORM GET-HEARTRATE.
       MAINLINE-END.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       GET-BLOODPRESSURE.
           EXEC SQL
               SELECT BLOODPRESSURE
               INTO  :CA-BLOOD-PRESSURE
               FROM BLOODPRESSURE
               WHERE PATIENTID = :DB2-PATIENT-ID AND
                     BPDATETIME = :DB2-TIMESTAMP
               END-EXEC.
           Evaluate SQLCODE
             When 0
               MOVE '00' TO CA-RETURN-CODE
             When 100
               MOVE '01' TO CA-RETURN-CODE
             When -913
               MOVE '01' TO CA-RETURN-CODE
             When Other
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
           END-Evaluate.
           EXIT.
       GET-HEARTRATE.
           EXEC SQL
               SELECT HEARTRATE
               INTO  :CA-HEART-RATE
               FROM HEARTRATE
               WHERE PATIENTID = :DB2-PATIENT-ID AND
                     HRDATETIME = :DB2-TIMESTAMP
               END-EXEC.
           Evaluate SQLCODE
             When 0
               MOVE '00' TO CA-RETURN-CODE
             When 100
               MOVE '01' TO CA-RETURN-CODE
             When -913
               MOVE '01' TO CA-RETURN-CODE
             When Other
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
           END-Evaluate.
           EXIT.
       COPY HCERRSPD.[/INST]{
  "id": "BR-001",
  "description": "The program expects a comma area (DFHCOMMAREA) to be passed to it by the calling program.",
  "condition": "EIBCALEN IS EQUAL TO ZERO",
  "output": {
    "error": "' NO COMMAREA RECEIVED' TO EM-VARIABLE"
  },
  "severity": "High"
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCM1BI01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCM1BI01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01 HCIMDB01                  PIC x(8) Value 'HCIMDB01'.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADERTRAILER-LEN  PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
           03 WS-COUNTER               PIC S9(4)      VALUE +0.
       01  WS-Resp                     PIC S9(8) Comp.
       COPY HCERRSWS.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
             COPY HCCMARE2.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADERTRAILER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           MOVE CA-PATIENT-ID TO EM-PATNUM
           PERFORM GET-MEDICATIONS.
           IF CA-NUM-MEDICATIONS > 0
              MOVE ZERO To ws-counter
              PERFORM CA-NUM-MEDICATIONS TIMES
               ADD +1 to ws-counter
               EVALUATE CA-FREQUENCY(ws-counter)
                  WHEN 1
                    MOVE 'every 24 hours' TO  CA-FREQUENCY(ws-counter)
                  WHEN 2
                    MOVE 'every 12 hours' TO  CA-FREQUENCY(ws-counter)
                  WHEN 3
                    MOVE 'every 8 hours' TO  CA-FREQUENCY(ws-counter)
                  WHEN 4
                    MOVE 'every 6 hours' TO  CA-FREQUENCY(ws-counter)
               END-EVALUATE
              END-PERFORM.
       MAINLINE-END.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       GET-MEDICATIONS.
             EXEC CICS LINK Program(HCIMDB01)
                 Commarea(DFHCOMMAREA)
                 LENGTH(LENGTH OF DFHCOMMAREA)
             END-EXEC.
           EXIT.
       COPY HCERRSPD.[/INST]{
  "id": "BR-001",
  "description": "The frequency of a medication must be one of the following: '\\n'1 - every 24 hours, 2 - every 12 hours, 3 - every 8 hours, 4 - every 6 hours.",
  "condition": "CA-FREQUENCY = 1 || CA-FREQUENCY = 2 || CA-FREQUENCY = 3 || CA-FREQUENCY = 4",
  "output": {
    "valid": {
      "1": "every 24 hours",
      "2": "every 12 hours",
      "3": "every 8 hours",
      "4": "every 6 hours"
    }
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCM1PL01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 MSGEND                       PIC X(24) VALUE
                                        'Transaction ended      '.
       COPY HCMAPS.
       01 COMM-AREA.
       COPY HCCMARE2.
       01 PATIENT-COMM-AREA.
           03 PCA-REQUEST-ID            PIC X(6).
           03 PCA-RETURN-CODE           PIC 9(2).
           03 PCA-PATIENT-ID            PIC 9(10).
           03 PCA-REQUEST-SPECIFIC      PIC X(32482).
           03 CA-PATIENT-REQUEST REDEFINES PCA-REQUEST-SPECIFIC.
              05 CA-INS-CARD-NUM       PIC X(10).
              05 CA-FIRST-NAME         PIC X(10).
              05 CA-LAST-NAME          PIC X(20).
              05 CA-DOB                PIC X(10).
              05 CA-ADDRESS            PIC X(20).
              05 CA-CITY               PIC X(20).
              05 CA-POSTCODE           PIC X(10).
              05 CA-PHONE-MOBILE       PIC X(20).
              05 CA-EMAIL-ADDRESS      PIC X(50).
              05 CA-USERID             PIC X(10).
              05 CA-ADDITIONAL-DATA    PIC X(32302).
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           IF EIBCALEN > 0
              GO TO A-GAIN.
           Initialize HCM1MAPI.
           Initialize HCM1MAPO.
           Initialize PATIENT-COMM-AREA.
           Move LOW-VALUES To HCM1CNOI.
           Move SPACES to CA-REQUEST-ID.
           Move zeroes to CA-RETURN-CODE.
           Move zeroes to CA-PATIENT-ID.
           Move zeroes to CA-NUM-MEDICATIONS.
           EXEC CICS SEND MAP ('HCM1MAP')
                     MAPSET ('HCMAPS')
                     ERASE
                     END-EXEC.
       A-GAIN.
           EXEC CICS HANDLE AID
                     CLEAR(CLEARIT)
                     PF3(ENDIT)
                     PF12(CANCELIT)
                     PF7(NOT-IMPLEMENTED)
                     PF8(NOT-IMPLEMENTED)
                     END-EXEC.
           EXEC CICS HANDLE CONDITION
                     MAPFAIL(ENDIT)
                     END-EXEC.
           EXEC CICS RECEIVE MAP('HCM1MAP')
                     INTO(HCM1MAPI) ASIS TERMINAL
                     MAPSET('HCMAPS') END-EXEC.
           PERFORM GET-PATIENT
           Move '01IMED'   To CA-REQUEST-ID
           Move HCM1CNOI   To CA-PATIENT-ID
           Move 0          To CA-NUM-MEDICATIONS
           EXEC CICS LINK PROGRAM('HCM1BI01')
                     COMMAREA(COMM-AREA)
                     LENGTH(LENGTH OF COMM-AREA)
           END-EXEC
           IF CA-NUM-MEDICATIONS > 0
              MOVE CA-DRUG-NAME OF CA-MEDICATIONS (1)
                TO HCM1DNA1O
              MOVE CA-STRENGTH OF CA-MEDICATIONS (1)
                TO HCM1DST1O
              MOVE CA-AMOUNT OF CA-MEDICATIONS (1)
                TO HCM1DAM1O
              MOVE CA-ROUTE OF CA-MEDICATIONS (1)
                TO HCM1DRO1O
              MOVE CA-FREQUENCY OF CA-MEDICATIONS (1)
                TO HCM1DFR1O
           END-IF
           IF CA-NUM-MEDICATIONS > 1
              MOVE CA-DRUG-NAME OF CA-MEDICATIONS (2)
                TO HCM1DNA2O
              MOVE CA-STRENGTH OF CA-MEDICATIONS (2)
                TO HCM1DST2O
              MOVE CA-AMOUNT OF CA-MEDICATIONS (2)
                TO HCM1DAM2O
              MOVE CA-ROUTE OF CA-MEDICATIONS (2)
                TO HCM1DRO2O
              MOVE CA-FREQUENCY OF CA-MEDICATIONS (2)
                TO HCM1DFR2O
           END-IF
           IF CA-NUM-MEDICATIONS > 2
              MOVE CA-DRUG-NAME OF CA-MEDICATIONS (3)
                TO HCM1DNA3O
              MOVE CA-STRENGTH OF CA-MEDICATIONS (3)
                TO HCM1DST3O
              MOVE CA-AMOUNT OF CA-MEDICATIONS (3)
                TO HCM1DAM3O
              MOVE CA-ROUTE OF CA-MEDICATIONS (3)
                TO HCM1DRO3O
              MOVE CA-FREQUENCY OF CA-MEDICATIONS (3)
                TO HCM1DFR3O
           END-IF
           IF CA-RETURN-CODE > 0
             GO TO NO-MED-DATA
           END-IF
           EXEC CICS SEND MAP ('HCM1MAP')
                     FROM(HCM1MAPO)
                     MAPSET ('HCMAPS')
           END-EXEC
           GO TO ENDIT-STARTIT
           EXEC CICS RETURN
           END-EXEC.
       ENDIT-STARTIT.
           Move SPACES to CA-REQUEST-ID.
           Move zeroes to CA-RETURN-CODE.
           Move zeroes to CA-PATIENT-ID.
           Move zeroes to CA-NUM-MEDICATIONS.
           EXEC CICS RETURN
                TRANSID('HCM1')
                COMMAREA(COMM-AREA)
                END-EXEC.
       ENDIT.
           EXEC CICS SEND TEXT
                     FROM(MSGEND)
                     LENGTH(LENGTH OF MSGEND)
                     ERASE
                     FREEKB
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       GET-PATIENT.
           Move '01IPAT'   To PCA-REQUEST-ID
           Move HCM1CNOI   To PCA-PATIENT-ID
           EXEC CICS LINK PROGRAM('HCP1BI01')
                     COMMAREA(PATIENT-COMM-AREA)
                     LENGTH(32500)
           END-EXEC
           IF PCA-RETURN-CODE > 0
              GO TO NO-PATIENT-DATA
           END-IF
           Move CA-FIRST-NAME to HCM1FNAI
           Move CA-LAST-NAME  to HCM1LNAI.
       CLEARIT.
           Initialize HCM1MAPI.
           EXEC CICS SEND MAP ('HCM1MAP')
                     MAPSET ('HCMAPS')
                     MAPONLY
           END-EXEC
           Move SPACES to CA-REQUEST-ID.
           Move zeroes to CA-RETURN-CODE.
           Move zeroes to CA-PATIENT-ID.
           Move zeroes to CA-NUM-MEDICATIONS.
           EXEC CICS RETURN
                TRANSID('HCM1')
                COMMAREA(COMM-AREA)
                END-EXEC.
       CANCELIT.
           EXEC CICS RETURN
                TRANSID('HCAZ')
                IMMEDIATE
                END-EXEC.
       NOT-IMPLEMENTED.
           Move 'That feature has not been implemented yet.'
                To  HCM1MSGO
           Go To ERROR-OUT.
       NO-PATIENT-DATA.
           Move 'No patient data was returned.'  To  HCM1MSGO
           Go To ERROR-OUT.
       NO-MED-DATA.
           Move 'No medication data was returned.' To  HCM1MSGO
           Go To ERROR-OUT.
       ERROR-OUT.
           EXEC CICS SEND MAP ('HCM1MAP')
                     FROM(HCM1MAPO)
                     MAPSET ('HCMAPS')
           END-EXEC.
           Initialize HCM1MAPI.
           Initialize HCM1MAPO.
           Initialize PATIENT-COMM-AREA.
           GO TO ENDIT-STARTIT.[/INST]{
  "id": "BR-001",
  "description": "When the number of medication is greater than 0, the program will show the first drug name, strength, amount, route and frequency.",
  "condition": "when CA-NUM-MEDICATIONS > 0",
  "output": {
    "drug-name": "HCM1DNA1O",
    "drug-strength": "HCM1DST1O",
    "drug-amount": "HCM1DAM1O",
    "drug-route": "HCM1DRO1O",
    "drug-frequency": "HCM1DFR1O"
  }
}
{
  "id": "BR-002",
  "description": "When the number of medication is greater than 1, the program will show the second drug name, strength, amount, route and frequency.",
  "condition": "when CA-NUM-MEDICATIONS > 1",
  "output": {
    "drug-name": "HCM1DNA2O",
    "drug-strength": "HCM1DST2O",
    "drug-amount": "HCM1DAM2O",
    "drug-route": "HCM1DRO2O",
    "drug-frequency": "HCM1DFR2O"
  }
}
{
  "id": "BR-003",
  "description": "When the number of medication is greater than 2, the program will show the third drug name, strength, amount, route and frequency.",
  "condition": "when CA-NUM-MEDICATIONS > 2",
  "output": {
    "drug-name": "HCM1DNA3O",
    "drug-strength": "HCM1DST3O",
    "drug-amount": "HCM1DAM3O",
    "drug-route": "HCM1DRO3O",
    "drug-frequency": "HCM1DFR3O"
  }
}
{
  "id": "BR-004",
  "description": "When no patient data is returned, the program will display a message 'No patient data was returned.'",
  "condition": "when PCA-RETURN-CODE > 0",
  "output": {
    "message": "'No patient data was returned.'"
  }
}
{
  "id": "BR-005",
  "description": "When no medication data is returned, the program will display a message 'No medication data was returned.'",
  "condition": "when CA-RETURN-CODE > 0",
  "output": {
    "message": "'No medication data was returned.'"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCMABA01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCMABA01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       COPY HCERRSWS.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       77  HCMADB01                    PIC X(8)       VALUE 'HCMADB01'.
       77  HCMADB02                    PIC X(8)       VALUE 'HCMADB02'.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
             COPY HCCMAREA.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           PERFORM INSERT-MEDICATION.
           If CA-RETURN-CODE > 0
             EXEC CICS RETURN END-EXEC
           ELSE
             PERFORM INSERT-PRESCRIPTION
           End-if.
       MAINLINE-END.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       INSERT-MEDICATION.
           EXEC CICS LINK Program(HCMADB01)
                Commarea(DFHCOMMAREA)
                LENGTH(32500)
           END-EXEC.
           EXIT.
       INSERT-PRESCRIPTION.
           EXEC CICS LINK Program(HCMADB02)
                Commarea(DFHCOMMAREA)
                LENGTH(32500)
           END-EXEC.
           EXIT.
       COPY HCERRSPD.[/INST]{
  "id": "BR-001",
  "description": "The length of the commarea must be greater than or equal to the required length.",
  "condition": "EIBCALEN < WS-REQUIRED-CA-LEN",
  "output": {
    "true": "Move 98 to CA-RETURN-CODE and return"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCMADB01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCMADB01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-RESP                   PIC S9(8) COMP.
       COPY HCERRSWS.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  DB2-OUT.
           03 DB2-MEDICATION-ID-INT    PIC S9(9) COMP.
           03 DB2-PATIENT-ID           PIC S9(9) COMP.
           03 DB2-AMOUNT            PIC S9(4) COMP.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE HCCMAREA
           END-EXEC.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           INITIALIZE DB2-OUT.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           PERFORM Obtain-Patient-Id.
           PERFORM INSERT-MEDICATION.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       Obtain-Patient-Id.
           MOVE CA-PATIENT-ID TO DB2-PATIENT-ID.
           MOVE CA-AMOUNT TO DB2-AMOUNT.
       INSERT-MEDICATION.
           MOVE ' INSERT MEDICATION' TO EM-SQLREQ
             EXEC SQL
               INSERT INTO MEDICATION
                         ( MEDICATIONID,
                           PATIENTID,
                           DRUGNAME,
                           STRENGTH,
                           AMOUNT,
                           ROUTE,
                           FREQUENCY,
                           IDENTIFIER,
                           TYPE )
                  VALUES ( DEFAULT,
                           :DB2-PATIENT-ID,
                           :CA-DRUG-NAME,
                           :CA-STRENGTH,
                           :DB2-AMOUNT,
                           :CA-ROUTE,
                           :CA-FREQUENCY,
                           :CA-IDENTIFIER,
                           :CA-BIOMED-TYPE  )
             END-EXEC
             IF SQLCODE NOT EQUAL 0
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
             ELSE
               EXEC SQL
                    SET :DB2-MEDICATION-ID-INT = IDENTITY_VAL_LOCAL()
               END-EXEC
             END-IF
           MOVE DB2-PATIENT-ID TO CA-PATIENT-ID.
           MOVE DB2-MEDICATION-ID-INT TO CA-PRESCRIPTION-ID.
           EXIT.
       COPY HCERRSPD.[/INST]{
  "id": "BR-001",
  "description": "The commarea length in the EIB must be greater than or equal to the required commarea length.",
  "condition": "EIBCALEN >= WS-REQUIRED-CA-LEN",
  "output": {
    "valid": null,
    "invalid": "Abend the program with HCCA"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCMADB02.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCMADB02------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-RESP                   PIC S9(8) COMP.
       COPY HCERRSWS.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  WS-NUM-DATE-FIELDS.
             05  WS-WORKING-DATE          PIC  9(8).
             05  WS-START-NUM-DATE.
                 10  WS-START-NUM-YEAR    PIC  9(4).
                 10  WS-START-NUM-MONTH   PIC  9(2).
                 10  WS-START-NUM-DAY     PIC  9(2).
             05  WS-START-NUM-TIME.
                 10  WS-START-NUM-HOUR    PIC  9(2).
                 10  WS-START-NUM-MINUTE  PIC  9(2).
                 10  WS-START-NUM-SECOND  PIC  9(2).
                 10  WS-START-NUM-MS      PIC  9(2).
             05  WS-END-NUM-DATE.
                 10  WS-END-NUM-YEAR    PIC  9(4).
                 10  WS-END-NUM-MONTH   PIC  9(2).
                 10  WS-END-NUM-DAY     PIC  9(2).
             05  WS-END-NUM-TIME.
                 10  WS-END-NUM-HOUR    PIC  9(2).
                 10  WS-END-NUM-MINUTE  PIC  9(2).
                 10  WS-END-NUM-SECOND  PIC  9(2).
                 10  WS-END-NUM-MS      PIC  9(2).
             05  WS-INTEGER-START-DATE   PIC 9(8).
             05  WS-INTEGER-END-DATE     PIC 9(8).
       01  DB2-OUT.
           03 DB2-PRESCRIPTION-ID-INT  PIC S9(9) COMP.
           03 DB2-PATIENT-ID           PIC S9(9) COMP.
           03 DB2-TIMESTAMP            PIC X(19).
           03 DB2-TAKEN                PIC X.
           EXEC SQL
               INCLUDE SQLCA
           END-EXEC.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
           EXEC SQL
             INCLUDE HCCMAREA
           END-EXEC.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
       REG-100-COMMON-CODE.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           INITIALIZE DB2-OUT.
       REG-120-PROCESS-COMMAREA.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           MOVE CA-PATIENT-ID TO DB2-PATIENT-ID.
           MOVE CA-PRESCRIPTION-ID TO DB2-PRESCRIPTION-ID-INT.
           MOVE 'N' TO DB2-TAKEN.
       REG-150-PROCESS-DATES.
           MOVE CA-START-DATE (1:4) TO  WS-START-NUM-YEAR
           MOVE CA-START-DATE (6:2) TO  WS-START-NUM-MONTH
           MOVE CA-START-DATE (9:2) TO  WS-START-NUM-DAY
           MOVE CA-END-DATE (1:4) TO  WS-END-NUM-YEAR
           MOVE CA-END-DATE (6:2) TO  WS-END-NUM-MONTH
           MOVE CA-END-DATE (9:2) TO  WS-END-NUM-DAY
           MOVE WS-START-NUM-DATE TO  WS-WORKING-DATE
           COMPUTE WS-INTEGER-START-DATE =
                   FUNCTION INTEGER-OF-DATE (WS-WORKING-DATE)
           MOVE WS-END-NUM-DATE TO  WS-WORKING-DATE
           COMPUTE WS-INTEGER-END-DATE =
                   FUNCTION INTEGER-OF-DATE (WS-WORKING-DATE)
           PERFORM UNTIL WS-INTEGER-START-DATE > WS-INTEGER-END-DATE
               COMPUTE WS-WORKING-DATE =
                       FUNCTION DATE-OF-INTEGER (WS-INTEGER-START-DATE)
               MOVE WS-WORKING-DATE TO WS-START-NUM-DATE
               EVALUATE CA-FREQUENCY
                  WHEN 1
                    MOVE 12000000 TO WS-START-NUM-TIME
                    PERFORM INSERT-PRESCRIPTION
                  WHEN 2
                    MOVE 08000000 TO WS-START-NUM-TIME
                    PERFORM INSERT-PRESCRIPTION
                    MOVE 20000000 TO WS-START-NUM-TIME
                    PERFORM INSERT-PRESCRIPTION
                  WHEN 3
                    MOVE 08000000 TO WS-START-NUM-TIME
                    PERFORM INSERT-PRESCRIPTION
                    MOVE 14000000 TO WS-START-NUM-TIME
                    PERFORM INSERT-PRESCRIPTION
                    MOVE 20000000 TO WS-START-NUM-TIME
                    PERFORM INSERT-PRESCRIPTION
                  WHEN 4
                    MOVE 08000000 TO WS-START-NUM-TIME
                    PERFORM INSERT-PRESCRIPTION
                    MOVE 12000000 TO WS-START-NUM-TIME
                    PERFORM INSERT-PRESCRIPTION
                    MOVE 16000000 TO WS-START-NUM-TIME
                    PERFORM INSERT-PRESCRIPTION
                    MOVE 20000000 TO WS-START-NUM-TIME
                    PERFORM INSERT-PRESCRIPTION
               END-EVALUATE
               ADD 1 TO WS-INTEGER-START-DATE
           END-PERFORM.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       FORMAT-TIMESTAMP.
           MOVE WS-START-NUM-YEAR   TO DB2-TIMESTAMP(1:4)
           MOVE '-'                 TO DB2-TIMESTAMP(5:1)
           MOVE WS-START-NUM-MONTH  TO DB2-TIMESTAMP(6:2)
           MOVE '-'                 TO DB2-TIMESTAMP(8:1)
           MOVE WS-START-NUM-DAY    TO DB2-TIMESTAMP(9:2)
           MOVE SPACE               TO DB2-TIMESTAMP (11:1)
           MOVE WS-START-NUM-HOUR   TO DB2-TIMESTAMP(12:2)
           MOVE ':'                 TO DB2-TIMESTAMP(14:1)
           MOVE WS-START-NUM-MINUTE TO DB2-TIMESTAMP(15:2)
           MOVE ':'                 TO DB2-TIMESTAMP(17:1)
           MOVE WS-START-NUM-SECOND TO DB2-TIMESTAMP(18:2)
           EXIT.
       INSERT-PRESCRIPTION.
           MOVE ' INSERT PRESCRIPTION' TO EM-SQLREQ
           PERFORM FORMAT-TIMESTAMP
             EXEC SQL
               INSERT INTO PRESCRIPTION
                         ( PRESCRIPTIONID,
                           PATIENTID,
                           PDATETIME,
                           TAKEN )
                  VALUES ( :DB2-PRESCRIPTION-ID-INT,
                           :DB2-PATIENT-ID,
                           :DB2-TIMESTAMP,
                           :DB2-TAKEN )
             END-EXEC
             IF SQLCODE NOT EQUAL 0
               MOVE '90' TO CA-RETURN-CODE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS RETURN END-EXEC
             END-IF.
           EXIT.
       COPY HCERRSPD.[/INST]{
  "id": "BR-001",
  "description": "A prescription is inserted into the database for each frequency option and time specified in the incoming data.",
  "condition": "CA-FREQUENCY = 1 | CA-FREQUENCY = 2 | CA-FREQUENCY = 3 | CA-FREQUENCY = 4",
  "output": {}
},
{
  "id": "BR-002",
  "description": "The start and end date range must be checked by comparing the integer values.",
  "condition": "WS-INTEGER-START-DATE <= WS-INTEGER-END-DATE",
  "output": {}
},
{
  "id": "BR-003",
  "description": "A timestamp is constructed from a combination of start data and time data.",
  "condition": "DB2-TIMESTAMP(1:4) = WS-START-NUM-YEAR AND DB2-TIMESTAMP(6:2) = WS-START-NUM-MONTH AND DB2-TIMESTAMP(9:2) = WS-START-NUM-DAY AND DB2-TIMESTAMP(12:2) = WS-START-NUM-HOUR AND DB2-TIMESTAMP(15:2) = WS-START-NUM-MINUTE AND DB2-TIMESTAMP(18:2) = WS-START-NUM-SECOND",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCMAPL01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 MSGEND                       PIC X(24) VALUE
                                        'Transaction ended      '.
       COPY HCMAPS.
       01 COMM-AREA.
       COPY HCCMAREA.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           IF EIBCALEN > 0
              GO TO A-GAIN.
           Initialize HCMAMAPI.
           Initialize HCMAMAPO.
           Initialize COMM-AREA.
           Move LOW-VALUES To HCMACNOI.
           Move SPACES to CA-REQUEST-ID.
           Move 0 to CA-RETURN-CODE.
           Move 0 to CA-PATIENT-ID.
           Move -1 To HCMACNOL.
           EXEC CICS SEND MAP ('HCMAMAP')
                     MAPSET ('HCMAPS')
                     ERASE
                     CURSOR
                     END-EXEC.
       A-GAIN.
           EXEC CICS HANDLE AID
                     CLEAR(CLEARIT)
                     PF3(ENDIT)
                     PF12(CANCELIT)
                     END-EXEC.
           EXEC CICS HANDLE CONDITION
                     MAPFAIL(ENDIT)
                     END-EXEC.
           EXEC CICS RECEIVE MAP('HCMAMAP')
                     INTO(HCMAMAPI) ASIS TERMINAL
                     MAPSET('HCMAPS') END-EXEC.
           IF HCMADNAMO EQUAL ZEROS OR SPACES OR LOW-VALUES
              PERFORM GET-PATIENT
              Move 'Enter medication information'
                  To  HCMAMSGO
           ELSE
              Move '01AMED'          To CA-REQUEST-ID
              Move HCMACNOI          To CA-PATIENT-ID
              MOVE HCMADNAMI TO CA-DRUG-NAME
              MOVE HCMADSTRI TO CA-STRENGTH
              MOVE HCMADAMOI TO CA-AMOUNT
              MOVE HCMADROUI TO CA-ROUTE
              MOVE HCMADFREI TO CA-FREQUENCY OF CA-MEDICATION-REQUEST
              MOVE HCMAIDENI TO CA-IDENTIFIER
              MOVE HCMATYPEI TO CA-BIOMED-TYPE
              MOVE HCMASDTAI TO CA-START-DATE
              MOVE HCMAEDTAI TO CA-END-DATE
              EXEC CICS LINK PROGRAM('HCMABA01')
                        COMMAREA(COMM-AREA)
                        LENGTH(32500)
              END-EXEC
              IF CA-RETURN-CODE > 0
                 Exec CICS Syncpoint Rollback End-Exec
                 GO TO NO-ADD
              END-IF
              Move 'New medication added'
                  To  HCMAMSGO
           END-IF
           Move -1 To HCMADNAML
           EXEC CICS SEND MAP ('HCMAMAP')
                     FROM(HCMAMAPO)
                     MAPSET ('HCMAPS')
                     CURSOR
           END-EXEC
           GO TO ENDIT-STARTIT
           EXEC CICS RETURN
           END-EXEC.
       ENDIT-STARTIT.
           EXEC CICS RETURN
                TRANSID('HCMA')
                COMMAREA(COMM-AREA)
                END-EXEC.
       ENDIT.
           EXEC CICS SEND TEXT
                     FROM(MSGEND)
                     LENGTH(LENGTH OF MSGEND)
                     ERASE
                     FREEKB
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       CANCELIT.
           EXEC CICS RETURN
                TRANSID('HCAZ')
                IMMEDIATE
                END-EXEC.
       GET-PATIENT.
           Move '01IPAT'   To CA-REQUEST-ID
           Move HCMACNOO   To CA-PATIENT-ID
           EXEC CICS LINK PROGRAM('HCP1BI01')
                     COMMAREA(COMM-AREA)
                     LENGTH(32500)
           END-EXEC
           IF CA-RETURN-CODE > 0
              GO TO NO-PATIENT-DATA
           END-IF
           Move CA-FIRST-NAME to HCMAFNAI
           Move CA-LAST-NAME  to HCMALNAI.
       CLEARIT.
           Initialize HCMAMAPI.
           EXEC CICS SEND MAP ('HCMAMAP')
                     MAPSET ('HCMAPS')
                     MAPONLY
           END-EXEC
           EXEC CICS RETURN
                TRANSID('HCMA')
                COMMAREA(COMM-AREA)
                END-EXEC.
       NO-ADD.
           Evaluate CA-RETURN-CODE
             When 70
               Move 'Patient does not exist'          To  HCMAMSGO
               Go To ERROR-OUT
             When Other
               Move 'Error Adding Medication'        To  HCMAMSGO
               Go To ERROR-OUT
           End-Evaluate.
       NO-UPD.
           Move 'Error Updating Medication'    To  HCMAMSGO
           Go To ERROR-OUT.
       NO-DELETE.
           Move 'Error Deleting Medication'    To  HCMAMSGO
           Go To ERROR-OUT.
       NO-PATIENT-DATA.
           Move 'No patient data was returned.'  To  HCMAMSGO
           Go To ERROR-OUT.
       NO-MED-DATA.
           Move 'No medication data was returned.' To  HCMAMSGO
           Go To ERROR-OUT.
       ERROR-OUT.
           EXEC CICS SEND MAP ('HCMAMAP')
                     FROM(HCMAMAPO)
                     MAPSET ('HCMAPS')
                     CURSOR
           END-EXEC.
           Initialize HCMAMAPI.
           Initialize HCMAMAPO.
           GO TO ENDIT-STARTIT.[/INST]{
    "id": "BR-001",
    "description": "To add a new medication for the patient performing the transaction, enter the medication information and press enter",
    "condition": "HCMADNAMO EQUAL ZEROS OR SPACES OR LOW-VALUES",
    "output": {
        "msg": "Enter medication information"
    }
},
{
    "id": "BR-002",
    "description": "If a medication already exists for the patient performing the transaction, the medication will be updated",
    "condition": "HCMADNAMO NOT EQUAL ZEROS OR SPACES OR LOW-VALUES",
    "output": {
        "action": "update"
    }
},
{
    "id": "BR-003",
    "description": "If the patient does not exist, an error message will be displayed and the transaction will be rolled back",
    "condition": "CA-RETURN-CODE > 0",
    "output": {
        "msg": "Patient does not exist"
    }
},
{
    "id": "BR-004",
    "description": "If an error occurs while adding a medication, an error message will be displayed and the transaction will be rolled back",
    "condition": "CA-RETURN-CODE > 0",
    "output": {
        "msg": "Error Adding Medication"
    }
},
{
    "id": "BR-005",
    "description": "If an error occurs while updating a medication, an error message will be displayed",
    "condition": "CA-RETURN-CODE > 0",
    "output": {
        "msg": "Error Updating Medication"
    }
},
{
    "id": "BR-006",
    "description": "If an error occurs while deleting a medication, an error message will be displayed",
    "condition": "CA-RETURN-CODE > 0",
    "output": {
        "msg": "Error Deleting Medication"
    }
},
{
    "id": "BR-007",
    "description": "If no patient data is returned, an error message will be displayed",
    "condition": "CA-RETURN-CODE > 0",
    "output": {
        "msg": "No patient data was returned."
    }
},
{
    "id": "BR-008",
    "description": "If no medication data is returned, an error message will be displayed",
    "condition": "CA-RETURN-CODE > 0",
    "output": {
        "msg": "No medication data was returned."
    }
},
{
    "id": "BR-009",
    "description": "Upon successful completion of the transaction, the transaction will end and a message will be displayed",
    "condition": "CA-RETURN-CODE = 0",
    "output": {
        "msg": "Transaction ended"
    }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCP1BA01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCP1BA01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       77  HCAPDB01                    PIC X(8)       VALUE 'HCAPDB01'.
       77  HCAPDB02                    PIC X(8)       VALUE 'HCAPDB02'.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       COPY HCERRSWS.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
             COPY HCCMAREA.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           PERFORM INSERT-PATIENT.
           If CA-RETURN-CODE > 0
             EXEC CICS RETURN END-EXEC
           Else
             PERFORM INSERT-USER
           End-if.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       INSERT-PATIENT.
           EXEC CICS LINK Program(HCAPDB01)
                Commarea(DFHCOMMAREA)
                LENGTH(32500)
           END-EXEC.
           EXIT.
       INSERT-USER.
           EXEC CICS LINK Program(HCAPDB02)
                Commarea(DFHCOMMAREA)
                LENGTH(32500)
           END-EXEC.
           EXIT.
       COPY HCERRSPD.[/INST]{
  "id": "BR-002",  "description": "The length of the DFHCOMMAREA must not be less than the WS-REQUIRED-CA-LEN, otherwise CA-RETURN-CODE will be set to 98.",
  "condition": "EIBCALEN < WS-REQUIRED-CA-LEN",
  "output": {
    "success": "CA-RETURN-CODE = 00",
    "error": "CA-RETURN-CODE = 98"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCP1BI01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCP1BI01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       77 HCIPDB01                  PIC x(8) Value 'HCIPDB01'.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADERTRAILER-LEN  PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  WS-Resp                     PIC S9(8) Comp.
       COPY HCERRSWS.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
             COPY HCCMAREA.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADERTRAILER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           MOVE CA-PATIENT-ID TO EM-PATNUM
           PERFORM GET-PATIENT-INFO.
       MAINLINE-END.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       GET-PATIENT-INFO.
             EXEC CICS LINK Program(HCIPDB01)
                 Commarea(DFHCOMMAREA)
                 LENGTH(32500)
             END-EXEC.
           EXIT.
       COPY HCERRSPD.[/INST]{
  "id": "BR-001",
  "description": "The program requires a commarea to be present in the input.",
  "condition": "EIBCALEN = 0",
  "output": {
    "failure": "' NO COMMAREA RECEIVED' TO EM-VARIABLE"
  }
},
{
  "id": "BR-002",
  "description": "The length of the commarea received must be greater than or equal to the required commarea length.",
  "condition": "EIBCALEN < WS-REQUIRED-CA-LEN",
  "output": {
    "failure": "'98' TO CA-RETURN-CODE"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. LGUCUS01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'LGUCUS01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01  WS-ABSTIME                  PIC S9(8) COMP VALUE +0.
       01  WS-TIME                     PIC X(8)  VALUE SPACES.
       01  WS-DATE                     PIC X(10) VALUE SPACES.
       01  WS-POLICY-LENGTHS.
           03 WS-CUSTOMER-LEN          PIC S9(4) COMP VALUE +72.
           03 WS-POLICY-LEN            PIC S9(4) COMP VALUE +72.
           03 WS-ENDOW-LEN             PIC S9(4) COMP VALUE +52.
           03 WS-HOUSE-LEN             PIC S9(4) COMP VALUE +58.
           03 WS-MOTOR-LEN             PIC S9(4) COMP VALUE +65.
           03 WS-FULL-ENDOW-LEN        PIC S9(4) COMP VALUE +124.
           03 WS-FULL-HOUSE-LEN        PIC S9(4) COMP VALUE +130.
           03 WS-FULL-MOTOR-LEN        PIC S9(4) COMP VALUE +137.
           03 WS-SUMRY-ENDOW-LEN       PIC S9(4) COMP VALUE +25.
       01  ERROR-MSG.
           03 EM-DATE                  PIC X(8)  VALUE SPACES.
           03 FILLER                   PIC X     VALUE SPACES.
           03 EM-TIME                  PIC X(6)  VALUE SPACES.
           03 FILLER                   PIC X(9)  VALUE ' LGUCUS01'.
           03 EM-VARIABLE.
             05 FILLER                 PIC X(6)  VALUE ' CNUM='.
             05 EM-CUSNUM              PIC X(10)  VALUE SPACES.
             05 FILLER                 PIC X(6)  VALUE ' PNUM='.
             05 EM-POLNUM              PIC X(10)  VALUE SPACES.
             05 EM-SQLREQ              PIC X(16) VALUE SPACES.
             05 FILLER                 PIC X(9)  VALUE ' SQLCODE='.
             05 EM-SQLRC               PIC +9(5) USAGE DISPLAY.
       01  CA-ERROR-MSG.
           03 FILLER                   PIC X(9)  VALUE 'COMMAREA='.
           03 CA-DATA                  PIC X(90) VALUE SPACES.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +28.
           03 WS-REQUIRED-CA-LEN       PIC S9(4) COMP VALUE +0.
       01 WS-VARY-FIELD.
          49 WS-VARY-LEN               PIC S9(4) COMP.
          49 WS-VARY-CHAR              PIC X(3900).
       01 LGUCDB01                     PIC X(8) VALUE 'LGUCDB01'.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
             COPY LGCMAREA.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('LGCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE '00' TO CA-NUM-POLICIES
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           MOVE CA-CUSTOMER-NUM TO EM-CUSNUM
           If CA-REQUEST-ID NOT = '01UCUS'
               MOVE '99' TO CA-RETURN-CODE
               GO TO END-PROGRAM
           END-IF.
           PERFORM UPDATE-CUSTOMER-INFO.
       END-PROGRAM.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       UPDATE-CUSTOMER-INFO.
           EXEC CICS LINK Program(LGUCDB01)
                Commarea(DFHCOMMAREA)
                LENGTH(32500)
           END-EXEC.
           EXIT.
       WRITE-ERROR-MESSAGE.
           EXEC CICS ASKTIME ABSTIME(WS-ABSTIME)
           END-EXEC
           EXEC CICS FORMATTIME ABSTIME(WS-ABSTIME)
                     MMDDYYYY(WS-DATE)
                     TIME(WS-TIME)
           END-EXEC
           MOVE WS-DATE TO EM-DATE
           MOVE WS-TIME TO EM-TIME
           EXEC CICS LINK PROGRAM('LGSTSQ')
                     COMMAREA(ERROR-MSG)
                     LENGTH(LENGTH OF ERROR-MSG)
           END-EXEC.
           IF EIBCALEN > 0 THEN
             IF EIBCALEN < 91 THEN
               MOVE DFHCOMMAREA(1:EIBCALEN) TO CA-DATA
               EXEC CICS LINK PROGRAM('LGSTSQ')
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(LENGTH OF CA-ERROR-MSG)
               END-EXEC
             ELSE
               MOVE DFHCOMMAREA(1:90) TO CA-DATA
               EXEC CICS LINK PROGRAM('LGSTSQ')
                         COMMAREA(CA-ERROR-MSG)
                         LENGTH(LENGTH OF CA-ERROR-MSG)
               END-EXEC
             END-IF
           END-IF.
           EXIT.[/INST]{
  "id": "BR-001",
  "description": "If EIBCALEN is equal to zero, no commarea was received and an error message should be written.",
  "condition": "EIBCALEN is equal to ZERO",
  "output": {
    "commarea not received": "MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE\nPERFORM WRITE-ERROR-MESSAGE\nEXEC CICS ABEND ABCODE('LGCA') NODUMP END-EXEC"
  }
},
{
  "id": "BR-002",
  "description": "If the request ID in the commarea is not equal to '01UCUS', set the return code to 99 and go to the end of the program.",
  "condition": "CA-REQUEST-ID NOT = '01UCUS'",
  "output": {
    "invalid request id": "MOVE '99' TO CA-RETURN-CODE\nGO TO END-PROGRAM"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCP1PL01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 INQ-TRANS                    PIC X(4) VALUE 'HCP1'.
       77 ADD-TRANS                    PIC X(4) VALUE 'HCPA'.
       77 MSGEND                       PIC X(24) VALUE
                                        'Transaction ended      '.
       01  WS-RESP                   PIC S9(8) COMP.
        COPY HCMAPS.
        01 COMM-AREA.
        COPY HCCMAREA.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           IF EIBCALEN > 0
              GO TO A-GAIN.
           Initialize HCP1MAPI.
           Initialize HCP1MAPO.
           Initialize COMM-AREA.
           MOVE LOW-VALUES To HCP1PNOO
           MOVE -1 TO HCP1PNOL
           IF EIBTRNID EQUAL ADD-TRANS
              MOVE 0 TO HCP1PNOA
              MOVE -1 TO HCP1FNAL
           END-IF
           PERFORM SETUP-SCREEN.
           EXEC CICS SEND MAP ('HCP1MAP')
                     FROM(HCP1MAPO)
                     MAPSET ('HCMAPS')
                     ERASE
                     CURSOR
                     RESP(WS-RESP)
                     END-EXEC.
       A-GAIN.
           EXEC CICS HANDLE AID
                     CLEAR(CLEARIT)
                     PF3(ENDIT)
                     PF12(CANCELIT)
                     END-EXEC.
           EXEC CICS HANDLE CONDITION
                     MAPFAIL(ENDIT)
                     END-EXEC.
           EXEC CICS RECEIVE MAP('HCP1MAP')
                     INTO(HCP1MAPI) ASIS TERMINAL
                     MAPSET('HCMAPS') END-EXEC.
           IF EIBTRNID EQUAL INQ-TRANS
                 Move '01IPAT'   To CA-REQUEST-ID
                 Move HCP1PNOI   To CA-PATIENT-ID
                 EXEC CICS LINK PROGRAM('HCP1BI01')
                           COMMAREA(COMM-AREA)
                           LENGTH(32500)
                 END-EXEC
                 IF CA-RETURN-CODE > 0
                   GO TO NO-DATA
                 END-IF
                 Move CA-FIRST-NAME to HCP1FNAO
                 Move CA-LAST-NAME  to HCP1LNAO
                 Move CA-DOB        to HCP1DOBO
                 Move CA-ADDRESS    to HCP1ADDRO
                 Move CA-CITY       to HCP1CITYO
                 Move CA-POSTCODE   to HCP1HPCO
                 Move CA-PHONE-MOBILE  to HCP1HP2O
                 Move CA-EMAIL-ADDRESS to HCP1HMOO
                 Move CA-INS-CARD-NUM to HCP1INOO
                 Move CA-USERID     to HCP1UIDO
                 EXEC CICS SEND MAP ('HCP1MAP')
                           FROM(HCP1MAPO)
                           MAPSET ('HCMAPS')
                 END-EXEC
                 GO TO ENDIT-STARTIT
             END-IF.
           IF EIBTRNID EQUAL ADD-TRANS
                 IF HCP1UIDI EQUAL SPACES or LOW-VALUES
                   GO TO USERID-REQUIRED
                 END-IF
                 Move '01APAT'   To CA-REQUEST-ID
                 Move HCP1PNOI   To CA-PATIENT-ID
                 Move HCP1FNAI   To CA-FIRST-NAME
                 Move HCP1LNAI   To CA-LAST-NAME
                 Move HCP1DOBI   To CA-DOB
                 Move HCP1ADDRI  To CA-ADDRESS
                 Move HCP1CITYI  To CA-CITY
                 Move HCP1HPCI   To CA-POSTCODE
                 Move HCP1HP2I   To CA-PHONE-MOBILE
                 Move HCP1HMOI   To CA-EMAIL-ADDRESS
                 Move HCP1INOI   to CA-INS-CARD-NUM
                 Move HCP1UIDI   to CA-USERID
                 Inspect COMM-AREA Replacing All x'00'  by x'40'
                 Move Function UPPER-CASE(CA-POSTCODE)
                      TO CA-POSTCODE
                 EXEC CICS LINK PROGRAM('HCP1BA01')
                           COMMAREA(COMM-AREA)
                           LENGTH(32500)
                 END-EXEC
                 IF CA-RETURN-CODE > 0
                   Exec CICS Syncpoint Rollback End-Exec
                   GO TO NO-ADD
                 END-IF
                 Move CA-PATIENT-ID           To HCP1PNOO
                 Move 'New Patient Inserted'  To  HCP1MSGO
                 PERFORM SETUP-SCREEN
                 EXEC CICS SEND MAP ('HCP1MAP')
                           FROM(HCP1MAPO)
                           MAPSET ('HCMAPS')
                           CURSOR
                 END-EXEC
                 GO TO ENDIT-STARTIT
             END-IF.
           EXEC CICS RETURN
           END-EXEC.
       ENDIT-STARTIT.
           EXEC CICS RETURN
                TRANSID(EIBTRNID)
                COMMAREA(COMM-AREA)
                END-EXEC.
       ENDIT.
           EXEC CICS SEND TEXT
                     FROM(MSGEND)
                     LENGTH(LENGTH OF MSGEND)
                     ERASE
                     FREEKB
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       CLEARIT.
           Initialize HCP1MAPI.
           EXEC CICS SEND MAP ('HCP1MAP')
                     MAPSET ('HCMAPS')
                     MAPONLY
           END-EXEC
           EXEC CICS RETURN
                TRANSID(EIBTRNID)
                COMMAREA(COMM-AREA)
                END-EXEC.
       CANCELIT.
           EXEC CICS RETURN
                TRANSID('HCAZ')
                IMMEDIATE
                END-EXEC.
       SETUP-SCREEN.
           IF EIBTRNID EQUAL INQ-TRANS
              MOVE INQ-TRANS TO HCP1TRNO
              MOVE 'Inquire Patient Information' to HCP1TITO
           ELSE
           IF EIBTRNID EQUAL ADD-TRANS
              MOVE ADD-TRANS TO HCP1TRNO
              MOVE 'Add Patient Information' to HCP1TITO
           END-IF.
       USERID-REQUIRED.
           Move 'User Id is Required'          To  HCP1MSGO.
           Move -1 To HCP1UIDL.
           Go To ERROR-OUT.
       NO-UPD.
           MOVE -1 TO HCP1FNAL
           Move 'Error Updating Patient'          To  HCP1MSGO.
           Go To ERROR-OUT.
       NO-ADD.
           MOVE -1 TO HCP1FNAL
           Move 'Error Adding Patient'            To  HCP1MSGO.
           Go To ERROR-OUT.
       NO-DATA.
           Move SPACES to HCP1FNAO
                          HCP1LNAO
                          HCP1DOBO
                          HCP1ADDRO
                          HCP1CITYO
                          HCP1HPCO
                          HCP1HP2O
                          HCP1HMOO
                          HCP1INOO
                          HCP1UIDO
           MOVE -1 TO HCP1PNOL
           Move 'No data was returned.'            To  HCP1MSGO.
           Go To ERROR-OUT.
       ERROR-OUT.
           PERFORM SETUP-SCREEN.
           EXEC CICS SEND MAP ('HCP1MAP')
                     FROM(HCP1MAPO)
                     MAPSET ('HCMAPS')
                     CURSOR
           END-EXEC.
           Initialize HCP1MAPI.
           Initialize HCP1MAPO.
           Initialize COMM-AREA.
           GO TO ENDIT-STARTIT.[/INST]{
  "id": "BR-002",
  "description": "The user id is required to add a patient.",
  "condition": "HCP1UIDI EQUAL SPACES or LOW-VALUES",
  "output": {
    "required": "User Id is Required"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCPRESTW.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01 JSON-REST-DATA.
        COPY HCPRST01.
        01 HCPAPP-PATIENT-DETAILS.
        COPY HCCMAREA.
       01 DEFAULT-CHANNEL            PIC X(16).
       01  WS-TSQ-FIELDS.
           03  WS-TSQ-NAME           PIC X(8) VALUE 'HCPRESTW'.
           03  WS-TSQ-LEN            PIC S9(4) COMP VALUE +200.
           03  WS-TSQ-DATA           PIC X(200).
       01 WS-RETURN-RESPONSE         PIC X(100).
       01 WS-HTTP-METHOD             PIC X(8).
       01 WS-RESID                   PIC X(100).
       01 WS-RESID2                  PIC X(100).
       77 WS-FIELD1                  PIC X(10).
       77 WS-FIELD2                  PIC X(3).
       77 WS-FIELD3                  PIC X(3).
       77 WS-FIELD4                  PIC X(30).
       77 WS-FIELD5                  PIC X(30).
       77 RESP                       PIC S9(8) COMP-5 SYNC.
       77 RESP2                      PIC S9(8) COMP-5 SYNC.
       77 UNEXPECTED-RESP-ABCODE      PIC X(04) VALUE 'ERRS'.
       77 UNSUPPORTED-METHOD-ABCODE   PIC X(04) VALUE 'UMET'.
       77 METHOD-GET                 PIC X(8) VALUE 'GET     '.
       77 METHOD-PUT                 PIC X(8) VALUE 'PUT     '.
       77 METHOD-POST                PIC X(8) VALUE 'POST    '.
       LINKAGE SECTION.
       PROCEDURE DIVISION.
       MAIN-PROCESSING SECTION.
           PERFORM INITIALISE-TEST.
           PERFORM RETRIEVE-METHOD.
           PERFORM PROCESS-METHOD.
           EXEC CICS RETURN
                     RESP(RESP)
                     RESP2(RESP2)
           END-EXEC.
           IF RESP NOT = DFHRESP(NORMAL)
           THEN
              PERFORM GENERIC-ABEND
           END-IF.
           GOBACK.
       INITIALISE-TEST.
           INITIALIZE HCPAPP-PATIENT-DETAILS
           MOVE ' ' TO WS-RETURN-RESPONSE
           EXEC CICS ASSIGN
                     CHANNEL(DEFAULT-CHANNEL)
                     RESP(RESP)
                     RESP2(RESP2)
           END-EXEC
           IF RESP NOT = DFHRESP(NORMAL)
           THEN
              EXEC CICS ABEND
                     ABCODE('CHAB')
              END-EXEC
           END-IF.
       RETRIEVE-METHOD.
           EXEC CICS GET CONTAINER('DFHHTTPMETHOD')
                         INTO(WS-HTTP-METHOD)
                         RESP(RESP)
                         RESP2(RESP2)
           END-EXEC
           IF RESP NOT = DFHRESP(NORMAL)
           THEN
              EXEC CICS ABEND
                     ABCODE('MEAB')
              END-EXEC
           END-IF.
       PROCESS-METHOD.
           EVALUATE WS-HTTP-METHOD
               WHEN METHOD-GET
                    PERFORM GET-DATA
               WHEN METHOD-PUT
                    PERFORM PUT-DATA
               WHEN METHOD-POST
                    PERFORM POST-DATA
               WHEN OTHER
                    EXEC CICS ABEND
                        ABCODE(UNSUPPORTED-METHOD-ABCODE)
                    END-EXEC
           END-EVALUATE.
       get-data.
           DISPLAY ' '.
           DISPLAY 'Perform GET method.'
           PERFORM GET-RESID
           MOVE '01IPAT'  TO CA-REQUEST-ID
           MOVE WS-FIELD1 TO CA-PATIENT-ID
           EXEC CICS LINK PROGRAM('HCP1BI01')
                     COMMAREA(HCPAPP-PATIENT-DETAILS)
                     LENGTH(32500)
           END-EXEC
           MOVE CA-PATIENT-ID to patient-id
           MOVE CA-FIRST-NAME TO first-name
           MOVE CA-LAST-NAME TO last-name
           MOVE CA-DOB TO date-of-birth
           MOVE CA-POSTCODE TO zipcode
           MOVE CA-PHONE-MOBILE TO cell-number
           MOVE CA-EMAIL-ADDRESS TO email-address
           MOVE CA-INS-CARD-NUM TO insurance-card-number
           MOVE CA-ADDRESS to street-address
           MOVE HCPAPP-PATIENT-DETAILS(1:200) TO WS-TSQ-DATA
           PERFORM WRITE-TSQ
           PERFORM PUT-RESPONSE-ROOT-DATA.
       post-data.
           DISPLAY ' '.
           DISPLAY 'Performing POST method.'
           PERFORM GET-RESID
           PERFORM GET-REQUEST-ROOT-DATA
           MOVE '01APAT'         TO CA-REQUEST-ID
           MOVE patient-id       TO CA-PATIENT-ID
           MOVE first-name       TO CA-FIRST-NAME
           MOVE last-name        TO CA-LAST-NAME
           MOVE date-of-birth    TO CA-DOB
           MOVE street-address   TO CA-ADDRESS
           MOVE zipcode          TO CA-POSTCODE
           MOVE cell-number      TO CA-PHONE-MOBILE
           MOVE email-address    TO CA-EMAIL-ADDRESS
           MOVE insurance-card-number TO CA-INS-CARD-NUM
           EXEC CICS LINK PROGRAM('HCP1BA01')
                     COMMAREA(HCPAPP-PATIENT-DETAILS)
                     LENGTH(32500)
           END-EXEC
           MOVE CA-PATIENT-ID TO patient-id
           STRING WS-FIELD4 patient-id
              DELIMITED BY SPACE
              INTO WS-RETURN-RESPONSE
           EXEC CICS PUT
                     CONTAINER('DFHRESPONSE')
                     CHAR
                     FROM (WS-RETURN-RESPONSE)
                     RESP(RESP)
                     RESP2(RESP2)
           END-EXEC
           IF RESP NOT = DFHRESP(NORMAL)
           THEN
                 EXEC CICS ABEND
                     ABCODE('POSA')
                 END-EXEC
           END-IF
           MOVE HCPAPP-PATIENT-DETAILS(1:200) TO WS-TSQ-DATA
           PERFORM WRITE-TSQ.
       put-data.
           DISPLAY ' '.
           DISPLAY 'Performing PUT method.'
           PERFORM GET-RESID
           PERFORM GET-REQUEST-ROOT-DATA
           MOVE '01UPAT'         TO CA-REQUEST-ID
           MOVE WS-FIELD1        TO CA-PATIENT-ID
           MOVE first-name       TO CA-FIRST-NAME
           MOVE last-name        TO CA-LAST-NAME
           MOVE date-of-birth    TO CA-DOB
           MOVE zipcode          TO CA-POSTCODE
           MOVE cell-number      TO CA-PHONE-MOBILE
           MOVE email-address    TO CA-EMAIL-ADDRESS
           MOVE insurance-card-number TO CA-INS-CARD-NUM
           EXEC CICS LINK PROGRAM('HCP1BU01')
                     COMMAREA(HCPAPP-PATIENT-DETAILS)
                     LENGTH(32500)
           END-EXEC
           MOVE CA-PATIENT-ID TO patient-id
           STRING WS-FIELD4 patient-id
              DELIMITED BY SPACE
              INTO WS-RETURN-RESPONSE
           EXEC CICS PUT
                     CONTAINER('DFHRESPONSE')
                     CHAR
                     FROM (WS-RETURN-RESPONSE)
                     RESP(RESP)
                     RESP2(RESP2)
           END-EXEC
           IF RESP NOT = DFHRESP(NORMAL)
           THEN
                 EXEC CICS ABEND
                     ABCODE('PUTA')
                 END-EXEC
           END-IF
           MOVE HCPAPP-PATIENT-DETAILS(1:200) TO WS-TSQ-DATA
           PERFORM WRITE-TSQ.
       GET-REQUEST-ROOT-DATA.
           EXEC CICS GET CONTAINER('DFHWS-DATA')
                         INTO(JSON-REST-DATA)
                         RESP(RESP)
                         RESP2(RESP2)
           END-EXEC.
           IF RESP NOT = DFHRESP(NORMAL)
           THEN
              PERFORM GENERIC-ABEND
           END-IF.
       PUT-RESPONSE-ROOT-DATA.
           EXEC CICS PUT
                     CONTAINER('DFHWS-DATA')
                     FROM (JSON-REST-DATA)
                     RESP(RESP)
                     RESP2(RESP2)
           END-EXEC.
           IF RESP NOT = DFHRESP(NORMAL)
           THEN
              PERFORM GENERIC-ABEND
           END-IF.
       GET-RESID.
           MOVE ' ' TO WS-RESID
           EXEC CICS GET CONTAINER('DFHWS-URIMAPPATH')
                         INTO(WS-RESID)
                         RESP(RESP)
                         RESP2(RESP2)
           END-EXEC
           IF RESP NOT = DFHRESP(NORMAL) THEN
              DISPLAY 'Cannot get URIMAP container.'
           ELSE
              UNSTRING WS-RESID DELIMITED BY '/'
                  INTO WS-FIELD1, WS-FIELD2, WS-FIELD3
              DISPLAY 'URIMAP in WS-resid is:' WS-RESID
              MOVE WS-RESID TO WS-RESID2
              UNSTRING WS-RESID2 DELIMITED BY '*'
                  INTO WS-FIELD4, WS-FIELD5
           END-IF
           MOVE ' ' TO WS-RESID
           EXEC CICS GET CONTAINER('DFHWS-URI-QUERY')
                         INTO(WS-RESID)
                         RESP(RESP)
                         RESP2(RESP2)
           END-EXEC
           IF RESP NOT = DFHRESP(NORMAL) THEN
              DISPLAY 'Cannot get QUERY container.'
           ELSE
              DISPLAY 'QUERY in WS-RESID is:' WS-RESID
           END-IF
           MOVE ' ' TO WS-RESID
           EXEC CICS GET CONTAINER('DFHWS-URI-RESID')
                         INTO(WS-RESID)
                         RESP(RESP)
                         RESP2(RESP2)
           END-EXEC
           IF RESP NOT = DFHRESP(NORMAL)
           THEN
              EXEC CICS ABEND
                     ABCODE('RESA')
              END-EXEC
           ELSE
               DISPLAY 'RESID container is ' WS-resid
               MOVE ' ' TO WS-FIELD1 WS-FIELD2 WS-FIELD3
               UNSTRING WS-RESID DELIMITED BY '/'
                  INTO WS-FIELD1, WS-FIELD2, WS-FIELD3
               DISPLAY 'After unstring, WS-FIELD1 is: ' WS-FIELD1
           END-IF.
       GENERIC-ABEND.
           EXEC CICS ABEND
                     ABCODE(UNEXPECTED-RESP-ABCODE)
           END-EXEC.
       WRITE-TSQ.
           EXEC CICS WRITEQ TS QUEUE(WS-TSQ-NAME)
                     FROM(WS-TSQ-DATA)
                     RESP(RESP)
                     NOSUSPEND
                     LENGTH(WS-TSQ-LEN)
           END-EXEC.[/INST]{
  "id": "BR-001",
  "description": "The ID of the patient must have a value to perform an action (PUT or POST).",
  "condition": "CA-PATIENT-ID not equal to a blank",
  "output": {
    "valid": "Patient ID is not empty, proceed with the action.",
    "invalid": "Patient ID is empty, the action cannot be performed."
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCT1BA01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCT1BA01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       COPY HCERRSWS.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       77  HCATDB01                    PIC X(8)       VALUE 'HCATDB01'.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
             COPY HCCMAREA.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           PERFORM INSERT-PATIENT-THRESHOLD.
           If CA-RETURN-CODE > 0
             EXEC CICS RETURN END-EXEC
           End-if.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       INSERT-PATIENT-THRESHOLD.
           EXEC CICS LINK Program(HCATDB01)
                Commarea(DFHCOMMAREA)
                LENGTH(32500)
           END-EXEC.
           EXIT.
       COPY HCERRSPD.[/INST]{
  "id": "BR-002",
  "description": "If the length of the received COMMAREA is less than the length of the required COMMAREA, the program returns with a return code of 98.",
  "condition": "EIBCALEN < WS-REQUIRED-CA-LEN",
  "output": {
    "return error": "98"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCT1BI01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCT1BI01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       01 HCITDB01                  PIC x(8) Value 'HCITDB01'.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADERTRAILER-LEN  PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  WS-Resp                     PIC S9(8) Comp.
       COPY HCERRSWS.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
             COPY HCCMAREA.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADERTRAILER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           MOVE CA-PATIENT-ID TO EM-PATNUM
           PERFORM GET-THRESHOLD-INFO.
       MAINLINE-END.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       GET-THRESHOLD-INFO.
             EXEC CICS LINK Program(HCITDB01)
                 Commarea(DFHCOMMAREA)
                 LENGTH(32500)
             END-EXEC.
           EXIT.
       COPY HCERRSPD.[/INST]{
  "id": "BR-001",
  "description": "If the length of the commarea is less than the required length, return an error code of 98.",
  "condition": "EIBCALEN < WS-REQUIRED-CA-LEN",
  "output": {
    "error": "98"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCT1PL01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 INQ-TRANS                    PIC X(4) VALUE 'HCT1'.
       77 ADD-TRANS                    PIC X(4) VALUE 'HCTA'.
       77 MSGEND                       PIC X(24) VALUE
                                        'Transaction ended      '.
       01  WS-RESP                   PIC S9(8) COMP.
        COPY HCMAPS.
        01 COMM-AREA.
        COPY HCCMAREA.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           IF EIBCALEN > 0
              GO TO A-GAIN.
           Initialize HCT1MAPI.
           Initialize HCT1MAPO.
           Initialize COMM-AREA.
           MOVE LOW-VALUES To HCT1PNOO
           MOVE -1 TO HCT1PNOL
           PERFORM SETUP-SCREEN.
           EXEC CICS SEND MAP ('HCT1MAP')
                     FROM(HCT1MAPO)
                     MAPSET ('HCMAPS')
                     ERASE
                     CURSOR
                     RESP(WS-RESP)
                     END-EXEC.
       A-GAIN.
           EXEC CICS HANDLE AID
                     CLEAR(CLEARIT)
                     PF3(ENDIT)
                     PF12(CANCELIT)
                     END-EXEC.
           EXEC CICS HANDLE CONDITION
                     MAPFAIL(ENDIT)
                     END-EXEC.
           EXEC CICS RECEIVE MAP('HCT1MAP')
                     INTO(HCT1MAPI) ASIS TERMINAL
                     MAPSET('HCMAPS') END-EXEC.
           PERFORM GET-PATIENT
           IF EIBTRNID EQUAL INQ-TRANS
                 Move '01ITHR'   To CA-REQUEST-ID
                 Move HCT1PNOI   To CA-PATIENT-ID
                 EXEC CICS LINK PROGRAM('HCT1BI01')
                           COMMAREA(COMM-AREA)
                           LENGTH(32500)
                 END-EXEC
                 IF CA-RETURN-CODE > 0
                   GO TO NO-DATA
                 END-IF
                 Move CA-HR-THRESHOLD  To HCT1HRTHO
                 Move CA-BP-THRESHOLD  To HCT1BPTHO
                 EXEC CICS SEND MAP ('HCT1MAP')
                           FROM(HCT1MAPO)
                           MAPSET ('HCMAPS')
                 END-EXEC
                 GO TO ENDIT-STARTIT
             END-IF.
           IF EIBTRNID EQUAL ADD-TRANS
              IF (HCT1HRTHI EQUAL ZEROS OR SPACES OR LOW-VALUES) OR
                 (HCT1BPTHI EQUAL ZEROS OR SPACES OR LOW-VALUES)
                 Move 'Enter threshold information'
                       To  HCT1MSGO
                 MOVE -1 TO HCT1HRTHL
              ELSE
                 Move '01ATHR'   To CA-REQUEST-ID
                 Move HCT1PNOI   To CA-PATIENT-ID
                 Move HCT1HRTHI  To CA-HR-THRESHOLD
                 Move HCT1BPTHI  To CA-BP-THRESHOLD
                 EXEC CICS LINK PROGRAM('HCT1BA01')
                           COMMAREA(COMM-AREA)
                           LENGTH(32500)
                 END-EXEC
                 IF CA-RETURN-CODE > 0
                   Exec CICS Syncpoint Rollback End-Exec
                   GO TO NO-ADD
                 END-IF
                 Move CA-PATIENT-ID           To HCT1PNOO
                 Move 'New Thresholds added'  To  HCT1MSGO
              END-IF
              PERFORM SETUP-SCREEN
              EXEC CICS SEND MAP ('HCT1MAP')
                        FROM(HCT1MAPO)
                        MAPSET ('HCMAPS')
                        CURSOR
              END-EXEC
              GO TO ENDIT-STARTIT
             END-IF.
           EXEC CICS RETURN
           END-EXEC.
       ENDIT-STARTIT.
           EXEC CICS RETURN
                TRANSID(EIBTRNID)
                COMMAREA(COMM-AREA)
                END-EXEC.
       ENDIT.
           EXEC CICS SEND TEXT
                     FROM(MSGEND)
                     LENGTH(LENGTH OF MSGEND)
                     ERASE
                     FREEKB
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       CLEARIT.
           Initialize HCT1MAPI.
           EXEC CICS SEND MAP ('HCT1MAP')
                     MAPSET ('HCMAPS')
                     MAPONLY
           END-EXEC
           EXEC CICS RETURN
                TRANSID(EIBTRNID)
                COMMAREA(COMM-AREA)
                END-EXEC.
       CANCELIT.
           EXEC CICS RETURN
                TRANSID('HCAZ')
                IMMEDIATE
                END-EXEC.
       SETUP-SCREEN.
           IF EIBTRNID EQUAL INQ-TRANS
              MOVE INQ-TRANS TO HCT1TRNO
              MOVE 'Inquire Threshold Information' to HCT1TITO
           ELSE
           IF EIBTRNID EQUAL ADD-TRANS
              MOVE ADD-TRANS TO HCT1TRNO
              MOVE 'Add Threshold Information' to HCT1TITO
           END-IF.
       GET-PATIENT.
           Move '01IPAT'   To CA-REQUEST-ID
           Move HCT1PNOI   To CA-PATIENT-ID
           EXEC CICS LINK PROGRAM('HCP1BI01')
                     COMMAREA(COMM-AREA)
                     LENGTH(32500)
           END-EXEC
           IF CA-RETURN-CODE > 0
              GO TO NO-PATIENT-DATA
           END-IF
           Move CA-FIRST-NAME to HCT1FNAI
           Move CA-LAST-NAME  to HCT1LNAI.
       NO-UPD.
           MOVE -1 TO HCT1HRTHL
           Move 'Error Updating Threshold'          To  HCT1MSGO.
           Go To ERROR-OUT.
       NO-ADD.
           MOVE -1 TO HCT1HRTHL
           Move 'Error Adding Threshold'            To  HCT1MSGO.
           Go To ERROR-OUT.
       NO-DATA.
           MOVE -1 TO HCT1PNOL
           Move 'No Threshold data was returned.'   To  HCT1MSGO.
           Go To ERROR-OUT.
       NO-PATIENT-DATA.
           Move 'No patient data was returned.'  To  HCT1MSGO
           Go To ERROR-OUT.
       ERROR-OUT.
           PERFORM SETUP-SCREEN.
           EXEC CICS SEND MAP ('HCT1MAP')
                     FROM(HCT1MAPO)
                     MAPSET ('HCMAPS')
                     CURSOR
           END-EXEC.
           Initialize HCT1MAPI.
           Initialize HCT1MAPO.
           Initialize COMM-AREA.
           GO TO ENDIT-STARTIT.[/INST]{
  "id": "BR-001",
  "description": "If the HCT1HRTHI and  HCT1BPTHI are empty, then an error message should be displayed.",
  "condition": "IF (HCT1HRTHI EQUAL ZEROS OR SPACES OR LOW-VALUES) OR\n                 (HCT1BPTHI EQUAL ZEROS OR SPACES OR LOW-VALUES)",
  "output": {
    "false": "Enter threshold information"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCTRESTW.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01 JSON-REST-DATA.
        COPY HCTRST01.
        01 HCPAPP-PATIENT-DETAILS.
        COPY HCCMAREA.
       01 DEFAULT-CHANNEL            PIC X(16).
       01  WS-TSQ-FIELDS.
           03  WS-TSQ-NAME           PIC X(8) VALUE 'HCTRESTW'.
           03  WS-TSQ-LEN            PIC S9(4) COMP VALUE +200.
           03  WS-TSQ-DATA           PIC X(200).
       01 WS-RETURN-RESPONSE         PIC X(100).
       01 WS-HTTP-METHOD             PIC X(8).
       01 WS-RESID                   PIC X(100).
       01 WS-RESID2                  PIC X(100).
       77 WS-FIELD1                  PIC X(10).
       77 WS-FIELD2                  PIC X(3).
       77 WS-FIELD3                  PIC X(3).
       77 WS-FIELD4                  PIC X(30).
       77 WS-FIELD5                  PIC X(30).
       77 RESP                       PIC S9(8) COMP-5 SYNC.
       77 RESP2                      PIC S9(8) COMP-5 SYNC.
       77 UNEXPECTED-RESP-ABCODE      PIC X(04) VALUE 'ERRS'.
       77 UNSUPPORTED-METHOD-ABCODE   PIC X(04) VALUE 'UMET'.
       77 METHOD-GET                 PIC X(8) VALUE 'GET     '.
       77 METHOD-PUT                 PIC X(8) VALUE 'PUT     '.
       77 METHOD-POST                PIC X(8) VALUE 'POST    '.
       LINKAGE SECTION.
       PROCEDURE DIVISION.
       MAIN-PROCESSING SECTION.
           PERFORM INITIALISE-TEST.
           PERFORM RETRIEVE-METHOD.
           PERFORM PROCESS-METHOD.
           EXEC CICS RETURN
                     RESP(RESP)
                     RESP2(RESP2)
           END-EXEC.
           IF RESP NOT = DFHRESP(NORMAL)
           THEN
              PERFORM GENERIC-ABEND
           END-IF.
           GOBACK.
       INITIALISE-TEST.
           INITIALIZE HCPAPP-PATIENT-DETAILS
           MOVE ' ' TO WS-RETURN-RESPONSE
           EXEC CICS ASSIGN
                     CHANNEL(DEFAULT-CHANNEL)
                     RESP(RESP)
                     RESP2(RESP2)
           END-EXEC
           IF RESP NOT = DFHRESP(NORMAL)
           THEN
              EXEC CICS ABEND
                     ABCODE('CHAB')
              END-EXEC
           END-IF.
       RETRIEVE-METHOD.
           EXEC CICS GET CONTAINER('DFHHTTPMETHOD')
                         INTO(WS-HTTP-METHOD)
                         RESP(RESP)
                         RESP2(RESP2)
           END-EXEC
           IF RESP NOT = DFHRESP(NORMAL)
           THEN
              EXEC CICS ABEND
                     ABCODE('MEAB')
              END-EXEC
           END-IF.
       PROCESS-METHOD.
           EVALUATE WS-HTTP-METHOD
               WHEN METHOD-GET
                    PERFORM GET-DATA
               WHEN METHOD-PUT
                    PERFORM PUT-DATA
               WHEN METHOD-POST
                    PERFORM POST-DATA
               WHEN OTHER
                    EXEC CICS ABEND
                        ABCODE(UNSUPPORTED-METHOD-ABCODE)
                    END-EXEC
           END-EVALUATE.
       get-data.
           DISPLAY ' '.
           DISPLAY 'Perform GET method.'
           PERFORM GET-RESID
           MOVE '01ITHR'  TO CA-REQUEST-ID
           MOVE WS-FIELD1 TO CA-PATIENT-ID
           EXEC CICS LINK PROGRAM('HCT1BI01')
                     COMMAREA(HCPAPP-PATIENT-DETAILS)
                     LENGTH(32500)
           END-EXEC
           MOVE CA-PATIENT-ID to patient-id
           MOVE CA-HR-THRESHOLD TO heart-rate-threshold
           MOVE CA-BP-THRESHOLD TO blood-pressure-threshold
           MOVE HCPAPP-PATIENT-DETAILS(1:200) TO WS-TSQ-DATA
           PERFORM WRITE-TSQ
           PERFORM PUT-RESPONSE-ROOT-DATA.
       post-data.
           DISPLAY ' '.
           DISPLAY 'Performing POST method.'
           PERFORM GET-RESID
           PERFORM GET-REQUEST-ROOT-DATA
           MOVE '01ATHR'         TO CA-REQUEST-ID
           MOVE patient-id       TO CA-PATIENT-ID
           MOVE heart-rate-threshold      TO CA-HR-THRESHOLD
           MOVE blood-pressure-threshold  TO CA-BP-THRESHOLD
           EXEC CICS LINK PROGRAM('HCT1BA01')
                     COMMAREA(HCPAPP-PATIENT-DETAILS)
                     LENGTH(32500)
           END-EXEC
           MOVE CA-PATIENT-ID TO patient-id
           STRING WS-FIELD4 patient-id
              DELIMITED BY SPACE
              INTO WS-RETURN-RESPONSE
           EXEC CICS PUT
                     CONTAINER('DFHRESPONSE')
                     CHAR
                     FROM (WS-RETURN-RESPONSE)
                     RESP(RESP)
                     RESP2(RESP2)
           END-EXEC
           IF RESP NOT = DFHRESP(NORMAL)
           THEN
                 EXEC CICS ABEND
                     ABCODE('POSA')
                 END-EXEC
           END-IF
           MOVE HCPAPP-PATIENT-DETAILS(1:200) TO WS-TSQ-DATA
           PERFORM WRITE-TSQ.
       put-data.
           DISPLAY ' '.
           DISPLAY 'Performing PUT method.'
           PERFORM GET-RESID
           PERFORM GET-REQUEST-ROOT-DATA
           MOVE '01UTHR'         TO CA-REQUEST-ID
           MOVE WS-FIELD1        TO CA-PATIENT-ID
           MOVE heart-rate-threshold      TO CA-HR-THRESHOLD
           MOVE blood-pressure-threshold  TO CA-BP-THRESHOLD
           EXEC CICS LINK PROGRAM('HCT1BU01')
                     COMMAREA(HCPAPP-PATIENT-DETAILS)
                     LENGTH(32500)
           END-EXEC
           MOVE CA-PATIENT-ID TO patient-id
           STRING WS-FIELD4 patient-id
              DELIMITED BY SPACE
              INTO WS-RETURN-RESPONSE
           EXEC CICS PUT
                     CONTAINER('DFHRESPONSE')
                     CHAR
                     FROM (WS-RETURN-RESPONSE)
                     RESP(RESP)
                     RESP2(RESP2)
           END-EXEC
           IF RESP NOT = DFHRESP(NORMAL)
           THEN
                 EXEC CICS ABEND
                     ABCODE('PUTA')
                 END-EXEC
           END-IF
           MOVE HCPAPP-PATIENT-DETAILS(1:200) TO WS-TSQ-DATA
           PERFORM WRITE-TSQ.
       GET-REQUEST-ROOT-DATA.
           EXEC CICS GET CONTAINER('DFHWS-DATA')
                         INTO(JSON-REST-DATA)
                         RESP(RESP)
                         RESP2(RESP2)
           END-EXEC.
           IF RESP NOT = DFHRESP(NORMAL)
           THEN
              PERFORM GENERIC-ABEND
           END-IF.
       PUT-RESPONSE-ROOT-DATA.
           EXEC CICS PUT
                     CONTAINER('DFHWS-DATA')
                     FROM (JSON-REST-DATA)
                     RESP(RESP)
                     RESP2(RESP2)
           END-EXEC.
           IF RESP NOT = DFHRESP(NORMAL)
           THEN
              PERFORM GENERIC-ABEND
           END-IF.
       GET-RESID.
           MOVE ' ' TO WS-RESID
           EXEC CICS GET CONTAINER('DFHWS-URIMAPPATH')
                         INTO(WS-RESID)
                         RESP(RESP)
                         RESP2(RESP2)
           END-EXEC
           IF RESP NOT = DFHRESP(NORMAL) THEN
              DISPLAY 'Cannot get URIMAP container.'
           ELSE
              UNSTRING WS-RESID DELIMITED BY '/'
                  INTO WS-FIELD1, WS-FIELD2, WS-FIELD3
              DISPLAY 'URIMAP in WS-resid is:' WS-RESID
              MOVE WS-RESID TO WS-RESID2
              UNSTRING WS-RESID2 DELIMITED BY '*'
                  INTO WS-FIELD4, WS-FIELD5
           END-IF
           MOVE ' ' TO WS-RESID
           EXEC CICS GET CONTAINER('DFHWS-URI-QUERY')
                         INTO(WS-RESID)
                         RESP(RESP)
                         RESP2(RESP2)
           END-EXEC
           IF RESP NOT = DFHRESP(NORMAL) THEN
              DISPLAY 'Cannot get QUERY container.'
           ELSE
              DISPLAY 'QUERY in WS-RESID is:' WS-RESID
           END-IF
           MOVE ' ' TO WS-RESID
           EXEC CICS GET CONTAINER('DFHWS-URI-RESID')
                         INTO(WS-RESID)
                         RESP(RESP)
                         RESP2(RESP2)
           END-EXEC
           IF RESP NOT = DFHRESP(NORMAL)
           THEN
              EXEC CICS ABEND
                     ABCODE('RESA')
              END-EXEC
           ELSE
               DISPLAY 'RESID container is ' WS-resid
               MOVE ' ' TO WS-FIELD1 WS-FIELD2 WS-FIELD3
               UNSTRING WS-RESID DELIMITED BY '/'
                  INTO WS-FIELD1, WS-FIELD2, WS-FIELD3
               DISPLAY 'After unstring, WS-FIELD1 is: ' WS-FIELD1
           END-IF.
       GENERIC-ABEND.
           EXEC CICS ABEND
                     ABCODE(UNEXPECTED-RESP-ABCODE)
           END-EXEC.
       WRITE-TSQ.
           EXEC CICS WRITEQ TS QUEUE(WS-TSQ-NAME)
                     FROM(WS-TSQ-DATA)
                     RESP(RESP)
                     NOSUSPEND
                     LENGTH(WS-TSQ-LEN)
           END-EXEC.[/INST]{
  "id": "BR-001",
  "description": "The 'PUT' operation is used to update the details of an existing patient.",
  "condition": "WS-HTTP-METHOD = METHOD-PUT"
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCV1BA01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCV1BA01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       77  HCAVDB01                    PIC X(8)       VALUE 'HCAVDB01'.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADER-LEN         PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       COPY HCERRSWS.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
             COPY HCCMAREA.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           PERFORM INSERT-VISIT.
           If CA-RETURN-CODE > 0
             EXEC CICS RETURN END-EXEC
           End-if.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       INSERT-VISIT.
           EXEC CICS LINK Program(HCAVDB01)
                Commarea(DFHCOMMAREA)
                LENGTH(32500)
           END-EXEC.
           EXIT.
       COPY HCERRSPD.[/INST]{
  "id": "BR-001",
  "description": "The CA-RETURN-CODE must be set to 00 before inserting records to the database.",
  "condition": "NOT CA-RETURN-CODE = 00",
  "output": {
    "set-ca-return-code": "MOVE '00' TO CA-RETURN-CODE"
  }
},
{
  "id": "BR-002",
  "description": "The length of the commarea must be greater than or equal to the combined lengths of all the fixed-length fields in the commarea.",
  "condition": "EIBCALEN LESS THAN WS-REQUIRED-CA-LEN",
  "output": {
    "set-return-code": "MOVE '98' TO CA-RETURN-CODE",
    "return-control": "EXEC CICS RETURN END-EXEC"
  }
},
{
  "id": "BR-003",
  "description": "The commarea pointer must be set to the address of the commarea before invoking the database program.",
  "condition": "NOT WS-ADDR-DFHCOMMAREA = ADDRESS OF DFHCOMMAREA",
  "output": {
    "set-commarea-pointer": "SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCV1BI01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  WS-HEADER.
           03 WS-EYECATCHER            PIC X(16)
                                        VALUE 'HCV1BI01------WS'.
           03 WS-TRANSID               PIC X(4).
           03 WS-TERMID                PIC X(4).
           03 WS-TASKNUM               PIC 9(7).
           03 WS-FILLER                PIC X.
           03 WS-ADDR-DFHCOMMAREA      USAGE is POINTER.
           03 WS-CALEN                 PIC S9(4) COMP.
       77 HCIVDB01                  PIC x(8) Value 'HCIVDB01'.
       01  WS-COMMAREA-LENGTHS.
           03 WS-CA-HEADERTRAILER-LEN  PIC S9(4) COMP VALUE +18.
           03 WS-REQUIRED-CA-LEN       PIC S9(4)      VALUE +0.
       01  WS-Resp                     PIC S9(8) Comp.
       COPY HCERRSWS.
       LINKAGE SECTION.
       01  DFHCOMMAREA.
             COPY HCCMAREA.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           INITIALIZE WS-HEADER.
           MOVE EIBTRNID TO WS-TRANSID.
           MOVE EIBTRMID TO WS-TERMID.
           MOVE EIBTASKN TO WS-TASKNUM.
           IF EIBCALEN IS EQUAL TO ZERO
               MOVE ' NO COMMAREA RECEIVED' TO EM-VARIABLE
               PERFORM WRITE-ERROR-MESSAGE
               EXEC CICS ABEND ABCODE('HCCA') NODUMP END-EXEC
           END-IF
           MOVE '00' TO CA-RETURN-CODE
           MOVE EIBCALEN TO WS-CALEN.
           SET WS-ADDR-DFHCOMMAREA TO ADDRESS OF DFHCOMMAREA.
           ADD WS-CA-HEADERTRAILER-LEN TO WS-REQUIRED-CA-LEN
           IF EIBCALEN IS LESS THAN WS-REQUIRED-CA-LEN
             MOVE '98' TO CA-RETURN-CODE
             EXEC CICS RETURN END-EXEC
           END-IF
           MOVE CA-PATIENT-ID TO EM-PATNUM
           PERFORM GET-VISIT.
       MAINLINE-END.
           EXEC CICS RETURN END-EXEC.
       MAINLINE-EXIT.
           EXIT.
       GET-VISIT.
             EXEC CICS LINK Program(HCIVDB01)
                 Commarea(DFHCOMMAREA)
                 LENGTH(32500)
             END-EXEC.
           EXIT.
       COPY HCERRSPD.[/INST]{
  "id": "BR-001",
  "description": "The EIBCALEN must be greater than or equal to the length of the required commarea (WS-REQUIRED-CA-LEN) \\nIf the EIBCALEN is less than the required commarea length, the program will return a CA-RETURN-CODE of '98' and execute a CICS RETURN.",
  "condition": "EIBCALEN >= WS-REQUIRED-CA-LEN",
  "output": {
    "valid": "the program will continue to run normally",
    "invalid": "the program will return a CA-RETURN-CODE of '98' and execute a CICS RETURN"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HCV1PL01.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-RESP                   PIC S9(8) COMP.
       77 INQ-TRANS                    PIC X(4) VALUE 'HCV1'.
       77 ADD-TRANS                    PIC X(4) VALUE 'HCVA'.
       77 MSGEND                     PIC X(24) VALUE
                                        'Transaction ended      '.
        COPY HCMAPS.
        01 COMM-AREA.
        COPY HCCMAREA.
       PROCEDURE DIVISION.
       MAINLINE SECTION.
           IF EIBCALEN > 0
              GO TO A-GAIN.
           Initialize HCV1MAPI.
           Initialize HCV1MAPO.
           Initialize COMM-AREA.
           MOVE LOW-VALUES To HCV1PNOO.
           MOVE -1 TO HCV1PNOL
           PERFORM SETUP-SCREEN.
           EXEC CICS SEND MAP ('HCV1MAP')
                     FROM(HCV1MAPO)
                     MAPSET ('HCMAPS')
                     ERASE
                     CURSOR
                     RESP(WS-RESP)
                     END-EXEC.
        A-GAIN.
           EXEC CICS HANDLE AID
                     CLEAR(CLEARIT)
                     PF3(ENDIT)
                     PF12(CANCELIT)
                     END-EXEC.
           EXEC CICS HANDLE CONDITION
                     MAPFAIL(ENDIT)
                     END-EXEC.
           EXEC CICS RECEIVE MAP('HCV1MAP')
                     INTO(HCV1MAPI) ASIS TERMINAL
                     MAPSET('HCMAPS') END-EXEC.
           PERFORM GET-PATIENT.
           PERFORM GET-THRESHOLD.
           IF (HCV1DATEI EQUAL ZEROS OR SPACES OR LOW-VALUES) OR
              (HCV1TIMEI EQUAL ZEROS OR SPACES OR LOW-VALUES)
                 Move 'Enter visit date and time'
                       To  HCV1MSGO
                 MOVE -1 TO HCV1DATEL
           ELSE
              IF EIBTRNID EQUAL INQ-TRANS
                 Move '01IVIS'   To CA-REQUEST-ID
                 Move HCV1PNOI   To CA-PATIENT-ID
                 Move HCV1DATEI  To CA-VISIT-DATE
                 Move HCV1TIMEI  To CA-VISIT-TIME
                 EXEC CICS LINK PROGRAM('HCV1BI01')
                        COMMAREA(COMM-AREA)
                        LENGTH(32500)
                 END-EXEC
                 IF CA-RETURN-CODE <= 1
                    Move CA-HEART-RATE     to HCV1HRATEI
                    Move CA-BLOOD-PRESSURE to HCV1BLPRI
                 END-IF
              ELSE
                 IF EIBTRNID EQUAL ADD-TRANS
                    Move '01AVIS'   To CA-REQUEST-ID
                    Move HCV1DATEI  To CA-VISIT-DATE
                    Move HCV1TIMEI  To CA-VISIT-TIME
                    Move HCV1HRATEI To CA-HEART-RATE
                    Move HCV1BLPRI  To CA-BLOOD-PRESSURE
                    EXEC CICS LINK PROGRAM('HCV1BA01')
                              COMMAREA(COMM-AREA)
                             LENGTH(32500)
                    END-EXEC
                    IF CA-RETURN-CODE > 0
                       Exec CICS Syncpoint Rollback End-Exec
                       GO TO NO-ADD
                    END-IF
                    Move CA-PATIENT-ID   To HCV1PNOI
                    Move 'New Patient Visit Inserted'
                      To  HCV1MSGO
                 END-IF
              END-IF
           END-IF
           PERFORM SETUP-SCREEN.
           EXEC CICS SEND MAP ('HCV1MAP')
                     FROM(HCV1MAPO)
                     MAPSET ('HCMAPS')
                     CURSOR
           END-EXEC
           GO TO ENDIT-STARTIT.
           EXEC CICS RETURN
           END-EXEC.
       ENDIT-STARTIT.
           EXEC CICS RETURN
                TRANSID(EIBTRNID)
                COMMAREA(COMM-AREA)
                END-EXEC.
       ENDIT.
           EXEC CICS SEND TEXT
                     FROM(MSGEND)
                     LENGTH(LENGTH OF MSGEND)
                     ERASE
                     FREEKB
           END-EXEC
           EXEC CICS RETURN
           END-EXEC.
       CLEARIT.
           Initialize HCV1MAPI.
           EXEC CICS SEND MAP ('HCV1MAP')
                     MAPSET ('HCMAPS')
                     MAPONLY
           END-EXEC
           EXEC CICS RETURN
                TRANSID(EIBTRNID)
                COMMAREA(COMM-AREA)
                END-EXEC.
       CANCELIT.
           EXEC CICS RETURN
                TRANSID('HCAZ')
                IMMEDIATE
                END-EXEC.
       SETUP-SCREEN.
           IF EIBTRNID EQUAL INQ-TRANS
              MOVE INQ-TRANS TO HCV1TRNO
              MOVE 'Inquire Visit Information' to HCV1TITO
           ELSE
           IF EIBTRNID EQUAL ADD-TRANS
              MOVE ADD-TRANS TO HCV1TRNO
              MOVE 'Add Visit Information' to HCV1TITO
           END-IF.
       GET-PATIENT.
           Move '01IPAT'   To CA-REQUEST-ID
           Move HCV1PNOI   To CA-PATIENT-ID
           EXEC CICS LINK PROGRAM('HCP1BI01')
                     COMMAREA(COMM-AREA)
                     LENGTH(32500)
           END-EXEC
           IF CA-RETURN-CODE > 0
              GO TO NO-PATIENT-DATA
           END-IF
           Move CA-FIRST-NAME to HCV1FNAI
           Move CA-LAST-NAME  to HCV1LNAI.
       GET-THRESHOLD.
           Move '01ITHR'   To CA-REQUEST-ID
           Move HCV1PNOO   To CA-PATIENT-ID
           EXEC CICS LINK PROGRAM('HCT1BI01')
                     COMMAREA(COMM-AREA)
                     LENGTH(32500)
           END-EXEC
           IF CA-RETURN-CODE = 0
              Move CA-HR-THRESHOLD to HCV1HRTHI
              Move CA-BP-THRESHOLD to HCV1BPTHI
           END-IF.
       NO-UPD.
           Move 'Error Updating Patient visit'    To  HCV1MSGO.
           Go To ERROR-OUT.
       NO-ADD.
           Move 'Error Adding Patient visit'      To  HCV1MSGO.
           Go To ERROR-OUT.
       NO-DATA.
           Move 'No data was returned.'           To  HCV1MSGO.
           Go To ERROR-OUT.
       NO-PATIENT-DATA.
           Move 'No patient data was returned.'  To  HCV1MSGO
           Go To ERROR-OUT.
       ERROR-OUT.
           EXEC CICS SEND MAP ('HCV1MAP')
                     FROM(HCV1MAPO)
                     CURSOR
                     MAPSET ('HCMAPS')
           END-EXEC.
           Initialize HCV1MAPI.
           Initialize HCV1MAPO.
           Initialize COMM-AREA.
           GO TO ENDIT-STARTIT.
           EXIT.[/INST]{
  "id": "BR-001",
  "description": "When a user enters a visit date and time, if either of them are empty, display an error message and set the date length to -1.",
  "condition": "HCV1DATEI EQUAL ZEROS OR SPACES OR LOW-VALUES OR HCV1TIMEI EQUAL ZEROS OR SPACES OR LOW-VALUES",
  "output": {
    "error": "Enter visit date and time",
    "dateLength": "-1"
  }
}[INST]       IDENTIFICATION DIVISION.                                                 
       PROGRAM-ID.    GAM0VMM.                                                  
       ENVIRONMENT DIVISION.                                                    
       DATA DIVISION.                                                           
       FILE SECTION.                                                            
       WORKING-STORAGE SECTION.                                                 
       COPY GAM0BMT.                                                            
       01  COMMAREA.                                                            
           05  CA-MAKE-SELECTED    PIC X.                                       
           05  CA-MODEL-SELECTED   PIC X.                                       
           05  CA-LOCAL-BUILD      PIC X.                                       
           05  CA-MAKE-LIST        OCCURS 10.                                   
               10  CA-MAKE         PIC X(20).                                   
           05  CA-MAKE-OUTPUT      PIC X(60).                                   
           05  CA-MODEL-LIST       OCCURS 12.                                   
               10  CA-MODEL        PIC X(20).                                   
           05  CA-MODEL-OUTPUT     PIC X(73).                                   
           05  CA-VIN-SELECTED     PIC X(4).                                    
           05  CA-GAMMAKE          PIC X(20).                                   
           05  CA-GAMMODEL         PIC X(20).                                   
           05  CA-GAMNEXT          PIC X.                                       
           05  CA-GAMPREV          PIC X.                                       
           05  CA-GAMSTART         PIC X.                                       
           05  CA-GAMCP            PIC 9(4).                                    
           05  FILLER              PIC X(410).                                  
       01  TEMP-INDEX              PIC S9(2) COMP.                              
       01  TEMP-MAKE               PIC X(20).                                   
       01  TEMP-MODEL              PIC X(20).                                   
       01  ERRCODE                 PIC S9(9) USAGE DISPLAY.                     
       EXEC SQL INCLUDE SQLCA END-EXEC.                                         
       EXEC SQL DECLARE VALMAK CURSOR FOR                                       
                SELECT DISTINCT MAKE                                            
                FROM MAKE_MODEL                                                 
           END-EXEC.                                                            
       EXEC SQL DECLARE VALMOD CURSOR FOR                                       
                SELECT MODEL                                                    
                FROM MAKE_MODEL                                                 
                WHERE MAKE = :CA-GAMMAKE                                        
           END-EXEC.                                                            
       LINKAGE SECTION.                                                         
       COPY GAM0BCA.                                                            
       PROCEDURE DIVISION.                                                      
           INITIALIZE COMMAREA.                                                 
           INITIALIZE ERRCODE.                                                  
           MOVE "1" TO TEMP-INDEX.                                              
           IF EIBCALEN = LENGTH OF DFHCOMMAREA                                  
               MOVE DFHCOMMAREA TO COMMAREA                                     
           ELSE                                                                 
               EXEC CICS RETURN                                                 
                         END-EXEC                                               
           END-IF.                                                              
           IF CA-LOCAL-BUILD = "Y"                                              
              EXEC SQL CONNECT TO SAMPLE END-EXEC                               
           END-IF.                                                              
           IF CA-MAKE-SELECTED = "N"                                            
              EXEC SQL OPEN VALMAK                                              
                       END-EXEC                                                 
              PERFORM UNTIL SQLCODE NOT = 0 OR                                  
                            TEMP-INDEX > 10                                     
                 EXEC SQL FETCH VALMAK                                          
                          INTO :TEMP-MAKE                                       
                          END-EXEC                                              
                 IF TEMP-MAKE NOT = " " AND                                     
                    SQLCODE = 0                                                 
                       MOVE TEMP-MAKE TO CA-MAKE(TEMP-INDEX)                    
                 END-IF                                                         
                 COMPUTE TEMP-INDEX = TEMP-INDEX + 1                            
              END-PERFORM                                                       
              IF SQLCODE NOT = 0 AND SQLCODE NOT = 100                          
                 MOVE "THERE IS AN SQL ERROR" TO CA-MAKE-OUTPUT                 
              END-IF                                                            
              EXEC SQL CLOSE VALMAK                                             
                       END-EXEC                                                 
           ELSE                                                                 
              EXEC SQL OPEN VALMOD                                              
                       END-EXEC                                                 
              PERFORM UNTIL SQLCODE NOT = 0 OR                                  
                            TEMP-INDEX > 12                                     
                 EXEC SQL FETCH VALMOD                                          
                          INTO :TEMP-MODEL                                      
                          END-EXEC                                              
                 IF TEMP-MODEL NOT = " " AND                                    
                    SQLCODE = 0                                                 
                       MOVE TEMP-MODEL TO CA-MODEL(TEMP-INDEX)                  
                 END-IF                                                         
                 COMPUTE TEMP-INDEX = TEMP-INDEX + 1                            
              END-PERFORM                                                       
              IF SQLCODE NOT = 0 AND SQLCODE NOT = 100                          
                 MOVE "THERE IS AN SQL ERROR" TO CA-MODEL-OUTPUT                
              END-IF                                                            
              EXEC SQL CLOSE VALMOD                                             
                       END-EXEC                                                 
           END-IF.                                                              
           MOVE COMMAREA TO DFHCOMMAREA.                                        
           EXEC CICS RETURN END-EXEC.                                           
           GOBACK.                                                             [/INST]{
  "id": "BR-001",
  "description": "If the user selects a make and no model, then only the makes are displayed in the list.",
  "condition": "CA-MAKE-SELECTED = \"N\"",
  "output": [
    {
      "sql_statement": "EXEC SQL OPEN VALMAK END-EXEC",
      "cursor_name": "VALMAK"
    },
    {
      "sql_statement": "EXEC SQL FETCH VALMAK INTO :TEMP-MAKE END-EXEC",
      "cursor_name": "VALMAK"
    },
    {
      "sql_statement": "MOVE TEMP-MAKE TO CA-MAKE(TEMP-INDEX)",
      "condition": "TEMP-MAKE NOT = \" \" AND SQLCODE = 0"
    },
    {
      "sql_statement": "EXEC SQL CLOSE VALMAK END-EXEC",
      "cursor_name": "VALMAK"
    }
  ]
},
{
  "id": "BR-002",
  "description": "If the user selects a model and no make, then only the models for that make are displayed in the list.",
  "condition": "CA-MODEL-SELECTED = \"N\"",
  "output": [
    {
      "sql_statement": "EXEC SQL OPEN VALMOD END-EXEC",
      "cursor_name": "VALMOD"
    },
    {
      "sql_statement": "EXEC SQL FETCH VALMOD INTO :TEMP-MODEL END-EXEC",
      "cursor_name": "VALMOD"
    },
    {
      "sql_statement": "MOVE TEMP-MODEL TO CA-MODEL(TEMP-INDEX)",
      "condition": "TEMP-MODEL NOT = \" \" AND SQLCODE = 0"
    },
    {
      "sql_statement": "EXEC SQL CLOSE VALMOD END-EXEC",
      "cursor_name": "VALMOD"
    }
  ]
}[INST]IDENTIFICATION DIVISION.                                          
        ENVIRONMENT DIVISION.                                             
        CONFIGURATION SECTION.                                            
        DATA DIVISION. 
        LINKAGE SECTION.
        01  INPUT-MSG.                                                     
            02  IN-LL          PICTURE S9(3) COMP.                         
            02  IN-ZZ          PICTURE S9(3) COMP.                         
            02  IN-TRCD        PICTURE X(10).                               
            02  IN-CMD         PICTURE X(8).
            02  IN-NAME1       PICTURE X(10).
            02  IN-NAME2       PICTURE X(10).
            02  IN-EXTN        PICTURE X(10).
            02  IN-ZIP         PICTURE X(7).	
        01  OUTPUT-MSG.                                                   
            02  OUT-LL       PICTURE S9(3) COMP VALUE +0.                 
            02  OUT-ZZ       PICTURE S9(3) COMP VALUE +0.                  
            02  OUT-MSG      PICTURE X(40) VALUE SPACES.
            02  OUT-CMD      PICTURE X(8) VALUE SPACES.
            02  OUT-NAME1    PICTURE X(10) VALUE SPACES.
            02  OUT-NAME2    PICTURE X(10) VALUE SPACES.
            02  OUT-EXTN     PICTURE X(10) VALUE SPACES.
            02  OUT-ZIP      PICTURE X(7) VALUE SPACES.
            02  OUT-SEGNO    PICTURE X(4) VALUE SPACES.    		
        PROCEDURE DIVISION.       
[/INST]{
  "id": "BR-001",
  "description": "The output Logical Location (LL) must be equal to the input LL. If LL is invalid (negative value),  or there is any error in the input, an error message will be displayed.",
  "condition": "IN-LL >= 0",
  "output": {
    "valid_input": "OUT-LL = IN-LL",
    "error": "OUT-MSG = 'ERROR: Invalid Input'"
  }
},
{
  "id": "BR-002",
  "description": "The output Zone (ZZ) must be equal to the input ZZ. If ZZ is invalid (negative value), or there is any error in the input, an error message will be displayed.",
  "condition": "IN-ZZ >= 0",
  "output": {
    "valid_input": "OUT-ZZ = IN-ZZ",
    "error": "OUT-MSG = 'ERROR: Invalid Input'"
  }
},
{
  "id": "BR-003",
  "description": "If both input and output LLs are valid, the MSG in the output record will be set to spaces.",
  "condition": "IN-LL >= 0 AND IN-ZZ >= 0",
  "output": {
    "valid_input": "OUT-MSG = SPACES"
  }
},
{
  "id": "BR-004",
  "description": "The output Command (CMD) must be equal to the input CMD.",
  "condition": "IN-CMD != SPACES",
  "output": {
    "valid_input": "OUT-CMD = IN-CMD"
  }
},
{
  "id": "BR-005",
  "description": "If there is a value in the input Name1, it will be copied to the output Name1. Otherwise, the output Name1 will be set to spaces.",
  "condition": "IN-NAME1 != SPACES",
  "output": {
    "valid_input": "OUT-NAME1 = IN-NAME1",
    "blank_input": "OUT-NAME1 = SPACES"
  }
},
{
  "id": "BR-006",
  "description": "If there is a value in the input Name2, it will be copied to the output Name2. Otherwise, the output Name2 will be set to spaces.",
  "condition": "IN-NAME2 != SPACES",
  "output": {
    "valid_input": "OUT-NAME2 = IN-NAME2",
    "blank_input": "OUT-NAME2 = SPACES"
  }
},
{
  "id": "BR-007",
  "description": "If there is a value in the input Extension (EXTN), it will be copied to the output EXTN. Otherwise, the output EXTN will be set to spaces.",
  "condition": "IN-EXTN != SPACES",
  "output": {
    "valid_input": "OUT-EXTN = IN-EXTN",
    "blank_input": "OUT-EXTN = SPACES"
  }
},
{
  "id": "BR-008",
  "description": "If there is a value in the input ZIP, it will be copied to the output ZIP. Otherwise, the output ZIP will be set to spaces.",
  "condition": "IN-ZIP != SPACES",
  "output": {
    "valid_input": "OUT-ZIP = IN-ZIP",
    "blank_input": "OUT-ZIP = SPACES"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. MAIN.
       DATA DIVISION.
          WORKING-STORAGE SECTION.
          01 NODEJS-CODE PIC X(100) value "console.log('Hello World!')".
       PROCEDURE DIVISION.
           CALL 'EXEC_NODEJS' USING NODEJS-CODE
           DISPLAY "Starting an HTTP server on port 8000".
           CALL 'EXEC_NODEJS_FILE' USING "example/grace-hopper.js"
           DISPLAY "Starting an HTTP server on port 8000".
           CALL 'EXEC_NODEJS_FILE' USING "example/server.js".
       STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "Display the value of NODEJS-CODE.",
  "condition": "none",
  "output": {
    "message": "Hello World!"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. EXEC_NODEJS_FILE.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 COMMAND_TO_RUN PIC X(200) value SPACES.
       LINKAGE SECTION.
       01 NODEJS_FILE_PATH PIC X(100).
       PROCEDURE DIVISION USING NODEJS_FILE_PATH.
           STRING 'node ' DELIMITED BY SPACE
                  ' '   DELIMITED BY SIZE
                  NODEJS_FILE_PATH DELIMITED BY SPACE
           INTO COMMAND_TO_RUN
           CALL 'SYSTEM' USING COMMAND_TO_RUN
           END-CALL
       EXIT PROGRAM.
[/INST]{
  "id": "BR-001",
  "description": "The value of NODEJS_FILE_PATH is the filename to execute",
  "condition": "NODEJS_FILE_PATH IS NOT NULL and NODEJS_FILE_PATH IS NOT EMPTY",
  "output": {
    "execute": "CALL 'SYSTEM' USING COMMAND_TO_RUN"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. EXEC_NODEJS.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 COMMAND_TO_RUN PIC X(200) value SPACES.
       LINKAGE SECTION.
       01 NODEJS_CODE PIC A(100) value SPACES.
       PROCEDURE DIVISION USING NODEJS_CODE.
           STRING 'node -e "' DELIMITED BY SIZE
                  NODEJS_CODE DELIMITED BY SIZE
                  '"'   DELIMITED BY SIZE
           INTO COMMAND_TO_RUN
           CALL 'SYSTEM' USING COMMAND_TO_RUN
           END-CALL
       EXIT PROGRAM.
[/INST]{
  "id": "BR-001",
  "description": "Execute a node.js command using 'system' call.",
  "condition": null,
  "output": null
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. CISP-ERROR.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
           01 WS-LOG-OPERATION-FLAG PIC X(5).
           01 WS-LOG-RECORD.
               02 WS-LOG-RECORD-FUNCTION-NAME PIC X(40).
               02 WS-LOG-RECORD-MESSAGE PIC X(100).
       01 WS-RECURSION-FLAG PIC X(30).
       LINKAGE SECTION.
       01 LS-CISP-ERROR-FLAG PIC X(30).
       01 LS-ERROR.
          02 LS-ERROR-NAME PIC X(40).
          02 LS-ERROR-FATAL PIC X.
           88 LS-ERROR-FATAL-YES VALUE 'Y', FALSE 'N'.
          02 LS-ERROR-MESSAGE PIC X(100).
       PROCEDURE DIVISION USING LS-CISP-ERROR-FLAG, LS-ERROR.
       MAIN-PROCEDURE.
           EVALUATE LS-CISP-ERROR-FLAG
           WHEN "THROW-ERROR"
           PERFORM THROW-ERROR-PROCEDURE.
       THROW-ERROR-PROCEDURE.
           DISPLAY LS-ERROR-NAME.
           DISPLAY LS-ERROR-MESSAGE.
           IF LS-ERROR-FATAL-YES THEN
               PERFORM END-CISP-PROCEDURE
           END-IF.
       END-CISP-PROCEDURE.
           PERFORM LOG-ERROR-PROCEDURE.
           PERFORM CLOSE-OPEN-FILES-PROCEDURE.
           STOP RUN.
       LOG-ERROR-PROCEDURE.
           MOVE "ADD" TO WS-LOG-OPERATION-FLAG.
           MOVE "CISP-ERROR" TO
                WS-LOG-RECORD-FUNCTION-NAME.
           STRING LS-ERROR-NAME DELIMITED BY SIZE
             ":" DELIMITED BY SIZE
             LS-ERROR-MESSAGE DELIMITED BY SIZE
             "Fatal:" DELIMITED BY SIZE
             LS-ERROR-FATAL DELIMITED BY SIZE
             INTO WS-LOG-RECORD-MESSAGE.
           CALL 'LOGGER' USING WS-LOG-OPERATION-FLAG, WS-LOG-RECORD.
       CLOSE-OPEN-FILES-PROCEDURE.
           MOVE "STACK-FILE-STATUS" TO WS-RECURSION-FLAG.
           CALL "RECURSION" USING WS-RECURSION-FLAG.
           DISPLAY "RECURSION:" WS-RECURSION-FLAG.
           IF WS-RECURSION-FLAG = "Y" THEN
               MOVE "CLOSE" TO WS-RECURSION-FLAG
               CALL "RECURSION" USING WS-RECURSION-FLAG
           END-IF.
           MOVE "CLOSE" TO WS-LOG-OPERATION-FLAG.
           CALL 'LOGGER' USING WS-LOG-OPERATION-FLAG, WS-LOG-RECORD.
       END PROGRAM CISP-ERROR.
[/INST]{
  "id": "BR-001",
  "description": "When an error is thrown, its name and message must be displayed.",
  "condition": "LS-CISP-ERROR-FLAG = \"THROW-ERROR\"",
  "output": {
    "execute": "DISPLAY LS-ERROR-NAME.\\nDISPLAY LS-ERROR-MESSAGE.",
    "ifFatal": "IF LS-ERROR-FATAL-YES THEN\\n    PERFORM END-CISP-PROCEDURE\\nEND-IF."
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. CISP.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT TESTS-FILE ASSIGN TO "..\test\tests-lists.txt"
          ORGANIZATION IS LINE SEQUENTIAL.
       DATA DIVISION.
       FILE SECTION.
       FD TESTS-FILE.
       01 LISP-TEST-FILE-NAME PIC X(100).
       WORKING-STORAGE SECTION.
       01 WS-CMD-LINE.
           02 WS-CMD-LINE-VAL PIC X(100).
           02 WS-CMD-LINE-NUM-AGRS PIC 9(4).
           01 WS-LOG-OPERATION-FLAG PIC X(5).
           01 WS-LOG-RECORD.
               02 WS-LOG-RECORD-FUNCTION-NAME PIC X(40).
               02 WS-LOG-RECORD-MESSAGE PIC X(100).
       01 WS-LISP-FILE-NAME PIC X(100).
       78 WS-SYMBOL-LENGTH VALUE 100.
       01 WS-LISP-SYMBOLS.
           02 WS-SYMBOL-TABLE-SIZE PIC 9(4).
           02 WS-SYMBOL PIC X(50) OCCURS WS-SYMBOL-LENGTH TIMES.
           02 WS-SYMBOL-LEN PIC 9(2) OCCURS WS-SYMBOL-LENGTH TIMES.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           PERFORM INIT-LOGGER-PROCEDURE.
           PERFORM READ-CMD-LINE-PROCEDURE.
           PERFORM TOKENIZE-LISP-PROCEDURE.
           PERFORM EVALUTE-LISP-PROCEDURE.
           PERFORM CLOSE-LOGGER-PROCEDURE.
           GOBACK.
       READ-CMD-LINE-PROCEDURE.
           ACCEPT WS-CMD-LINE-NUM-AGRS FROM ARGUMENT-NUMBER.
           ACCEPT WS-CMD-LINE-VAL FROM ARGUMENT-VALUE.
           MOVE WS-CMD-LINE-VAL TO WS-LISP-FILE-NAME.
           MOVE "ADD" TO WS-LOG-OPERATION-FLAG.
           MOVE "CISP:READ-CMD-LINE-PROCEDURE"
           TO WS-LOG-RECORD-FUNCTION-NAME.
           MOVE "Reading commandline argument" TO WS-LOG-RECORD-MESSAGE.
           CALL 'LOGGER' USING WS-LOG-OPERATION-FLAG, WS-LOG-RECORD.
       TOKENIZE-LISP-PROCEDURE.
            MOVE "ADD" TO WS-LOG-OPERATION-FLAG.
            MOVE "TOKENIZER" TO WS-LOG-RECORD-FUNCTION-NAME.
            MOVE "Starting Tokenizer" TO WS-LOG-RECORD-MESSAGE.
            CALL 'LOGGER' USING WS-LOG-OPERATION-FLAG, WS-LOG-RECORD.
            CALL "TOKENIZER" USING WS-LISP-FILE-NAME,
                 WS-SYMBOL-LENGTH, WS-LISP-SYMBOLS.
       EVALUTE-LISP-PROCEDURE.
            MOVE "ADD" TO WS-LOG-OPERATION-FLAG.
            MOVE "LISP" TO WS-LOG-RECORD-FUNCTION-NAME.
            MOVE "Starting Lisp Evalutation" TO WS-LOG-RECORD-MESSAGE.
            CALL 'LOGGER' USING WS-LOG-OPERATION-FLAG, WS-LOG-RECORD.
            CALL "LISP" USING WS-LISP-SYMBOLS.
       INIT-LOGGER-PROCEDURE.
            MOVE "OPEN" TO WS-LOG-OPERATION-FLAG.
            CALL 'LOGGER' USING WS-LOG-OPERATION-FLAG, WS-LOG-RECORD.
       CLOSE-LOGGER-PROCEDURE.
            MOVE "CLOSE" TO WS-LOG-OPERATION-FLAG.
            CALL 'LOGGER' USING WS-LOG-OPERATION-FLAG, WS-LOG-RECORD.
       END PROGRAM CISP.
[/INST]{
  "id": "BR-002",
  "description": "The command-line argument is stored in \\\"WS-LISP-FILE-NAME\\\" variable.",
  "condition": "ARGUMENT-VALUE",
  "output": {
    "set": "WS-LISP-FILE-NAME = ARGUMENT-VALUE"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. LISP.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
       01 WS-SYMBOL-TABLE-INDEX PIC 9(4).
       01 WS-CURR-COMMAND PIC X(20).
       01 WS-CURRENT-VALUE PIC X(20).
       01 WS-CURRENT-VALUE-NUMERIC
       REDEFINES WS-CURRENT-VALUE PIC 9(20).
       01 WS-INIT-COMMAND PIC X.
           88 WS-INIT-COMMAND-YES VALUE "Y", FALSE 'N'.
       01 WS-CISP-ERROR-FLAG PIC X(30).
       01 WS-ERROR.
          02 WS-ERROR-NAME PIC X(40).
          02 WS-ERROR-FATAL PIC X.
           88 WS-ERROR-FATAL-YES VALUE 'Y', FALSE 'N'.
          02 WS-ERROR-MESSAGE PIC X(100).
           01 WS-LOG-OPERATION-FLAG PIC X(5).
           01 WS-LOG-RECORD.
               02 WS-LOG-RECORD-FUNCTION-NAME PIC X(40).
               02 WS-LOG-RECORD-MESSAGE PIC X(100).
       01 WS-RECURSION-FLAG PIC X(30).
       01 WS-RECURSION-OBJECT.
          02 WS-COMMAND-NAME PIC X(20).
          02 WS-COMMAND-RESULT PIC X(20).
          02 WS-COMMAND-RESULT-NUMERIC
          REDEFINES WS-COMMAND-RESULT PIC 9(20).
          02 WS-COMMAND-RETURNS-RESULT PIC X.
             88 WS-COMMAND-RETURNS-RESULT-YES VALUE 'Y', FALSE 'N'.
       LINKAGE SECTION.
       01 LS-LISP-SYMBOLS.
           02 LS-SYMBOL-TABLE-SIZE PIC 9(4).
           02 LS-SYMBOL PIC X(50) OCCURS 100 TIMES.
           02 LS-SYMBOL-LEN PIC 9(2) OCCURS 100 TIMES.
       PROCEDURE DIVISION USING LS-LISP-SYMBOLS.
       MAIN-PROCEDURE.
           PERFORM INIT-CALL-STACK-PROCEDURE.
           PERFORM VARYING WS-SYMBOL-TABLE-INDEX FROM 1 BY 1 UNTIL
           WS-SYMBOL-TABLE-INDEX > LS-SYMBOL-TABLE-SIZE
               EVALUATE LS-SYMBOL(WS-SYMBOL-TABLE-INDEX)
               WHEN "("
                   SET WS-INIT-COMMAND-YES TO TRUE
               WHEN ")"
                   PERFORM LOG-COMMAND-EVALUTATION
                   PERFORM RETURN-PROCEDURE
               WHEN OTHER
                   MOVE LS-SYMBOL(WS-SYMBOL-TABLE-INDEX)
                    TO WS-CURR-COMMAND
                   PERFORM LOG-CURRENT-COMMAND-PROCEDURE
      D             PERFORM DEBUG-LISP
                   IF WS-INIT-COMMAND-YES THEN
                       PERFORM INIT-RECURSION-OBJECT-PROCEDURE
                   ELSE
                       PERFORM EVALUATE-CURRENT-COMMAND
                   END-IF
                END-EVALUATE
           END-PERFORM.
           PERFORM CLOSE-CALL-STACK-PROCEDURE.
           GOBACK.
       INIT-CALL-STACK-PROCEDURE.
       MOVE "INIT" TO WS-RECURSION-FLAG.
       CALL "RECURSION" USING WS-RECURSION-FLAG.
       INIT-RECURSION-OBJECT-PROCEDURE.
           IF WS-COMMAND-NAME = SPACES THEN
               MOVE WS-CURR-COMMAND TO WS-COMMAND-NAME
           ELSE
               MOVE "ADD-TO-CALL-STACK" TO WS-RECURSION-FLAG
               CALL "RECURSION" USING WS-RECURSION-FLAG,
               WS-RECURSION-OBJECT
      D        DISPLAY "INIT-CALL-STACK-PROCEDURE: " WS-RECURSION-OBJECT
               MOVE WS-CURR-COMMAND TO WS-COMMAND-NAME
               MOVE SPACES TO WS-COMMAND-RESULT
      D         DISPLAY "New saved temp OBJECT:" WS-COMMAND-NAME
      D         Display " "
           END-IF.
           SET WS-INIT-COMMAND-YES TO FALSE.
       RETURN-PROCEDURE.
           MOVE "IS-EMPTY" TO WS-RECURSION-FLAG.
           CALL "RECURSION" USING WS-RECURSION-FLAG.
      D     DISPLAY "RETURN-PROCEDURE: " WS-RECURSION-FLAG.
           IF NOT WS-RECURSION-FLAG = "STACK-EMPTY" THEN
               MOVE WS-COMMAND-RESULT TO WS-CURRENT-VALUE
      D         display WS-RECURSION-OBJECT
               PERFORM POP-CALL-STACK
      D         DISPLAY "After POP-CALL-STACK:" WS-RECURSION-OBJECT
               MOVE WS-COMMAND-NAME TO WS-CURR-COMMAND
                PERFORM EVALUATE-CURRENT-COMMAND
           ELSE
               MOVE SPACES TO WS-COMMAND-NAME
           END-IF.
      D     display " ".
       PRINT-CALL-STACK.
           MOVE "PRINT-CALL-STACK" TO WS-RECURSION-FLAG.
           CALL "RECURSION" USING WS-RECURSION-FLAG.
       DEBUG-LISP.
           DISPLAY "WS-CURR-COMMAND:" WS-CURR-COMMAND.
           DISPLAY " WS-CURRENT-VALUE:" WS-CURRENT-VALUE.
           DISPLAY " WS-COMMAND-NAME:" WS-COMMAND-NAME.
           DISPLAY " WS-COMMAND-RESULT:" WS-COMMAND-RESULT.
           DISPLAY " ".
       POP-CALL-STACK.
      D     DISPLAY "POP-CALL-STACK:" WS-RECURSION-OBJECT.
           MOVE "POP-CALL-STACK" TO WS-RECURSION-FLAG.
           CALL "RECURSION" USING WS-RECURSION-FLAG,
           WS-RECURSION-OBJECT.
       CLOSE-CALL-STACK-PROCEDURE.
           MOVE "CLOSE" TO WS-RECURSION-FLAG.
           CALL "RECURSION" USING WS-RECURSION-FLAG.
       LOG-CURRENT-COMMAND-PROCEDURE.
           MOVE "ADD" TO WS-LOG-OPERATION-FLAG.
           MOVE "LISP" TO
                WS-LOG-RECORD-FUNCTION-NAME.
           STRING 'Command:' DELIMITED BY SIZE
             WS-CURR-COMMAND DELIMITED BY SIZE
             INTO WS-LOG-RECORD-MESSAGE
           CALL 'LOGGER' USING WS-LOG-OPERATION-FLAG, WS-LOG-RECORD.
       EVALUATE-CURRENT-COMMAND.
           EVALUATE WS-CURR-COMMAND
           WHEN "print"
      D         DISPLAY "print"
               PERFORM LISP-PRINT-PROCEDURE
           WHEN "+"
      D         DISPLAY "add"
               PERFORM LISP-ADD-PROCEDURE
           WHEN OTHER
               PERFORM EVALUATE-CURRENT-VALUES.
       EVALUATE-CURRENT-VALUES.
           IF WS-CURR-COMMAND(1:LS-SYMBOL-LEN(WS-SYMBOL-TABLE-INDEX))
           IS NUMERIC THEN
               MOVE WS-CURR-COMMAND TO WS-CURRENT-VALUE-NUMERIC
           ELSE IF WS-CURR-COMMAND(1:1) = '"'
           AND WS-CURR-COMMAND(LS-SYMBOL-LEN(WS-SYMBOL-TABLE-INDEX):1)
           EQUALS '"' THEN
               MOVE WS-CURR-COMMAND TO WS-CURRENT-VALUE
           ELSE
               MOVE "THROW-ERROR" TO WS-CISP-ERROR-FLAG
               MOVE "LISP FORMAT ERROR:" TO WS-ERROR-NAME
               STRING WS-CURR-COMMAND DELIMITED BY SPACE
                 " COULD NOT BE INTERPRETED." DELIMITED BY SIZE
                 INTO WS-ERROR-MESSAGE
               SET WS-ERROR-FATAL-YES TO TRUE
               CALL "CISP-ERROR" USING WS-CISP-ERROR-FLAG, WS-ERROR
           END-IF.
           PERFORM APPLY-VALUE-TO-EXPRESSION.
       APPLY-VALUE-TO-EXPRESSION.
           MOVE WS-COMMAND-NAME TO WS-CURR-COMMAND.
           PERFORM EVALUATE-CURRENT-COMMAND.
      D     DISPLAY "APPLY-VALUE-TO-EXPRESSION".
       LISP-PRINT-PROCEDURE.
      D    DISPLAY "LISP-PRINT-PROCEDURE"
           MOVE WS-CURRENT-VALUE TO WS-COMMAND-RESULT.
           DISPLAY WS-COMMAND-RESULT.
       LISP-ADD-PROCEDURE.
           IF WS-COMMAND-RESULT-NUMERIC EQUALS SPACES THEN
               MOVE 0 TO WS-COMMAND-RESULT-NUMERIC
           END-IF.
           ADD WS-CURRENT-VALUE-NUMERIC TO WS-COMMAND-RESULT-NUMERIC.
       LOG-COMMAND-EVALUTATION.
           MOVE "ADD" TO WS-LOG-OPERATION-FLAG.
           STRING "LISP:" DELIMITED BY SIZE
            WS-CURR-COMMAND INTO
                WS-LOG-RECORD-FUNCTION-NAME.
           STRING 'Result:' DELIMITED BY SIZE
             WS-COMMAND-RESULT DELIMITED BY SIZE
             INTO WS-LOG-RECORD-MESSAGE
           CALL 'LOGGER' USING WS-LOG-OPERATION-FLAG, WS-LOG-RECORD.
       END PROGRAM LISP.
[/INST]{
  "id": "BR-001",
  "description": "A LISP expression enclosed by parenthesis is a valid command.",
  "condition": "WS-CURR-COMMAND contains parenthesis",
  "output": {
    "true": "valid command"
  }
}
{
  "id": "BR-002",
  "description": "The first occurrence of a parenthesis initiates a new command.",
  "condition": "WS-INIT-COMMAND-YES is False and WS-CURR-COMMAND contains an open parenthesis",
  "output": {
    "true": "start of new command"
  }
}
{
  "id": "BR-003",
  "description": "The last occurrence of a parenthesis ends the current command.",
  "condition": "WS-INIT-COMMAND-YES is True and WS-CURR-COMMAND contains a close parenthesis",
  "output": {
    "true": "end of current command"
  }
}
{
  "id": "BR-004",
  "description": "A command that starts with quotes is a value that can be applied to the current command.",
  "condition": "WS-CURR-COMMAND starts with a quote",
  "output": {
    "true": "value for current command"
  }
}
{
  "id": "BR-005",
  "description": "A command that starts with a numeric character is a value that can be applied to the current command.",
  "condition": "WS-CURR-COMMAND starts with a numeric character",
  "output": {
    "true": "value for current command"
  }
}
{
  "id": "BR-006",
  "description": "The value of the current command is stored in WS-CURRENT-VALUE.",
  "condition": "WS-CURR-COMMAND is not a value",
  "output": {
    "true": "value stored in WS-CURRENT-VALUE"
  }
}
{
  "id": "BR-007",
  "description": "The expression stored in WS-COMMAND-NAME is evaluated.",
  "condition": "WS-CURR-COMMAND is a value",
  "output": {
    "true": "expression evaluated"
  }
}
{
  "id": "BR-008",
  "description": "If the recursion flag is 'INIT' then the current command is saved in the recursion object.",
  "condition": "WS-RECURSION-FLAG is 'INIT'",
  "output": {
    "true": "command saved in recursion object"
  }
}
{
  "id": "BR-009",
  "description": "If the recursion flag is 'ADD-TO-CALL-STACK' then the current command is added to the call stack.",
  "condition": "WS-RECURSION-FLAG is 'ADD-TO-CALL-STACK'",
  "output": {
    "true": "command added to call stack"
  }
}
{
  "id": "BR-010",
  "description": "If the recursion flag is 'IS-EMPTY' then the call stack is checked for emptiness.",
  "condition": "WS-RECURSION-FLAG is 'IS-EMPTY'",
  "output": {
    "true": "call stack checked for emptiness"
  }
}
{
  "id": "BR-011",
  "description": "If the call stack is not empty then the top command is popped from the call stack.",
  "condition": "WS-RECURSION-FLAG is 'IS-EMPTY' AND call stack is not empty",
  "output": {
    "true": "top command popped from call stack"
  }
}
{
  "id": "BR-012",
  "description": "If the recursion flag is 'POP-CALL-STACK' then the current command is popped from the call stack.",
  "condition": "WS-RECURSION-FLAG is 'POP-CALL-STACK'",
  "output": {
    "true": "current command popped from call stack"
  }
}
{
  "id": "BR-013",
  "description": "If the recursion flag is 'CLOSE' then the call stack is closed.",
  "condition": "WS-RECURSION-FLAG is 'CLOSE'",
  "output": {
    "true": "call stack closed"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. LOGGER.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT OPTIONAL LOG-FILE ASSIGN TO DYNAMIC WS-LOG-FILE-NAME
               ORGANISATION IS LINE SEQUENTIAL.
       DATA DIVISION.
       FILE SECTION.
       FD LOG-FILE.
           01 LOG-RECORD.
               02 LOG-RECORD-ID PIC 9(10).
               02 LOG-RECORD-FUNCTION-NAME PIC X(40).
               02 LOG-RECORD-MESSAGE PIC X(100).
       WORKING-STORAGE SECTION.
           01 WS-LOG-FILE-NAME PIC X(20).
       LINKAGE SECTION.
           01 LS-LOG-OPERATION-FLAG PIC X(5).
           01 LS-LOG-RECORD.
               02 LS-LOG-RECORD-FUNCTION-NAME PIC X(40).
               02 LS-LOG-RECORD-MESSAGE PIC X(100).
       PROCEDURE DIVISION USING LS-LOG-OPERATION-FLAG, LS-LOG-RECORD.
       MAIN-PROCEDURE.
           EVALUATE LS-LOG-OPERATION-FLAG
           WHEN "OPEN"
               PERFORM LOG-INIT-PROCEDURE
           WHEN "CLOSE"
               PERFORM LOG-CLOSE-PROCEDURE
           WHEN "ADD"
               PERFORM LOG-WRITE-TO-PROCEDURE
           WHEN OTHER
               PERFORM LOG-FLAG-ERROR-PROCEDURE.
           GOBACK.
       LOG-INIT-PROCEDURE.
           MOVE '..\logs\log.data' TO WS-LOG-FILE-NAME.
           OPEN OUTPUT LOG-FILE.
           MOVE 1 TO LOG-RECORD-ID.
           MOVE "LOG-INIT-PROCEDURE" TO LOG-RECORD-FUNCTION-NAME.
           MOVE "Starting Program!" TO LOG-RECORD-MESSAGE.
           WRITE LOG-RECORD.
       LOG-WRITE-TO-PROCEDURE.
           ADD 1 TO LOG-RECORD-ID.
           MOVE LS-LOG-RECORD-FUNCTION-NAME TO LOG-RECORD-FUNCTION-NAME.
           MOVE LS-LOG-RECORD-MESSAGE TO LOG-RECORD-MESSAGE.
           WRITE LOG-RECORD.
       LOG-FLAG-ERROR-PROCEDURE.
           DISPLAY "READ FLAG ERROR".
       LOG-CLOSE-PROCEDURE.
           ADD 1 TO LOG-RECORD-ID.
           MOVE "LOGGER:LOG-CLOSE-PROCEDURE"
             TO LOG-RECORD-FUNCTION-NAME.
           MOVE "Closed logging file" TO LOG-RECORD-MESSAGE.
           WRITE LOG-RECORD.
           CLOSE LOG-FILE.
       END PROGRAM LOGGER.
[/INST]{
  "id": "BR-002",
  "description": "The program opens a log file, writes to the log file, and closes the log file upon request.",
  "condition": "LS-LOG-OPERATION-FLAG 'OPEN' OR 'CLOSE' OR 'ADD'",
  "output": {
    "open": "PERFORM LOG-INIT-PROCEDURE",
    "close": "PERFORM LOG-CLOSE-PROCEDURE",
    "add": "PERFORM LOG-WRITE-TO-PROCEDURE"
  }
},
{
  "id": "BR-003",
  "description": "The log file name is hardcoded to ..\logs\log.data.",
  "condition": "MOVE '..\logs\log.data' TO WS-LOG-FILE-NAME",
  "output": {
    "file name": "..\logs\log.data"
  }
},
{
  "id": "BR-004",
  "description": "The log file is opened with OUTPUT status.",
  "condition": "OPEN OUTPUT LOG-FILE",
  "output": {
    "status": "OUTPUT"
  }
},
{
  "id": "BR-005",
  "description": "The log record ID is incremented by 1 before each write to the log file.",
  "condition": "ADD 1 TO LOG-RECORD-ID",
  "output": {
    "increment": "1"
  }
},
{
  "id": "BR-006",
  "description": "The log record function name is set to the name of the calling procedure before each write to the log file.",
  "condition": "MOVE LS-LOG-RECORD-FUNCTION-NAME TO LOG-RECORD-FUNCTION-NAME",
  "output": {}
},
{
  "id": "BR-007",
  "description": "The log record message is set to the message passed in the calling procedure before each write to the log file.",
  "condition": "MOVE LS-LOG-RECORD-MESSAGE TO LOG-RECORD-MESSAGE",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. RECURSION.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT OPTIONAL CALL-STACK ASSIGN TO "stack.dat"
         ORGANIZATION IS INDEXED
         ACCESS IS RANDOM
         RECORD KEY IS COMMAND-ID.
       DATA DIVISION.
       FILE SECTION.
       FD CALL-STACK.
       01 CALL-STACK-FILE.
           02 COMMAND-ID PIC 9(5).
           02 COMMAND-NAME PIC X(20).
           02 COMMAND-RESULT PIC X(20).
           02 COMMAND-RESULT-NUMERIC
             REDEFINES COMMAND-RESULT PIC 9(20).
           02 COMMAND-RETURN-ID PIC 9(5).
           02 COMMAND-RETURNS-RESULT PIC X.
             88 COMMAND-RETURNS-RESULT-YES VALUE 'Y', FALSE 'N'.
       WORKING-STORAGE SECTION.
       01 WS-CALL-STACK-FILE-STATUS PIC X.
           88 WS-CALL-STACK-FILE-STATUS-OPEN VALUE 'Y', FALSE 'N'.
       01 WS-CALL-STACK.
           02 WS-COMMAND-ID PIC 9(5).
           02 WS-COMMAND-NAME PIC X(20).
           02 WS-COMMAND-RESULT PIC X(20).
           02 WS-COMMAND-RESULT-NUMERIC
             REDEFINES WS-COMMAND-RESULT PIC 9(20).
           02 WS-COMMAND-RETURN-ID PIC 9(5).
           02 WS-COMMAND-RETURN-VALUE PIC X(20).
           02 WS-COMMAND-RETURNS-RESULT PIC X.
               88 WS-COMMAND-RETURNS-RESULT-YES VALUE 'Y', FALSE 'N'.
       01 WS-CALL-STACK-EOF PIC A(1).
       01 WS-CALL-STACK-NEXT-ID PIC 9(5).
       01 WS-IS-LAST-EXPRESSION PIC X.
           88 WS-IS-LAST-EXPRESSION-YES VALUE 'Y', FALSE 'N'.
       01 WS-RETURN.
           02 WS-RETURN-VALUE PIC X(20).
           02 WS-RETURN-VALUE-NUMERIC PIC 9(20).
       01 WS-STACK-STATUS.
           02 WS-LAST-ID PIC 9(5).
           02 WS-OLDEST-ID PIC 9(5).
           02 WS-STACK-IS-EMPTY PIC X.
               88 WS-STACK-IS-EMPTY-YES VALUE 'Y', FALSE 'N'.
           01 WS-LOG-OPERATION-FLAG PIC X(5).
           01 WS-LOG-RECORD.
               02 WS-LOG-RECORD-FUNCTION-NAME PIC X(40).
               02 WS-LOG-RECORD-MESSAGE PIC X(100).
       LINKAGE SECTION.
       01 LS-RECURSION-FLAG PIC X(30).
       01 LS-RECURSION-OBJECT.
          02 LS-COMMAND-NAME PIC X(20).
          02 LS-COMMAND-RESULT PIC X(20).
          02 LS-COMMAND-RESULT-NUMERIC
          REDEFINES LS-COMMAND-RESULT PIC 9(20).
          02 LS-COMMAND-RETURNS-RESULT PIC X.
             88 LS-COMMAND-RETURNS-RESULT-YES VALUE 'Y', FALSE 'N'.
       PROCEDURE DIVISION USING LS-RECURSION-FLAG, LS-RECURSION-OBJECT.
       MAIN-PROCEDURE.
           EVALUATE LS-RECURSION-FLAG
           WHEN "INIT"
               PERFORM INIT-CALL-STACK-PROCEDURE
               PERFORM LOG-INIT-CALL-STACK
           WHEN "ADD-TO-CALL-STACK"
               PERFORM CALL-STACK-ADD-PROCEDURE
               PERFORM LOG-ADD-TO-CALL-STACK
           WHEN "PEEK"
               PERFORM CALL-STACK-GET-TOP-PROCEDURE
               PERFORM LOG-PEEK-CALL-STACK
           WHEN "POP-CALL-STACK"
               PERFORM LOG-POP-FROM-CALL-STACK
               PERFORM POP-CALL-STACK-PROCEDURE
           WHEN "IS-EMPTY"
               PERFORM IS-STACK-EMPTY-PROCEDURE
               PERFORM LOG-IS-EMPTY-CALL-STACK
           WHEN "PRINT-CALL-STACK"
               PERFORM PRINT-CALL-STACK-PROCEDURE
           WHEN "CLOSE"
               PERFORM CLOSE-CALL-STACK-PROCEDURE
               PERFORM LOG-CLOSE-CALL-STACK
           WHEN "STACK-FILE-STATUS"
               PERFORM CHECK-FILE-STATUS-PROCEDURE.
           GOBACK.
       LOG-INIT-CALL-STACK.
           MOVE "ADD" TO WS-LOG-OPERATION-FLAG.
           MOVE "RECURSION:INIT" TO WS-LOG-RECORD-FUNCTION-NAME.
           MOVE "Initialized Call Stack" TO WS-LOG-RECORD-MESSAGE.
           CALL 'LOGGER' USING WS-LOG-OPERATION-FLAG, WS-LOG-RECORD.
       LOG-ADD-TO-CALL-STACK.
           MOVE 'RECURSION:ADD-TO-CALL-STACK'
           TO WS-LOG-RECORD-FUNCTION-NAME.
           STRING COMMAND-ID DELIMITED BY SIZE
           COMMAND-NAME DELIMITED BY SIZE
           COMMAND-RETURN-ID DELIMITED BY SIZE
           INTO WS-LOG-RECORD-MESSAGE.
           MOVE "ADD" TO WS-LOG-OPERATION-FLAG.
           CALL 'LOGGER' USING WS-LOG-OPERATION-FLAG, WS-LOG-RECORD.
       LOG-PEEK-CALL-STACK.
           MOVE 'RECURSION:GET-TOP-CALL-STACK'
           TO WS-LOG-RECORD-FUNCTION-NAME.
           STRING COMMAND-ID DELIMITED BY SIZE
           COMMAND-NAME DELIMITED BY SIZE
           COMMAND-RETURN-ID DELIMITED BY SIZE
           INTO WS-LOG-RECORD-MESSAGE.
           MOVE "ADD" TO WS-LOG-OPERATION-FLAG.
           CALL 'LOGGER' USING WS-LOG-OPERATION-FLAG, WS-LOG-RECORD.
       LOG-POP-FROM-CALL-STACK.
           MOVE 'RECURSION:POP-CALL-STACK'
           TO WS-LOG-RECORD-FUNCTION-NAME.
           STRING COMMAND-ID DELIMITED BY SIZE
           COMMAND-NAME DELIMITED BY SIZE
           COMMAND-RETURN-ID DELIMITED BY SIZE
           INTO WS-LOG-RECORD-MESSAGE.
           MOVE "ADD" TO WS-LOG-OPERATION-FLAG.
           CALL 'LOGGER' USING WS-LOG-OPERATION-FLAG, WS-LOG-RECORD.
       LOG-IS-EMPTY-CALL-STACK.
           MOVE 'RECURSION:IS-EMPTY-CALL-STACK'
           TO WS-LOG-RECORD-FUNCTION-NAME.
           MOVE WS-STACK-IS-EMPTY TO WS-LOG-RECORD-MESSAGE.
           MOVE "ADD" TO WS-LOG-OPERATION-FLAG.
           CALL 'LOGGER' USING WS-LOG-OPERATION-FLAG, WS-LOG-RECORD.
       LOG-CLOSE-CALL-STACK.
           MOVE 'RECURSION:CLOSE-CALL-STACK'
           TO WS-LOG-RECORD-FUNCTION-NAME.
           MOVE "Closed call-stack file" TO WS-LOG-RECORD-MESSAGE.
           MOVE "ADD" TO WS-LOG-OPERATION-FLAG.
           CALL 'LOGGER' USING WS-LOG-OPERATION-FLAG, WS-LOG-RECORD.
       LOG-DELETE-FROM-CALL-STACK.
           MOVE 'RECURSION:DELETE-FROM-CALL-STACK'
           TO WS-LOG-RECORD-FUNCTION-NAME.
           STRING COMMAND-ID DELIMITED BY SIZE
           COMMAND-NAME DELIMITED BY SIZE
           COMMAND-RETURN-ID DELIMITED BY SIZE
           INTO WS-LOG-RECORD-MESSAGE.
           MOVE "ADD" TO WS-LOG-OPERATION-FLAG.
           CALL 'LOGGER' USING WS-LOG-OPERATION-FLAG, WS-LOG-RECORD.
       INIT-CALL-STACK-PROCEDURE.
           OPEN OUTPUT CALL-STACK.
           CLOSE CALL-STACK.
           OPEN I-O CALL-STACK.
           MOVE 1 TO WS-CALL-STACK-NEXT-ID.
           MOVE 1 TO WS-OLDEST-ID.
           MOVE 1 TO WS-LAST-ID.
           SET WS-STACK-IS-EMPTY-YES TO TRUE.
           SET WS-CALL-STACK-FILE-STATUS-OPEN TO TRUE.
       CLOSE-CALL-STACK-PROCEDURE.
           CLOSE CALL-STACK.
           DELETE FILE CALL-STACK.
           SET WS-CALL-STACK-FILE-STATUS-OPEN TO FALSE.
       CALL-STACK-ADD-PROCEDURE.
           MOVE WS-CALL-STACK-NEXT-ID TO COMMAND-ID.
           MOVE LS-COMMAND-NAME TO COMMAND-NAME.
           MOVE LS-COMMAND-RESULT TO COMMAND-RESULT.
           MOVE LS-COMMAND-RETURNS-RESULT TO COMMAND-RETURNS-RESULT.
           MOVE WS-LAST-ID TO COMMAND-RETURN-ID.
           WRITE CALL-STACK-FILE.
           IF WS-STACK-IS-EMPTY-YES THEN
               MOVE WS-CALL-STACK-NEXT-ID TO WS-OLDEST-ID
               SET WS-STACK-IS-EMPTY-YES TO FALSE
           END-IF.
           MOVE WS-CALL-STACK-NEXT-ID TO WS-LAST-ID.
           ADD 1 TO WS-CALL-STACK-NEXT-ID.
       PRINT-CALL-STACK-PROCEDURE.
           DISPLAY "PRINT-CALL-STACK-PROCEDURE".
           DISPLAY "ID    "
           "NAME                  "
           "RESULT              " "RESULT (NUMERIC)    "
           " RETURN ID    ".
           PERFORM VARYING COMMAND-ID FROM 1 BY 1
           UNTIL COMMAND-ID = WS-CALL-STACK-NEXT-ID
               READ CALL-STACK RECORD INTO WS-CALL-STACK
                   KEY IS COMMAND-ID
                   INVALID KEY DISPLAY "DELETED"
               END-READ
               DISPLAY WS-COMMAND-ID " " WS-COMMAND-NAME
               " " WS-COMMAND-RESULT " " WS-COMMAND-RESULT-NUMERIC " "
               WS-COMMAND-RETURN-ID " " WS-COMMAND-RETURN-VALUE " "
               WS-COMMAND-RETURNS-RESULT
           END-PERFORM.
       CALL-STACK-GET-TOP-PROCEDURE.
           MOVE WS-LAST-ID TO COMMAND-ID.
           READ CALL-STACK RECORD
               KEY IS COMMAND-ID
           END-READ.
           MOVE COMMAND-NAME TO LS-COMMAND-NAME.
           MOVE COMMAND-RESULT TO LS-COMMAND-RESULT.
       POP-CALL-STACK-PROCEDURE.
           MOVE WS-LAST-ID TO COMMAND-ID.
      D     DISPLAY "FROM POP-CALL-STACK-PROCEDURE:" COMMAND-ID.
           READ CALL-STACK RECORD.
           MOVE COMMAND-NAME TO LS-COMMAND-NAME.
           MOVE COMMAND-RESULT TO LS-COMMAND-RESULT.
           MOVE COMMAND-RETURN-ID TO WS-LAST-ID.
           DELETE CALL-STACK RECORD.
           IF COMMAND-ID = WS-OLDEST-ID THEN
               SET WS-STACK-IS-EMPTY-YES TO TRUE
           END-IF.
      D     DISPLAY "DELETED:" COMMAND-ID " GOTO:" WS-LAST-ID.
           DISPLAY " ".
       IS-STACK-EMPTY-PROCEDURE.
           IF WS-STACK-IS-EMPTY-YES THEN
               MOVE "STACK-EMPTY" TO LS-RECURSION-FLAG
           ELSE
               MOVE "NOT-EMPTY" TO LS-RECURSION-FLAG
           END-IF.
       CHECK-FILE-STATUS-PROCEDURE.
           MOVE WS-CALL-STACK-FILE-STATUS TO LS-RECURSION-FLAG.
       END PROGRAM RECURSION.
[/INST]{
  "id": "BR-001",
  "description": "A call stack is used to keep track of the order in which functions are called.",
  "condition": null,
  "output": {
    "empty": "STACK-EMPTY",
    "not empty": "NOT-EMPTY"
  }
}[INST]       identification division.
       program-id. snake.
       data division.
       working-storage section.
       01 ASCII-W pic 9(1) usage is comp value 119.
       01 ASCII-A pic 9(1) usage is comp value 97.
       01 ASCII-S pic 9(1) usage is comp value 115.
       01 ASCII-D pic 9(1) usage is comp value 100.
       01 ASCII-Q pic 9(1) usage is comp value 113.
       01 DIR-UP pic 9(1) value 1.
       01 DIR-LEFT pic 9(1) value 2.
       01 DIR-DOWN pic 9(1) value 3.
       01 DIR-RIGHT pic 9(1) value 4.
       01 VIS-SNAKE pic x(1) value "o".
       01 VIS-FOOD pic x(1) value "#".
       01 VIS-BLANK pic x(1) value ".".
       01 input-char pic 9(8) usage is comp.
       01 old-direction pic 9(1) value 3.
       01 cur-direction pic 9(1) value 3.
       01 snake.
             05 snake-part occurs 100 times indexed by snake-index.
             10 snake-x pic 9(2).
             10 snake-y pic 9(2).
       01 snake-len pic 9(3) usage is comp value 1.
       01 next-snake-pos.
             10 next-snake-x pic 9(2).
             10 next-snake-y pic 9(2).
       01 food.
             05 food-x pic 9(2).
             05 food-y pic 9(2).
       01 game-screen.
             05 screen-row occurs 10 times.
             10 screen-pixel pic x(1) value '.' occurs 10 times.
             10 screen-nl pic 9(1) usage is comp value 10.
             05 screen-null pic 9(1) usage is comp value 0.
       01 create-more-food pic 9(1) value 1.
       01 snake-grew pic 9(1) value 1.
       01 ms-count pic 9(3) usage is comp.
       01 ms-move-time pic 9(3) usage is comp value 350.
       procedure division.
       main-para.
           call "initscr".
           call "noecho".
           call "timeout" using by value 0.
           move VIS-SNAKE to screen-pixel(1, 1).
           move 1 to snake-x(1), snake-y(1).
           perform game-loop with test after until input-char = ASCII-Q.
           perform game-over.
       game-over.
           call "endwin".
           display "Game over man, GAME OVER! Score: "snake-len.
           stop run.
       game-loop.
           if create-more-food = 1 then
                 perform create-food
           end-if.
           call "clear".
           perform draw.
           perform input-para.
           if ms-count > ms-move-time then
                 perform handle-move
                 move 0 to ms-count
           end-if.
           call "usleep" using by value 1.
           add 1 to ms-count.
       input-para.
           call "getch" returning input-char.
           evaluate true
               when input-char = ASCII-W and not old-direction =
                     DIR-DOWN
                   move DIR-UP to cur-direction
               when input-char = ASCII-A and not old-direction =
                     DIR-RIGHT
                   move DIR-LEFT to cur-direction
               when input-char = ASCII-S and not old-direction =
                     DIR-UP
                   move DIR-DOWN to cur-direction
               when input-char = ASCII-D and not old-direction =
                     DIR-LEFT
                   move DIR-RIGHT to cur-direction
           end-evaluate.
       create-food.
           perform generate-food-location until screen-pixel(food-y,
           food-x) = VIS-BLANK.
           move VIS-FOOD to screen-pixel(food-y, food-x).
           move 0 to create-more-food.
       generate-food-location.
           compute food-x = function random * 10 + 1.
           compute food-y = function random * 10 + 1.
       draw.
           call "printw" using game-screen.
           call "printw" using "Score: %d", by value snake-len.
       shift-snake.
           compute snake-x(snake-index) = snake-x(snake-index - 1).
           compute snake-y(snake-index) = snake-y(snake-index - 1).
       handle-move.
           perform get-next-pos.
           move 0 to snake-grew.
           if screen-pixel(next-snake-y, next-snake-x) = "o" then
                 perform game-over
           else
                 if next-snake-x = food-x and next-snake-y = food-y then
                       add 1 to snake-len
                       compute snake-x(snake-len) = snake-x(
                             snake-len - 1)
                       compute snake-y(snake-len) = snake-y(
                             snake-len - 1)
                       move 1 to create-more-food
                       move 1 to snake-grew
                  end-if
           end-if.
           move VIS-SNAKE to screen-pixel(next-snake-y, next-snake-x).
           if snake-grew = 0 then
                 move VIS-BLANK to screen-pixel(snake-y(snake-len),
                       snake-x(snake-len))
           end-if.
           perform shift-snake varying snake-index from snake-len by -1
                 until snake-index = 1.
           move next-snake-x to snake-x(1).
           move next-snake-y to snake-y(1).
           move cur-direction to old-direction.
       get-next-pos.
           move snake-x(1) to next-snake-x.
           move snake-y(1) to next-snake-y.
           evaluate true
               when cur-direction = DIR-UP
                   perform get-next-pos-up
               when cur-direction = DIR-LEFT
                   perform get-next-pos-left
               when cur-direction = DIR-DOWN
                   perform get-next-pos-down
               when cur-direction = DIR-RIGHT
                   perform get-next-pos-right
           end-evaluate.
       get-next-pos-up.
           if snake-y(1) = 1 then
                 move 10 to next-snake-y
           else
                 subtract 1 from snake-y(1) giving next-snake-y
           end-if.
       get-next-pos-left.
           if snake-x(1) = 1 then
                 move 10 to next-snake-x
           else
                 subtract 1 from snake-x(1) giving next-snake-x
           end-if.
       get-next-pos-down.
           if snake-y(1) = 10 then
                 move 1 to next-snake-y
           else
                 add 1 to snake-y(1) giving next-snake-y
           end-if.
       get-next-pos-right.
           if snake-x(1) = 10 then
                 move 1 to next-snake-x
           else
                 add 1 to snake-x(1) giving next-snake-x
           end-if.
[/INST]{
  "id": "BR-001",
  "description": "On the game's playing field, a snake is a moving line of square tiles, and only one square tile can be occupied at a time.",
  "condition": "screen-pixel(next-snake-y, next-snake-x) = VIS-SNAKE",
  "output": {
    "hit": "Game Over, the snake hit itself!"
  }
}
{
  "id": "BR-002",
  "description": "The snake's movement direction is determined by the input character. It cannot reverse its movement direction.",
  "condition": "input-char = ASCII-W || input-char = ASCII-A || input-char = ASCII-S || input-char = ASCII-D",
  "output": {
    "up": "move DIR-UP to cur- direction",
    "left": "move DIR-LEFT to cur-direction",
    "down": "move DIR-DOWN to cur-direction",
    "right": "move DIR-RIGHT to cur-direction"
  }
}
{
  "id": "BR-003",
  "description": "If the snake eats the food, it grows by one tile, and the food disappears and a new food appears.",
  "condition": "|next-snake-x equals food-x| and |next-snake-y equals food-y|",
  "output": {
    "ate": {
      "increasesSnakeSize": "add 1 to snake-len",
      "createsNewFood": "move 1 to create-more-food"
    }
  }
}
{
  "id": "BR-004",
  "description": "The snake moves one tile in the current direction at a time.",
  "condition": "move next-snake-x to snake-x(1) and move next-snake-y to snake-y(1)",
  "output": {
    "updateSnakePosition": "Move snake's head to new calculated position"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. ABERTURAARQUIVOS.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT CLIENTES ASSIGN TO
           'C:\Users\Lucas\Desktop\Workspace\learning-COBOL\cobol\CLIENT
      -    'ES.DAT'
               ORGANIZATION IS INDEXED
               ACCESS MODE IS RANDOM
               FILE STATUS IS CLIENTES-STATUS
               RECORD KEY  IS CLIENTES-CHAVE.
       DATA DIVISION.
       FILE SECTION.
       FD CLIENTES.
       01 CLIENTS-REG.
           05 CLIENTES-CHAVE.
               10 CLIENTES-FONE PIC 9(09).
           05 CLIENTES-NOME     PIC X(30).
           05 CLIENTES-EMAIL    PIC X(40).
       WORKING-STORAGE SECTION.
       77 WRK-OPCAO    PIC X(1).
       77 WRK-MODULO   PIC X(25).
       77 WRK-TECLA    PIC X(1).
       77 CLIENTES-STATUS   PIC 9(02).
       SCREEN SECTION.
       01 TELA.
           05 LIMPA-TELA.
               10 BLANK SCREEN.
               10 LINE 01 COLUMN 01 PIC X(20) ERASE EOL
                   BACKGROUND-COLOR 3.
               10 LINE 01 COLUMN 25 PIC X(20)
                  BACKGROUND-COLOR 3 FOREGROUND-COLOR 0
                  FROM 'SISTEMA DE CLIENTES'.
               10 LINE 02 COLUMN 01 PIC X(25) ERASE EOL
                   BACKGROUND-COLOR 1 FROM WRK-MODULO.
       01 MENU.
           05 LINE 07 COLUMN 15 VALUE '1 - INCLUIR'.
           05 LINE 08 COLUMN 15 VALUE '2 - CONSULTAR'.
           05 LINE 09 COLUMN 15 VALUE '3 - ALTERAR'.
           05 LINE 10 COLUMN 15 VALUE '4 - EXCLUIR'.
           05 LINE 11 COLUMN 15 VALUE '5 - RELATORIO'.
           05 LINE 12 COLUMN 15 VALUE 'X - SAIDA'.
           05 LINE 14 COLUMN 15 VALUE 'OPCAO: '.
           05 LINE 14 COLUMN 23 USING WRK-OPCAO.
       PROCEDURE DIVISION.
       0001-PRINCIPAL SECTION.
           PERFORM 1000-INICIAR.
           PERFORM 2000-PROCESSAR.
           PERFORM 3000-FINALIZAR.
           STOP RUN.
       1000-INICIAR.
           OPEN I-O CLIENTES
               IF CLIENTES-STATUS = 35 THEN
                   OPEN OUTPUT CLIENTES
                   CLOSE CLIENTES
                   OPEN I-O CLIENTES
               END-IF.
           DISPLAY TELA.
           ACCEPT MENU.
       2000-PROCESSAR.
           EVALUATE WRK-OPCAO
               WHEN 1
                   PERFORM 5000-INCLUIR
               WHEN 2
                   CONTINUE
               WHEN 3
                   CONTINUE
               WHEN 4
                   CONTINUE
               WHEN 5
                   CONTINUE
               WHEN OTHER
                   IF WRK-OPCAO NOT EQUAL 'X'
                       DISPLAY 'ENTRE COM A OPCAO CORRETA'
                   END-IF
           END-EVALUATE.
       3000-FINALIZAR.
           CLOSE CLIENTES.
       5000-INCLUIR.
           MOVE 'MODULO - INCLUSAO ' TO WRK-MODULO.
           DISPLAY TELA.
           ACCEPT WRK-TECLA AT 1620.
[/INST]{
  "id": "BR-001",
  "description": "The file \\'CLIENTES.DAT\\' needs to be closed if it already exists, then reopened for output and then closed again before being reopened for input/output.",
  "condition": "CLIENTES-STATUS = 35",
  "output": {
    "true": "Close \\'CLIENTES.DAT\\', reopen it for output, close it again, and then reopen it for input/output"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. CLIENTES.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 WRK-OPCAO PIC X(1).
       SCREEN SECTION.
       01 TELA.
           05 LIMPA-TELA.
               10 BLANK SCREEN.
               10 LINE 01 COLUMN 01 ERASE EOL
                   BACKGROUND-COLOR 1.
       PROCEDURE DIVISION.
           DISPLAY TELA.
           ACCEPT WRK-OPCAO.
           STOP RUN.
[/INST]{
  "id": "BR-001",  "description": "The first interaction in the application shall be a prompt to the user to input an option.",
  "condition": null,
  "output": {
    "prompt": "Enter option"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  ENCERRANDOMENU.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT CLIENTES ASSIGN TO 'E:\COBOL\CLIENTES.DAT'
             ORGANIZATION IS INDEXED
             ACCESS MODE IS RANDOM
             FILE STATUS IS CLIENTES-STATUS
             RECORD KEY IS  CLIENTES-CHAVE.
       DATA DIVISION.
       FILE SECTION.
       FD CLIENTES.
       01 CLIENTES-REG.
            05 CLIENTES-CHAVE.
                10 CLIENTES-FONE PIC 9(09).
            05 CLIENTES-NOME     PIC X(30).
            05 CLIENTES-EMAIL    PIC X(40).
       WORKING-STORAGE SECTION.
       77 WRK-OPCAO       PIC X(1).
       77 WRK-MODULO      PIC X(25).
       77 WRK-TECLA       PIC X(1).
       77 CLIENTES-STATUS PIC 9(02).
       77 WRK-MSGERRO     PIC X(30).
       SCREEN SECTION.
       01 TELA.
            05 LIMPA-TELA.
                10 BLANK SCREEN.
                10 LINE 01 COLUMN 01 PIC X(20) ERASE EOL
                   BACKGROUND-COLOR 3.
                10 LINE 01 COLUMN 25 PIC X(20)
                   BACKGROUND-COLOR 3  FOREGROUND-COLOR 0
                              FROM 'SISTEMA DE CLIENTES '.
                10 LINE 02 COLUMN 01 PIC X(25) ERASE EOL
                   BACKGROUND-COLOR 1 FROM WRK-MODULO.
       01 MENU.
            05 LINE 07 COLUMN 15 VALUE '1 - INCLUIR'.
            05 LINE 08 COLUMN 15 VALUE '2 - CONSULTAR'.
            05 LINE 09 COLUMN 15 VALUE '3 - ALTERAR'.
            05 LINE 10 COLUMN 15 VALUE '4 - EXCLUIR'.
            05 LINE 11 COLUMN 15 VALUE '5 - RELATORIO'.
            05 LINE 12 COLUMN 15 VALUE 'X - SAIDA'.
            05 LINE 13 COLUMN 15 VALUE 'OPCAO......: ' .
            05 LINE 13 COLUMN 28 USING WRK-OPCAO.
       01 TELA-REGISTRO.
            05 CHAVE FOREGROUND-COLOR 2.
               10 LINE 10 COLUMN 10 VALUE 'TELEFONE '.
               10 COLUMN PLUS 2 PIC 9(09) USING CLIENTES-FONE
                   BLANK WHEN ZEROS.
            05 SS-DADOS.
               10 LINE 11 COLUMN 10 VALUE 'NOME.... '.
               10 COLUMN PLUS 2 PIC X(30) USING CLIENTES-NOME.
               10 LINE 12 COLUMN 10 VALUE 'EMAIL... '.
               10 COLUMN PLUS 2 PIC X(40) USING CLIENTES-EMAIL.
       01 MOSTRA-ERRO.
             02 MSG-ERRO.
               10 LINE 16 COLUMN 01 ERASE EOL
                             BACKGROUND-COLOR 3.
               10 LINE 16 COLUMN 10 PIC X(30)
                             BACKGROUND-COLOR 3
                             FROM WRK-MSGERRO.
               10 COLUMN PLUS 2 PIC X(01)
                             BACKGROUND-COLOR 3
                             USING WRK-TECLA.
       PROCEDURE DIVISION.
       0001-PRINCIPAL SECTION.
            PERFORM 1000-INICIAR THRU 1100-MONTATELA.
            PERFORM 2000-PROCESSAR UNTIL WRK-OPCAO = 'X'.
            PERFORM 3000-FINALIZAR.
            STOP RUN.
       1000-INICIAR.
            OPEN I-O CLIENTES
              IF CLIENTES-STATUS = 35 THEN
                  OPEN OUTPUT CLIENTES
                  CLOSE CLIENTES
                  OPEN I-O CLIENTES
               END-IF.
       1100-MONTATELA.
            DISPLAY TELA.
            ACCEPT MENU.
       2000-PROCESSAR.
            EVALUATE WRK-OPCAO
              WHEN 1
               PERFORM 5000-INCLUIR
              WHEN 2
                CONTINUE
              WHEN 3
                CONTINUE
              WHEN 4
                CONTINUE
              WHEN 5
                CONTINUE
              WHEN OTHER
                IF WRK-OPCAO NOT EQUAL 'X'
                    DISPLAY 'ENTRE COM OPCAO CORRETA'
                END-IF
            END-EVALUATE.
              PERFORM 1100-MONTATELA.
       3000-FINALIZAR.
             CLOSE CLIENTES.
       5000-INCLUIR.
             MOVE 'MODULO - INCLUSAO ' TO WRK-MODULO.
             DISPLAY TELA.
              ACCEPT TELA-REGISTRO.
                WRITE CLIENTES-REG
                 INVALID KEY
                   MOVE 'JA EXISTE ' TO WRK-MSGERRO
                   ACCEPT MOSTRA-ERRO
                END-WRITE.
[/INST]{
  "id": "BR-002",
  "description": "Client phone number is 9 digits long and must be numeric.",
  "condition": "CLIENTES-FONE\\nPICTURE 9(09)",
  "output": null
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  EXCLUINDOREGISTROS.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT CLIENTES ASSIGN TO
           'C:\Users\Lucas Magalhães\Desktop\Workspace\learning-COBOL\co
      -    'bol\CLIENTES.DAT'
             ORGANIZATION IS INDEXED
             ACCESS MODE IS RANDOM
             FILE STATUS IS CLIENTES-STATUS
             RECORD KEY IS  CLIENTES-CHAVE.
       DATA DIVISION.
       FILE SECTION.
       FD CLIENTES.
       01 CLIENTES-REG.
            05 CLIENTES-CHAVE.
                10 CLIENTES-FONE PIC 9(09).
            05 CLIENTES-NOME     PIC X(30).
            05 CLIENTES-EMAIL    PIC X(40).
       WORKING-STORAGE SECTION.
       77 WRK-OPCAO       PIC X(1).
       77 WRK-MODULO      PIC X(25).
       77 WRK-TECLA       PIC X(1).
       77 CLIENTES-STATUS PIC 9(02).
       77 WRK-MSGERRO     PIC X(30).
       SCREEN SECTION.
       01 TELA.
            05 LIMPA-TELA.
                10 BLANK SCREEN.
                10 LINE 01 COLUMN 01 PIC X(20) ERASE EOL
                   BACKGROUND-COLOR 3.
                10 LINE 01 COLUMN 25 PIC X(20)
                   BACKGROUND-COLOR 3  FOREGROUND-COLOR 0
                              FROM 'SISTEMA DE CLIENTES '.
                10 LINE 02 COLUMN 01 PIC X(25) ERASE EOL
                   BACKGROUND-COLOR 1 FROM WRK-MODULO.
       01 MENU.
            05 LINE 07 COLUMN 15 VALUE '1 - INCLUIR'.
            05 LINE 08 COLUMN 15 VALUE '2 - CONSULTAR'.
            05 LINE 09 COLUMN 15 VALUE '3 - ALTERAR'.
            05 LINE 10 COLUMN 15 VALUE '4 - EXCLUIR'.
            05 LINE 11 COLUMN 15 VALUE '5 - RELATORIO'.
            05 LINE 12 COLUMN 15 VALUE 'X - SAIDA'.
            05 LINE 13 COLUMN 15 VALUE 'OPCAO......: ' .
            05 LINE 13 COLUMN 28 USING WRK-OPCAO.
       01 TELA-REGISTRO.
            05 CHAVE FOREGROUND-COLOR 2.
               10 LINE 10 COLUMN 10 VALUE 'TELEFONE '.
               10 COLUMN PLUS 2 PIC 9(09) USING CLIENTES-FONE
                   BLANK WHEN ZEROS.
            05 SS-DADOS.
               10 LINE 11 COLUMN 10 VALUE 'NOME.... '.
               10 COLUMN PLUS 2 PIC X(30) USING CLIENTES-NOME.
               10 LINE 12 COLUMN 10 VALUE 'EMAIL... '.
               10 COLUMN PLUS 2 PIC X(40) USING CLIENTES-EMAIL.
       01 MOSTRA-ERRO.
             02 MSG-ERRO.
               10 LINE 16 COLUMN 01 ERASE EOL
                             BACKGROUND-COLOR 3.
               10 LINE 16 COLUMN 10 PIC X(30)
                             BACKGROUND-COLOR 3
                             FROM WRK-MSGERRO.
               10 COLUMN PLUS 2 PIC X(01)
                             BACKGROUND-COLOR 3
                             USING WRK-TECLA.
       PROCEDURE DIVISION.
       0001-PRINCIPAL SECTION.
            PERFORM 1000-INICIAR THRU 1100-MONTATELA.
            PERFORM 2000-PROCESSAR UNTIL WRK-OPCAO = 'X'.
            PERFORM 3000-FINALIZAR.
            STOP RUN.
       1000-INICIAR.
            OPEN I-O CLIENTES
              IF CLIENTES-STATUS = 35 THEN
                  OPEN OUTPUT CLIENTES
                  CLOSE CLIENTES
                  OPEN I-O CLIENTES
               END-IF.
       1100-MONTATELA.
            DISPLAY TELA.
            ACCEPT MENU.
       2000-PROCESSAR.
            MOVE SPACES TO CLIENTES-NOME CLIENTES-EMAIL WRK-MSGERRO.
            EVALUATE WRK-OPCAO
              WHEN 1
               PERFORM 5000-INCLUIR
              WHEN 2
                PERFORM 6000-CONSULTAR
              WHEN 3
                CONTINUE
              WHEN 4
                PERFORM 8000-EXCLUIR
              WHEN 5
                CONTINUE
              WHEN OTHER
                IF WRK-OPCAO NOT EQUAL 'X'
                    DISPLAY 'ENTRE COM OPCAO CORRETA'
                END-IF
            END-EVALUATE.
              PERFORM 1100-MONTATELA.
       3000-FINALIZAR.
             CLOSE CLIENTES.
       5000-INCLUIR.
             MOVE 'MODULO - INCLUSAO ' TO WRK-MODULO.
             DISPLAY TELA.
              ACCEPT TELA-REGISTRO.
                WRITE CLIENTES-REG
                 INVALID KEY
                   MOVE 'JA EXISTE ' TO WRK-MSGERRO
                   ACCEPT MOSTRA-ERRO
                END-WRITE.
       6000-CONSULTAR.
             MOVE 'MODULO - CONSULTA ' TO WRK-MODULO.
             DISPLAY TELA.
               DISPLAY TELA-REGISTRO.
               ACCEPT CHAVE.
                READ CLIENTES
                  INVALID KEY
                   MOVE 'NAO ENCONTRADO   '  TO WRK-MSGERRO
                  NOT INVALID KEY
                  MOVE '--  ENCONTRADO  --'  TO WRK-MSGERRO
                   DISPLAY SS-DADOS
                 END-READ.
                   ACCEPT MOSTRA-ERRO.
       8000-EXCLUIR.
             MOVE 'MODULO - EXCLUSAO ' TO WRK-MODULO.
             DISPLAY TELA.
               DISPLAY TELA-REGISTRO.
               ACCEPT CHAVE.
                READ CLIENTES
                  INVALID KEY
                   MOVE 'NAO ENCONTRADO   '  TO WRK-MSGERRO
                 NOT INVALID KEY
                  MOVE ' ENCONTRADO  (S/N) ? '  TO WRK-MSGERRO
                   DISPLAY SS-DADOS
                END-READ.
                  ACCEPT MOSTRA-ERRO.
                    IF WRK-TECLA = 'S' AND CLIENTES-STATUS = 0
                           DELETE CLIENTES
                            INVALID KEY
                            MOVE 'NAO EXCLUIDO ' TO WRK-MSGERRO
                            ACCEPT  MOSTRA-ERRO
                          END-DELETE
                     END-IF.
[/INST]{
  "id": "BR-001",
  "description": "The CLIENTES file is opened as indexed, random access mode.",
  "condition": null,
  "output": null
}
{
  "id": "BR-002",
  "description": "Before opening the CLIENTES file, the program checks if the file status is 35 (file does not exist).",
  "condition": "CLIENTES-STATUS = 35",
  "output": null
}
{
  "id": "BR-003",
  "description": "If the file does not exist, the program opens it in output mode to create it, then closes it and reopens it in input/output mode.",
  "condition": null,
  "output": null
}
{
  "id": "BR-004",
  "description": "When the user selects option 1 (include), the program moves spaces to the variables CLIENTES-NOME, CLIENTES-EMAIL, and WRK-MSGERRO.",
  "condition": "WRK-OPCAO = 1",
  "output": {
    "CLIENTES-NOME": "spaces",
    "CLIENTES-EMAIL": "spaces",
    "WRK-MSGERRO": "spaces"
  }
}
{
  "id": "BR-005",
  "description": "The program validates the key when writing to the CLIENTES file. If the key already exists, the program displays an error message and accepts a key from the user.",
  "condition": "INVALID KEY",
  "output": {
    "error": "JA EXISTE",
    "key": "user input"
  }
}
{
  "id": "BR-006",
  "description": "When the user selects option 2 (consult), the program displays the record corresponding to the key entered by the user.",
  "condition": "WRK-OPCAO = 2",
  "output": {
    "record": "CLIENTES-REG"
  }
}
{
  "id": "BR-007",
  "description": "The program validates the key when reading from the CLIENTES file. If the key does not exist, the program displays an error message and accepts a key from the user.",
  "condition": "INVALID KEY",
  "output": {
    "error": "NAO ENCONTRADO",
    "key": "user input"
  }
}
{
  "id": "BR-008",
  "description": "When the user selects option 4 (exclude), the program displays the record corresponding to the key entered by the user.",
  "condition": "WRK-OPCAO = 4",
  "output": {
    "record": "CLIENTES-REG"
  }
}
{
  "id": "BR-009",
  "description": "The program validates the key when reading from the CLIENTES file. If the key does not exist, the program displays an error message and accepts a key from the user.",
  "condition": "INVALID KEY",
  "output": {
    "error": "NAO ENCONTRADO",
    "key": "user input"
  }
}
{
  "id": "BR-010",
  "description": "If the key exists and the record status is 0 (active), the program deletes the record.",
  "condition": "CLIENTES-STATUS = 0",
  "output": {
    "delete": "CLIENTES"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  GERANDORELATORIO.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT CLIENTES ASSIGN TO 'E:\COBOL\CLIENTES.DAT'
             ORGANIZATION IS INDEXED
             ACCESS MODE IS DYNAMIC
             FILE STATUS IS CLIENTES-STATUS
             RECORD KEY IS  CLIENTES-CHAVE.
       DATA DIVISION.
       FILE SECTION.
       FD CLIENTES.
       01 CLIENTES-REG.
            05 CLIENTES-CHAVE.
                10 CLIENTES-FONE PIC 9(09).
            05 CLIENTES-NOME     PIC X(30).
            05 CLIENTES-EMAIL    PIC X(40).
       WORKING-STORAGE SECTION.
       77 WRK-OPCAO       PIC X(1).
       77 WRK-MODULO      PIC X(25).
       77 WRK-TECLA       PIC X(1).
       77 CLIENTES-STATUS PIC 9(02).
       77 WRK-MSGERRO     PIC X(30).
       SCREEN SECTION.
       01 TELA.
            05 LIMPA-TELA.
                10 BLANK SCREEN.
                10 LINE 01 COLUMN 01 PIC X(20) ERASE EOL
                   BACKGROUND-COLOR 3.
                10 LINE 01 COLUMN 25 PIC X(20)
                   BACKGROUND-COLOR 3  FOREGROUND-COLOR 0
                              FROM 'SISTEMA DE CLIENTES '.
                10 LINE 02 COLUMN 01 PIC X(25) ERASE EOL
                   BACKGROUND-COLOR 1 FROM WRK-MODULO.
       01 MENU.
            05 LINE 07 COLUMN 15 VALUE '1 - INCLUIR'.
            05 LINE 08 COLUMN 15 VALUE '2 - CONSULTAR'.
            05 LINE 09 COLUMN 15 VALUE '3 - ALTERAR'.
            05 LINE 10 COLUMN 15 VALUE '4 - EXCLUIR'.
            05 LINE 11 COLUMN 15 VALUE '5 - RELATORIO'.
            05 LINE 12 COLUMN 15 VALUE 'X - SAIDA'.
            05 LINE 13 COLUMN 15 VALUE 'OPCAO......: ' .
            05 LINE 13 COLUMN 28 USING WRK-OPCAO.
       01 TELA-REGISTRO.
            05 CHAVE FOREGROUND-COLOR 2.
               10 LINE 10 COLUMN 10 VALUE 'TELEFONE '.
               10 COLUMN PLUS 2 PIC 9(09) USING CLIENTES-FONE
                   BLANK WHEN ZEROS.
            05 SS-DADOS.
               10 LINE 11 COLUMN 10 VALUE 'NOME.... '.
               10 COLUMN PLUS 2 PIC X(30) USING CLIENTES-NOME.
               10 LINE 12 COLUMN 10 VALUE 'EMAIL... '.
               10 COLUMN PLUS 2 PIC X(40) USING CLIENTES-EMAIL.
       01 MOSTRA-ERRO.
             02 MSG-ERRO.
               10 LINE 16 COLUMN 01 ERASE EOL
                             BACKGROUND-COLOR 3.
               10 LINE 16 COLUMN 10 PIC X(30)
                             BACKGROUND-COLOR 3
                             FROM WRK-MSGERRO.
               10 COLUMN PLUS 2 PIC X(01)
                             BACKGROUND-COLOR 3
                             USING WRK-TECLA.
       PROCEDURE DIVISION.
       0001-PRINCIPAL SECTION.
            PERFORM 1000-INICIAR THRU 1100-MONTATELA.
            PERFORM 2000-PROCESSAR UNTIL WRK-OPCAO = 'X'.
            PERFORM 3000-FINALIZAR.
            STOP RUN.
       1000-INICIAR.
            OPEN I-O CLIENTES
              IF CLIENTES-STATUS = 35 THEN
                  OPEN OUTPUT CLIENTES
                  CLOSE CLIENTES
                  OPEN I-O CLIENTES
               END-IF.
       1100-MONTATELA.
            DISPLAY TELA.
            ACCEPT MENU.
       2000-PROCESSAR.
            MOVE SPACES TO CLIENTES-NOME CLIENTES-EMAIL WRK-MSGERRO.
            EVALUATE WRK-OPCAO
              WHEN 1
               PERFORM 5000-INCLUIR
              WHEN 2
                PERFORM 6000-CONSULTAR
              WHEN 3
                PERFORM 7000-ALTERAR
              WHEN 4
                PERFORM 8000-EXCLUIR
              WHEN 5
                PERFORM 9000-RELATORIOTELA
              WHEN OTHER
                IF WRK-OPCAO NOT EQUAL 'X'
                    DISPLAY 'ENTRE COM OPCAO CORRETA'
                END-IF
            END-EVALUATE.
              PERFORM 1100-MONTATELA.
       3000-FINALIZAR.
             CLOSE CLIENTES.
       5000-INCLUIR.
             MOVE 'MODULO - INCLUSAO ' TO WRK-MODULO.
             DISPLAY TELA.
              ACCEPT TELA-REGISTRO.
                WRITE CLIENTES-REG
                 INVALID KEY
                   MOVE 'JA EXISTE ' TO WRK-MSGERRO
                   ACCEPT MOSTRA-ERRO
                END-WRITE.
       6000-CONSULTAR.
             MOVE 'MODULO - CONSULTA ' TO WRK-MODULO.
             DISPLAY TELA.
               DISPLAY TELA-REGISTRO.
               ACCEPT CHAVE.
                READ CLIENTES
                  INVALID KEY
                   MOVE 'NAO ENCONTRADO   '  TO WRK-MSGERRO
                  NOT INVALID KEY
                  MOVE '--  ENCONTRADO  --'  TO WRK-MSGERRO
                   DISPLAY SS-DADOS
                 END-READ.
                   ACCEPT MOSTRA-ERRO.
       7000-ALTERAR.
             MOVE 'MODULO - ALTERAR ' TO WRK-MODULO.
             DISPLAY TELA.
             DISPLAY TELA-REGISTRO.
              ACCEPT CHAVE.
                READ CLIENTES
                IF CLIENTES-STATUS = 0
                    ACCEPT SS-DADOS
                     REWRITE CLIENTES-REG
                       IF CLIENTES-STATUS = 0
                            MOVE 'REGISTRO ALTERADO ' TO WRK-MSGERRO
                            ACCEPT MOSTRA-ERRO
                       ELSE
                            MOVE 'REGISTRO NAO ALTERADO' TO WRK-MSGERRO
                            ACCEPT MOSTRA-ERRO
                       END-IF
                 ELSE
                      MOVE 'REGISTO NAO ENCONTRADO ' TO WRK-MSGERRO
                      ACCEPT MOSTRA-ERRO
                END-IF.
       8000-EXCLUIR.
             MOVE 'MODULO - EXCLUSAO ' TO WRK-MODULO.
             DISPLAY TELA.
               DISPLAY TELA-REGISTRO.
               ACCEPT CHAVE.
                READ CLIENTES
                  INVALID KEY
                   MOVE 'NAO ENCONTRADO   '  TO WRK-MSGERRO
                 NOT INVALID KEY
                  MOVE ' ENCONTRADO  (S/N) ? '  TO WRK-MSGERRO
                   DISPLAY SS-DADOS
                END-READ.
                  ACCEPT MOSTRA-ERRO.
                    IF WRK-TECLA = 'S' AND CLIENTES-STATUS = 0
                           DELETE CLIENTES
                            INVALID KEY
                            MOVE 'NAO EXCLUIDO ' TO WRK-MSGERRO
                            ACCEPT  MOSTRA-ERRO
                          END-DELETE
                     END-IF.
       9000-RELATORIOTELA.
             MOVE 'MODULO - RELATORIO ' TO WRK-MODULO.
             DISPLAY TELA.
               MOVE 'MODULO - RELATORIO ' TO WRK-MODULO.
                   MOVE 12345 TO CLIENTES-FONE
               START CLIENTES KEY EQUAL CLIENTES-FONE.
             READ CLIENTES
                 INVALID KEY
                     MOVE 'NENHUM REGISTRO ENCONTRADO' TO WRK-MSGERRO
                  NOT INVALID KEY
                   DISPLAY '   RELATORIO DE CLIENTES '
                   DISPLAY '----------------------'
                   PERFORM UNTIL CLIENTES-STATUS = 10
                     DISPLAY CLIENTES-FONE ' '
                           CLIENTES-NOME ' '
                           CLIENTES-EMAIL
                     READ CLIENTES NEXT
                   END-PERFORM
             END-READ.
               ACCEPT MOSTRA-ERRO.
[/INST]{
  "id": "BR-002",
  "description": "The first option on the menu is to include a new client.",
  "condition": "WRK-OPCAO = 1",
  "output": {
    "menu": "1 - INCLUIR"
  }
}
{
  "id": "BR-003",
  "description": "The second option on the menu is to consult a client.",
  "condition": "WRK-OPCAO = 2",
  "output": {
    "menu": "2 - CONSULTAR"
  }
}
{
  "id": "BR-004",
  "description": "The third option on the menu is to modify a client.",
  "condition": "WRK-OPCAO = 3",
  "output": {
    "menu": "3 - ALTERAR"
  }
}
{
  "id": "BR-005",
  "description": "The fourth option on the menu is to exclude a client.",
  "condition": "WRK-OPCAO = 4",
  "output": {
    "menu": "4 - EXCLUIR"
  }
}
{
  "id": "BR-006",
  "description": "The fifth option on the menu is to generate a report of all clients.",
  "condition": "WRK-OPCAO = 5",
  "output": {
    "menu": "5 - RELATORIO"
  }
}
{
  "id": "BR-007",
  "description": "The last option on the menu is to exit the program.",
  "condition": "WRK-OPCAO = X",
  "output": {
    "menu": "X - SAIDA"
  }
}
{
  "id": "BR-008",
  "description": "When including a new client, if the phone number already exists in the system, an error message is displayed.",
  "condition": "WRITE CLIENTES-REG INVALID KEY",
  "output": {
    "error": "JA EXISTE "
  }
}
{
  "id": "BR-009",
  "description": "When consulting a client, if the phone number does not exist in the system, an error message is displayed.",
  "condition": "READ CLIENTES INVALID KEY",
  "output": {
    "error": "NAO ENCONTRADO   "
  }
}
{
  "id": "BR-010",
  "description": "When altering a client, if the phone number does not exist in the system, an error message is displayed.",
  "condition": "READ CLIENTES INVALID KEY",
  "output": {
    "error": "REGISTRO NAO ENCONTRADO "
  }
}
{
  "id": "BR-011",
  "description": "When deleting a client, if the phone number does not exist in the system, an error message is displayed.",
  "condition": "READ CLIENTES INVALID KEY",
  "output": {
    "error": "NAO ENCONTRADO   "
  }
}
{
  "id": "BR-012",
  "description": "When generating a report of all clients, if there are no clients in the system, an error message is displayed.",
  "condition": "READ CLIENTES INVALID KEY",
  "output": {
    "error": "NENHUM REGISTRO ENCONTRADO"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  GERANDORELATORIO.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT CLIENTES ASSIGN TO 'E:\COBOL\CLIENTES.DAT'
             ORGANIZATION IS INDEXED
             ACCESS MODE IS DYNAMIC
             FILE STATUS IS CLIENTES-STATUS
             RECORD KEY IS  CLIENTES-CHAVE.
       DATA DIVISION.
       FILE SECTION.
       FD CLIENTES.
       01 CLIENTES-REG.
            05 CLIENTES-CHAVE.
                10 CLIENTES-FONE PIC 9(09).
            05 CLIENTES-NOME     PIC X(30).
            05 CLIENTES-EMAIL    PIC X(40).
       WORKING-STORAGE SECTION.
       77 WRK-OPCAO       PIC X(1).
       77 WRK-MODULO      PIC X(25).
       77 WRK-TECLA       PIC X(1).
       77 CLIENTES-STATUS PIC 9(02).
       77 WRK-MSGERRO     PIC X(30).
       SCREEN SECTION.
       01 TELA.
            05 LIMPA-TELA.
                10 BLANK SCREEN.
                10 LINE 01 COLUMN 01 PIC X(20) ERASE EOL
                   BACKGROUND-COLOR 3.
                10 LINE 01 COLUMN 25 PIC X(20)
                   BACKGROUND-COLOR 3  FOREGROUND-COLOR 0
                              FROM 'SISTEMA DE CLIENTES '.
                10 LINE 02 COLUMN 01 PIC X(25) ERASE EOL
                   BACKGROUND-COLOR 1 FROM WRK-MODULO.
       01 MENU.
            05 LINE 07 COLUMN 15 VALUE '1 - INCLUIR'.
            05 LINE 08 COLUMN 15 VALUE '2 - CONSULTAR'.
            05 LINE 09 COLUMN 15 VALUE '3 - ALTERAR'.
            05 LINE 10 COLUMN 15 VALUE '4 - EXCLUIR'.
            05 LINE 11 COLUMN 15 VALUE '5 - RELATORIO'.
            05 LINE 12 COLUMN 15 VALUE 'X - SAIDA'.
            05 LINE 13 COLUMN 15 VALUE 'OPCAO......: ' .
            05 LINE 13 COLUMN 28 USING WRK-OPCAO.
       01 TELA-REGISTRO.
            05 CHAVE FOREGROUND-COLOR 2.
               10 LINE 10 COLUMN 10 VALUE 'TELEFONE '.
               10 COLUMN PLUS 2 PIC 9(09) USING CLIENTES-FONE
                   BLANK WHEN ZEROS.
            05 SS-DADOS.
               10 LINE 11 COLUMN 10 VALUE 'NOME.... '.
               10 COLUMN PLUS 2 PIC X(30) USING CLIENTES-NOME.
               10 LINE 12 COLUMN 10 VALUE 'EMAIL... '.
               10 COLUMN PLUS 2 PIC X(40) USING CLIENTES-EMAIL.
       01 MOSTRA-ERRO.
             02 MSG-ERRO.
               10 LINE 16 COLUMN 01 ERASE EOL
                             BACKGROUND-COLOR 3.
               10 LINE 16 COLUMN 10 PIC X(30)
                             BACKGROUND-COLOR 3
                             FROM WRK-MSGERRO.
               10 COLUMN PLUS 2 PIC X(01)
                             BACKGROUND-COLOR 3
                             USING WRK-TECLA.
       PROCEDURE DIVISION.
       0001-PRINCIPAL SECTION.
            PERFORM 1000-INICIAR THRU 1100-MONTATELA.
            PERFORM 2000-PROCESSAR UNTIL WRK-OPCAO = 'X'.
            PERFORM 3000-FINALIZAR.
            STOP RUN.
       1000-INICIAR.
            OPEN I-O CLIENTES
              IF CLIENTES-STATUS = 35 THEN
                  OPEN OUTPUT CLIENTES
                  CLOSE CLIENTES
                  OPEN I-O CLIENTES
               END-IF.
       1100-MONTATELA.
            DISPLAY TELA.
            ACCEPT MENU.
       2000-PROCESSAR.
            MOVE SPACES TO CLIENTES-NOME CLIENTES-EMAIL WRK-MSGERRO.
            EVALUATE WRK-OPCAO
              WHEN 1
               PERFORM 5000-INCLUIR
              WHEN 2
                PERFORM 6000-CONSULTAR
              WHEN 3
                PERFORM 7000-ALTERAR
              WHEN 4
                PERFORM 8000-EXCLUIR
              WHEN 5
                PERFORM 9000-RELATORIOTELA
              WHEN OTHER
                IF WRK-OPCAO NOT EQUAL 'X'
                    DISPLAY 'ENTRE COM OPCAO CORRETA'
                END-IF
            END-EVALUATE.
              PERFORM 1100-MONTATELA.
       3000-FINALIZAR.
             CLOSE CLIENTES.
       5000-INCLUIR.
             MOVE 'MODULO - INCLUSAO ' TO WRK-MODULO.
             DISPLAY TELA.
              ACCEPT TELA-REGISTRO.
                WRITE CLIENTES-REG
                 INVALID KEY
                   MOVE 'JA EXISTE ' TO WRK-MSGERRO
                   ACCEPT MOSTRA-ERRO
                END-WRITE.
       6000-CONSULTAR.
             MOVE 'MODULO - CONSULTA ' TO WRK-MODULO.
             DISPLAY TELA.
               DISPLAY TELA-REGISTRO.
               ACCEPT CHAVE.
                READ CLIENTES
                  INVALID KEY
                   MOVE 'NAO ENCONTRADO   '  TO WRK-MSGERRO
                  NOT INVALID KEY
                  MOVE '--  ENCONTRADO  --'  TO WRK-MSGERRO
                   DISPLAY SS-DADOS
                 END-READ.
                   ACCEPT MOSTRA-ERRO.
       7000-ALTERAR.
             MOVE 'MODULO - ALTERAR ' TO WRK-MODULO.
             DISPLAY TELA.
             DISPLAY TELA-REGISTRO.
              ACCEPT CHAVE.
                READ CLIENTES
                IF CLIENTES-STATUS = 0
                    ACCEPT SS-DADOS
                     REWRITE CLIENTES-REG
                       IF CLIENTES-STATUS = 0
                            MOVE 'REGISTRO ALTERADO ' TO WRK-MSGERRO
                            ACCEPT MOSTRA-ERRO
                       ELSE
                            MOVE 'REGISTRO NAO ALTERADO' TO WRK-MSGERRO
                            ACCEPT MOSTRA-ERRO
                       END-IF
                 ELSE
                      MOVE 'REGISTO NAO ENCONTRADO ' TO WRK-MSGERRO
                      ACCEPT MOSTRA-ERRO
                END-IF.
       8000-EXCLUIR.
             MOVE 'MODULO - EXCLUSAO ' TO WRK-MODULO.
             DISPLAY TELA.
               DISPLAY TELA-REGISTRO.
               ACCEPT CHAVE.
                READ CLIENTES
                  INVALID KEY
                   MOVE 'NAO ENCONTRADO   '  TO WRK-MSGERRO
                 NOT INVALID KEY
                  MOVE ' ENCONTRADO  (S/N) ? '  TO WRK-MSGERRO
                   DISPLAY SS-DADOS
                END-READ.
                  ACCEPT MOSTRA-ERRO.
                    IF WRK-TECLA = 'S' AND CLIENTES-STATUS = 0
                           DELETE CLIENTES
                            INVALID KEY
                            MOVE 'NAO EXCLUIDO ' TO WRK-MSGERRO
                            ACCEPT  MOSTRA-ERRO
                          END-DELETE
                     END-IF.
       9000-RELATORIOTELA.
             MOVE 'MODULO - RELATORIO ' TO WRK-MODULO.
             DISPLAY TELA.
               ACCEPT CHAVE.
               DISPLAY TELA.
               START CLIENTES KEY EQUAL CLIENTES-FONE.
             READ CLIENTES
                 INVALID KEY
                     MOVE 'NENHUM REGISTRO ENCONTRADO' TO WRK-MSGERRO
                  NOT INVALID KEY
                   DISPLAY '   RELATORIO DE CLIENTES '
                   DISPLAY '----------------------'
                   PERFORM UNTIL CLIENTES-STATUS = 10
                     DISPLAY CLIENTES-FONE ' '
                           CLIENTES-NOME ' '
                           CLIENTES-EMAIL
                     READ CLIENTES NEXT
                   END-PERFORM
             END-READ.
               ACCEPT MOSTRA-ERRO.
[/INST]{
  "id": "BR-002",
  "description": "A new client can be added if it was not previously added.",
  "condition": "READ CLIENTES INVALID KEY",
  "output": {
    "new client added": "REGISTRO ALTERADO ",
    "client already exists": "JA EXISTE"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. INCLUINDOREGISTROS.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT CLIENTES ASSIGN TO
           'C:\Users\Lucas\Desktop\Workspace\learning-COBOL\cobol\CLIENT
      -    'ES.DAT'
               ORGANIZATION IS INDEXED
               ACCESS MODE IS RANDOM
               FILE STATUS IS CLIENTES-STATUS
               RECORD KEY  IS CLIENTES-CHAVE.
       DATA DIVISION.
       FILE SECTION.
       FD CLIENTES.
       01 CLIENTS-REG.
           05 CLIENTES-CHAVE.
               10 CLIENTES-FONE PIC 9(09).
           05 CLIENTES-NOME     PIC X(30).
           05 CLIENTES-EMAIL    PIC X(40).
       WORKING-STORAGE SECTION.
       77 WRK-OPCAO    PIC X(1).
       77 WRK-MODULO   PIC X(25).
       77 WRK-TECLA    PIC X(1).
       77 CLIENTES-STATUS   PIC 9(02).
       SCREEN SECTION.
       01 TELA.
           05 LIMPA-TELA.
               10 BLANK SCREEN.
               10 LINE 01 COLUMN 01 PIC X(20) ERASE EOL
                   BACKGROUND-COLOR 3.
               10 LINE 01 COLUMN 25 PIC X(20)
                  BACKGROUND-COLOR 3 FOREGROUND-COLOR 0
                  FROM 'SISTEMA DE CLIENTES'.
               10 LINE 02 COLUMN 01 PIC X(25) ERASE EOL
                   BACKGROUND-COLOR 1 FROM WRK-MODULO.
       01 MENU.
           05 LINE 07 COLUMN 15 VALUE '1 - INCLUIR'.
           05 LINE 08 COLUMN 15 VALUE '2 - CONSULTAR'.
           05 LINE 09 COLUMN 15 VALUE '3 - ALTERAR'.
           05 LINE 10 COLUMN 15 VALUE '4 - EXCLUIR'.
           05 LINE 11 COLUMN 15 VALUE '5 - RELATORIO'.
           05 LINE 12 COLUMN 15 VALUE 'X - SAIDA'.
           05 LINE 14 COLUMN 15 VALUE 'OPCAO: '.
           05 LINE 14 COLUMN 23 USING WRK-OPCAO.
       PROCEDURE DIVISION.
       0001-PRINCIPAL SECTION.
           PERFORM 1000-INICIAR.
           PERFORM 2000-PROCESSAR.
           PERFORM 3000-FINALIZAR.
           STOP RUN.
       1000-INICIAR.
           OPEN I-O CLIENTES
               IF CLIENTES-STATUS = 35 THEN
                   OPEN OUTPUT CLIENTES
                   CLOSE CLIENTES
                   OPEN I-O CLIENTES
               END-IF.
           DISPLAY TELA.
           ACCEPT MENU.
       2000-PROCESSAR.
           EVALUATE WRK-OPCAO
               WHEN 1
                   PERFORM 5000-INCLUIR
               WHEN 2
                   CONTINUE
               WHEN 3
                   CONTINUE
               WHEN 4
                   CONTINUE
               WHEN 5
                   CONTINUE
               WHEN OTHER
                   IF WRK-OPCAO NOT EQUAL 'X'
                       DISPLAY 'ENTRE COM A OPCAO CORRETA'
                   END-IF
           END-EVALUATE.
       3000-FINALIZAR.
           CLOSE CLIENTES.
       5000-INCLUIR.
           MOVE 'MODULO - INCLUSAO ' TO WRK-MODULO.
           DISPLAY TELA.
           ACCEPT WRK-TECLA AT 1620.
[/INST]{
  "id": "BR-002",
  "description": "The program will open the file CLIENTES in I-O mode. If the file status is 35, the program will open the file in OUTPUT mode, close the file, and then open the file in I-O mode.",
  "condition": "CLIENTES-STATUS = 35",
  "output": {
    "open_output": "OPEN OUTPUT CLIENTES",
    "close_output": "CLOSE CLIENTES",
    "open_io": "OPEN I-O CLIENTES"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  INCLUSAODADOS.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT CLIENTES ASSIGN TO 'E:\COBOL\CLIENTES.DAT'
             ORGANIZATION IS INDEXED
             ACCESS MODE IS RANDOM
             FILE STATUS IS CLIENTES-STATUS
             RECORD KEY IS  CLIENTES-CHAVE.
       DATA DIVISION.
       FILE SECTION.
       FD CLIENTES.
       01 CLIENTES-REG.
            05 CLIENTES-CHAVE.
                10 CLIENTES-FONE PIC 9(09).
            05 CLIENTES-NOME     PIC X(30).
            05 CLIENTES-EMAIL    PIC X(40).
       WORKING-STORAGE SECTION.
       77 WRK-OPCAO  PIC X(1).
       77 WRK-MODULO PIC X(25).
       77 WRK-TECLA PIC X(1).
       77 CLIENTES-STATUS PIC 9(02).
       SCREEN SECTION.
       01 TELA.
            05 LIMPA-TELA.
                10 BLANK SCREEN.
                10 LINE 01 COLUMN 01 PIC X(20) ERASE EOL
                   BACKGROUND-COLOR 3.
                10 LINE 01 COLUMN 25 PIC X(20)
                   BACKGROUND-COLOR 3  FOREGROUND-COLOR 0
                              FROM 'SISTEMA DE CLIENTES '.
                10 LINE 02 COLUMN 01 PIC X(25) ERASE EOL
                   BACKGROUND-COLOR 1 FROM WRK-MODULO.
       01 MENU.
            05 LINE 07 COLUMN 15 VALUE '1 - INCLUIR'.
            05 LINE 08 COLUMN 15 VALUE '2 - CONSULTAR'.
            05 LINE 09 COLUMN 15 VALUE '3 - ALTERAR'.
            05 LINE 10 COLUMN 15 VALUE '4 - EXCLUIR'.
            05 LINE 11 COLUMN 15 VALUE '5 - RELATORIO'.
            05 LINE 12 COLUMN 15 VALUE 'X - SAIDA'.
            05 LINE 14 COLUMN 15 VALUE 'OPCAO......: ' .
            05 LINE 14 COLUMN 28 USING WRK-OPCAO.
       01 TELA-REGISTRO.
            05 CHAVE FOREGROUND-COLOR 2.
               10 LINE 10 COLUMN 10 VALUE 'TELEFONE '.
               10 COLUMN PLUS 2 PIC 9(09) USING CLIENTES-FONE
                   BLANK WHEN ZEROS.
            05 SS-DADOS.
               10 LINE 11 COLUMN 10 VALUE 'NOME.... '.
               10 COLUMN PLUS 2 PIC X(30) USING CLIENTES-NOME.
               10 LINE 12 COLUMN 10 VALUE 'EMAIL... '.
               10 COLUMN PLUS 2 PIC X(40) USING CLIENTES-EMAIL.
       PROCEDURE DIVISION.
       0001-PRINCIPAL SECTION.
            PERFORM 1000-INICIAR.
            PERFORM 2000-PROCESSAR.
            PERFORM 3000-FINALIZAR.
            STOP RUN.
       1000-INICIAR.
            OPEN I-O CLIENTES
              IF CLIENTES-STATUS = 35 THEN
                  OPEN OUTPUT CLIENTES
                  CLOSE CLIENTES
                  OPEN I-O CLIENTES
               END-IF.
            DISPLAY TELA.
            ACCEPT MENU.
       2000-PROCESSAR.
            EVALUATE WRK-OPCAO
              WHEN 1
               PERFORM 5000-INCLUIR
              WHEN 2
                CONTINUE
              WHEN 3
                CONTINUE
              WHEN 4
                CONTINUE
              WHEN 5
                CONTINUE
              WHEN OTHER
                IF WRK-OPCAO NOT EQUAL 'X'
                    DISPLAY 'ENTRE COM OPCAO CORRETA'
                END-IF
            END-EVALUATE.
       3000-FINALIZAR.
             CLOSE CLIENTES.
       5000-INCLUIR.
             MOVE 'MODULO - INCLUSAO ' TO WRK-MODULO.
             DISPLAY TELA.
              ACCEPT TELA-REGISTRO.
                WRITE CLIENTES-REG.
                  DISPLAY TELA.
            ACCEPT MENU.
[/INST]{
  "id": "BR-001",
  "description": "In case the file is not created, it creates it and opens it with the output permission, closes it, and opens it with the input/output permissions.",
  "condition": "CLIENTES-STATUS = 35",
  "output": {
    "open_output": "OPEN OUTPUT CLIENTES",
    "close": "CLOSE CLIENTES",
    "open_io": "OPEN I-O CLIENTES"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. MENU01.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 WRK-OPCAO PIC X(1).
       SCREEN SECTION.
       01 TELA.
           05 LIMPA-TELA.
               10 BLANK SCREEN.
               10 LINE 01 COLUMN 01 ERASE EOL
                   BACKGROUND-COLOR 1.
       PROCEDURE DIVISION.
           DISPLAY TELA.
           ACCEPT WRK-OPCAO.
           STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "The program displays a blank screen, accepts an input from the user and then stops.",
  "condition": null,
  "output": "Screen is displayed and the user's input is accepted."
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. MENU02.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 WRK-OPCAO PIC X(1).
       77 WRK-TITULO PIC X(20).
       SCREEN SECTION.
       01 TELA.
           05 LIMPA-TELA.
               10 BLANK SCREEN.
               10 LINE 01 COLUMN 01 PIC X(20) ERASE EOL
                   BACKGROUND-COLOR 2 FROM WRK-TITULO.
       01 MENU.
           05 LINE 07 COLUMN 15 VALUE '1 - INCLUIR'.
           05 LINE 08 COLUMN 15 VALUE '2 - CONSULTAR'.
           05 LINE 09 COLUMN 15 VALUE '3 - ALTERAR'.
           05 LINE 10 COLUMN 15 VALUE '4 - EXCLUIR'.
           05 LINE 11 COLUMN 15 VALUE '5 - RELATORIO'.
           05 LINE 12 COLUMN 15 VALUE 'X - SAIDA'.
           05 LINE 14 COLUMN 15 VALUE 'OPCAO: '.
           05 LINE 14 COLUMN 23 USING WRK-OPCAO.
       PROCEDURE DIVISION.
           MOVE '- MENU - ' TO WRK-TITULO.
           DISPLAY TELA.
           ACCEPT MENU.
           STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "The menu will display the following options: - INCLUIR, - CONSULTAR, - ALTERAR, - EXCLUIR, - RELATORIO and - SAIDA",
  "condition": null,
  "output": {
    "menu": "1 - INCLUIR \n2 - CONSULTAR \n3 - ALTERAR \n4 - EXCLUIR \n5 - RELATORIO \nX - SAIDA \nOPCAO: "
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. PGM.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT IS COMMA.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77  WS77-AUMENTO                    PIC 9(03)V99    VALUE ZEROS.
       77  WS77-TEMPOCASA                  PIC 9(02)       VALUE ZEROS.
       77  WS77-IND                        PIC 9(02)       VALUE ZEROS.
       01  WS01-CAMPOS.
           02  WS02-DADOS.
               03  FILLER                  PIC X(42) VALUE
                           "2013LUCAS DA ROSA MAGALHAES       00500000".
               03  FILLER                  PIC X(42)       VALUE
                           "1985DANTE ROBERTO DE VIT LUNARDI  00200000".
           02  WS02-DADOS-R                REDEFINES WS02-DADOS.
               03  WS03-INFORMACOES        OCCURS 2.
                   05  WS05-ANOENTRADA     PIC 9(04).
                   05  WS05-NOME           PIC X(30).
                   05  WS05-SALARIO        PIC 9(08).
       01  WS01-DATASISTEMA.
               03 WS03-ANO                 PIC 9(04)       VALUE ZEROS.
               03 WS03-MES                 PIC 9(02)       VALUE ZEROS.
               03 WS03-DIA                 PIC 9(02)       VALUE ZEROS.
       PROCEDURE DIVISION.
           0000-PRINCIPAL.
               PERFORM 0100-INICIAR.
               PERFORM 0200-PROCESSAR.
               PERFORM 0300-FINALIZAR.
               STOP RUN.
           0100-INICIAR.
               ACCEPT WS01-DATASISTEMA FROM DATE YYYYMMDD.
               DISPLAY
               '========================================================
      -    '==================='.
               DISPLAY 'DATA ATUAL: ' WS03-DIA'/'WS03-MES'/'WS03-ANO.
               DISPLAY
               '========================================================
      -    '==================='.
           0200-PROCESSAR.
               MOVE 1 TO WS77-IND.
               PERFORM 0250-PROCESSAR.
               MOVE 2 TO WS77-IND.
               PERFORM 0250-PROCESSAR.
           0250-PROCESSAR.
               DISPLAY
               'NOME: ' WS05-NOME(WS77-IND)
               'ANO DE ENTRADA: ' WS05-ANOENTRADA(WS77-IND) ' '
               'SALARIO: ' WS05-SALARIO(WS77-IND).
               COMPUTE WS77-TEMPOCASA = WS03-ANO -
               WS05-ANOENTRADA(WS77-IND).
                   EVALUATE WS77-TEMPOCASA
                       WHEN 0 THRU 1
                   COMPUTE WS77-AUMENTO = 0
                       WHEN 2 THRU 5
                   COMPUTE WS77-AUMENTO =
                   (WS05-SALARIO(WS77-IND) / 100) * 0,05
                       WHEN 6 THRU 15
                   COMPUTE WS77-AUMENTO =
                   (WS05-SALARIO(WS77-IND) / 100) * 0,10
                       WHEN OTHER
                   COMPUTE WS77-AUMENTO =
                   (WS05-SALARIO(WS77-IND) / 100) * 0,15
               END-EVALUATE.
               DISPLAY
               'TEMPO DE CASA: ' WS77-TEMPOCASA ' ANO(S) '
               'AUMENTO: R$ ' WS77-AUMENTO.
               DISPLAY
               '========================================================
      -    '==================='.
           0300-FINALIZAR.
               STOP 'FIM'.
[/INST]{
  "id": "BR-002",
  "description": "Employee bonus is calculated based on how long they have worked at the company, the longer they have worked there, the higher their bonus percentage.",
  "condition": "WS77-TEMPOCASA",
  "output": {
    "0-1 years": "0",
    "2-5 years": "(WS05-SALARIO(WS77-IND) / 100) * 0,05",
    "6-15 years": "(WS05-SALARIO(WS77-IND) / 100) * 0,10",
    "over 15 years": "(WS05-SALARIO(WS77-IND) / 100) * 0,15"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. PROGCOB06.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 WRK-NUM1  	PIC 9(02)  VALUE ZEROS.
       77 WRK-NUM2  	PIC 9(02)  VALUE ZEROS.
       77 WRK-RESUL 	PIC S9(03) VALUE ZEROS.
       77 WRK-RESUL-ED  PIC -ZZ9   VALUE ZEROS.
       PROCEDURE DIVISION.
          ACCEPT WRK-NUM1 FROM CONSOLE.
          ACCEPT WRK-NUM2 FROM CONSOLE.
          DISPLAY '=============================='
          DISPLAY 'NUMERO 1: ' WRK-NUM1.
          DISPLAY '=============================='
          DISPLAY 'NUMERO 2: ' WRK-NUM2.
          DISPLAY '=============================='
          SUBTRACT WRK-NUM2 FROM WRK-NUM1 GIVING WRK-RESUL.
           MOVE WRK-RESUL TO WRK-RESUL-ED.
           DISPLAY 'SUBTRACAO: ' WRK-RESUL.
           DISPLAY 'SUBTRACAO: ' WRK-RESUL-ED.
           DISPLAY '=============================='
          STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "The result of a subtraction can be displayed in the regular format or in the edited format.",
  "condition": "None",
  "output": {
    "edit": "WRK-RESUL-ED",
    "no_edit": "WRK-RESUL"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. PROGCOB07.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 WRK-NOTA1 PIC 9(02) VALUE ZEROS.
       77 WRK-NOTA2 PIC 9(02) VALUE ZEROS.
       77 WRK-MEDIA PIC 9(02) VALUE ZEROS.
       PROCEDURE DIVISION.
          ACCEPT WRK-NOTA1.
          ACCEPT WRK-NOTA2.
           COMPUTE WRK-MEDIA = (WRK-NOTA1 + WRK-NOTA2) / 2.
             DISPLAY 'NOTA 1: ' WRK-NOTA1
             DISPLAY 'NOTA 2: ' WRK-NOTA2
             DISPLAY 'MEDIA: ' WRK-MEDIA.
               IF WRK-MEDIA >= 7
          	     DISPLAY 'SITUACAO: APROVADO'
          	ELSE
          	      IF WRK-MEDIA >= 2
          	      	  DISPLAY 'SITUACAO: RECUPERACAO'
          	      ELSE 
          	       DISPLAY 'SITUACAO: REPROVADO'
               END-IF.
          DISPLAY 'MEDIA: ' WRK-MEDIA.
          STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "The average of two numbers is calculated by adding them and dividing the sum by 2.",
  "condition": "WRK-NOTA1 + WRK-NOTA2",
  "output": {
    "average": "WRK-MEDIA"
  }
},
{
  "id": "BR-002",
  "description": "A student is approved if their average is 7 or higher.",
  "condition": "WRK-MEDIA >= 7",
  "output": {
    "approved": "SITUACAO: APROVADO"
  }
},
{
  "id": "BR-003",
  "description": "A student is in academic probation if their average is between 2 and 7.",
  "condition": "WRK-MEDIA >= 2",
  "output": {
    "probation": "SITUACAO: RECUPERACAO"
  }
},
{
  "id": "BR-004",
  "description": "A student is failed if their average is less than 2.",
  "condition": "WRK-MEDIA < 2",
  "output": {
    "failed": "SITUACAO: REPROVADO"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. PROGCOB08.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
       	   DECIMAL-POINT IS COMMA.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 WRK-NOTA1 PIC 9(02) VALUE ZEROS.
       77 WRK-NOTA2 PIC 9(02) VALUE ZEROS.
       77 WRK-MEDIA PIC 9(02)V9 VALUE ZEROS.
       PROCEDURE DIVISION.
          ACCEPT WRK-NOTA1.
          ACCEPT WRK-NOTA2.
           COMPUTE WRK-MEDIA = (WRK-NOTA1 + WRK-NOTA2) / 2.
             DISPLAY 'MEDIA: ' WRK-MEDIA.
              EVALUATE WRK-MEDIA
              	WHEN 10
              	   DISPLAY 'APROVADO + BONUS'
              	WHEN 6 THRU 9,9
              		DISPLAY 'SITUACAO: APROVADO'
              	WHEN 2 THRU 5,9
              		DISPLAY 'RECUPERACAO'
              	WHEN OTHER
              		DISPLAY 'REPROVADO'    
              END-EVALUATE.
          STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "A student is approved with bonus if the average is 10, approved if the average is between 6 and 9.9, on recovery if the average is between 2 and 5.9, and failed otherwise.",
  "condition": "(WRK-NOTA1 + WRK-NOTA2) / 2",
  "output": {
    "approved_bonus": "APROVADO + BONUS",
    "approved": "APROVADO",
    "recovery": "RECUPERACAO",
    "failed": "REPROVADO"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. PROGCOB10.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
              DECIMAL-POINT IS COMMA.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 WRK-USUARIO      PIC X(20)   VALUE SPACES.
       77 WRK-NIVEL        PIC 9(02)   VALUE ZEROS.
           88 ADM      VALUE 01.
           88 USER     VALUE 02.
       PROCEDURE DIVISION.
           DISPLAY 'USUARIO: '
           ACCEPT WRK-USUARIO.
           DISPLAY 'NIVEL: '
           ACCEPT WRK-NIVEL.
           IF ADM
               DISPLAY 'NIVEL - ADMINISTRADOR'
           ELSE
               IF USER
                   DISPLAY 'NIVEL - USUARIO'
               ELSE
                   DISPLAY 'USUARIO NAO AUTORIZADO'
               END-IF
           END-IF.
           STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "Administrators are identified with level 01",
  "condition": "WRK-NIVEL = 01",
  "output": {
    "true": "NIVEL - ADMINISTRADOR"
  }
},
{
  "id": "BR-002",
  "description": "Users are identified with level 02",
  "condition": "WRK-NIVEL = 02",
  "output": {
    "true": "NIVEL - USUARIO"
  }
},
{
  "id": "BR-003",
  "description": "Users with levels different than 01 or 02 are not authorized",
  "condition": "WRK-NIVEL NOT IN (01, 02)",
  "output": {
    "true": "USUARIO NAO AUTORIZADO"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. PROGCOB11.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
              DECIMAL-POINT IS COMMA.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 WRK-LARGURA      PIC 9(03)V99   VALUE ZEROS.
       77 WRK-COMPRIMENTO  PIC 9(03)V99   VALUE ZEROS.
       77 WRK-AREA         PIC 9(03)V99   VALUE ZEROS.
       PROCEDURE DIVISION.
           DISPLAY 'LARGURA: '
           ACCEPT WRK-LARGURA.
           DISPLAY 'COMPRIMENTO: '
           ACCEPT WRK-COMPRIMENTO.
           IF WRK-LARGURA > 0 AND WRK-COMPRIMENTO > 0
               COMPUTE WRK-AREA = (WRK-LARGURA * WRK-COMPRIMENTO)
               DISPLAY '---------------'
               DISPLAY 'AREA: ' WRK-AREA
           ELSE
               DISPLAY 'FALTA INFORMAR ALGO'
           END-IF.
           STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "The area of a rectangle is calculated by multiplying its width by its length.",
  "condition": "WRK-LARGURA > 0 AND WRK-COMPRIMENTO > 0",
  "output": {
    "area": "WRK-AREA"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. PROGCOBDESAFIODANTE.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
           DECIMAL-POINT IS COMMA.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 WS77-AUMENTO             PIC 9(03)V99    VALUE ZEROS.
       77 WS77-TEMPOCASA           PIC 9(02)       VALUE ZEROS.
       77 WS77-CAD            PIC X(42)        VALUE
           "LUCAS DA ROSA MAGALHAES       201300500000".
       77 WS77-CAD1           PIC X(42)        VALUE
           "DANTE ROBERTO DE VIT LUNARDI  198500200000".
       01  WS01-CAMPOS.
           03  WS03-INFORMACOES.
               05  WS05-NOME       PIC X(30).
               05  WS05-ANOENTRADA PIC 9(04).
               05  WS05-SALARIO    PIC 9(08).
       01 WS01-DATASISTEMA.
           03 WS03-ANO             PIC 9(04)       VALUE ZEROS.
           03 WS03-MES             PIC 9(02)       VALUE ZEROS.
           03 WS03-DIA             PIC 9(02)       VALUE ZEROS.
       PROCEDURE DIVISION.
           0000-PRINCIPAL.
               PERFORM 0100-INICIAR.
               PERFORM 0200-PROCESSAR.
               PERFORM 0300-FINALIZAR.
               STOP RUN.
           0100-INICIAR.
               ACCEPT WS01-DATASISTEMA FROM DATE YYYYMMDD.
               DISPLAY
               '======================================================'.
               DISPLAY 'DATA ATUAL: ' WS03-DIA'/'WS03-MES'/'WS03-ANO.
               DISPLAY
               '======================================================'.
               MOVE WS77-CAD TO WS03-INFORMACOES.
               DISPLAY 'CAD: '
                   WS05-NOME
                   ' '
                   WS05-ANOENTRADA
                   ' '
                   WS05-SALARIO.
               MOVE WS77-CAD1 TO WS03-INFORMACOES.
               DISPLAY 'CAD1: '
                   WS05-NOME
                   ' '
                   WS05-ANOENTRADA
                   ' '
                   WS05-SALARIO.
               DISPLAY
               '======================================================'.
           0200-PROCESSAR.
               MOVE WS77-CAD TO WS03-INFORMACOES.
               COMPUTE WS77-TEMPOCASA = WS03-ANO - WS05-ANOENTRADA.
               EVALUATE WS77-TEMPOCASA
                  WHEN 0 THRU 1
                    COMPUTE WS77-AUMENTO = 0
                WHEN 2 THRU 5
                    COMPUTE WS77-AUMENTO = (WS05-SALARIO / 100) * 0,05
                WHEN 6 THRU 15
                    COMPUTE WS77-AUMENTO = (WS05-SALARIO / 100) * 0,10
                WHEN OTHER
                    COMPUTE WS77-AUMENTO = (WS05-SALARIO / 100) * 0,15
                   END-EVALUATE.
               DISPLAY
               'TEMPO DE CASA LUCAS: ' WS77-TEMPOCASA ' ANO(S)'.
               DISPLAY 'AUMENTO LUCAS: R$ ' WS77-AUMENTO.
               DISPLAY
               '======================================================'.
           0300-FINALIZAR.
               MOVE WS77-CAD1 TO WS03-INFORMACOES.
               COMPUTE WS77-TEMPOCASA = WS03-ANO - WS05-ANOENTRADA.
               EVALUATE WS77-TEMPOCASA
                  WHEN 0 THRU 1
                    COMPUTE WS77-AUMENTO = 0
                WHEN 2 THRU 5
                    COMPUTE WS77-AUMENTO = (WS05-SALARIO / 100) * 0,05
                WHEN 6 THRU 15
                    COMPUTE WS77-AUMENTO = (WS05-SALARIO / 100) * 0,10
                WHEN OTHER
                    COMPUTE WS77-AUMENTO = (WS05-SALARIO / 100) * 0,15
                   END-EVALUATE.
               DISPLAY
               'TEMPO DE CASA DANTE: ' WS77-TEMPOCASA ' ANO(S)'.
               DISPLAY 'AUMENTO DANTE: R$ ' WS77-AUMENTO.
               DISPLAY
               '======================================================'.
[/INST]{
  "id": "BR-002",
  "description": "The percentage of increase in salary is based on the number of years of experience in the company.",
  "condition": "WS77-TEMPOCASA",
  "output": {
    "0 through 1 year": "0%",
    "2 through 5 years": "5%",
    "6 through 15 years": "10%",
    "over 15 years": "15%"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. PROGCOBTEMPODECASAESTRUTURADO.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SPECIAL-NAMES.
              DECIMAL-POINT IS COMMA.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 WRK-NOME           PIC X(30)      VALUE SPACES.
       77 WRK-ANOENTRADA     PIC 9(04)      VALUE ZEROS.
       77 WRK-SALARIO        PIC 9(06)V99   VALUE ZEROS.
       77 WRK-AUMENTO        PIC 9(03)V99   VALUE ZEROS.
       77 WRK-TEMPOCASA      PIC 9(02)      VALUE ZEROS.
       01 WRK-DATASISTEMA.
       		02 WRK-ANO PIC 9(04)  VALUE ZEROS.
         	02 WRK-MES PIC 9(02)  VALUE ZEROS.
           	02 WRK-DIA PIC 9(02)  VALUE ZEROS.
       PROCEDURE DIVISION.
       0000-PRINCIPAL.
       		PERFORM 0100-INICIAR.
        	PERFORM 0200-PROCESSAR.
        	PERFORM 0300-FINALIZAR.
        	STOP RUN.
       0100-INICIAR.
       		ACCEPT WRK-DATASISTEMA FROM DATE YYYYMMDD.
          	DISPLAY '=========================================='
          	DISPLAY 'DATA ATUAL: ' WRK-DIA'/'WRK-MES'/'WRK-ANO.
                DISPLAY '=========================================='
       		DISPLAY 'NOME DO FUNCIONARIO: '. ACCEPT WRK-NOME.
        	DISPLAY 'ANO DE ENTRADA NA EMPRESA '.
        		ACCEPT WRK-ANOENTRADA.
       		DISPLAY 'SALARIO ATUAL '
        		ACCEPT WRK-SALARIO.
       0200-PROCESSAR.
       		COMPUTE WRK-TEMPOCASA = WRK-ANO - WRK-ANOENTRADA.
       		EVALUATE WRK-TEMPOCASA
        		WHEN 0 THRU 1 
        			COMPUTE WRK-AUMENTO = 0
        		WHEN 2 THRU 5
       				COMPUTE WRK-AUMENTO = WRK-SALARIO * 0,05
        		WHEN 6 THRU 15
       				COMPUTE WRK-AUMENTO = WRK-SALARIO * 0,10
       			WHEN OTHER
       				COMPUTE WRK-AUMENTO = WRK-SALARIO * 0,15
       		END-EVALUATE.
       0300-FINALIZAR.
       		DISPLAY '=========================================='
       		DISPLAY 'TEMPO DE CASA ' WRK-TEMPOCASA ' ANO(S)'.
        	DISPLAY 'AUMENTO DE SALARIO DE ' WRK-AUMENTO.
[/INST]{
  "id": "BR-002",
  "description": "The salary increase is 0% for employees with 1 year or less of tenure, 5% for those with 2 to 5 years, 10% for those with 6 to 15 years, and 15% for those with more than 15 years.",
  "condition": "WRK-TEMPOCASA",
  "output": {
    "0-1 years": "WRK-AUMENTO = 0",
    "2-5 years": "WRK-AUMENTO = WRK-SALARIO * 0,05",
    "6-15 years": "WRK-AUMENTO = WRK-SALARIO * 0,10",
    ">15 years": "WRK-AUMENTO = WRK-SALARIO * 0,15"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  RELATORIOEMDISCO.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT CLIENTES ASSIGN TO
           'C:\Users\Lucas Magalhães\Desktop\Workspace\learning-COBOL\co
      -    'b\CLIENTES.DAT'
             ORGANIZATION IS INDEXED
             ACCESS MODE IS RANDOM
             FILE STATUS IS CLIENTES-STATUS
             RECORD KEY IS  CLIENTES-CHAVE.
             SELECT RELATO ASSIGN TO 'C:\Users\Lucas Magalhães\Desktop\W
      -    'orkspace\learning-COBOL\cob\RELATO.TXT'
             ORGANIZATION IS SEQUENTIAL.
       DATA DIVISION.
       FILE SECTION.
       FD CLIENTES.
       01 CLIENTES-REG.
            05 CLIENTES-CHAVE.
                10 CLIENTES-FONE PIC 9(09).
            05 CLIENTES-NOME     PIC X(30).
            05 CLIENTES-EMAIL    PIC X(40).
       FD RELATO.
       01 RELATO-REG.
          05 RELATO-DADOS  PIC X(79).
       WORKING-STORAGE SECTION.
       77 WRK-OPCAO       PIC X(1).
       77 WRK-MODULO      PIC X(25).
       77 WRK-TECLA       PIC X(1).
       77 CLIENTES-STATUS PIC 9(02).
       77 WRK-MSGERRO     PIC X(30).
       77 WRK-CONTALINHA  PIC 9(03).
       77 WRK-QTREGISTROS PIC 9(05) VALUE 0.
       SCREEN SECTION.
       01 TELA.
            05 LIMPA-TELA.
                10 BLANK SCREEN.
                10 LINE 01 COLUMN 01 PIC X(20) ERASE EOL
                   BACKGROUND-COLOR 3.
                10 LINE 01 COLUMN 25 PIC X(20)
                   BACKGROUND-COLOR 3  FOREGROUND-COLOR 0
                              FROM 'SISTEMA DE CLIENTES '.
                10 LINE 02 COLUMN 01 PIC X(25) ERASE EOL
                   BACKGROUND-COLOR 1 FROM WRK-MODULO.
       01 MENU.
            05 LINE 07 COLUMN 15 VALUE '1 - INCLUIR'.
            05 LINE 08 COLUMN 15 VALUE '2 - CONSULTAR'.
            05 LINE 09 COLUMN 15 VALUE '3 - ALTERAR'.
            05 LINE 10 COLUMN 15 VALUE '4 - EXCLUIR'.
            05 LINE 11 COLUMN 15 VALUE '5 - RELATORIO EM TELA'.
            05 LINE 12 COLUMN 15 VALUE '6 - RELATORIO EM DISCO'.
            05 LINE 13 COLUMN 15 VALUE 'X - SAIDA'.
            05 LINE 14 COLUMN 15 VALUE 'OPCAO......: ' .
            05 LINE 14 COLUMN 28 USING WRK-OPCAO.
       01 TELA-REGISTRO.
            05 CHAVE FOREGROUND-COLOR 2.
               10 LINE 10 COLUMN 10 VALUE 'TELEFONE '.
               10 COLUMN PLUS 2 PIC 9(09) USING CLIENTES-FONE
                   BLANK WHEN ZEROS.
            05 SS-DADOS.
               10 LINE 11 COLUMN 10 VALUE 'NOME.... '.
               10 COLUMN PLUS 2 PIC X(30) USING CLIENTES-NOME.
               10 LINE 12 COLUMN 10 VALUE 'EMAIL... '.
               10 COLUMN PLUS 2 PIC X(40) USING CLIENTES-EMAIL.
       01 MOSTRA-ERRO.
             02 MSG-ERRO.
               10 LINE 16 COLUMN 01 ERASE EOL
                             BACKGROUND-COLOR 3.
               10 LINE 16 COLUMN 10 PIC X(30)
                             BACKGROUND-COLOR 3
                             FROM WRK-MSGERRO.
               10 COLUMN PLUS 2 PIC X(01)
                             BACKGROUND-COLOR 3
                             USING WRK-TECLA.
       PROCEDURE DIVISION.
       0001-PRINCIPAL SECTION.
            PERFORM 1000-INICIAR THRU 1100-MONTATELA.
            PERFORM 2000-PROCESSAR UNTIL WRK-OPCAO = 'X'.
            PERFORM 3000-FINALIZAR.
            STOP RUN.
       1000-INICIAR.
            OPEN I-O CLIENTES
              IF CLIENTES-STATUS = 35 THEN
                  OPEN OUTPUT CLIENTES
                  CLOSE CLIENTES
                  OPEN I-O CLIENTES
               END-IF.
       1100-MONTATELA.
            MOVE 0 TO WRK-QTREGISTROS.
            DISPLAY TELA.
            ACCEPT MENU.
       2000-PROCESSAR.
            MOVE SPACES TO CLIENTES-NOME CLIENTES-EMAIL WRK-MSGERRO.
            EVALUATE WRK-OPCAO
              WHEN 1
               PERFORM 5000-INCLUIR
              WHEN 2
                PERFORM 6000-CONSULTAR
              WHEN 3
                PERFORM 7000-ALTERAR
              WHEN 4
                PERFORM 8000-EXCLUIR
              WHEN 5
                PERFORM 9000-RELATORIOTELA
              WHEN 6
                PERFORM 9100-RELATORIODISCO
              WHEN OTHER
                IF WRK-OPCAO NOT EQUAL 'X'
                    DISPLAY 'ENTRE COM OPCAO CORRETA'
                END-IF
            END-EVALUATE.
              PERFORM 1100-MONTATELA.
       3000-FINALIZAR.
             CLOSE CLIENTES.
       5000-INCLUIR.
             MOVE 'MODULO - INCLUSAO ' TO WRK-MODULO.
             DISPLAY TELA.
              ACCEPT TELA-REGISTRO.
                WRITE CLIENTES-REG
                 INVALID KEY
                   MOVE 'JA EXISTE ' TO WRK-MSGERRO
                   ACCEPT MOSTRA-ERRO
                END-WRITE.
       6000-CONSULTAR.
             MOVE 'MODULO - CONSULTA ' TO WRK-MODULO.
             DISPLAY TELA.
               DISPLAY TELA-REGISTRO.
               ACCEPT CHAVE.
                READ CLIENTES
                  INVALID KEY
                   MOVE 'NAO ENCONTRADO   '  TO WRK-MSGERRO
                  NOT INVALID KEY
                  MOVE '--  ENCONTRADO  --'  TO WRK-MSGERRO
                   DISPLAY SS-DADOS
                 END-READ.
                   ACCEPT MOSTRA-ERRO.
       7000-ALTERAR.
             MOVE 'MODULO - ALTERAR ' TO WRK-MODULO.
             DISPLAY TELA.
             DISPLAY TELA-REGISTRO.
              ACCEPT CHAVE.
                READ CLIENTES
                IF CLIENTES-STATUS = 0
                    ACCEPT SS-DADOS
                     REWRITE CLIENTES-REG
                       IF CLIENTES-STATUS = 0
                            MOVE 'REGISTRO ALTERADO ' TO WRK-MSGERRO
                            ACCEPT MOSTRA-ERRO
                       ELSE
                            MOVE 'REGISTRO NAO ALTERADO' TO WRK-MSGERRO
                            ACCEPT MOSTRA-ERRO
                       END-IF
                 ELSE
                      MOVE 'REGISTO NAO ENCONTRADO ' TO WRK-MSGERRO
                      ACCEPT MOSTRA-ERRO
                END-IF.
       8000-EXCLUIR.
             MOVE 'MODULO - EXCLUSAO ' TO WRK-MODULO.
             DISPLAY TELA.
               DISPLAY TELA-REGISTRO.
               ACCEPT CHAVE.
                READ CLIENTES
                  INVALID KEY
                   MOVE 'NAO ENCONTRADO   '  TO WRK-MSGERRO
                 NOT INVALID KEY
                  MOVE ' ENCONTRADO  (S/N) ? '  TO WRK-MSGERRO
                   DISPLAY SS-DADOS
                END-READ.
                  ACCEPT MOSTRA-ERRO.
                    IF WRK-TECLA = 'S' AND CLIENTES-STATUS = 0
                           DELETE CLIENTES
                            INVALID KEY
                            MOVE 'NAO EXCLUIDO ' TO WRK-MSGERRO
                            ACCEPT  MOSTRA-ERRO
                          END-DELETE
                     END-IF.
       9000-RELATORIOTELA.
             MOVE 'MODULO - RELATORIO ' TO WRK-MODULO.
             DISPLAY TELA.
             MOVE 12345 TO CLIENTES-FONE.
             START CLIENTES KEY EQUAL CLIENTES-FONE.
             READ CLIENTES
                 INVALID KEY
                     MOVE 'NENHUM REGISTRO ENCONTRADO' TO WRK-MSGERRO
                  NOT INVALID KEY
                   DISPLAY '   RELATORIO DE CLIENTES '
                   DISPLAY '----------------------'
                   PERFORM UNTIL CLIENTES-STATUS = 10
                     ADD 1 TO WRK-QTREGISTROS
                     DISPLAY CLIENTES-FONE ' '
                           CLIENTES-NOME ' '
                           CLIENTES-EMAIL
                     READ CLIENTES NEXT
                       ADD 1 TO WRK-CONTALINHA
                     IF WRK-CONTALINHA = 5
                         MOVE 'PRESSIONE ALGUMA TECLA ' TO WRK-MSGERRO
                         ACCEPT MOSTRA-ERRO
                        MOVE 'MODULO - RELATORIO ' TO WRK-MODULO
                        DISPLAY TELA
                        DISPLAY '   RELATORIO DE CLIENTES '
                        DISPLAY '----------------------'
                        MOVE 0 TO WRK-CONTALINHA
                     END-IF
                   END-PERFORM
             END-READ.
               MOVE 'REGISTROS LIDOS ' TO WRK-MSGERRO.
               MOVE WRK-QTREGISTROS TO WRK-MSGERRO(17:05).
               ACCEPT MOSTRA-ERRO.
       9100-RELATORIODISCO.
             MOVE 'MODULO - RELATORIO ' TO WRK-MODULO.
             DISPLAY TELA.
             MOVE 12345 TO CLIENTES-FONE.
             START CLIENTES KEY EQUAL CLIENTES-FONE.
             READ CLIENTES
                 INVALID KEY
                     MOVE 'NENHUM REGISTRO ENCONTRADO' TO WRK-MSGERRO
                  NOT INVALID KEY
                   OPEN OUTPUT RELATO
                   PERFORM UNTIL CLIENTES-STATUS = 10
                     ADD 1 TO WRK-QTREGISTROS
                         MOVE CLIENTES-REG TO RELATO-REG
                         WRITE RELATO-REG
                     READ CLIENTES NEXT
                   END-PERFORM
                      MOVE 'REGISTROS LIDOS ' TO RELATO-REG
                      MOVE WRK-QTREGISTROS    TO RELATO-REG(18:05)
                      WRITE RELATO-REG
                     CLOSE RELATO
                END-READ.
               MOVE 'REGISTROS LIDOS ' TO WRK-MSGERRO.
               MOVE WRK-QTREGISTROS TO WRK-MSGERRO(17:05).
               ACCEPT MOSTRA-ERRO.
[/INST]{
  "id": "BR-001",
  "description": "When the file CLIENTES is opened for the first time, it must be opened for OUTPUT, then closed and reopened for INPUT-OUTPUT. (in COBOL terms: OPEN OUTPUT CLIENTES, CLOSE CLIENTES, OPEN I-O CLIENTES)",
  "condition": "When the file CLIENTES is opened for the first time",
  "output": {
    "true": "OPEN OUTPUT CLIENTES, CLOSE CLIENTES, OPEN I-O CLIENTES"
  }
},
{
  "id": "BR-002",
  "description": "If a record does not exist in the CLIENTES file, a message \"NAO ENCONTRADO   \" should be displayed.",
  "condition": "A record does not exist in the CLIENTES file",
  "output": {
    "true": "MOVE 'NAO ENCONTRADO   '  TO WRK-MSGERRO"
  }
},
{
  "id": "BR-003",
  "description": "If a record exists in the CLIENTES file, a message \"--  ENCONTRADO  --\" should be displayed.",
  "condition": "A record exists in the CLIENTES file",
  "output": {
    "true": "MOVE '--  ENCONTRADO  --'  TO WRK-MSGERRO"
  }
},
{
  "id": "BR-004",
  "description": "If a record is successfully altered in the CLIENTES file, a message \"REGISTRO ALTERADO \" should be displayed.",
  "condition": "A record is successfully altered in the CLIENTES file",
  "output": {
    "true": "MOVE 'REGISTRO ALTERADO ' TO WRK-MSGERRO"
  }
},
{
  "id": "BR-005",
  "description": "If a record is not successfully altered in the CLIENTES file, a message \"REGISTRO NAO ALTERADO\" should be displayed.",
  "condition": "A record is not successfully altered in the CLIENTES file",
  "output": {
    "true": "MOVE 'REGISTRO NAO ALTERADO' TO WRK-MSGERRO"
  }
},
{
  "id": "BR-006",
  "description": "If a record is successfully deleted from the CLIENTES file, a message \"NAO EXCLUIDO \" should be displayed.",
  "condition": "A record is successfully deleted from the CLIENTES file",
  "output": {
    "true": "MOVE 'NAO EXCLUIDO ' TO WRK-MSGERRO"
  }
},
{
  "id": "BR-007",
  "description": "If the status of the CLIENTES record is 0, the record can be deleted.",
  "condition": "The status of the CLIENTES record is 0",
  "output": {
    "true": "IF WRK-TECLA = 'S' AND CLIENTES-STATUS = 0"
  }
},
{
  "id": "BR-008",
  "description": "If no records are found in the CLIENTES file, a message \"NENHUM REGISTRO ENCONTRADO\" should be displayed.",
  "condition": "No records are found in the CLIENTES file",
  "output": {
    "true": "MOVE 'NENHUM REGISTRO ENCONTRADO' TO WRK-MSGERRO"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. SUBMENU.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 WRK-OPCAO  PIC X(1).
       77 WRK-MODULO PIC X(25).
       77 WRK-TECLA PIC X(1).
       77 WRK-OPCAO-RELATO PIC X(1).
       SCREEN SECTION.
       01 TELA.
           05 LIMPA-TELA.
               10 BLANK SCREEN.
               10 LINE 01 COLUMN 01 PIC X(20) ERASE EOL
                   BACKGROUND-COLOR 3.
               10 LINE 01 COLUMN 25 PIC X(20)
                  BACKGROUND-COLOR 3 FOREGROUND-COLOR 0
                  FROM 'SISTEMA DE CLIENTES'.
               10 LINE 02 COLUMN 01 PIC X(25) ERASE EOL
                   BACKGROUND-COLOR 1 FROM WRK-MODULO.
       01 MENU-RELATO.
           05 LINE 12 COLUMN 40 VALUE '1 - EM TELA'.
           05 LINE 13 COLUMN 40 VALUE '2 - EM DISCO'.
           05 LINE 15 COLUMN 40 VALUE 'OPCAO......: '.
           05 LINE 15 COLUMN 53 USING WRK-OPCAO-RELATO.
       PROCEDURE DIVISION.
       0001-PRINCIPAL SECTION.
           PERFORM 1000-INICIAR.
           PERFORM 2000-PROCESSAR.
           PERFORM 3000-FINALIZAR.
           STOP RUN.
       1000-INICIAR.
           DISPLAY TELA.
           ACCEPT MENU-RELATO.
       2000-PROCESSAR.
            EVALUATE WRK-OPCAO
              WHEN 1
               PERFORM 5000-RELATORIO-TELA
              WHEN 2
                CONTINUE
              WHEN 3
                CONTINUE
              WHEN 4
                CONTINUE
              WHEN 5
                ACCEPT MENU-RELATO
                IF WRK-OPCAO-RELATO EQUAL 1
                    PERFORM 5000-RELATORIO-TELA
                END-IF
                IF WRK-OPCAO-RELATO EQUAL 2
                    PERFORM 5010-RELATORIO-DISCO
                END-IF
              WHEN OTHER
                IF WRK-OPCAO NOT EQUAL 'X'
                    DISPLAY 'ENTRE COM OPCAO CORRETA'
                END-IF
            END-EVALUATE.
       3000-FINALIZAR.
           CONTINUE.
       5000-RELATORIO-TELA.
           CONTINUE.
       5010-RELATORIO-DISCO.
           CONTINUE.
[/INST]{
  "id": "BR-001",
  "description": "The first character of the menu selection must be a valid option.",
  "condition": "WRK-OPCAO",
  "output": {
    "valid option": "Continue processing",
    "invalid option": "Display error message 'ENTRE COM OPCAO CORRETA'"
  }
},
{
  "id": "BR-002",
  "description": "If the menu selection is 1, then perform the 'RELATORIO-TELA' procedure.",
  "condition": "WRK-OPCAO = 1",
  "output": {
    "true": "Perform 5000-RELATORIO-TELA"
  }
},
{
  "id": "BR-003",
  "description": "If the menu selection is 2, then continue processing.",
  "condition": "WRK-OPCAO = 2",
  "output": {
    "true": "Continue processing"
  }
},
{
  "id": "BR-004",
  "description": "If the menu selection is 3, then continue processing.",
  "condition": "WRK-OPCAO = 3",
  "output": {
    "true": "Continue processing"
  }
},
{
  "id": "BR-005",
  "description": "If the menu selection is 4, then continue processing.",
  "condition": "WRK-OPCAO = 4",
  "output": {
    "true": "Continue processing"
  }
},
{
  "id": "BR-006",
  "description": "If the menu selection is 5, then accept a new input and evaluate the new input.",
  "condition": "WRK-OPCAO = 5",
  "output": {
    "true": "Accept MENU-RELATO, evaluate WRK-OPCAO-RELATO"
  }
},
{
  "id": "BR-007",
  "description": "If the second character of the menu selection is 1, then perform the 'RELATORIO-TELA' procedure.",
  "condition": "WRK-OPCAO-RELATO = 1",
  "output": {
    "true": "Perform 5000-RELATORIO-TELA"
  }
},
{
  "id": "BR-008",
  "description": "If the second character of the menu selection is 2, then perform the 'RELATORIO-DISCO' procedure.",
  "condition": "WRK-OPCAO-RELATO = 2",
  "output": {
    "true": "Perform 5010-RELATORIO-DISCO"
  }
},
{
  "id": "BR-009",
  "description": "If the menu selection is not a valid option and not 'X', then display an error message.",
  "condition": "WRK-OPCAO NOT EQUAL 'X'",
  "output": {
    "true": "Display 'ENTRE COM OPCAO CORRETA'"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. VALIDANDOESCOLHAMENU.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 WRK-OPCAO    PIC X(1).
       77 WRK-MODULO   PIC X(25).
       77 WRK-TECLA    PIC X(1).
       SCREEN SECTION.
       01 TELA.
           05 LIMPA-TELA.
               10 BLANK SCREEN.
               10 LINE 01 COLUMN 01 PIC X(20) ERASE EOL
                   BACKGROUND-COLOR 3.
               10 LINE 01 COLUMN 25 PIC X(20)
                  BACKGROUND-COLOR 3 FOREGROUND-COLOR 0
                  FROM 'SISTEMA DE CLIENTES'.
               10 LINE 02 COLUMN 01 PIC X(25) ERASE EOL
                   BACKGROUND-COLOR 1 FROM WRK-MODULO.
       01 MENU.
           05 LINE 07 COLUMN 15 VALUE '1 - INCLUIR'.
           05 LINE 08 COLUMN 15 VALUE '2 - CONSULTAR'.
           05 LINE 09 COLUMN 15 VALUE '3 - ALTERAR'.
           05 LINE 10 COLUMN 15 VALUE '4 - EXCLUIR'.
           05 LINE 11 COLUMN 15 VALUE '5 - RELATORIO'.
           05 LINE 12 COLUMN 15 VALUE 'X - SAIDA'.
           05 LINE 14 COLUMN 15 VALUE 'OPCAO: '.
           05 LINE 14 COLUMN 23 USING WRK-OPCAO.
       PROCEDURE DIVISION.
       0001-PRINCIPAL SECTION.
           PERFORM 1000-INICIAR.
           PERFORM 2000-PROCESSAR.
           PERFORM 3000-FINALIZAR.
           STOP RUN.
       1000-INICIAR.
           DISPLAY TELA.
           ACCEPT MENU.
       2000-PROCESSAR.
           EVALUATE WRK-OPCAO
               WHEN 1
                   PERFORM 5000-INCLUIR
               WHEN 2
                   CONTINUE
               WHEN 3
                   CONTINUE
               WHEN 4
                   CONTINUE
               WHEN 5
                   CONTINUE
               WHEN OTHER
                   IF WRK-OPCAO NOT EQUAL 'X'
                       DISPLAY 'ENTRE COM A OPCAO CORRETA'
                   END-IF
           END-EVALUATE.
       3000-FINALIZAR.
           CONTINUE.
       5000-INCLUIR.
           MOVE 'MODULO - INCLUSAO ' TO WRK-MODULO.
           DISPLAY TELA.
           ACCEPT WRK-TECLA AT 1620.
[/INST]{
  "id": "BR-002",
  "description": "When a user enters an invalid menu option, the system displays an error message.",
  "condition": "WRK-OPCAO NOT EQUAL 'X'",
  "output": {
    "invalid": "ENTRE COM A OPCAO CORRETA"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. PROD2V1.
                             ENVIRONMENT DIVISION.
                             CONFIGURATION SECTION.
                               SPECIAL-NAMES.
                             INPUT-OUTPUT SECTION.
                               FILE-CONTROL.
           SELECT RENTAL ASSIGN TO 'RENTACAR-IN.txt'
               ORGANISATION IS LINE SEQUENTIAL.
           SELECT RENTAL-OUT ASSIGN TO 'RENTACAR-OUT.txt'.
                                  DATA DIVISION.
                                   FILE SECTION.
           FD RENTAL.
           01 RENTAL-FILE.
               02 CLIENT_NAME PIC A(20).
               02 RENTAL-TYPE.
                   03 NAME_INITIAL PIC A(1).
                   03 CAR_TYPE PIC 9(1).
                   03 KILOMETERS PIC 9(5).
                   03 NUM_DAYS PIC 9(3).
           FD RENTAL-OUT.
           01 RENTAL-FILE-OUT.
               02 CLIENT_NAME_OUT PIC A(20).
               02 FILLER PIC X(1) VALUE SPACE.
               02 NAME_INITIAL_OUT PIC A(1).
               02 FILLER PIC X(1) VALUE SPACE.
               02 CAR_BRAND PIC A(10).
               02 FILLER PIC X(1) VALUE SPACE.
               02 KILOMETERS_OUT PIC zzz99.
               02 FILLER PIC X(1) VALUE SPACE.
               02 NUM_DAYS_OUT PIC zz9.
               02 FILLER PIC X(1) VALUE SPACE.
               02 PAYMENT PIC zz99.99.
                           WORKING-STORAGE SECTION.
       77  END-LOOP PIC A(3) VALUE SPACES.
       77  KILOMETERS_PAYMENT PIC 9(4)V99.
       77  RENTAL_DAYS_TOTAL PIC 9(4).
                             PROCEDURE DIVISION.
           MAIN-PROCEDURE.
           OPEN INPUT RENTAL
               OUTPUT RENTAL-OUT.
           READ RENTAL
               AT END MOVE "YYY" TO END-LOOP
           END-READ.
           PERFORM CALCULATIONS UNTIL END-LOOP = "YYY".
           CLOSE RENTAL
                 RENTAL-OUT.
           STOP RUN.
           CALCULATIONS.
           MOVE CLIENT_NAME TO CLIENT_NAME_OUT.
           MOVE NAME_INITIAL TO NAME_INITIAL_OUT.
           MOVE KILOMETERS TO KILOMETERS_OUT.
           MOVE NUM_DAYS TO NUM_DAYS_OUT.
           IF KILOMETERS IS GREATER THAN 75 OR EQUAL TO 75
               COMPUTE KILOMETERS = KILOMETERS - 75.
           EVALUATE CAR_TYPE
              WHEN 1 MOVE "VOLKSWAGEN" TO CAR_BRAND
               COMPUTE KILOMETERS_PAYMENT = KILOMETERS * 0.5
               COMPUTE RENTAL_DAYS_TOTAL = 10 * NUM_DAYS
               COMPUTE PAYMENT = KILOMETERS_PAYMENT + RENTAL_DAYS_TOTAL
              WHEN 2 MOVE "TOYOTA" TO CAR_BRAND
               COMPUTE KILOMETERS_PAYMENT = KILOMETERS * 0.55
               COMPUTE RENTAL_DAYS_TOTAL = 12.5 * NUM_DAYS
               COMPUTE PAYMENT = KILOMETERS_PAYMENT + RENTAL_DAYS_TOTAL
              WHEN 3 MOVE "MERCEDES" TO CAR_BRAND
              COMPUTE KILOMETERS_PAYMENT = KILOMETERS * 0.65
              COMPUTE RENTAL_DAYS_TOTAL = 16 * NUM_DAYS
              COMPUTE PAYMENT = KILOMETERS_PAYMENT + RENTAL_DAYS_TOTAL
           END-EVALUATE.
           WRITE RENTAL-FILE-OUT
               AFTER ADVANCING 1 LINE.
           DISPLAY RENTAL-FILE-OUT.
           READ RENTAL
               AT END MOVE "YYY" TO END-LOOP
           END-READ.
           LEGACY.
       STOP RUN.
       END PROGRAM PROD2V1.
[/INST]{
  "id": "BR-002",
  "description": "If the kilometers traveled are greater than or equal to 75, then subtract 75 kilometers.",
  "condition": "KILOMETERS > 75"
}
{
  "id": "BR-003",
  "description": "Calculate the payment for Volkswagen as follows: kilometers_payment = kilometers * 0.5, rental_days_total = 10 * num_days, payment = kilometers_payment + rental_days_total",
  "condition": "CAR_TYPE = 1"
}
{
  "id": "BR-004",
  "description": "Calculate the payment for Toyota as follows: kilometers_payment = kilometers * 0.55, rental_days_total = 12.5 * num_days, payment = kilometers_payment + rental_days_total",
  "condition": "CAR_TYPE = 2"
}
{
  "id": "BR-005",
  "description": "Calculate the payment for Mercedes as follows: kilometers_payment = kilometers * 0.65, rental_days_total = 16 * num_days, payment = kilometers_payment + rental_days_total",
  "condition": "CAR_TYPE = 3"
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. send_halp.
       ENVIRONMENT DIVISION.
           INPUT-OUTPUT SECTION.
           FILE-CONTROL.
           SELECT ISBN ASSIGN TO "ISBN-IN.txt"
               ORGANISATION IS LINE SEQUENTIAL.
           SELECT ISBN-OUT ASSIGN TO 'ISBN-OUT.txt'.
       DATA DIVISION.
           FILE SECTION.
           FD ISBN.
           01 ISBN-FILE.
               02 TITULO PIC A(80).
               02 AUTOR PIC A(30).
               02 EDITORA PIC A(20).
               02 ISBN-ID.
                   03 ID-PAIS PIC 9(3).
                   03 ID-EDITORA PIC 9(2).
                   03 ID-LIVRO PIC 9(4).
                   03 CONTROLO PIC X(1).
               02 VENDIDAS PIC 9(4).
               02 PRECO PIC 9(5).
               02 DESCONTO PIC 9(2).
           FD ISBN-OUT.
           01 ISBN-FILE-OUT.
               02 ISBN-ID-OUT.
                   03 ID-PAIS-OUT PIC 9(3).
                   03 ID-EDITORA-OUT PIC 9(2).
                   03 ID-LIVRO-OUT PIC 9(4).
                   03 CONTROLO-OUT PIC X(1).
               02 FILLER PIC X(1) VALUE SPACE.
               02 VENDIDAS-OUT PIC 9(4).
               02 FILLER PIC X(1) VALUE SPACE.
               02 PRECO-OUT PIC 9(5).
               02 FILLER PIC X(1) VALUE SPACE.
               02 DESCONTO-OUT PIC 9(2).
               02 FILLER PIC X(1) VALUE SPACE.
               02 VALOR-FACTURADO-OUT PIC 9(6).
               02 FILLER PIC X(1) VALUE SPACE.
               02 OBSERVACOES-OUT PIC X(10).
       WORKING-STORAGE SECTION.
           01 TERMINA-LOOP PIC A(3) VALUE SPACE.
           77 OBSERVA PIC X(10).
           77 iva pic 9(5).
           77 calcula_desconto pic 9(5).
           77 calcula_preco pic 9(10).
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           OPEN INPUT ISBN
               OUTPUT ISBN-OUT.
           READ ISBN
               AT END MOVE 'YYY' TO TERMINA-LOOP
           END-READ.
           PERFORM cuspidelas UNTIL TERMINA-LOOP = 'YYY'.
           CLOSE ISBN
               ISBN-OUT.
           STOP RUN.
           cuspidelas.
           if(CONTROLO is not numeric and CONTROLO is not equal TO 'X')
      -    move "ISBN INVALIDO" TO OBSERVA.
               MOVE ID-PAIS to ID-PAIS-OUT.
               move ID-EDITORA to ID-EDITORA-OUT.
               move ID-LIVRO TO ID-LIVRO-OUT.
               MOVE CONTROLO TO CONTROLO-OUT.
               move VENDIDAS to VENDIDAS-OUT.
               move PRECO to PRECO-OUT.
               move DESCONTO to DESCONTO-out.
           compute iva = ((VENDIDAS * preco) * 0.05)
           compute calcula_desconto = ((VENDIDAS * preco) + iva) * 0.20
           compute calcula_preco = ((vendidas * preco) + iva)
      -         - calcula_desconto.
               move calcula_preco TO VALOR-FACTURADO-OUT.
               move OBSERVA TO OBSERVACOES-OUT.
           WRITE ISBN-FILE-OUT
             AFTER ADVANCING 1 LINE.
               move SPACE to OBSERVA.
               DISPLAY ISBN-FILE-OUT.
           READ ISBN
               AT END MOVE 'YYY' TO TERMINA-LOOP
           END-READ.
       END PROGRAM send_halp.
[/INST]{
  "id": "BR-001",
  "description": "An ISBN is invalid if the CONTROLO field is not numeric and not equal to 'X'.",
  "condition": "not CONTROLO numeric AND CONTROLO not equal to 'X'",
  "output": {
    "invalid": "ISBN INVALIDO"
  }
},
{
  "id": "BR-002",
  "description": "The value of IVA (Value Added Tax) is calculated as 5% of the product of the number of books sold and the price of each book.",
  "condition": "iva = ((VENDIDAS * preco) * 0.05",
  "output": {
    "iva": "iva"
  }
},
{
  "id": "BR-003",
  "description": "The value of the discount is calculated as 20% of the sum of the product of the number of books sold and the price of each book, and the IVA.",
  "condition": "calcula\\_desconto = ((VENDIDAS * preco) + iva) * 0.20",
  "output": {
    "discount": "calcula\\_desconto"
  }
},
{
  "id": "BR-004",
  "description": "The final price is calculated as the sum of the product of the number of books sold and the price of each book, the IVA, and the discount.",
  "condition": "calcula\\_preco = ((vendidas * preco) + iva) \\n        - calcula\\_desconto",
  "output": {
    "final\\_price": "calcula\\_preco"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. PROGV00.
                             ENVIRONMENT DIVISION.
                             CONFIGURATION SECTION.
                               SPECIAL-NAMES.
                             INPUT-OUTPUT SECTION.
                               FILE-CONTROL.
                               DATA DIVISION.
                               FILE SECTION.
                           WORKING-STORAGE SECTION.
       77  NOME PIC A(17) VALUE "My beautiful Name".
       77  BANANA PIC A(6) VALUE "banana".
                             PROCEDURE DIVISION.
       DISPLAY NOME SPACE BANANA.
       STOP RUN.
       END PROGRAM PROGV00.
[/INST]{
  "id": "BR-002",
  "description": "The program prints the concatenation of the values of variables NOME and BANANA. NOME is initialized with a fixed value.",
  "variables": [
    "NOME",
    "BANANA"
  ],
  "condition": null,
  "output": [
    "My beautiful Namebanana"
  ]
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. PROD1V1.
                             ENVIRONMENT DIVISION.
                             CONFIGURATION SECTION.
                               SPECIAL-NAMES.
                             INPUT-OUTPUT SECTION.
                               FILE-CONTROL.
           SELECT WAGE_SHEET ASSIGN TO 'REMUNERACAO-IN.txt'
               ORGANIZATION IS LINE SEQUENTIAL.
           SELECT WAGE_SHEET_OUT ASSIGN TO 'RENUMERACAO-OUT.txt'.
                               DATA DIVISION.
                               FILE SECTION.
           FD WAGE_SHEET.
           01 WAGE-FILE.
               02 LAST_NAME PIC A(9).
               02 FIRST_NAME PIC A(8).
               02 BIRTHDAY.
                   03 B-DAY PIC 9(2).
                   03 B-MONTH PIC 9(2).
                   03 B-YEAR PIC 9(4).
               02 JOB-CATEGORY PIC A(13).
               02 SCHEDULE.
                   03 ENTRY-HOURS PIC 9(2).
                   03 ENTRY-MINUTES PIC 9(2).
                   03 LEAVING-HOURS PIC 9(2).
                   03 LEAVING-MINUTES PIC 9(2).
               02 LUNCH-BREAK.
                   03 LEAVING-HOURS-BREAK PIC 9(2).
                   03 LEAVING-MINUTES-BREAK PIC 9(2).
                   03 RETURNING-HOURS-BREAK PIC 9(2).
                   03 RETURNING-MINUTES-BREAK PIC 9(2).
               02 WEEKLY-HOURS.
                   03 WORKED-HOURS PIC 9(2).
                   03 WORKED-MINUTES PIC 9(2).
               02 WAGE-RECEIVED PIC 9(4)V99.
           FD WAGE_SHEET_OUT.
           01 WAGE-FILE-OUT.
               02 FIRST-NAME-OUT PIC A(9).
               02 LAST-NAME-OUT PIC A(8).
               02 JOB-CATEGORY-OUT PIC A(13).
               02 BIRTHDAY-OUT.
                   03 B-DAY-OUT PIC 9(2).
                   03 barra PIC X(1).
                   03 B-MONTH-OUT PIC 9(2).
                   03 barra2 PIC X(1) VALUE '/'.
                   03 B-YEAR-OUT PIC 9(4).
                   03 FILLER PIC X(1) VALUE SPACE.
               02 HOURS-OUT.
                   03 ENTRY-HOURS-OUT PIC 9(2).
                   03 pontinhos PIC X(1).
                   03 ENTRY-MINUTES-OUT PIC 9(2).
                   03 FILLER PIC X(1) VALUE SPACE.
               02 FINISHING-HOURS-OUT.
                   03 LEAVING-HOURS-OUT PIC 9(2).
                   03 pontinhos2 PIC X(1).
                   03 LEAVING-MINUTES-OUT PIC 9(2).
                   03 FILLER PIC X(1) VALUE SPACE.
               02 WEEKLY-HOURS.
                   03 WORKED-HOURS-OUT PIC 9(2).
                   03 dec PIC X(1).
                   03 WORKED-MINUTES-OUT PIC 9(2).
                   03 FILLER PIC X(1) VALUE SPACE.
               02 WAGE-RECEIVED-OUT PIC z999.99.
                           WORKING-STORAGE SECTION.
       01  END-LOOP PIC A(3) VALUE SPACES.
                             PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           OPEN INPUT WAGE_SHEET
               OUTPUT WAGE_SHEET_OUT.
           READ WAGE_SHEET
               AT END MOVE "YYY" TO END-LOOP
           END-READ.
           PERFORM CLEANUP UNTIL END-LOOP = "YYY".
           CLOSE WAGE_SHEET
               WAGE_SHEET_OUT.
           STOP RUN.
           CLEANUP.
           MOVE LAST_NAME TO LAST-NAME-OUT.
           MOVE FIRST_NAME TO FIRST-NAME-OUT.
           MOVE JOB-CATEGORY TO JOB-CATEGORY-OUT.
           MOVE B-DAY TO B-DAY-OUT.
           MOVE B-MONTH TO B-MONTH-OUT.
           MOVE B-YEAR TO B-YEAR-OUT.
           MOVE ENTRY-HOURS TO ENTRY-HOURS-OUT.
           MOVE ENTRY-MINUTES TO ENTRY-MINUTES-OUT.
           MOVE LEAVING-HOURS TO LEAVING-HOURS-OUT.
           MOVE LEAVING-MINUTES TO LEAVING-MINUTES-OUT.
           MOVE WORKED-HOURS TO WORKED-HOURS-OUT.
           MOVE WORKED-MINUTES TO WORKED-MINUTES-OUT.
           MOVE WAGE-RECEIVED TO WAGE-RECEIVED-OUT.
           MOVE "." TO dec.
           MOVE ":" TO pontinhos.
           MOVE ":" TO pontinhos2.
           MOVE "/" TO barra.
           MOVE "/" TO barra2.
           WRITE WAGE-FILE-OUT
               AFTER ADVANCING 1 LINE.
           DISPLAY WAGE-FILE-OUT.
           READ WAGE_SHEET
               AT END MOVE "YYY" TO END-LOOP
           END-READ.
           LEGACY.
       STOP RUN.
       END PROGRAM PROD1V1.
[/INST]{
  "id": "BR-001",
  "description": "The end of file is marked by the value 'YYY' in the field END-LOOP.",
  "condition": "END-LOOP = 'YYY'",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. variables.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
       77  Numero      PIC 9(18).
       77  Nome        PIC A(15).
       77  alphanum    PIC X(15).
       77  num_dec     pic 9(02).9(02).
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           display "insira num".
           accept Numero.
           display "insira nome".
           accept nome.
           display "insira alphanum".
           accept alphanum.
           display "insira num_dec".
           accept num_dec.
            STOP RUN.
       END PROGRAM variables.
[/INST]{
  "id": "BR-001",
  "description": "\\nThe Numer field must be a number containing up to 18 digits.\\n",
  "condition": "numeric(Numero)",
  "validation": "Numero must be a number with up to 18 digits."
},
{
  "id": "BR-002",
  "description": "\\nThe Nome field must be text of up to 15 characters.\\n",
  "condition": "alphabetic(Nome)",
  "validation": "Nome must be text with up to 15 characters."
},
{
  "id": "BR-003",
  "description": "\\nThe Alphanum field must be alphanumeric text of up to 15 characters.\\n",
  "condition": "alphanumeric(Alphanum)",
  "validation": "Alphanum must be alphanumeric text with up to 15 characters."
},
{
  "id": "BR-004",
  "description": "\\nThe Num_dec field must be a decimal number of up to 2 digits before and 2 after the decimal point.\\n",
  "condition": "decimal(Num_dec)",
  "validation": "Num_dec must be a decimal number with up to 2 digits before and 2 after the decimal point."
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. vars2.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
       77  name_user      pic x(20) value spaces.
       77  age_user    pic 9(2) value zeros.
       77  actual_year pic 9(4) value 2019.
       77  data_actual   pic 9(6)  value zeros.
       77  data_actual_mask  pic 99/99/99.
       77  day_semana    pic 9(1)  value zero.
       01  horas_actuais.
           02 horas_dia  pic 9(2) value ZEROS.
           02 filler pic X(1) value ":".
           02 minutos_dia pic 9(2) value zeros.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           DISPLAY "insira o seu nome".
           ACCEPT name_user.
           DISPLAY "insira a sua idade."
           ACCEPT age_user.
           SUBTRACT age_user FROM actual_year.
           DISPLAY "insira data actual em YYMMDD".
           accept data_actual.
           MOVE data_actual to data_actual_mask.
           DISPLAY "insira o dia da semana".
           ACCEPT day_semana.
           DISPLAY "insira a hora".
           ACCEPT horas_dia.
           DISPLAY "insira minutos".
           ACCEPT minutos_dia.
           DISPLAY "Ola, " name_user.
           DISPLAY "Nasceste em " actual_year.
            EVALUATE day_semana
             WHEN 1 DISPLAY "Dia: Segunda-Feira"
             WHEN 2 DISPLAY "Dia: Terça-Feira"
             WHEN 3 DISPLAY "Dia: Quarta-feira"
             WHEN 4 DISPLAY "Dia: Quinta-feira"
             WHEN 5 DISPLAY "Dia: Sexta-feira"
             WHEN 6 DISPLAY "Dia: Sábado"
             WHEN 7 DISPLAY "Dia: Domingo".
           DISPLAY "horas actuais: " horas_actuais.
           STOP RUN.
       END PROGRAM vars2.
[/INST]{
  "id": "BR-001",
  "description": "The data_actual is the actual date in YYMMDD format.",
  "condition": "data_actual IS YYMMDD",
  "output": {
    "true": "data_actual is in YYMMDD format"
  }
},
{
  "id": "BR-002",
  "description": "The day_semana is the day of the week in a number format.",
  "condition": "day_semana IS 1 or day_semana IS 2 or day_semana IS 3 or day_semana IS 4 or ...or day_semana IS 7",
  "output": {
    "true": "day_semana is a number format"
  }
},
{
  "id": "BR-003",
  "description": "The horas_actuais is the current time in HHMM format.",
  "condition": "horas_actuais IS HHMM",
  "output": {
    "true": "horas_actuais is in HHMM format"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. WORK-OFFSET.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
           01 WORK-AREA.
             03 WK-A PIC X(4) VALUE 'AAAA'.
             03 WK-B PIC X(4) VALUE 'BBBB'.
             03 WK-C PIC X(4) VALUE 'CCCC'.
             03 WK-D PIC X(4) VALUE 'DDDF'.
           01 WK-PTR POINTER.
       LINKAGE SECTION.
           01 WORK-DATA.
             03 WORK-A PIC X(4).
             03 NEXT-WORK-DATA PIC X(4).
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           DISPLAY "WK-PTR :   " WK-PTR
           SET WK-PTR TO ADDRESS OF WORK-AREA.
           SET ADDRESS OF WORK-DATA TO WK-PTR.
           DISPLAY "WORK-DATA : " WORK-DATA.
           DISPLAY "WK-PTR :   " WK-PTR.
           DISPLAY "WORK-A : " WORK-A.
           DISPLAY "NEXT-WORK-DATA : " NEXT-WORK-DATA.
           GOBACK.
[/INST]{
  "id": "BR-001",
  "description": "WK-PTR must point to a valid location in memory",
  "condition": "ADDRESS OF WORK-AREA TO WK-PTR",
  "output": {
    "valid": "WK-PTR : valid     ",
    "invalid": "WK-PTR : invalid   "
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. BUBBLE-SORT.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
           78 W-LEN-ARR VALUE 10.
           01 W-ARR PIC 99 OCCURS W-LEN-ARR TIMES.
           01 W-J PIC 99 VALUE 1.
           01 W-K PIC 99 VALUE 1.
           01 W-I PIC 99 VALUE 1.
           01 W-H PIC 99 VALUE 1.
           01 W-TEMP PIC 99 VALUE 1.
           01 W-MIN-NUM PIC 99 VALUE 1.
           01 W-MAX-NUM PIC 99 VALUE 99.
           01 W-RAN-NUM PIC 99.
           01 SEED  PIC 9V999999999.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           PERFORM INIT-SEED.
           PERFORM GENERATE-RANDOM-NUM.
           PERFORM SORTING-ARRAY.
           GOBACK.
           INIT-SEED SECTION.
           MOVE FUNCTION RANDOM(FUNCTION SECONDS-PAST-MIDNIGHT) TO SEED.
           GENERATE-RANDOM-NUM SECTION.
           PERFORM VARYING W-I FROM 1 BY 1 UNTIL W-I > W-LEN-ARR
            PERFORM W-LEN-ARR TIMES
              COMPUTE W-RAN-NUM = FUNCTION RANDOM *
                            (W-MAX-NUM - W-MIN-NUM + 1) +
                             W-MIN-NUM
              END-PERFORM
              MOVE W-RAN-NUM TO W-ARR(W-I)
              DISPLAY 'Unsorted: ' W-ARR(W-I)
            END-PERFORM.
           SORTING-ARRAY SECTION.
           PERFORM VARYING W-J FROM 1 BY 1 UNTIL W-J > W-LEN-ARR
             PERFORM VARYING W-K FROM 1 BY 1 UNTIL W-K >= W-LEN-ARR
               IF(W-ARR(W-K) > W-ARR(W-K + 1))
                 MOVE W-ARR(W-K) TO W-TEMP
                 MOVE W-ARR(W-K + 1) TO W-ARR(W-K)
                 MOVE W-TEMP TO W-ARR(W-K + 1)
               END-IF
             END-PERFORM
           END-PERFORM
           PERFORM VARYING W-H FROM 1 BY 1 UNTIL W-H > W-LEN-ARR
           DISPLAY 'Sorted: ' W-ARR(W-H)
           END-PERFORM.
[/INST]{
  "id": "BR-002",  "description": "Initialize the seed for generating random numbers by using the function RANDOM and the SECONDS-PAST-MIDNIGHT function.",
  "condition": "FUNCTION RANDOM(FUNCTION SECONDS-PAST-MIDNIGHT) TO SEED",
  "output": {}
}
{
  "id": "BR-003",  "description": "Generate random numbers within a specified range using the function RANDOM and mathematical operations.",
  "condition": "COMPUTE W-RAN-NUM = FUNCTION RANDOM * (W-MAX-NUM - W-MIN-NUM + 1) + W-MIN-NUM",
  "output": {}
}
{
  "id": "BR-004",  "description": "Compare two adjacent elements of an array, and swap their values if they are out of order, using a nested loop.",
  "condition": "IF(W-ARR(W-K) > W-ARR(W-K + 1))",
  "output": {}
}
{
  "id": "BR-005",  "description": "Repeat the comparison and swapping process for all elements of the array until the array is sorted in ascending order.",
  "condition": "PERFORM VARYING W-J FROM 1 BY 1 UNTIL W-J > W-LEN-ARRPERFORM VARYING W-K FROM 1 BY 1 UNTIL W-K >= W-LEN-ARR",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. CLASS-CONDITION.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
           01 NUM01 PIC S9(9) VALUE -5000.
           01 STR01 PIC X(9)  VALUE 'ABCDF'.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           IF STR01 IS ALPHABETIC THEN
             DISPLAY "STR01 IS ALPHABETIC"
           END-IF.
           IF NUM01 IS NUMERIC THEN
             DISPLAY "NUM01 IS NUMERIC"
           END-IF.
           IF STR01 IS NUMERIC THEN
             DISPLAY "STR01 IS NUMERIC"
           ELSE
             DISPLAY "STR01 ISNT NUMERIC IS ALPHABETIC"
           END-IF.
           GOBACK.
[/INST]{
  "id": "BR-001",  "description": "For any given alpha numeric string, it is considered alphabetic if it contains only alphabetic characters.",
  "condition": "STR01 IS ALPHABETIC",
  "output": {
    "true": "STR01 IS ALPHABETIC"
  }
},
{
  "id": "BR-002",  "description": "For any given string, it is considered numeric if it contains only numeric characters.",
  "condition": "NUM01 IS NUMERIC",
  "output": {
    "true": "NUM01 IS NUMERIC"
  }
}
[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. COMBINED-CONDITIONS.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
           01 NUM01 PIC 9(3) VALUE 50.
           01 NUM02 PIC 9(3) VALUE 20.
           01 NUM03 PIC 9(3) VALUE 30.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           IF NUM01 IS LESS THAN NUM02 AND NUM01 = NUM03 THEN
             DISPLAY "I AM HERE!"
           ELSE
             DISPLAY "I AM HERE :( "
           END-IF.
           GOBACK.
[/INST]{
  "id": "BR-001",
  "description": "If NUM01 is Less than NUM02 and equal to NUM03, then display I AM HERE!",
  "condition": "NUM01 < NUM02 AND NUM01 = NUM03",
  "output": {
    "true": "I AM HERE!",
    "false": "I AM HERE :( "
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. CONDITION-STATEMENT.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
           01 M_NUMBER PIC 9(3).
           88 M_TRUE  VALUES ARE 30 THRU 100.
           88 M_FALSE VALUES ARE 000 THRU 40.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           MOVE 50 TO M_NUMBER.
           IF M_TRUE
           DISPLAY 'Passed with ' M_NUMBER ' marks'.
           IF M_FALSE
           DISPLAY 'FAILED with ' M_NUMBER ' marks'.
           GOBACK.
[/INST]{
  "id": "BR-001",  "description": "If the number is between 30 and 100 (inclusive), the student PASSED. Otherwise, the student FAILED.",
  "condition": "M_NUMBER",
  "output": {
    "passed": "Passed with ' M_NUMBER ' marks",
    "failed": "FAILED with ' M_NUMBER ' marks"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. CONDITION-STATEMENT.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
           01 NUM01 PIC 9(9) VALUE 5.
           01 NUM02 PIC 9(9) VALUE 6.
           01 NUM03 PIC 9(9) VALUE 7.
           01 NUM04 PIC 9(9) VALUE 8.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           IF NUM01 <= NUM02 THEN
             DISPLAY "IS NOT LESS"
             IF NUM03 >= NUM04 THEN
               DISPLAY "IS GREATER"
             ELSE
               DISPLAY "IS NOT GREATER"
             END-IF
           ELSE
             DISPLAY "IS LESS"
           END-IF.
           GOBACK.
[/INST]{
  "id": "BR-001",
  "description": "If the first number is less than or equal to the second number then display 'IS NOT LESS'.",
  "condition": "NUM01 <= NUM02",
  "output": {
    "true": "IS NOT LESS"
  }
},
{
  "id": "BR-002",
  "description": "If the first number is less than or equal to the second number and the third number is greater than or equal to the fourth number then display 'IS GREATER'.",
  "condition": "NUM01 <= NUM02 and NUM03 >= NUM04",
  "output": {
    "true": "IS GREATER"
  }
},
{
  "id": "BR-003",
  "description": "If the first number is less than or equal to the second number and the third number is not greater than or equal to the fourth number then display 'IS NOT GREATER'.",
  "condition": "NUM01 <= NUM02 and NUM03 < NUM04",
  "output": {
    "true": "IS NOT GREATER"
  }
},
{
  "id": "BR-004",
  "description": "If the first number is not less than or equal to the second number then display 'IS LESS'.",
  "condition": "NUM01 > NUM02",
  "output": {
    "true": "IS LESS"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. CORE-BASIC-WINDOW.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       REPOSITORY.
           FUNCTION ALL INTRINSIC.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 R-CODE USAGE BINARY-LONG.
       01 ESC-KEY PIC 9(8).
       01 SRC-WIDTH PIC 999 VALUE 800.
       01 SRC-HEIGHT PIC 999 VALUE 450.
       01 W-NAME PIC X(25) VALUE "Hello raylib from Cobol".
       01 W-COLOR-WHITE.
         02 W-R PIC S9(3) VALUE 245 BINARY.
         02 W-G PIC S9(3) VALUE 245 BINARY.
         02 W-B PIC S9(3) VALUE 245 BINARY.
         02 W-A PIC S9(3) VALUE 255 BINARY.
       01 W-COLOR-LIGHTGRAY.
         02 W-R PIC S9(3) VALUE 200 BINARY.
         02 W-G PIC S9(3) VALUE 200 BINARY.
         02 W-B PIC S9(3) VALUE 200 BINARY.
         02 W-A PIC S9(3) VALUE 255 BINARY.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
       PERFORM INIT-WINDOW.
       PERFORM MAIN-LOOP.
       PERFORM CLOSE-WINDOW.
       GOBACK.
       INIT-WINDOW SECTION.
         CALL "InitWindow" USING
          BY VALUE SRC-WIDTH SRC-HEIGHT
          BY REFERENCE W-NAME RETURNING R-CODE
            ON EXCEPTION
            DISPLAY "exception error: raylib not found"
            UPON SYSERR
            END-DISPLAY
         END-CALL
         CALL "SetTargetFPS" USING BY VALUE 60
           RETURNING OMITTED
         END-CALL.
       MAIN-LOOP SECTION.
         PERFORM UNTIL ESC-KEY = 1
          CALL "WindowShouldClose"
            RETURNING ESC-KEY
          END-CALL
          CALL STATIC "BeginDrawing"
            RETURNING OMITTED
          END-CALL
          CALL "ClearBackground" USING BY REFERENCE W-COLOR-WHITE
            RETURNING OMITTED
          END-CALL
           CALL STATIC "DrawText" USING
             BY REFERENCE "Congrats! You created your first window!"
             BY VALUE 190 200
             BY VALUE 20
             BY CONTENT W-COLOR-LIGHTGRAY
             RETURNING OMITTED
          END-CALL
          CALL STATIC "EndDrawing"
            RETURNING OMITTED
          END-CALL
         END-PERFORM.
       CLOSE-WINDOW SECTION.
         CALL "CloseWindow"
           RETURNING OMITTED
         END-CALL.
[/INST]{
  "id": "BR-001",
  "description": "The raylib window width is set to 800 pixels at the initialization of the window.",
  "condition": null,
  "output": {
    "value": "800"
  }
}
{
  "id": "BR-002",
  "description": "The raylib window height is set to 450 pixels at the initialization of the window.",
  "condition": null,
  "output": {
    "value": "450"
  }
}
{
  "id": "BR-003",
  "description": "The raylib window's background color is set to white at the beginning of each game loop.",
  "condition": null,
  "output": {
    "color": "white"
  }
}
{
  "id": "BR-004",
  "description": "The target frame rate for the raylib window is set to 60 frames per second (FPS) at the initialization of the window.",
  "condition": null,
  "output": {
    "value": "60"
  }
}
{
  "id": "BR-005",
  "description": "The raylib window will remain open until the Escape (ESC) key is pressed.",
  "condition": null,
  "output": {}
}
{
  "id": "BR-006",
  "description": "The text \"Congrats! You created your first window!\" is drawn onto the raylib window in the light gray color at position (190, 200).",
  "condition": null,
  "output": {
    "text": "Congrats! You created your first window!",
    "x": "190",
    "y": "200",
    "color": "light gray"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. CORE-RANDOM-VALUES.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       REPOSITORY.
           FUNCTION ALL INTRINSIC.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 R-CODE USAGE BINARY-LONG.
       01 ESC-KEY PIC 9(8).
       01 SRC-WIDTH PIC 999 VALUE 800.
       01 SRC-HEIGHT PIC 999 VALUE 450.
       01 W-NAME PIC X(25) VALUE "Hello raylib from Cobol".
       01 FRAME-COUNTER PIC 999 VALUE 0.
       01 RAN-NUM USAGE BINARY-LONG.
       01 RAN-TXT PIC X(9).
       01 RESULT PIC 999 VALUE 0.
       01 W-COLOR-WHITE.
         02 W-R PIC S9(3) VALUE 245 BINARY.
         02 W-G PIC S9(3) VALUE 245 BINARY.
         02 W-B PIC S9(3) VALUE 245 BINARY.
         02 W-A PIC S9(3) VALUE 255 BINARY.
       01 W-COLOR-LIGHTGRAY.
         02 W-R PIC S9(3) VALUE 200 BINARY.
         02 W-G PIC S9(3) VALUE 200 BINARY.
         02 W-B PIC S9(3) VALUE 200 BINARY.
         02 W-A PIC S9(3) VALUE 255 BINARY.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
       PERFORM INIT-WINDOW.
       PERFORM MAIN-LOOP.
       PERFORM CLOSE-WINDOW.
       GOBACK.
       INIT-WINDOW SECTION.
         CALL "InitWindow" USING
          BY VALUE SRC-WIDTH SRC-HEIGHT
          BY REFERENCE W-NAME RETURNING R-CODE
            ON EXCEPTION DISPLAY "exception error: raylib not found"
            UPON SYSERR
            END-DISPLAY
         END-CALL
         CALL "GetRandomValue" USING
           BY VALUE -8
           BY VALUE 5
           RETURNING RAN-NUM
         END-CALL
         CALL "SetTargetFPS" USING BY VALUE 60
           RETURNING OMITTED
         END-CALL.
       MAIN-LOOP SECTION.
         PERFORM UNTIL ESC-KEY = 1
          CALL "WindowShouldClose"
            RETURNING ESC-KEY
          END-CALL
          ADD 1 TO FRAME-COUNTER
          END-ADD
          COMPUTE
            RESULT = FUNCTION MOD((FRAME-COUNTER / 120), 2)
          END-COMPUTE
          IF RESULT = 1
            CALL "GetRandomValue" USING
            BY VALUE -8
            BY VALUE 5
            RETURNING RAN-NUM
            END-CALL
            MOVE 0 TO FRAME-COUNTER
          END-IF
          CALL STATIC "BeginDrawing"
            RETURNING OMITTED
          END-CALL
          CALL "ClearBackground" USING BY REFERENCE W-COLOR-WHITE
            RETURNING OMITTED
          END-CALL
          CALL STATIC "DrawText" USING
           BY REFERENCE "Every 2 sec a new random value is generated:"
           BY VALUE 190 200
           BY VALUE 20
           BY CONTENT W-COLOR-LIGHTGRAY
           RETURNING OMITTED
          END-CALL
           MOVE RAN-NUM to RAN-TXT
          CALL STATIC "DrawText" USING
           BY REFERENCE RAN-TXT(9:1)
           BY VALUE 360 220
           BY VALUE 80
           BY CONTENT W-COLOR-LIGHTGRAY
           RETURNING OMITTED
          END-CALL
          CALL STATIC "EndDrawing"
            RETURNING OMITTED
          END-CALL
         END-PERFORM.
       CLOSE-WINDOW SECTION.
         CALL "CloseWindow"
           RETURNING OMITTED
         END-CALL.
[/INST]{
  "id": "BR-002",  "description": "If the remainder of dividing the frame counter by 120 is 1, a new random number is generated between -8 and 5.",
  "condition": "RESULT = 1",
  "output": {
    "new_random_number": "Get a new random number between -8 and 5"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. DATE-TIME.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
           01 W-BATCH-COMPLET PIC X(16).
           01 W-BATCH-TEST    PIC X(16).
           01 W-BATCH.
              03 W-DATE PIC X(8).
              03 W-TIME PIC X(8).
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           ACCEPT W-TIME OF W-BATCH FROM TIME.
           ACCEPT W-DATE OF W-BATCH FROM DATE YYYYMMDD.
           DISPLAY "W-TIME: " W-TIME OF W-BATCH.
           DISPLAY "W-DATE: " W-DATE OF W-BATCH.
           DISPLAY "W-BATCH: " W-BATCH.
           STRING W-DATE OF W-BATCH DELIMITED BY SPACE
           W-TIME OF W-BATCH DELIMITED BY SPACE
             INTO W-BATCH-COMPLET
           END-STRING.
           MOVE W-BATCH TO W-BATCH-TEST.
           DISPLAY "COMPLET : " W-BATCH-COMPLET.
           DISPLAY "TEST : " W-BATCH-TEST
           GOBACK.
[/INST]{
  "id": "BR-001",
  "description": "The most complete version of the string is the one that has the date and time created with the values in the variables \\W-DATE\\ and \\W-TIME\\ respectively.",
  "condition": null,
  "output": {
    "complete": "\\W-DATE\\ \\W-TIME\\"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. EVALUATE-VERB.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
           01 NUM01 PIC 9(3) VALUE ZERO.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           MOVE 3 TO NUM01.
           EVALUATE TRUE
             WHEN NUM01 > 2
               DISPLAY "NUMBER01 GREATER THAN 2"
             WHEN NUM01 < 0
               DISPLAY "NUMBER01 LESS THAN 0"
             WHEN OTHER
               DISPLAY "INVALID VALUE OF NUMBER01"
           END-EVALUATE.
           GOBACK.
[/INST]{
  "id": "BR-002",
  "description": "NUMBER01 is greater than 2.",
  "condition": "NUM01 > 2",
  "output": {
    "true": "NUMBER01 GREATER THAN 2"
  }
},
{
  "id": "BR-003",
  "description": "NUMBER01 is less than 0.",
  "condition": "NUM01 < 0",
  "output": {
    "true": "NUMBER01 LESS THAN 0"
  }
},
{
  "id": "BR-004",
  "description": "NUMBER01 is invalid.",
  "condition": "OTHER",
  "output": {
    "true": "INVALID VALUE OF NUMBER01"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. FOR-LOOP.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
       01 W-I PIC 999 VALUE 0.
       01 W-J PIC 999 VALUE 0.
       01 W-K PIC 999 VALUE 0.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           PERFORM FOR-UNTIL-LOOP.
           PERFORM FOR-VAIRING-LOOP.
           GOBACK.
           FOR-UNTIL-LOOP SECTION.
           PERFORM UNTIL W-I > 20
             MOVE W-I TO W-J
             ADD 1 TO W-I
             PERFORM UNTIL W-J > 20
               COMPUTE W-K = W-J * W-I
               DISPLAY "UNTIL: " W-I  " W-K: " W-K " = " W-J " * " W-I
               ADD 1 TO W-J
             END-PERFORM
           END-PERFORM.
           FOR-VAIRING-LOOP SECTION.
           ADD 0 TO W-I
           ADD 0 TO W-J
           ADD 0 TO W-K
           PERFORM VARYING W-I FROM 1 BY 1 UNTIL W-I > 20
             MOVE W-I TO W-J
             ADD 1 TO W-I
             PERFORM VARYING W-J FROM 1 BY 1 UNTIL W-J > 20
               COMPUTE W-K = W-J * W-I
               DISPLAY "VARYING: " W-I  " W-K: " W-K " = " W-J " * " W-I
               ADD 1 TO W-J
             END-PERFORM
           END-PERFORM.
[/INST]{
  "id": "BR-001",
  "description": "The loop continues until W-I is greater than 20.",
  "condition": "W-I > 20",
  "output": null
}
{
  "id": "BR-002",
  "description": "W-J is set to the value of W-I.",
  "condition": null,
  "output": {
    "set": "W-J = W-I"
  }
}
{
  "id": "BR-003",
  "description": "1 is added to W-I.",
  "condition": null,
  "output": {
    "add": "ADD 1 TO W-I"
  }
}
{
  "id": "BR-004",
  "description": "The loop continues until W-J is greater than 20.",
  "condition": "W-J > 20",
  "output": null
}
{
  "id": "BR-005",
  "description": "W-K is calculated by multiplying W-J by W-I.",
  "condition": null,
  "output": {
    "multiply": "W-K = W-J * W-I"
  }
}
{
  "id": "BR-006",
  "description": "The value of W-K is displayed along with the values of W-I and W-J.",
  "condition": null,
  "output": {
    "display": "UNTIL: " W-I  " W-K: " W-K " = " W-J " * " W-I
  }
}
{
  "id": "BR-007",
  "description": "1 is added to W-J.",
  "condition": null,
  "output": {
    "add": "ADD 1 TO W-J"
  }
}
{
  "id": "BR-008",
  "description": "W-I is set to 0.",
  "condition": null,
  "output": {
    "set": "ADD 0 TO W-I"
  }
}
{
  "id": "BR-009",
  "description": "W-J is set to 0.",
  "condition": null,
  "output": {
    "set": "ADD 0 TO W-J"
  }
}
{
  "id": "BR-010",
  "description": "W-K is set to 0.",
  "condition": null,
  "output": {
    "set": "ADD 0 TO W-K"
  }
}
{
  "id": "BR-011",
  "description": "W-I is incremented by 1 until it is greater than 20.",
  "condition": "W-I > 20",
  "output": null
}
{
  "id": "BR-012",
  "description": "W-J is set to the value of W-I.",
  "condition": null,
  "output": {
    "set": "W-J = W-I"
  }
}
{
  "id": "BR-013",
  "description": "1 is added to W-I.",
  "condition": null,
  "output": {
    "add": "ADD 1 TO W-I"
  }
}
{
  "id": "BR-014",
  "description": "W-J is incremented by 1 until it is greater than 20.",
  "condition": "W-J > 20",
  "output": null
}
{
  "id": "BR-015",
  "description": "W-K is calculated by multiplying W-J by W-I.",
  "condition": null,
  "output": {
    "multiply": "W-K = W-J * W-I"
  }
}
{
  "id": "BR-016",
  "description": "The value of W-K is displayed along with the values of W-I and W-J.",
  "condition": null,
  "output": {
    "display": "VARYING: " W-I  " W-K: " W-K " = " W-J " * " W-I
  }
}
{
  "id": "BR-017",
  "description": "1 is added to W-J.",
  "condition": null,
  "output": {
    "add": "ADD 1 TO W-J"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. HELLO-WORLD.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
            DISPLAY "Hello world!"
            STOP RUN.
       END PROGRAM HELLO-WORLD.
[/INST]{
  "id": "BR-001",
  "description": "The program displays \\\"Hello world!\\\" as output.",
  "condition": null,
  "output": {
    "output": "Hello world!"
  }
}[INST]       >>SOURCE FORMAT IS FIXED
       identification division.
       program-id. sqlscreen.
       data division.
       working-storage section.
       01 name-length          constant 20.
       01 value-length         constant 132.
       01 database             pic x(8) value 'test.db' & x'00'.
       01 db                   usage pointer.
       01 callback-proc        usage procedure-pointer.
       01 errstr               pic x(80).
       01 result               pic s9(9).
       01 query                pic x(255).
       01 zquery               pic x(256).
       01 main-record.
          03 key-field         pic 9(10).
          03 str-field         pic x(20).
          03 date-field        pic x(20).
       01 sql-table            external.
          03 sql-records       pic x(50) occurs 20 times.
       01 row-counter          usage binary-long external.
       01 row-max              usage binary-long.
       screen section.
       01 entry-screen.
          05 foreground-color 0 background-color 7 blank screen.
          05 foreground-color 0 background-color 7
             line 1 col 14 pic x(20) value "select * from trial;".
          05 foreground-color 0 background-color 7
             line 2 col 4 pic x(8) value "Key:".
          05 foreground-color 0 background-color 7
             line 2 col 14 pic x(10) using key-field.
          05 foreground-color 0 background-color 7
             line 3 col 4 pic x(8) value "String:".
          05 foreground-color 0 background-color 7
             line 3 col 14 pic x(20) from str-field.
          05 foreground-color 0 background-color 7
             line 4 col 4 pic x(8) value "Date:".
          05 foreground-color 0 background-color 7
             line 4 col 14 pic x(20) from date-field.
          05 foreground-color 0 background-color 7
             line 6 col 4 pic x(17) value "Hit ENTER to page".
       procedure division.
       call "ocsqlite_init" using
               db
               database
               by reference errstr
               by value function length(errstr)
           returning result
       end-call
       if result not equal zero
           display "Result: " result end-display
       end-if
       set callback-proc to entry "callback"
    >>Dmove ".echo on" to query
    >>Dperform ocsql-exec
    >>Dmove ".help" to query
    >>Dperform ocsql-exec
    >>Dmove ".tables" to query
    >>Dperform ocsql-exec
    >>Dmove ".timer on" to query
    >>Dperform ocsql-exec
    >>Dmove ".mode tcl" to query
    >>Dperform ocsql-exec
    >>Dmove 0 to row-counter
    >>Dmove "select * from trial;" to query
    >>Dperform ocsql-exec
    >>Dmove ".mode html" to query
    >>Dperform ocsql-exec
    >>Dmove 'insert into trial values (null, "string", "2008-10-10");'
    >>D  to query
    >>Dperform ocsql-exec
    >>Dmove "select * from thisfails;" to query
    >>Dperform ocsql-exec
       move "drop table trial;" to query
       perform ocsql-exec
       move "create table trial (first integer primary key, " &
           "second char(20), third date);" to query
       perform ocsql-exec
    >>Dmove "pragma count_changes=1;"  to query
    >>Dperform ocsql-exec
    >>Dmove "pragma database_list;"  to query
    >>Dperform ocsql-exec
    >>Dmove ".schema trial" to query
    >>Dperform ocsql-exec
       move 'insert into trial (first, second, third) values ' &
           '(null, lower(hex(randomblob(20))), datetime()); ' &
           'insert into trial values (null, "something",' &
           ' julianday());' to query
       perform ocsql-exec
    >>Dmove "select * from trial;" to query
    >>Dperform ocsql-exec
    >>Dmove "pragma count_changes=0;"  to query
    >>Dperform ocsql-exec
       move 'insert into trial (first, second, third) values ' &
           '(null, lower(hex(randomblob(20))), datetime()); ' &
           'insert into trial values (null, "something",' &
           ' julianday());' to query
       perform ocsql-exec
       move ".mode column" to query
       perform ocsql-exec
       move ".width 10 20 20" to query
       perform ocsql-exec
       move 1 to row-counter
       move "select * from trial;" to query
       perform ocsql-exec
       display function trim(sql-table trailing) end-display
       subtract 1 from row-counter giving row-max end-subtract
       perform varying row-counter from row-max by -1
           until row-counter < 1
               move sql-records(row-counter) to main-record
               display "|" key-field "|" end-display
               display "|" str-field "|" end-display
               display "|" date-field "|" end-display
       end-perform
       perform varying row-counter from 1 by 1
           until row-counter > row-max
           move sql-records(row-counter) to main-record
           accept entry-screen end-accept
       end-perform
       goback.
       call "ocsqlite_close"
           using
               by value db
           returning result
       end-call
       move result to return-code
       goback.
       ocsql-exec.
       move spaces to zquery
       string
           function trim(query trailing) delimited by size
           x"00" delimited by size
           into zquery
       end-string
       call "ocsqlite"
           using by value db
               callback-proc
               by reference zquery
               by value function length(zquery)
               by reference errstr
               by value function length(errstr)
           returning result
       end-call
       if result not equal 0
           display "Err:    " errstr end-display
       end-if
       .
       end program sqlscreen.
       identification division.
       program-id. callback.
       data division.
       working-storage section.
       01 count-display        pic z9.
       01 index-display        pic z9.
       01 value-display        pic x(132).
       01 main-record.
          03 field-1           pic 9(10).
          03 field-2           pic x(20).
          03 field-3           pic x(20).
          03 filler            pic x(82).
       01 row-counter          usage binary-long external.
       01 sql-table            external.
          03 sql-records       pic x(50) occurs 20 times.
       linkage section.
       01 nada                 usage pointer.
       01 field-count          usage binary-long.
       01 row-data             pic x(132).
       01 row-length           usage binary-long.
       procedure division using
           nada field-count row-data row-length.
       move spaces to value-display
       string
           row-data delimited by low-value
           into value-display
       end-string
       inspect value-display replacing all x"0a" by space
       move value-display to main-record
       if row-counter > 0
           move main-record to sql-records(row-counter)
           add 1 to row-counter end-add
       end-if
    >>Ddisplay "["
    >>D    function trim(main-record trailing)
    >>D"]" end-display
       move 0 to return-code
       goback.
       end program callback.
[/INST]{
  "id": "BR-001",
  "description": "The database file referred to by the program is test.db",
  "condition": "database = 'test.db'",
  "output": {
    "testdb": "test.db"
  }
}
{
  "id": "BR-002",
  "description": "The query string should be double quoted",
  "condition": "NOT function chars(query, 1, 1) = '\"'",
  "output": []
}
{
  "id": "BR-003",
  "description": "The query string should be terminated with a semicolon",
  "condition": "NOT function chars(query, length(query), 1) = ';'",
  "output": []
}
{
  "id": "BR-004",
  "description": "The number of records in sql-table should not exceed 20",
  "condition": "row-counter > 20",
  "output": []
}
{
  "id": "BR-005",
  "description": "The row-counter should not be negative",
  "condition": "row-counter < 1",
  "output": []
}
{
  "id": "BR-006",
  "description": "The row-counter should not be greater than the maximum number of rows in the table",
  "condition": "row-counter > row-max",
  "output": []
}
{
  "id": "BR-007",
  "description": "The row-counter should not be greater than the maximum number of rows in the table",
  "condition": "row-counter < 1",
  "output": []
}[INST]       PROGRAM-ID. INSERT-SORT.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
           78 W-LEN-ARR VALUE 20.
           01 W-ARR PIC 999 OCCURS W-LEN-ARR TIMES.
           01 W-R PIC 999 VALUE 1.
           01 W-I PIC 999 VALUE 1.
           01 W-J PIC 999 VALUE 1.
           01 W-H PIC 999 VALUE 1.
           01 W-SWAP PIC 999 VALUE 1.
           01 W-KEY  PIC 999 VALUE 1.
           01 W-MIN-NUM PIC 99 VALUE 1.
           01 W-MAX-NUM PIC 99 VALUE 99.
           01 W-RAN-NUM PIC 99.
           01 SEED  PIC 9V999999999.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           PERFORM INIT-SEED.
           PERFORM GENERATE-RANDOM-NUM.
           PERFORM SORTING-ARRAY.
           GOBACK.
           INIT-SEED SECTION.
           MOVE FUNCTION RANDOM(FUNCTION SECONDS-PAST-MIDNIGHT) TO SEED.
           GENERATE-RANDOM-NUM SECTION.
            PERFORM VARYING W-R FROM 1 BY 1 UNTIL W-R > W-LEN-ARR
              PERFORM W-LEN-ARR TIMES
              COMPUTE W-RAN-NUM = FUNCTION RANDOM *
                            (W-MAX-NUM - W-MIN-NUM + 1) +
                             W-MIN-NUM
              END-PERFORM
              MOVE W-RAN-NUM TO W-ARR(W-R)
              DISPLAY "POS: " W-R " RANDOM NUMBER: " W-ARR(W-R)
            END-PERFORM.
           SORTING-ARRAY SECTION.
           PERFORM VARYING W-I FROM 1 BY 1 UNTIL W-I > W-LEN-ARR
             MOVE W-ARR(W-I) TO W-KEY
             COMPUTE W-J = W-I - 1
             PERFORM UNTIL W-J >= 0 AND W-ARR(W-J) < W-KEY
               MOVE W-ARR(W-J) TO W-ARR(W-J + 1)
               COMPUTE W-J = W-J - 1
             END-PERFORM
             MOVE W-KEY TO W-ARR(W-J + 1)
           END-PERFORM.
           PERFORM VARYING W-H FROM 1 BY 1 UNTIL W-H > W-LEN-ARR
           DISPLAY "POS: " W-H " SORTED: " W-ARR(W-H)
           END-PERFORM.
[/INST]{
  "id": "BR-002",
  "description": "The program requires the input of 20 random numbers and sorts them in ascending order before presenting them to the user",
  "condition": null,
  "output": {
    "sorted-array": "The elements in array W-ARR have been sorted in ascending order."
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. NEGATED-CONDITION.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
           01 NUM01 PIC 9(2) VALUE 20.
           01 NUM02 PIC 9(9) VALUE 25.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           IF NOT NUM01 IS LESS THAN NUM02 THEN
             DISPLAY "I AM HERE : IF "
           ELSE
             DISPLAY "I AM HERE : ELSE"
           END-IF.
           GOBACK.
[/INST]{
  "id": "BR-002",
  "description": "If the value of NUM01 is greater than or equal to NUM02, then the message \"I AM HERE : IF \" is displayed, otherwise the message \"I AM HERE : ELSE\" is displayed.",
  "condition": "NUM01 >= NUM02",
  "output": {
    "if": "I AM HERE : IF",
    "else": "I AM HERE : ELSE"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. OPEN-FILE.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT DATA-FILE ASSIGN TO "../data.dat"
           ORGANIZATION IS SEQUENTIAL
           ACCESS IS SEQUENTIAL
           FILE STATUS FILE-STATUS.
       DATA DIVISION.
       FILE SECTION.
           FD DATA-FILE.
           01 FILE-STATUS PIC XX.
           01 MY-DATA-FILE.
             05 MY-DATA-ID    PIC X(5).
             05 MY-DATA-NAME  PIC X(10).
             05 MY-DATA-TIME  PIC X(10).
       WORKING-STORAGE SECTION.
           01 MY-DATA-STRUCT.
             05 DATA-ID   PIC X(5).
             05 DATA-NAME PIC X(10).
             05 DATA-TIME PIC X(10).
           01 EOF PIC A(1).
           01 ERROR-RESULT.
             05 ERROR-LEVEL PIC XX.
             05 ERROR-MSG   PIC X(50).
       PROCEDURE DIVISION.
           OPEN I-O DATA-FILE.
           IF FILE-STATUS NOT = '00'
               MOVE FILE-STATUS TO ERROR-LEVEL
               MOVE "ERROR OPENING FILE : " TO ERROR-MSG
                   PERFORM ERROR-MESSAGE
                   PERFORM END-PROGRAM
           END-IF.
       READ-FILE SECTION.
           PERFORM UNTIL EOF = 'Y'
               READ DATA-FILE INTO MY-DATA-STRUCT
                    AT END MOVE 'Y' TO EOF
                    NOT AT END DISPLAY MY-DATA-STRUCT
               END-READ
           END-PERFORM.
           CLOSE DATA-FILE.
       ERROR-MESSAGE SECTION.
           DISPLAY ERROR-MSG " " ERROR-LEVEL.
       END-PROGRAM SECTION.
           CLOSE DATA-FILE.
[/INST]{
  "id": "BR-001",
  "description": "The program will display an error message if it encounters a file-open error with an error level and the error message text.",
  "condition": "FILE-STATUS NOT = '00'",
  "output": {
    "display-error-message": "DISPLAY ERROR-MSG ' ' ERROR-LEVEL"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. OPEN-FILE-SEQUENTIAL.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT DATA-FILE ASSIGN TO "../data.dat"
       ORGANIZATION IS SEQUENTIAL
       ACCESS IS SEQUENTIAL
       FILE STATUS FILE-STATUS.
       DATA DIVISION.
       FILE SECTION.
           FD DATA-FILE.
           01 DETAILS.
             02 DET-ID     PIC X(5).
             02 DET-STR.
               03 DET-TIME   PIC X(5).
               03 DET-NUM    PIC X(6).
       WORKING-STORAGE SECTION.
           77 FILE-STATUS PIC XX.
           77 EOF PIC X.
             88 EOF-T value "Y".
             88 EOF-F value "N".
       PROCEDURE DIVISION.
            OPEN INPUT DATA-FILE.
           IF FILE-STATUS NOT = "00"
             DISPLAY "Error opening the DB file, program will exit."
             GOBACK
           END-IF.
           READ DATA-FILE
             AT END
               SET EOF-T TO TRUE
             NOT AT END
               SET EOF-F TO TRUE
               PERFORM DISPLAY-DET-S THROUGH DISPLAY-DET-E
           END-READ
           PERFORM UNTIL EOF-T
             READ DATA-FILE NEXT
               AT END
                 SET EOF-T TO TRUE
               NOT AT END
                 PERFORM DISPLAY-DET-S THROUGH DISPLAY-DET-E
             END-READ
           END-PERFORM
           CLOSE DATA-FILE.
           GOBACK.
           DISPAY-DET SECTION.
           DISPLAY-DET-S.
           DISPLAY "ID: " DET-ID " STR: " DET-TIME " DET-NUM: " DET-NUM.
           DISPLAY-DET-E.
               EXIT.
       END-PROGRAM SECTION.
           CLOSE DATA-FILE.
           GOBACK.
[/INST]{
  "id": "BR-001",  "description": " The program reads a text file stored in the path '../data.dat' sequentially and displays the contents of the file.",
  "condition": null,
  "output": null
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. WORK-WITH-POINTER.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
           01 WORK-AREA.
             03 AREA-A PIC X(4) VALUE 'AAAA'.
             03 AREA-B PIC X(4) VALUE 'BBBB'.
             03 AREA-C PIC X(4) VALUE 'CCCC'.
             03 AREA-D PIC X(4) VALUE 'DDDF'.
           01 W-POINTER POINTER.
       LINKAGE SECTION.
           01 WORK-DATA.
             03 WORK-A PIC X(4).
             03 NEXT-WORK-DATA PIC X(4).
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           DISPLAY "W-POINTER: " W-POINTER
           SET W-POINTER TO ADDRESS OF WORK-AREA.
           SET ADDRESS OF WORK-DATA TO W-POINTER.
           DISPLAY "WORK-DATA: " WORK-DATA.
           DISPLAY "W-POINTER: " W-POINTER.
           DISPLAY "WORK-A: " WORK-A.
           DISPLAY "NEXT-WORK-DATA : " NEXT-WORK-DATA.
           GOBACK.
[/INST]{
  "id": "BR-001",
  "description": "The address of W-POINTER should be equal to the address of WORK-AREA.",
  "condition": "W-POINTER = ADDRESS OF WORK-AREA",
  "result": "W-POINTER equals ADDRESS OF WORK-AREA."
},
{
  "id": "BR-002",
  "description": "The address of WORK-DATA should be equal to the address of WORK-AREA.",
  "condition": "ADDRESS OF WORK-DATA = ADDRESS OF WORK-AREA",
  "result": "ADDRESS OF WORK-DATA equals ADDRESS OF WORK-AREA."
},
{
  "id": "BR-003",
  "description": "The data in WORK-A should be equal to the data in AREA-A.",
  "condition": "WORK-A = AREA-A",
  "result": "WORK-A equals AREA-A."
},
{
  "id": "BR-004",
  "description": "The data in NEXT-WORK-DATA should be equal to the data in AREA-B.",
  "condition": "NEXT-WORK-DATA = AREA-B",
  "result": "NEXT-WORK-DATA equals AREA-B."
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. GAME-LOTTERY.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
           78 W-LEN-ARR VALUE 100.
           01 W-ARR PIC 999 OCCURS W-LEN-ARR TIMES.
           01 W-NUM        PIC 9(3).
           01 W-RANDOM-TIP PIC 9(3).
           01 W-TIP        PIC 9(3).
           01 W-I PIC 999 VALUE 1.
           01 W-J PIC 999 VALUE 1.
           01 W-K PIC 999 VALUE 1.
           01 SEED  PIC 9V999999999.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
            DISPLAY "-------------------------------------------------"
            DISPLAY "- Welcome in the game tip lottery !             -"
            DISPLAY "- You choose one number from 1 to 100!          -"
            DISPLAY "-------------------------------------------------"
            PERFORM INIT-SEED.
            PERFORM GENERATE-NUMBERS.
            PERFORM PRINT-NUMBER.
            GOBACK.
           INIT-SEED SECTION.
           MOVE FUNCTION RANDOM(FUNCTION SECONDS-PAST-MIDNIGHT) TO SEED.
           GENERATE-NUMBERS SECTION.
            DISPLAY "-------------------------------------------------"
            DISPLAY "- Generating numbers .......                    -"
            DISPLAY "-------------------------------------------------"
            PERFORM VARYING W-I FROM 1 BY 1 UNTIL W-I > W-LEN-ARR
              COMPUTE W-NUM = (FUNCTION RANDOM * 100) + 1
              MOVE W-NUM TO W-ARR(W-I)
            END-PERFORM.
           PRINT-NUMBER SECTION.
            PERFORM UNTIL W-K > 200
              COMPUTE W-RANDOM-TIP = (FUNCTION RANDOM * 100) + 1
              ADD 1 TO W-K
            END-PERFORM
            PERFORM UNTIL W-J > W-RANDOM-TIP
              ADD 1 TO W-J
            END-PERFORM.
            MOVE W-ARR(W-J) TO W-TIP
            DISPLAY "-------------------------------------------------"
            DISPLAY "- Winning number is : " W-TIP
            DISPLAY "-------------------------------------------------".
[/INST]{
  "id": "BR-001",
  "description": "The winning number is randomly generated from a list of numbers ranging from 1 to 100.",
  "condition": "W-K > 200",
  "output": {
    "winningNumber": "W-TIP"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. RANDOM-NUMBERS.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
           01 W-RESULT PIC 999.
           01 SEED     PIC 9V999999999.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
            PERFORM GET-SEED.
            PERFORM GENERATE-NUMBER.
            GOBACK.
           GET-SEED SECTION.
           MOVE FUNCTION RANDOM(FUNCTION SECONDS-PAST-MIDNIGHT) TO SEED.
           GENERATE-NUMBER SECTION.
            PERFORM 10 TIMES
              COMPUTE W-RESULT = (FUNCTION RANDOM * 100) + 1
              DISPLAY "Random number: " W-RESULT
            END-PERFORM.
[/INST]{
  "id": "BR-001",
  "description": "Random number generators return a decimal number between 0 and 1. To get a random number with a min and max, multiply the result by the range and add the min.",
  "condition": "W-RESULT = (FUNCTION RANDOM * 100) + 1",
  "output": {
    "random number": "W-RESULT"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. RELATION-CONDITION.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
           01 NUM01 PIC 9(9) VALUE 50.
           01 NUM02 PIC 9(9) VALUE 6.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           IF NUM01 IS GREATER THAN OR EQUAL TO NUM02 THEN
             DISPLAY 'NUMBER01 IS GREATER OR EQUAL THAN NUMBER02'
           ELSE
             DISPLAY 'NUMBER01 IS LESS THAN NUMBER02'
           END-IF.
           GOBACK.
[/INST]{
  "id": "BR-002",  "description": "If NUM01 is greater than or equal to NUM02, then NUMBER01 IS GREATER OR EQUAL THAN NUMBER02 is displayed, otherwise, NUMBER01 IS LESS THAN NUMBER02 is displayed.",
  "condition": "NUM01 >= NUM02",
  "output": {
    "equal or greater": "NUMBER01 IS GREATER OR EQUAL THAN NUMBER02",
    "less than": "NUMBER01 IS LESS THAN NUMBER02"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. SELECT-SORT.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
           78 W-LEN-ARR VALUE 30.
           01 W-ARR PIC 999 OCCURS W-LEN-ARR TIMES.
           01 W-R PIC 999 VALUE 1.
           01 W-I PIC 999 VALUE 1.
           01 W-J PIC 999 VALUE 1.
           01 W-H PIC 999 VALUE 1.
           01 W-MIN  PIC 999 VALUE 0.
           01 W-SWAP PIC 999 VALUE 0.
           01 W-MIN-NUMBER PIC 999 VALUE 1.
           01 W-MAX-NUMBER PIC 999 VALUE 200.
           01 W-RAN-NUMBER PIC 999.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           PERFORM GENERATE-RANDOM-NUM.
           PERFORM SORTING-ARRAY.
           GOBACK.
           GENERATE-RANDOM-NUM SECTION.
            PERFORM VARYING W-R FROM 1 BY 1 UNTIL W-R > W-LEN-ARR
              PERFORM W-LEN-ARR TIMES
              COMPUTE W-RAN-NUMBER = FUNCTION RANDOM *
                            (W-MAX-NUMBER - W-MIN-NUMBER + 1) +
                             W-MIN-NUMBER
              END-PERFORM
              MOVE W-RAN-NUMBER TO W-ARR(W-R)
              DISPLAY "POS: " W-R " RANDOM NUMBER: " W-ARR(W-R)
            END-PERFORM.
           SORTING-ARRAY SECTION.
           PERFORM UNTIL W-I > W-LEN-ARR
             MOVE W-LEN-ARR TO W-MIN
             MOVE W-I TO W-J
             PERFORM UNTIL W-J > W-LEN-ARR
               IF W-ARR(W-MIN) > W-ARR(W-J)
                 MOVE W-J TO W-MIN
               END-IF
               ADD 1 TO W-J
             END-PERFORM
             MOVE W-ARR(W-MIN) TO W-SWAP
             MOVE W-ARR(W-I) TO W-ARR(W-MIN)
             MOVE W-SWAP TO W-ARR(W-I)
             ADD 1 TO W-I
           END-PERFORM.
           PERFORM VARYING W-H FROM 1 BY 1 UNTIL W-H > W-LEN-ARR
           DISPLAY "POS: " W-H " SORTED: " W-ARR(W-H)
           END-PERFORM.
[/INST]{
  "id": "BR-001",  "description": "The program randomly generates 30 numbers and sorts them in ascending order.",
  "input": {
    "min_number": "1",
    "max_number": "200",
    "length_of_array": "30"
  },
  "condition": "not (W-I > W-LEN-ARR)",  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. SEQUENTIAL-READ.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT DATA-FILE ASSIGN TO "../database.dat"
           ORGANIZATION IS SEQUENTIAL
           ACCESS IS SEQUENTIAL
           FILE STATUS FILE-STATUS.
       DATA DIVISION.
       FILE SECTION.
           FD DATA-FILE.
           01 DETAILS.
             02 DETAILS-ID PIC 9(7).
             02 DETAILS-NAME.
               03 DETAILS-SURNAME PIC X(8).
               03 INITIALS        PIC XX.
             02 DETAILS-BIRTHDAY  PIC X(8).
             02 SOME-CODE         PIC X(5).
       WORKING-STORAGE SECTION.
           77 FILE-STATUS PIC XX.
           77 EOF PIC X.
             88 EOF-T value "Y".
             88 EOF-F value "N".
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           OPEN INPUT DATA-FILE.
           IF FILE-STATUS not = "00"
             DISPLAY "Error opening the DB file, program will exit."
             GOBACK
           END-IF.
           READ DATA-FILE
             AT END
               SET EOF-T TO TRUE
             NOT AT END
               SET EOF-F TO TRUE
               PERFORM DISPLAY-DET-S THROUGH DISPLAY-DET-E
           END-READ
           PERFORM UNTIL EOF-T
             READ DATA-FILE NEXT
               AT END
                 SET EOF-T TO TRUE
               NOT AT END
                 PERFORM DISPLAY-DET-S THROUGH DISPLAY-DET-E
             END-READ
           END-PERFORM
           CLOSE DATA-FILE.
           GOBACK.
           DISPAY-DET SECTION.
           DISPLAY-DET-S.
               DISPLAY DETAILS.
               DISPLAY "DETAILS-ID: " DETAILS-ID
               DISPLAY "DETAILS-NAME: " DETAILS-SURNAME.
               DISPLAY "DETAILS-BIRTHDAY: " DETAILS-BIRTHDAY.
           DISPLAY-DET-E.
               EXIT.
[/INST]{
  "id": "BR-001",  "description": "Workflow for sequentially reading the DB file.",
  "condition": "MAIN-PROCEDURE",
  "actions": [
    "OPEN INPUT DATA-FILE",
    "READ DATA-FILE",
    "{PERFORM DISPLAY-DET-S THROUGH DISPLAY-DET-E}",
    "READ DATA-FILE NEXT",
    "CLOSE DATA-FILE"
  ]
},
{
  "id": "BR-002",  "description": "Each DATA-FILE has a fixed file structure and contains records of type DETAILS",
  "condition": "FD DATA-FILE",
  "output": {
    "record_type": "DETAILS",
    "fields": [
      "DETAILS-ID",
      "DETAILS-NAME",
      "DETAILS-SURNAME",
      "INITIALS",
      "DETAILS-BIRTHDAY",
      "SOME-CODE"
    ]
  }
},
{
  "id": "BR-003",  "description": "Check file status after opening the file.", "condition": "MAIN-PROCEDURE",
  "actions": [
    "IF FILE-STATUS not = \"00\""
	  "DISPLAY \"Error opening the DB file, program will exit.\"",
      "GOBACK",
      "END-IF"
  ]
},
{
  "id": "BR-004",  "description": "EOF Flag is set and results in exiting the loop and entire program.",
  "condition": "MAIN-PROCEDURE",
  "actions": [
    "IF EOF = \"Y\" GO TO GOBACK"
  ]
},
{
  "id": "BR-005",  "description": "Display record details",
  "condition": "MAIN-PROCEDURE",
  "actions": [
    "PERFORM DISPLAY-DET-S THROUGH DISPLAY-DET-E"
  ]
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. SIGN-CONDITION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
           01 NUM01 PIC S9(9) VALUE -5000.
           01 NUM02 PIC S9(9) VALUE 6.
           01 NUM03 PIC 9(9) VALUE ZERO.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           IF NUM01 IS POSITIVE THEN
             DISPLAY 'NUM01 IS POSITIVE'
           END-IF
           IF NUM01 IS NEGATIVE THEN
             DISPLAY 'NUM01 IS NEGATIVE'
           END-IF
           IF NUM02 IS ZERO THEN
             DISPLAY 'NUM02 IS ZERO'
           END-IF
           IF NUM02 IS POSITIVE THEN
             DISPLAY 'NUM02 IS POSITIVE'
           END-IF
           IF NUM03 IS ZERO THEN
             DISPLAY 'NUM03 IS ZERO'
           END-IF
           IF NUM03 IS POSITIVE THEN
             DISPLAY 'NUM03 IS POSITIVE'
           END-IF.
           GOBACK.
[/INST]{
  "id": "BR-001",
  "description": "A signed decimal number, NUM01, is positive if its value is greater than zero, otherwise it is negative.",
  "condition": "NUM01 > 0",
  "output": {
    "positive": "NUM01 IS POSITIVE",
    "negative": "NUM01 IS NEGATIVE"
  }
},
{
  "id": "BR-002",
  "description": "A signed decimal number, NUM02, is zero if its value is equal to zero, otherwise it is positive.",
  "condition": "NUM02 = 0",
  "output": {
    "zero": "NUM02 IS ZERO",
    "positive": "NUM02 IS POSITIVE"
  }
},
{
  "id": "BR-003",
  "description": "An unsigned decimal number, NUM03, is zero if its value is equal to zero, otherwise it is positive.",
  "condition": "NUM03 = 0",
  "output": {
    "zero": "NUM03 IS ZERO",
    "positive": "NUM03 IS POSITIVE"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. STATUS-CODE.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       INPUT-OUTPUT SECTION.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
           01  STATUS-CODE         pic x(2) value spaces.
               88  SUCCESS                    value '00'.
               88  SUCCESS_DUPLICATE          value '02'.
               88  SUCCESS_INCOMPLETE         value '04'.
               88  SUCCESS_OPTIONAL           value '05'.
               88  SUCCESS_NO_UNIT            value '07'.
               88  END_OF_FILE                value '10'.
               88  OUT_OF_KEY_RANGE           value '14'.
               88  KEY_INVALID                value '21'.
               88  KEY_EXISTS                 value '22'.
               88  KEY_NOT_EXISTS             value '23'.
               88  PERMANENT_ERROR            value '30'.
               88  INCONSISTENT_FILENAME      value '31'.
               88  BOUNDARY_VIOLATION         value '34'.
               88  NOT_EXISTS                 value '35'.
               88  PERMISSION_DENIED          value '37'.
               88  CLOSED_WITH_LOCK           value '38'.
               88  CONFLICT_ATTRIBUTE         value '39'.
               88  ALREADY_OPEN               value '41'.
               88  NOT_OPEN                   value '42'.
               88  READ_NOT_DONE              value '43'.
               88  RECORD_OVERFLOW            value '44'.
               88  READ_ERROR                 value '46'.
               88  INPUT_DENIED               value '47'.
               88  OUTPUT_DENIED              value '48'.
               88  I_O_DENIED                 value '49'.
               88  RECORD_LOCKED              value '51'.
               88  END_OF_PAGE                value '52'.
               88  I_O_LINAGE                 value '57'.
               88  FILE_SHARING               value '61'.
               88  NOT_AVAILABLE              value '91'.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           DISPLAY "Hello world"
           GOBACK.
[/INST]{
  "id": "BR-001",
  "description": "The status code '00' indicates a successful operation.",
  "condition": "STATUS-CODE = '00'",
  "output": {
    "success": null
  }
},
{
  "id": "BR-002",
  "description": "The status code '02' indicates a successful operation, but a duplicate record was encountered.",
  "condition": "STATUS-CODE = '02'",
  "output": {
    "success_duplicate": null
  }
},
{
  "id": "BR-003",
  "description": "The status code '04' indicates a successful operation, but the operation was incomplete.",
  "condition": "STATUS-CODE = '04'",
  "output": {
    "success_incomplete": null
  }
},
{
  "id": "BR-004",
  "description": "The status code '05' indicates a successful operation, but an optional field was not provided.",
  "condition": "STATUS-CODE = '05'",
  "output": {
    "success_optional": null
  }
},
{
  "id": "BR-005",
  "description": "The status code '07' indicates a successful operation, but no unit of measure was provided.",
  "condition": "STATUS-CODE = '07'",
  "output": {
    "success_no_unit": null
  }
},
{
  "id": "BR-006",
  "description": "The status code '10' indicates that the end of the file has been reached.",
  "condition": "STATUS-CODE = '10'",
  "output": {
    "end_of_file": null
  }
},
{
  "id": "BR-007",
  "description": "The status code '14' indicates that the key is out of range.",
  "condition": "STATUS-CODE = '14'",
  "output": {
    "out_of_key_range": null
  }
},
{
  "id": "BR-008",
  "description": "The status code '21' indicates that the key is invalid.",
  "condition": "STATUS-CODE = '21'",
  "output": {
    "key_invalid": null
  }
},
{
  "id": "BR-009",
  "description": "The status code '22' indicates that the key already exists.",
  "condition": "STATUS-CODE = '22'",
  "output": {
    "key_exists": null
  }
},
{
  "id": "BR-010",
  "description": "The status code '23' indicates that the key does not exist.",
  "condition": "STATUS-CODE = '23'",
  "output": {
    "key_not_exists": null
  }
},
{
  "id": "BR-011",
  "description": "The status code '30' indicates a permanent error.",
  "condition": "STATUS-CODE = '30'",
  "output": {
    "permanent_error": null
  }
},
{
  "id": "BR-012",
  "description": "The status code '31' indicates an inconsistent filename.",
  "condition": "STATUS-CODE = '31'",
  "output": {
    "inconsistent_filename": null
  }
},
{
  "id": "BR-013",
  "description": "The status code '34' indicates a boundary violation.",
  "condition": "STATUS-CODE = '34'",
  "output": {
    "boundary_violation": null
  }
},
{
  "id": "BR-014",
  "description": "The status code '35' indicates that the file does not exist.",
  "condition": "STATUS-CODE = '35'",
  "output": {
    "not_exists": null
  }
},
{
  "id": "BR-015",
  "description": "The status code '37' indicates that permission was denied.",
  "condition": "STATUS-CODE = '37'",
  "output": {
    "permission_denied": null
  }
},
{
  "id": "BR-016",
  "description": "The status code '38' indicates that the file was closed with a lock.",
  "condition": "STATUS-CODE = '38'",
  "output": {
    "closed_with_lock": null
  }
},
{
  "id": "BR-017",
  "description": "The status code '39' indicates a conflict in attributes.",
  "condition": "STATUS-CODE = '39'",
  "output": {
    "conflict_attribute": null
  }
},
{
  "id": "BR-018",
  "description": "The status code '41' indicates that the file is already open.",
  "condition": "STATUS-CODE = '41'",
  "output": {
    "already_open": null
  }
},
{
  "id": "BR-019",
  "description": "The status code '42' indicates that the file is not open.",
  "condition": "STATUS-CODE = '42'",
  "output": {
    "not_open": null
  }
},
{
  "id": "BR-020",
  "description": "The status code '43' indicates that a read operation was not completed.",
  "condition": "STATUS-CODE = '43'",
  "output": {
    "read_not_done": null
  }
},
{
  "id": "BR-021",
  "description": "The status code '44' indicates that a record overflow occurred.",
  "condition": "STATUS-CODE = '44'",
  "output": {
    "record_overflow": null
  }
},
{
  "id": "BR-022",
  "description": "The status code '46' indicates that a read error occurred.",
  "condition": "STATUS-CODE = '46'",
  "output": {
    "read_error": null
  }
},
{
  "id": "BR-023",
  "description": "The status code '47' indicates that input was denied.",
  "condition": "STATUS-CODE = '47'",
  "output": {
    "input_denied": null
  }
},
{
  "id": "BR-024",
  "description": "The status code '48' indicates that output was denied.",
  "condition": "STATUS-CODE = '48'",
  "output": {
    "output_denied": null
  }
},
{
  "id": "BR-025",
  "description": "The status code '49' indicates that input or output was denied.",
  "condition": "STATUS-CODE = '49'",
  "output": {
    "i_o_denied": null
  }
},
{
  "id": "BR-026",
  "description": "The status code '51' indicates that a record is locked.",
  "condition": "STATUS-CODE = '51'",
  "output": {
    "record_locked": null
  }
},
{
  "id": "BR-027",
  "description": "The status code '52' indicates that the end of a page has been reached.",
  "condition": "STATUS-CODE = '52'",
  "output": {
    "end_of_page": null
  }
},
{
  "id": "BR-028",
  "description": "The status code '57' indicates that the input or output linage was[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. WORK-WITH-STRING.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
           01 W-COUNT     PIC 999.
           01 W-STRING    PIC X(10) VALUE "HOHOHOHOHO".
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           PERFORM VARYING W-COUNT FROM 1 BY 1 UNTIL W-COUNT > 10
             DISPLAY W-STRING(W-COUNT:1)
           END-PERFORM
           GOBACK.
[/INST]{
  "id": "BR-001",
  "description": "A string is sliced by varying its index count from 1 by 1 until the count exceeds the string length.",
  "condition": "W-COUNT FROM 1 BY 1 UNTIL W-COUNT > 10",
  "output": {
    "sliced": "W-STRING(W-COUNT:1)"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. STRUCT-EXAMPLE.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 W-I PIC 99 VALUE 1.
       01 W-J PIC 99 VALUE 1.
       78 W-LEN-ARR1 VALUE 5.
       78 W-LEN-ARR2 VALUE 10.
       01 W-STRUCT.
          05 W-ARRAY  PIC S99 OCCURS W-LEN-ARR1 TIMES.
          05 W-ARRAY2 PIC S99 OCCURS W-LEN-ARR2 TIMES.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           PERFORM ARRAY-ONE.
           PERFORM ARRAY-TWO.
           GOBACK.
       ARRAY-ONE SECTION.
           PERFORM UNTIL W-I > W-LEN-ARR1
             MOVE W-I TO W-ARRAY(W-I)
             ADD 1 TO W-I
           END-PERFORM.
           MOVE 1 TO W-I.
           PERFORM UNTIL W-I > W-LEN-ARR1
             DISPLAY "Array1 contains number: " W-ARRAY(W-I)
             ADD 1 TO W-I
           END-PERFORM.
       ARRAY-TWO SECTION.
           PERFORM UNTIL W-J > W-LEN-ARR2
             MOVE W-J TO W-ARRAY2(W-J)
             ADD 1 TO W-J
           END-PERFORM.
           DISPLAY "-------------------------"
           MOVE 1 TO W-J.
           PERFORM UNTIL W-J > W-LEN-ARR2
             DISPLAY "Array2 contains number: " W-ARRAY2(W-J)
             ADD 1 TO W-J
           END-PERFORM.
[/INST]{
  "id": "BR-001",
  "description": "An array must be initialized before use. The size of the array is fixed and cannot be changed.",
  "condition": "",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. WHILE.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
       01 W-I PIC 99 VALUE 20.
       PROCEDURE DIVISION.
       MAIN-PROCEDURE.
           PERFORM WHILE-LOOP.
           GOBACK.
           WHILE-LOOP SECTION.
           PERFORM UNTIL W-I <= 0
             DISPLAY W-I
             COMPUTE W-I = W-I - 1
           END-PERFORM.
[/INST]{
  "id": "BR-002",
  "description": "While a value is greater than 0, subtract by 1 and display the current value",
  "condition": "W-I > 0",
  "output": {
    "decrement and display": "DISPLAY W-I\\nCOMPUTE W-I = W-I - 1"
  }
}[INST]   File  Edit  Edit_Settings  Menu  Utilities  Compilers  Test  Help
 -------------------------------------------------------------------------------
 EDIT       ADS02.ADS0205.SRC(ADSOTP8) - 01.99              Columns 00001 00072
 000001       *===============================================================*
 000002       *--                INFORMATIONS GENERALES                     --*
 000003       *---------------------------------------------------------------*
 000004       *  NOM DU PROGRAMME : XXXXXXXX                                  *
 000005       *  NOM DU REDACTEUR : MARTINLUC                                 *
 000006       *---------------------------------------------------------------*
 000007       *  SOCIETE          : XXXXXXXX                                  *
 000008       *  DATE DE CREATION : JJ/MM/SSAA                                *
 000009       *---------------------------------------------------------------*
 000010       *--               OBJECTIFS GENERAUX DU PROGRAMME             --*
 000011       * GESTION DE TABLEAUX, PROGRAMME APPELE.                        *
 000012       *---------------------------------------------------------------*
 000013       *--               HISTORIQUE DES MODIFICATIONS --               *
 000014       *---------------------------------------------------------------*
 000015       * DATE  MODIF   !          NATURE DE LA MODIFICATION            *
 000016       *---------------------------------------------------------------*
 000017       * JJ/MM/SSAA    !                                               *
 000018       *===============================================================*
 000019       *
 000020       *************************
 000021        IDENTIFICATION DIVISION.
 000022       *************************
 000023        PROGRAM-ID.      ADSOTP8.
 000024       *
 000025       *                  ==============================               *
 000026       *=================<  ENVIRONMENT      DIVISION   >==============*
 000027       *                  ==============================               *
 000028       *                                                               *
 000029       *===============================================================*
 000030       *
 000031       **********************
 000032        ENVIRONMENT DIVISION.
 000033       **********************
 000034       *
 000035       *======================
 000036        CONFIGURATION SECTION.
 000037       *======================
 000038       *
 000039       *--------------
 000040        SPECIAL-NAMES.
 000041       *--------------
 000042            DECIMAL-POINT IS COMMA.
 000043       *
 000044       *=====================
 000045        INPUT-OUTPUT SECTION.
 000046       *=====================
 000047       *
 000048       *-------------
 000049        FILE-CONTROL.
 000050       *-------------
 000051       *
 000052       ***************
 000053        DATA DIVISION.
 000054       ***************
 000055       *
 000056       *=============
 000057        FILE SECTION.
 000058       *=============
 000059       *
 000060       *========================
 000061        WORKING-STORAGE SECTION.
 000062       *========================
 000063        01 WS-ILIGNE                          PIC 99.
 000064        01 WS-ICOLONNE                        PIC 99.
 000065        01 WS-IHAUTEUR                        PIC 99.
 000066        01 WS-CPT-CASE                        PIC 9(3).
 000067       *
 000068       *========================
 000069        LINKAGE SECTION.
 000070       *========================
 000071       *
 000072        01  LS-TABLEAU-1.
 000073            05  FILLER                        OCCURS 10.
 000074                10  FILLER                    OCCURS 10.
 000075                    15  FILLER                OCCURS 10.
 000076                        20  LS-CELL-TAB-1     PIC 9(2).
 000077       *
 000078        01  LS-TABLEAU-3.
 000079            05  FILLER                        OCCURS 100.
 000080                10  LS-CELL.
 000081                    15  LS-CELL-X             PIC 99.
 000082                    15  LS-CELL-Y             PIC 99.
 000083                    15  LS-CELL-Z             PIC 99.
 000084       *
 000085        01  LS-S                              PIC 9(2).
 000086        01  LS-E                              PIC 9(2).
 000087       *
 000088       *                  ==============================               *
 000089       *=================<   PROCEDURE       DIVISION   >==============*
 000090       *                  ==============================               *
 000091       *                                                               *
 000092       *===============================================================*
 000093       *
 000094        PROCEDURE           DIVISION
 000095       *
 000096            USING LS-TABLEAU-1 LS-TABLEAU-3 LS-S LS-E.
 000097       *
 000098       *---------------------------------------------------------------*
 000099       *               DESCRIPTION DU COMPOSANT PROGRAMME              *
 000100       *               ==================================              *
 000101       *---------------------------------------------------------------*
 000102       *
 000103
 000104        0000-PROGRAMME-DEB.
 000105       *
 000106            IF LS-E NOT NUMERIC
 000107                     MOVE 1 TO RETURN-CODE
 000108                     GOBACK
 000109            END-IF.
 000110
 000111                INITIALIZE LS-TABLEAU-3 WS-CPT-CASE LS-S.
 000112
 000113                PERFORM 1000-LECTURE-TAB-1-DEB
 000114                   THRU 1000-LECTURE-TAB-1-FIN
 000115                VARYING WS-ILIGNE FROM 1 BY 1
 000116                  UNTIL WS-ILIGNE > 10
 000117
 000118                  AFTER WS-ICOLONNE FROM 1 BY 1
 000119                  UNTIL WS-ICOLONNE > 10
 000120
 000121                  AFTER WS-IHAUTEUR FROM 1 BY 1
 000122                  UNTIL WS-IHAUTEUR > 10.
 000123
 000124
 000125       *
 000126        0000-PROGRAMME-FIN.
 000127             GOBACK.
 000128       *
 000129        1000-LECTURE-TAB-1-DEB.
 000130
 000131            IF LS-E = LS-CELL-TAB-1
 000132                      ( WS-ILIGNE , WS-ICOLONNE , WS-IHAUTEUR )
 000133               ADD 1 TO LS-S
 000134               MOVE WS-ILIGNE TO LS-CELL-X (LS-S)
 000135               MOVE WS-ICOLONNE TO LS-CELL-Y (LS-S)
 000136               MOVE WS-IHAUTEUR TO LS-CELL-Z (LS-S)
 000137            END-IF.
 000138
 000139        1000-LECTURE-TAB-1-FIN.
 000140            EXIT.
 Command ===>                                                  Scroll ===> CSR
  F1=Help      F2=Split     F3=Exit      F5=Rfind     F6=Rchange   F7=Up
  F8=Down      F9=Swap     F10=Left     F11=Right    F12=Cancel
================================================================================
   File  Edit  Edit_Settings  Menu  Utilities  Compilers  Test  Help
 -------------------------------------------------------------------------------
 EDIT       ADS02.ADS0205.SRC(ADSOTP8) - 01.99              Columns 00001 00072
 Command ===>                                                  Scroll ===> CSR
  F1=Help      F2=Split     F3=Exit      F5=Rfind     F6=Rchange   F7=Up
  F8=Down      F9=Swap     F10=Left     F11=Right    F12=Cancel
================================================================================
[/INST]{
  "id": "BR-001",
  "description": "The value in LS-E must be numeric.",
  "condition": "LS-E NOT NUMERIC",
  "output": {
    "error": "RETURN-CODE set to 1"
  }
},
{
  "id": "BR-002",
  "description": "If the value in LS-E matches the value in LS-CELL-TAB-1 for the given row, column, and height, then increment LS-S by 1 and move the row, column, and height into LS-CELL-X, LS-CELL-Y, and LS-CELL-Z for the given LS-S.",
  "condition": "LS-E = LS-CELL-TAB-1\n( WS-ILIGNE , WS-ICOLONNE , WS-IHAUTEUR )",
  "output": {
    "success": "LS-S incremented by 1,\nWS-ILIGNE moved to LS-CELL-X (LS-S),\nWS-ICOLONNE moved to LS-CELL-Y (LS-S),\nWS-IHAUTEUR moved to LS-CELL-Z (LS-S)"
  }
}[INST]identification division.
program-id. BarnCampReport is initial.
environment division.
input-output section.
    file-control.
        select optional AttendeesFile assign to AttendeesFileName
            organization is indexed
            access mode is dynamic
            record key is AuthCode
            file status is AttendeeStatus.
data division.
file section.
fd AttendeesFile is global.
copy DD-Attendee replacing Attendee by
    ==AttendeeRecord is global.
    88 EndOfAttendeesFile value high-values==.
working-storage section.
01 AttendeeStatus   pic x(2).
    88 Successful   value "00".
    88 RecordExists value "22".
    88 NoSuchRecord value "23".
01 HeadCounts.
    02 ActualHeadCounts.
        03 HeadCountWednesday pic 99 value zero.
        03 HeadCountThursday pic 99 value zero.
        03 HeadCountFriday pic 99 value zero.
        03 HeadCountSaturday pic 99 value zero.
        03 HeadCountSunday pic 99 value zero.
        03 HeadCountMonday pic 99 value zero.
    02 EstimatedHeadCounts.
        03 EstimatedHeadCountWednesday pic 99 value zero.
        03 EstimatedHeadCountThursday pic 99 value zero.
        03 EstimatedHeadCountFriday pic 99 value zero.
        03 EstimatedHeadCountSaturday pic 99 value zero.
        03 EstimatedHeadCountSunday pic 99 value zero.
        03 EstimatedHeadCountMonday pic 99 value zero.
01 TotalNightsCamping pic 999 value zero.
01 CostPerNight constant as 2.
01 TotalCampingCharge pic 999v99 value 0.00.
01 TotalPaid pic 9(4) value zero.
01 TotalToPay pic 9(4) value zero.
01 TotalIncome pic 9(4) value zero.
01 NumberOfAttendees pic 9(3) value zero.
01 AveragePaid pic 99v99 value zero.
01 IgnoredValue pic 9(4).
01 FigureOutput pic z,z99.99.
01 AttendeesFileName pic x(20) value spaces.
01 CommandLineArgumentCount pic 9 value zero.
procedure division.
    accept CommandLineArgumentCount from argument-number
    if CommandLineArgumentCount equal to 2 then
        accept AttendeesFileName from argument-value
    else
        move "attendees.dat" to AttendeesFileName
    end-if
    display spaces
    display "Special diet report"
    display "==================="
    move zeroes to AuthCode
    start AttendeesFile key is greater than AuthCode
    open input AttendeesFile
        read AttendeesFile next record
            at end set EndOfAttendeesFile to true
        end-read
        perform until EndOfAttendeesFile
            if function length(function trim(Diet)) is greater than 5  then
                display function trim(Name) " says '" function trim (Diet) "'"
            end-if
            if AttendeeArrived then
                evaluate true
                    when ArrivalDayIsWednesday add 1 to HeadCountWednesday
                    when ArrivalDayIsThursday add 1 to HeadCountThursday
                    when ArrivalDayIsFriday add 1 to HeadCountFriday
                    when ArrivalDayIsSaturday add 1 to HeadCountSaturday
                end-evaluate
                if CanStayTillMonday then
                    add 1 to HeadCountMonday
                end-if
            end-if
            if AttendeeComing or AttendeeArrived then
                evaluate true
                    when ArrivalDayIsWednesday add 1 to EstimatedHeadCountWednesday
                    when ArrivalDayIsThursday add 1 to EstimatedHeadCountThursday
                    when ArrivalDayIsFriday add 1 to EstimatedHeadCountFriday
                    when ArrivalDayIsSaturday add 1 to EstimatedHeadCountSaturday
                    when CanStayTillMonday add 1 to HeadCountMonday
                end-evaluate
            end-if
            if AttendeeComing or AttendeeArrived then
                add 1 to NumberOfAttendees
            end-if
            evaluate true
                when AttendeePaid add AmountPaid to TotalPaid
                when AttendeeNotPaid add AmountToPay to TotalToPay
            end-evaluate
            read AttendeesFile next record
                at end set EndOfAttendeesFile to true
            end-read
        end-perform
    close AttendeesFile
    add HeadCountWednesday to HeadCountThursday
    add HeadCountThursday to HeadCountFriday
    add HeadCountFriday to HeadCountSaturday
    add HeadCountSaturday to HeadCountSunday
    add EstimatedHeadCountWednesday to EstimatedHeadCountThursday
    add EstimatedHeadCountThursday to EstimatedHeadCountFriday
    add EstimatedHeadCountFriday to EstimatedHeadCountSaturday
    add EstimatedHeadCountSaturday to EstimatedHeadCountSunday
    display spaces
    display "Attendance report"
    display "================"
    display "           Act (Est)"
    display "Wednesday:  " HeadCountWednesday "  (" EstimatedHeadCountWednesday ")"
    display "Thursday:   " HeadCountThursday "  (" EstimatedHeadCountThursday ")"
    display "Friday:     " HeadCountFriday "  (" EstimatedHeadCountFriday ")"
    display "Saturday:   " HeadCountSaturday "  (" EstimatedHeadCountSaturday ")"
    display "Sunday:     " HeadCountSunday "  (" EstimatedHeadCountSunday ")"
    display "Monday:     " HeadCountMonday "  (" EstimatedHeadCountMonday ")"
    display spaces
    display "Camping report"
    display "=============="
    compute TotalNightsCamping = HeadCountWednesday + HeadCountThursday + HeadCountFriday + HeadCountSaturday + HeadCountMonday
    multiply CostPerNight by TotalNightsCamping giving TotalCampingCharge
    display "Nights camped:  " TotalNightsCamping
    display "Camping charge: " TotalCampingCharge
    display spaces
    display "Financial report"
    display "================"
    display spaces
    move TotalPaid to FigureOutput
    display "Total paid is:   " FigureOutput
    move TotalToPay to FigureOutput
    display "Total to pay is: " FigureOutput
    add TotalPaid to TotalToPay giving TotalIncome
    move TotalIncome to FigureOutput
    display "-------------------------"
    display "Total income is: " FigureOutput
    divide TotalIncome by NumberOfAttendees giving AveragePaid rounded mode is away-from-zero
    display spaces
    display "Average paid is:    " AveragePaid
    display spaces
    exit program.
end program BarnCampReport.
[/INST]{
  "id": "BR-001",
  "description": "The number of people attending the camp on each day is the sum of the number attending/arriving on that day and the number attending the previous days.",
  "condition": "AttendeeArrived",
  "output": {
    "Wednesday": "HeadCountWednesday",
    "Thursday": "HeadCountThursday + HeadCountWednesday",
    "Friday": "HeadCountFriday + HeadCountThursday + HeadCountWednesday",
    "Saturday": "HeadCountSaturday + HeadCountFriday + HeadCountThursday + HeadCountWednesday",
    "Sunday": "HeadCountSunday + HeadCountSaturday + HeadCountFriday + HeadCountThursday + HeadCountWednesday",
    "Monday": "HeadCountMonday + HeadCountSunday + HeadCountSaturday + HeadCountFriday + HeadCountThursday + HeadCountWednesday"
  }
}
{
  "id": "BR-002",
  "description": "The number of people estimated to attend the camp on each day is the sum of the number attending/arriving on that day and the number attending the previous days.",
  "condition": "AttendeeComing or AttendeeArrived",
  "output": {
    "Wednesday": "EstimatedHeadCountWednesday",
    "Thursday": "EstimatedHeadCountThursday + EstimatedHeadCountWednesday",
    "Friday": "EstimatedHeadCountFriday + EstimatedHeadCountThursday + EstimatedHeadCountWednesday",
    "Saturday": "EstimatedHeadCountSaturday + EstimatedHeadCountFriday + EstimatedHeadCountThursday + EstimatedHeadCountWednesday",
    "Sunday": "EstimatedHeadCountSunday + EstimatedHeadCountSaturday + EstimatedHeadCountFriday + EstimatedHeadCountThursday + EstimatedHeadCountWednesday",
    "Monday": "HeadCountMonday + EstimatedHeadCountSunday + EstimatedHeadCountSaturday + EstimatedHeadCountFriday + EstimatedHeadCountThursday + EstimatedHeadCountWednesday"
  }
}
{
  "id": "BR-003",
  "description": "The total number of nights camped is the sum of the number of people attending on each day.",
  "condition": "AttendeeArrived",
  "output": {
    "TotalNightsCamping": "HeadCountWednesday + HeadCountThursday + HeadCountFriday + HeadCountSaturday + HeadCountMonday"
  }
}
{
  "id": "BR-004",
  "description": "The total camping charge is the total number of nights camped multiplied by the cost per night.",
  "condition": null,
  "output": {
    "TotalCampingCharge": "TotalNightsCamping * CostPerNight"
  }
}
{
  "id": "BR-005",
  "description": "The total income is the sum of the total paid and the total to pay.",
  "condition": null,
  "output": {
    "TotalIncome": "TotalPaid + TotalToPay"
  }
}
{
  "id": "BR-006",
  "description": "The average paid is the total income divided by the number of attendees.",
  "condition": null,
  "output": {
    "AveragePaid": "TotalIncome / NumberOfAttendees"
  }
}[INST]identification division.
program-id. createAuthCode.
data division.
local-storage section.
01 CurrentTime.
    02 filler   pic 9(4).
    02 Seed     pic 9(4).
01 DecimalDigit pic 99 value zero.
01 CurrentDigit pic 9 value zero.
01 HexDigits    pic x(16) value "0123456789ABCDEF".
linkage section.
01 NewAuthCode pic x(6) value zero.
procedure division using NewAuthCode.
    accept CurrentTime from time
    compute DecimalDigit = function random(Seed)
    perform with test after varying CurrentDigit from 1 by 1
        until CurrentDigit equal to 6
        compute DecimalDigit = (function random * 15) + 1
        move HexDigits(DecimalDigit + 1:1) to NewAuthCode(CurrentDigit:1)
    end-perform
    goback
    .
end program createAuthCode.
[/INST]{
  "id": "BR-001",
  "description": "The authentication code is generated using a random number generator function.",
  "condition": null,
  "output": {
    "random number": "* 15) + 1"
  }
},
{
  "id": "BR-002",
  "description": "The authentication code is 6 characters long.",
  "condition": null,
  "output": {
    "length": 6
  }
},
{
  "id": "BR-003",
  "description": "The authentication code is generated using the current time as a seed value.",
  "condition": null,
  "output": {
    "seed": "CurrentTime"
  }
}[INST]identification division.
program-id. createAuthCodeTest.
environment division.
configuration section.
    special-names.
        class HexNumber is "0" thru "9",
                           "A" thru "F",
                           "a" thru "f".
data division.
working-storage section.
    01 AuthCode pic x(6) value zero.
procedure division.
    call "createAuthCode" using by reference AuthCode
    if AuthCode is HexNumber then
        display "Valid AuthCode returned " AuthCode
    else
        display "Invalid AuthCode retunred " AuthCode
    end-if
    stop run
    .
end program createAuthCodeTest.
[/INST]{
  "id": "BR-001",
  "description": "An authorization code is valid if it composes only of hex numbers.",
  "condition": "AuthCode CONTAINS ONLY HexNumber",
  "output": {
    "valid": "Valid AuthCode returned",
    "invalid": "Invalid AuthCode retunred"
  }
}[INST]    01 ScreenHeader pic x(80)
        value "  HacktionLab Attendee Management System v2.1   (c) copyleft 2017 HacktionLab   ".
[/INST]{
  "id": "BR-001",
  "description": "The application's name is HacktionLab Attendee Management System version 2.1 with copyright for the year 2017 belonging to HacktionLab.\\n ",
  "condition": null,
  "output": {
    "message": "  HacktionLab Attendee Management System v2.1   (c) copyleft 2017 HacktionLab   "
  }
}[INST]identification division.
program-id. ExportAttendees.
environment division.
configuration section.
    repository.
        function all intrinsic.
input-output section.
file-control.
    select CSVFile assign to CSVFileName
        organization is line sequential.
    select optional AttendeesFile assign to AttendeesFileName
        organization is indexed
        access mode is dynamic
        record key is AuthCode.
data division.
file section.
fd CSVFile.
01 CSVFileOutputLine pic x(255) value spaces.
    88 EndOfCSVFile value high-values.
fd AttendeesFile is global.
copy DD-Attendee replacing Attendee by
    ==AttendeeRecord is global.
    88 EndOfAttendeesFile value high-values==.
working-storage section.
01 CountOfLinesProcessed pic 999 value zero.
01 AttendeesFileName pic x(20) value spaces.
01 CSVSourceFileName pic x(30) value spaces.
01 CommandLineArgumentCount pic 9 value zero.
procedure division.
    accept CommandLineArgumentCount from argument-number
    if CommandLineArgumentCount equal to 2 then
        accept AttendeesFileName from argument-value
        accept CSVFileName from argument-value
    else
        display "Usage: ExportAttendees <BAMS Data File> <CSV Output File>"
        stop run
    end-if
    display "Reading from " trim(AttendeesFileName) " and writing to " trim(CSVFileName)
    open output CSVFile
    write CSVFileOutputLine from "AuthCode,Name,Email,AmountToPay,AmountPaid,DatePaid,Telephone,ArrivalDay,StayingLate,NumberOfKids,Diet"
    open input AttendeesFile
        read AttendeesFile next record
            at end set EndOfAttendeesFile to true
        end-read
        perform until EndOfAttendeesFile
            initialize CSVFileOutputLine
            string
                trim(AuthCode) delimited by size
                ","
                trim(Name) delimited by size
                ","
                trim(Email) delimited by size
                ","
                trim(AmountToPay) delimited by size
                ","
                trim(AmountPaid) delimited by size
                ","
                trim(DatePaid) delimited by size
                ","
                trim(Telephone) delimited by size
                ","
                trim(ArrivalDay) delimited by size
                ","
                trim(StayingTillMonday) delimited by size
                ","
                trim(NumberOfKids) delimited by size
                ","
                trim(Diet) delimited by size
                into CSVFileOutputLine
            end-string
            write CSVFileOutputLine
            add 1 to CountOfLinesProcessed
            read AttendeesFile next record
                at end set EndOfAttendeesFile to true
            end-read
        end-perform
    close AttendeesFile
    close CSVFile
    display "Total attendees exported to CSV is " CountOfLinesProcessed
stop run
.
end program ExportAttendees.
[/INST]{
  "id": "BR-001",
  "description": "The program reads data from an indexed file named \\\"AttendeesFile\\\" and writes data to a CSV file named \\\"CSVFile\\\".",
  "condition": "file open",
  "input": {
    "AttendeesFile": "indexed file",
    "CSVFile": "CSV file"
  },
  "output": {
    "AttendeesFile": "read from",
    "CSVFile": "written to"
  }
},
{
  "id": "BR-002",
  "description": "The CSV output file will have the following header: \\\"AuthCode,Name,Email,AmountToPay,AmountPaid,DatePaid,Telephone,ArrivalDay,StayingLate,NumberOfKids,Diet\\\".",
  "condition": "CSV header",
  "input": {},
  "output": {
    "CSVFile": "header written"
  }
},
{
  "id": "BR-003",
  "description": "If the program is run with less than two command line arguments, it will display a usage message and stop.",
  "condition": "command line arguments",
  "input": {},
  "output": {
    "program": "usage message displayed and stopped"
  }
},
{
  "id": "BR-004",
  "description": "The program will read records from the \\\"AttendeesFile\\\" until the end of the file is reached.",
  "condition": "AttendeesFile read loop",
  "input": {
    "AttendeesFile": "indexed file"
  },
  "output": {
    "AttendeesFile": "records read until end of file"
  }
},
{
  "id": "BR-005",
  "description": "For each record read from the \\\"AttendeesFile\\\", the program will write a line to the \\\"CSVFile\\\" file.",
  "condition": "CSVFile write loop",
  "input": {
    "AttendeesFile": "indexed file",
    "CSVFile": "CSV file"
  },
  "output": {
    "CSVFile": "lines written"
  }
},
{
  "id": "BR-006",
  "description": "The program will keep track of the number of lines processed and display the total number of attendees exported to the CSV file when finished.",
  "condition": "line count",
  "input": {},
  "output": {
    "program": "line count displayed"
  }
}[INST]identification division.
program-id. ImportAttendees.
environment division.
configuration section.
    repository.
        function all intrinsic.
input-output section.
file-control.
    select CSVSourceFile assign to CSVSourceFileName
        organization is line sequential.
    select optional AttendeesFile assign to AttendeesFileName
        organization is indexed
        access mode is dynamic
        record key is AuthCode
        file status is RecordWriteStatus.
data division.
file section.
fd CSVSourceFile.
01 CSVFileInputLine pic x(255).
    88 EndOfCSVFile value high-values.
fd AttendeesFile is global.
copy DD-Attendee replacing Attendee by
    ==AttendeeRecord is global.
    88 EndOfAttendeesFile value high-values==.
working-storage section.
01 CountOfLinesProcessed pic 999 value zero.
01 CountOfLinesImported pic 999 value zero.
copy DD-Attendee.
01 TempAttendeeData.
    02 PaidDateFromWeb pic x(10).
    02 ArrivalDayFromWeb pic x(10).
    02 StayingLateFromWeb pic x(5).
01 AttendeesFileName pic x(20) value spaces.
01 CSVSourceFileName pic x(30) value spaces.
01 CommandLineArgumentCount pic 9 value zero.
01 RecordWriteStatus   pic xx.
    88 Successful   value "00".
    88 RecordExists value "22".
    88 NoSuchRecord value "23".
procedure division.
    accept CommandLineArgumentCount from argument-number
    if CommandLineArgumentCount equal to 2 then
        accept CSVSourceFileName from argument-value
        accept AttendeesFileName from argument-value
    else
        move "barncamp-attendees.csv" to CSVSourceFileName
        move "attendees.dat" to AttendeesFileName
    end-if
    display "Reading from " trim(CSVSourceFileName) " and writing to " trim(AttendeesFileName)
    open input CSVSourceFile
    open i-o AttendeesFile
    read CSVSourceFile
        at end set EndOfCSVFile to true
    end-read
    perform until EndOfCSVFile
        initialize Attendee
        unstring CSVFileInputLine
            delimited by ","
            into
            Name of Attendee,
            Email of Attendee,
            AuthCode of Attendee,
            AmountToPay of Attendee,
            AmountPaid of Attendee,
            PaidDateFromWeb,
            Telephone of Attendee,
            ArrivalDayFromWeb,
            Diet of Attendee,
            StayingLateFromWeb,
            NumberOfKids of Attendee
        end-unstring
        if AuthCode of Attendee not equal to 'Code' and AuthCode of Attendee is not equal to spaces then
            add 1 to CountOfLinesProcessed
            move ArrivalDayFromWeb(1:3) to ArrivalDay of Attendee
            if PaidDateFromWeb is not equal to spaces then
                move PaidDateFromWeb(1:2) to CentuaryPaid of Attendee
                move PaidDateFromWeb(3:2) to YearPaid of Attendee
                move PaidDateFromWeb(6:2) to MonthPaid of Attendee
                move PaidDateFromWeb(9:2) to DayPaid of Attendee
            end-if
            evaluate AmountPaid of Attendee
                when greater than zero set AttendeePaid of Attendee to true
                when less than or equal to zero set AttendeeNotPaid of Attendee to true
            end-evaluate
            if NumberOfKids of Attendee is less than zero or greater than 5 then
                move zero to NumberOfKids of Attendee
            end-if
            set AttendeeComing of Attendee to true
            if trim(StayingLateFromWeb) is equal to "true" then
                set CanStayTillMonday of Attendee to true
            else
                set CanStayTillMonday of Attendee to false
            end-if
            write AttendeeRecord from Attendee
                invalid key
                    if RecordExists
                        display "Record for " AuthCode of Attendee "  already exists"
                    else
                        display "Error - status is " RecordWriteStatus
                    end-if
                not invalid key
                    display "Imported record with authcode of " AuthCode of Attendee
                    add 1 to CountOfLinesImported
            end-write
        end-if
        read CSVSourceFile
            at end set EndOfCSVFile to true
        end-read
    end-perform
    close AttendeesFile
    close CSVSourceFile
    display "Total attendees imported is " CountOfLinesImported
    display "Total attendees processed is " CountOfLinesProcessed
stop run
.
end program ImportAttendees.
[/INST]{
  "id": "BR-001",
  "description": "The AuthCode field in the CSV file must not be equal to 'Code' or empty if the record is to be processed.",
  "condition": "AuthCode of Attendee not equal to 'Code' and AuthCode of Attendee is not equal to spaces",
  "output": {}
},
{
  "id": "BR-002",
  "description": "If the NumberOfKids value in the CSV file is less than 0 or greater than 5, it should be set to 0.",
  "condition": "NumberOfKids of Attendee is less than zero or greater than 5",
  "output": {}
},
{
  "id": "BR-003",
  "description": "If the StayingLateFromWeb field in the CSV file is equal to \"true\", then the CanStayTillMonday field in the Attendee record should be set to True, otherwise it should be set to False.",
  "condition": "trim(StayingLateFromWeb) is equal to \"true\"",
  "output": {
    "true": "set CanStayTillMonday of Attendee to true",
    "false": "set CanStayTillMonday of Attendee to false"
  }
},
{
  "id": "BR-004",
  "description": "If the AmountPaid value in the CSV file is greater than 0, then the AttendeePaid field in the Attendee record should be set to True, otherwise it should be set to False.",
  "condition": "AmountPaid of Attendee",
  "output": {
    "greater than zero": "set AttendeePaid of Attendee to true",
    "less than or equal to zero": "set AttendeeNotPaid of Attendee to true"
  }
},
{
  "id": "BR-005",
  "description": "If the PaidDateFromWeb field in the CSV file is not empty, then the CentuaryPaid, YearPaid, MonthPaid, and DayPaid fields in the Attendee record should be updated with the corresponding values from the PaidDateFromWeb field.",
  "condition": "PaidDateFromWeb is not equal to spaces",
  "output": {}
},
{
  "id": "BR-006",
  "description": "If the ArrivalDayFromWeb field in the CSV file is not empty, then the ArrivalDay field in the Attendee record should be updated with the first three characters of the ArrivalDayFromWeb field.",
  "condition": "ArrivalDayFromWeb is not equal to spaces",
  "output": {}
}[INST]identification division.
program-id. BrainfuckInterpreter.
environment division.
configuration section.
    repository.
        function all intrinsic.
input-output section.
file-control.
    select ProgramFile assign to ProgramFileName
        organization is sequential.
data division.
file section.
    fd ProgramFile.
    01 ProgramByte pic x.
        88 EndOfProgramFile value high-values.
working-storage section.
    01 ProgramToRun.
        02 Instruction pic x occurs 1 to 32768 times depending on ProgramLength values all spaces.
            88 IncrementDataPointer value ">".
            88 DecrementDataPointer value "<".
            88 IncrementByteAtDataPointer value "+".
            88 DecrementByteAtDataPointer value "-".
            88 OutputByteAtDataPointer value ".".
            88 InputByteAtDataPointer value ",".
            88 JumpIfByteIsZero value "[".
            88 JumpIfByteIsNonZero value "]".
    01 DataPointer pic 9(5).
    01 InstructionPointer pic 9(5).
    01 InputByte pic x value space.
    01 DataByteUpperBound constant 255.
    01 DataByteLowerBound constant -255.
    01 DataArray.
        02 DataByte pic S999 occurs 30000 times values all zeroes.
            88 UpperBoundReached value DataByteUpperBound.
            88 LowerBoundReached value DataByteLowerBound.
    01 CommandLineArgumentCount pic 9 value zero.
    01 ProgramLength pic 9(5) value zero.
    01 JumpCounter pic 999.
procedure division.
declaratives.
handle-errors section.
    use after standard error procedure on ProgramFile.
handle-error.
    display "Error opening or reading file"
    stop run.
end declaratives.
    accept CommandLineArgumentCount from argument-number
    if CommandLineArgumentCount equal to 1 then
        perform LoadProgramFromFile
    end-if
    move 1 to DataPointer
    move 1 to InstructionPointer
    perform with test after until InstructionPointer is greater than ProgramLength
        evaluate true
        when IncrementDataPointer(InstructionPointer)
            if DataPointer is less than 30000 then
                add 1 to DataPointer
            else
                move 1 to DataPointer
            end-if
        when DecrementDataPointer(InstructionPointer)
            if DataPointer is greater than 1 then
                subtract 1 from DataPointer
            else
                move 30000 to DataPointer
            end-if
        when IncrementByteAtDataPointer(InstructionPointer)
            if UpperBoundReached(DataByte(DataPointer)) then
                move DataByteLowerBound to DataByte(DataPointer)
            else
                add 1 to DataByte(DataPointer)
            end-if
        when DecrementByteAtDataPointer(InstructionPointer)
            if LowerBoundReached(DataByte(DataPointer)) then
                move DataByteUpperBound to DataByte(DataPointer)
            else
                subtract 1 from DataByte(DataPointer)
            end-if
        when OutputByteAtDataPointer(InstructionPointer)
            display char(DataByte(DataPointer) + 1) with no advancing
        when InputByteAtDataPointer(InstructionPointer)
            accept InputByte
            subtract 1 from ord(InputByte) giving DataByte(DataPointer)
        when JumpIfByteIsZero(InstructionPointer)
            if DataByte(DataPointer) is equal to zero then
                move 1 to JumpCounter
                perform until JumpCounter is equal to zero
                    add 1 to InstructionPointer
                    if JumpIfByteIsZero(InstructionPointer) then
                        add 1 to JumpCounter
                    end-if
                    if JumpIfByteIsNonZero(InstructionPointer) then
                        subtract 1 from JumpCounter
                    end-if
                end-perform
            end-if
        when JumpIfByteIsNonZero(InstructionPointer)
            if DataByte(DataPointer) is not equal to zero then
                move 1 to JumpCounter
                perform until JumpCounter is equal to zero
                    subtract 1 from InstructionPointer
                    if JumpIfByteIsNonZero(InstructionPointer) then
                        add 1 to JumpCounter
                    end-if
                    if JumpIfByteIsZero(InstructionPointer) then
                        subtract 1 from JumpCounter
                    end-if
                end-perform
            end-if
        end-evaluate
        add 1 to InstructionPointer
    end-perform
    stop run
    .
LoadProgramFromFile section.
    accept ProgramFileName from argument-value
    open input ProgramFile
    read ProgramFile next record
        at end set EndOfProgramFile to true
    end-read
    if not EndOfProgramFile then
        move zero to ProgramLength
        perform until EndOfProgramFile
            add 1 to ProgramLength
            move ProgramByte to Instruction(ProgramLength)
            read ProgramFile next record
                at end set EndOfProgramFile to true
            end-read
        end-perform
    end-if
    close ProgramFile
    display "Program loaded - length is " ProgramLength " bytes"
    .
end program BrainfuckInterpreter.
[/INST]{
  "id": "BR-001",
  "description": "The program will read a file and interpret it as a Brainfuck program.",
  "condition": "LoadProgramFromFile",
  "output": {
    "success": "Program loaded - length is ProgramLength bytes"
  }
},
{
  "id": "BR-002",
  "description": "The program will execute the Brainfuck program it has loaded.",
  "condition": "perform with test after until InstructionPointer is greater than ProgramLength\nevaluate true",
  "output": {}
},
{
  "id": "BR-003",
  "description": "The program will increment the data pointer.",
  "condition": "IncrementDataPointer(InstructionPointer)",
  "output": {}
},
{
  "id": "BR-004",
  "description": "The program will decrement the data pointer.",
  "condition": "DecrementDataPointer(InstructionPointer)",
  "output": {}
},
{
  "id": "BR-005",
  "description": "The program will increment the byte at the data pointer.",
  "condition": "IncrementByteAtDataPointer(InstructionPointer)",
  "output": {}
},
{
  "id": "BR-006",
  "description": "The program will decrement the byte at the data pointer.",
  "condition": "DecrementByteAtDataPointer(InstructionPointer)",
  "output": {}
},
{
  "id": "BR-007",
  "description": "The program will output the byte at the data pointer.",
  "condition": "OutputByteAtDataPointer(InstructionPointer)",
  "output": {}
},
{
  "id": "BR-008",
  "description": "The program will input a byte and store it at the data pointer.",
  "condition": "InputByteAtDataPointer(InstructionPointer)",
  "output": {}
},
{
  "id": "BR-009",
  "description": "The program will skip forward until the byte at the data pointer is non-zero.",
  "condition": "JumpIfByteIsZero(InstructionPointer)",
  "output": {}
},
{
  "id": "BR-010",
  "description": "The program will skip backward until the byte at the data pointer is zero.",
  "condition": "JumpIfByteIsNonZero(InstructionPointer)",
  "output": {}
}[INST]      **********************************************************************
      * AUTHOR:    DAVE NICOLETTE
      * DATE:      25 JUN 2015
      * PURPOSE:   DEMONSTRATE MOCKING OF CALL STATEMENTS.
      **********************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. CALLDEMO.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77  WS-ALPHA                PIC X.
       77  WS-OMEGA                PIC X.
       77  WS-SUBPROGRAM-NAME      PIC X(08).
       PROCEDURE DIVISION.
           GOBACK
           .

       1000-BASIC-CALL.
           MOVE 'A' TO WS-ALPHA
           MOVE 'Z' TO WS-OMEGA
           CALL 'NOTREALNAME' 
               USING WS-ALPHA WS-OMEGA
           END-CALL
           .
 
       2000-CLASSIC-CALL.
           MOVE 'A' TO WS-ALPHA.
           MOVE 'Z' TO WS-OMEGA.
           CALL 'NOTREALNAME' 
               USING WS-ALPHA WS-OMEGA.
           .

       3000-DYNAMIC-CALL.
           MOVE 'A' TO WS-ALPHA.
           MOVE 'Z' TO WS-OMEGA.
           CALL WS-SUBPROGRAM-NAME 
               USING WS-ALPHA WS-OMEGA.
           .



       9999-END.
           .[/INST]{
  "id": "BR-001",  "description": "The first character of the string passed to the 'NOTREALNAME' subroutine must be A",
  "condition": "WS-ALPHA = 'A'",
  "output": {
    "pass": "The subroutine call passes",
    "fail": "The subroutine call fails"
  }
},
{
  "id": "BR-002",  "description": "The last character of the string passed to the 'NOTREALNAME' subroutine must be Z",
  "condition": "WS-OMEGA = 'Z'",
  "output": {
    "pass": "The subroutine call passes",
    "fail": "The subroutine call fails"
  }
}[INST]      **********************************************************************
      * AUTHOR:    DAVE NICOLETTE
      * DATE:      13 APR 2017
      * PURPOSE:   CREDIT CARD IDENTIFIER - BEFORE REFACTORING.
      **********************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. CARD1.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

       SELECT INPUT-FILE ASSIGN TO INPUT-FILENAME
           ORGANIZATION IS LINE SEQUENTIAL
           FILE STATUS IS WS-INPUT-STATUS.       

       SELECT OUTPUT-FILE ASSIGN TO OUTPUT-FILENAME
           ORGANIZATION IS LINE SEQUENTIAL
           FILE STATUS IS WS-OUTPUT-STATUS.

       DATA DIVISION.
       FILE SECTION.

       FD INPUT-FILE.
       01 INPUT-RECORD PIC X(200).

       FD OUTPUT-FILE.
       01 OUTPUT-RECORD PIC X(200).      

       WORKING-STORAGE SECTION.

       01  ARGS PIC X(500).

       01  ARG-VALUES.
           05  INPUT-FILENAME PIC X(120).
           05  OUTPUT-FILENAME   PIC X(120).

       01  WS-FILE-STATUS.
           05  WS-INPUT-STATUS        PIC X(02).
               88  INPUT-OK           VALUE '00'.
               88  INPUT-EOF          VALUE '10'.
           05  WS-OUTPUT-STATUS       PIC X(02).
               88  OUTPUT-OK          VALUE '00'.
        01 WS-ALL-FILE-STATUS REDEFINES WS-FILE-STATUS PIC X(04).
               88  FILES-OK           VALUE '0000'.

       01  WS-RECORD-AREAS.
           05  WS-INPUT-RECORD.
               10  FILLER             PIC X(10).
               10  IN-ACCOUNT-NUMBER  PIC X(16).
               10  FILLER             PIC X(174).
           05  WS-OUTPUT-RECORD.
               10  OUT-ACCOUNT-NUMBER PIC X(16).
               10  OUT-MESSAGE        PIC X(184).    

       01  WS-MESSAGE.
           05  FILLER                 PIC X(04) VALUE ' IS '.  
           05  WS-CARD-TYPE           PIC X(60).    

       PROCEDURE DIVISION.
          
           PERFORM 9100-OPEN-FILES
           IF INPUT-OK
               PERFORM 2000-IDENTIFY-CARD-TYPES UNTIL INPUT-EOF
               PERFORM 9400-CLOSE-FILES
           END-IF    
           . 

       2000-IDENTIFY-CARD-TYPES.
           PERFORM 9200-READ-INPUT-FILE
           IF FILES-OK
               PERFORM 2200-IDENTIFY-CARD-TYPE
           PERFORM 9300-WRITE-OUTPUT-FILE
           .

       2200-IDENTIFY-CARD-TYPE.

           EVALUATE TRUE
               WHEN IN-ACCOUNT-NUMBER(1:1) IS EQUAL TO '4'
                   MOVE 'VISA' TO WS-CARD-TYPE
               WHEN IN-ACCOUNT-NUMBER(1:2) IS >= '51' 
               AND IN-ACCOUNT-NUMBER(1:2) IS < '56' 
                   MOVE 'MASTERCARD' TO WS-CARD-TYPE
               WHEN IN-ACCOUNT-NUMBER(1:2) = '36'
               WHEN IN-ACCOUNT-NUMBER(1:2) = '38'
                   MOVE 'DINERS CLUB' TO WS-CARD-TYPE
               WHEN IN-ACCOUNT-NUMBER(1:4) = '6011'
               WHEN IN-ACCOUNT-NUMBER(1:2) = '65'    
                   MOVE 'DISCOVER' TO WS-CARD-TYPE 
               WHEN IN-ACCOUNT-NUMBER(1:2) = '34'
               WHEN IN-ACCOUNT-NUMBER(1:2) = '37'
                   MOVE 'AMERICAN EXPRESS' TO WS-CARD-TYPE
               WHEN IN-ACCOUNT-NUMBER(1:2) = '35'
                   MOVE 'JAPAN CREDIT BUREAU' TO WS-CARD-TYPE    
               WHEN OTHER   
                   MOVE 'UNKNOWN' TO WS-CARD-TYPE
           END-EVALUATE

           MOVE IN-ACCOUNT-NUMBER TO OUT-ACCOUNT-NUMBER
           MOVE WS-MESSAGE TO OUT-MESSAGE
           .    

       9100-OPEN-FILES.

           ACCEPT ARGS FROM COMMAND-LINE END-ACCEPT
           UNSTRING ARGS DELIMITED BY SPACE
               INTO INPUT-FILENAME OUTPUT-FILENAME
           END-UNSTRING

           IF  INPUT-FILENAME = SPACES 
           OR OUTPUT-FILENAME = SPACES
               DISPLAY 'USAGE: CARD1 INPUT-FILENAME' 
                   ' OUTPUT-FILENAME'
               GOBACK
           END-IF

           OPEN INPUT INPUT-FILE 
           OPEN OUTPUT OUTPUT-FILE
           .

       9200-READ-INPUT-FILE.
           READ INPUT-FILE
           .    

       9300-WRITE-OUTPUT-FILE.
           WRITE OUTPUT-RECORD FROM WS-OUTPUT-RECORD
           .    

       9400-CLOSE-FILES.
           CLOSE OUTPUT-FILE
           CLOSE INPUT-FILE
           .

       9999-END.
           .[/INST]{
  "id": "BR-001",
  "description": "The first character of the account number determines the card type.",
  "condition": "IN-ACCOUNT-NUMBER(1:1)",
  "output": {
    "4": "VISA",
    "51-55": "MASTERCARD",
    "36,38": "DINERS CLUB",
    "6011,65": "DISCOVER",
    "34,37": "AMERICAN EXPRESS",
    "35": "JAPAN CREDIT BUREAU",
    "OTHER": "UNKNOWN"
  }
}[INST]      **********************************************************************
      * AUTHOR:    DAVE NICOLETTE
      * DATE:      13 APR 2017
      * PURPOSE:   CREDIT CARD IDENTIFIER - AFTER REFACTORING.
      **********************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. CARD2.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.

       01  WS-MESSAGE.
           05  FILLER                 PIC X(04) VALUE ' IS '.  
           05  WS-CARD-TYPE           PIC X(60).    

       LINKAGE SECTION.

       01  WS-PARAMETERS.
           05  WS-ARGUMENTS.
               10  FILLER             PIC X(10).
               10  IN-ACCOUNT-NUMBER  PIC X(16).
               10  FILLER             PIC X(174).
           05  WS-RETURN-VALUES.
               10  OUT-ACCOUNT-NUMBER PIC X(16).
               10  OUT-MESSAGE        PIC X(184).    

       PROCEDURE DIVISION USING WS-PARAMETERS.

           PERFORM 2200-IDENTIFY-CARD-TYPE
           MOVE ZERO TO RETURN-CODE
           GOBACK
           .

       2200-IDENTIFY-CARD-TYPE.

           EVALUATE TRUE
               WHEN IN-ACCOUNT-NUMBER(1:1) IS EQUAL TO '4'
                   MOVE 'VISA' TO WS-CARD-TYPE
               WHEN IN-ACCOUNT-NUMBER(1:2) IS >= '51' 
               AND IN-ACCOUNT-NUMBER(1:2) IS < '56' 
                   MOVE 'MASTERCARD' TO WS-CARD-TYPE
               WHEN IN-ACCOUNT-NUMBER(1:2) = '36'
               WHEN IN-ACCOUNT-NUMBER(1:2) = '38'
                   MOVE 'DINERS CLUB' TO WS-CARD-TYPE
               WHEN IN-ACCOUNT-NUMBER(1:4) = '6011'
               WHEN IN-ACCOUNT-NUMBER(1:2) = '65'    
                   MOVE 'DISCOVER' TO WS-CARD-TYPE 
               WHEN IN-ACCOUNT-NUMBER(1:2) = '34'
               WHEN IN-ACCOUNT-NUMBER(1:2) = '37'
                   MOVE 'AMERICAN EXPRESS' TO WS-CARD-TYPE
               WHEN IN-ACCOUNT-NUMBER(1:2) = '35'
                   MOVE 'JAPAN CREDIT BUREAU' TO WS-CARD-TYPE    
               WHEN OTHER   
                   MOVE 'UNKNOWN' TO WS-CARD-TYPE
           END-EVALUATE

           MOVE IN-ACCOUNT-NUMBER TO OUT-ACCOUNT-NUMBER
           MOVE WS-MESSAGE TO OUT-MESSAGE
           .    

       9999-END.
           .[/INST]{
  "id": "BR-002",
  "description": "The first character of the account number determines the type of credit card.",
  "condition": "IN-ACCOUNT-NUMBER(1:1)",
  "output": {
    "4": "VISA",
    "51-55": "MASTERCARD",
    "36, 38": "DINERS CLUB",
    "6011, 65": "DISCOVER",
    "34, 37": "AMERICAN EXPRESS",
    "35": "JAPAN CREDIT BUREAU",
    "other": "UNKNOWN"
  }
}[INST]      **********************************************************************
      * AUTHOR:    DAVE NICOLETTE
      * DATE:      13 APR 2017
      * PURPOSE:   TEST DRIVER CARD2.
      **********************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. CARD2D.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  WS-PARAMETERS.
           05  WS-ARGUMENTS.
               10  FILLER             PIC X(10).
               10  IN-ACCOUNT-NUMBER  PIC X(16).
               10  FILLER             PIC X(174).
           05  WS-RETURN-VALUES.
               10  OUT-ACCOUNT-NUMBER PIC X(16).
               10  OUT-MESSAGE        PIC X(184).    
       PROCEDURE DIVISION.

           CALL 'CARD2' USING
               BY REFERENCE WS-PARAMETERS
           END-CALL    
           .
       9999-END.
           .
[/INST]{
  "id": "BR-001",
  "description": "The CARD2 program takes in an account number and returns an account number and a message.",
  "condition": null,
  "output": {
    "account number": "OUT-ACCOUNT-NUMBER",
    "message": "OUT-MESSAGE"
  }
}[INST]      **********************************************************************
      * AUTHOR:    DAVE NICOLETTE
      * DATE:      13 APR 2017
      * PURPOSE:   CREDIT CARD IDENTIFIER - BEFORE REFACTORING.
      **********************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. CARD3.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

       SELECT INPUT-FILE ASSIGN TO INPUT-FILENAME
           ORGANIZATION IS LINE SEQUENTIAL
           FILE STATUS IS WS-INPUT-STATUS.       

       SELECT OUTPUT-FILE ASSIGN TO OUTPUT-FILENAME
           ORGANIZATION IS LINE SEQUENTIAL
           FILE STATUS IS WS-OUTPUT-STATUS.

       DATA DIVISION.
       FILE SECTION.

       FD INPUT-FILE.
       01 INPUT-RECORD PIC X(200).

       FD OUTPUT-FILE.
       01 OUTPUT-RECORD PIC X(200).      

       WORKING-STORAGE SECTION.

       01  ARGS PIC X(500).

       01  ARG-VALUES.
           05  INPUT-FILENAME PIC X(120).
           05  OUTPUT-FILENAME   PIC X(120).

       01  WS-FILE-STATUS.
           05  WS-INPUT-STATUS        PIC X(02).
               88  INPUT-OK           VALUE '00'.
               88  INPUT-EOF          VALUE '10'.
           05  WS-OUTPUT-STATUS       PIC X(02).
               88  OUTPUT-OK          VALUE '00'.
        01 WS-ALL-FILE-STATUS REDEFINES WS-FILE-STATUS PIC X(04).
               88  FILES-OK           VALUE '0000'.

       01  WS-RECORD-AREAS.
           05  WS-INPUT-RECORD.
               10  FILLER             PIC X(10).
               10  IN-ACCOUNT-NUMBER  PIC X(16).
               10  FILLER             PIC X(174).
           05  WS-OUTPUT-RECORD.
               10  OUT-ACCOUNT-NUMBER PIC X(16).
               10  OUT-MESSAGE        PIC X(184).    

       01  WS-MESSAGE.
           05  FILLER                 PIC X(04) VALUE ' IS '.  
           05  WS-CARD-TYPE           PIC X(60). 
               88  UNKNOWN-CARD          VALUE 'UNKNOWN'.
               88  AMERICAN-EXPRESS-CARD VALUE 'AMERICAN EXPRESS'.   
               88  DISCOVER-CARD         VALUE 'DISCOVER'.
               88  MASTERCARD-CARD       VALUE 'MASTERCARD'.
               88  VISA-CARD             VALUE 'VISA'.
               88  DINERS-CLUB-CARD      VALUE 'DINERS CLUB'.

       PROCEDURE DIVISION.
          
           PERFORM 9100-OPEN-FILES
           IF INPUT-OK
               PERFORM 2000-IDENTIFY-CARD-TYPES UNTIL INPUT-EOF
               PERFORM 9400-CLOSE-FILES
           END-IF    
           . 

       2000-IDENTIFY-CARD-TYPES.
           PERFORM 9200-READ-INPUT-FILE.
           IF FILES-OK
               PERFORM 2200-IDENTIFY-CARD-TYPE.
           PERFORM 9300-WRITE-OUTPUT-FILE.

       2200-IDENTIFY-CARD-TYPE.

           SET UNKNOWN-CARD TO TRUE. 
           IF IN-ACCOUNT-NUMBER(1:2) = '34'
           OR IN-ACCOUNT-NUMBER(1:2) = '37'
               SET AMERICAN-EXPRESS-CARD TO TRUE
               PERFORM 2290-POPULATE-MESSAGE
           ELSE        
               IF IN-ACCOUNT-NUMBER(1:2) = '65'
               OR IN-ACCOUNT-NUMBER(1:4) = '6011'
                   SET DISCOVER-CARD TO TRUE
                   PERFORM 2290-POPULATE-MESSAGE
               ELSE       
                   IF IN-ACCOUNT-NUMBER(1:2) >= '51'
                   AND IN-ACCOUNT-NUMBER(1:2) <= '55'
                       SET MASTERCARD-CARD TO TRUE
                       PERFORM 2290-POPULATE-MESSAGE
                   ELSE       
                       IF IN-ACCOUNT-NUMBER(1:1) = '4'
                           SET VISA-CARD TO TRUE
                           PERFORM 2290-POPULATE-MESSAGE
                       ELSE    
                           IF IN-ACCOUNT-NUMBER(1:2) = '36'
                           OR IN-ACCOUNT-NUMBER(1:2) = '38'
                               SET DINERS-CLUB-CARD TO TRUE
                               PERFORM 2290-POPULATE-MESSAGE
                           ELSE       
                               PERFORM 2290-POPULATE-MESSAGE.

       2290-POPULATE-MESSAGE.    
           MOVE IN-ACCOUNT-NUMBER TO OUT-ACCOUNT-NUMBER.
           MOVE WS-MESSAGE TO OUT-MESSAGE.

           DISPLAY 'OUT-ACCOUNT-NUMBER ' OUT-ACCOUNT-NUMBER.
           DISPLAY 'WS-MESSAGE ' WS-MESSAGE.
           DISPLAY 'WS-CARD-TYPE ' WS-CARD-TYPE.

       9100-OPEN-FILES.

           ACCEPT ARGS FROM COMMAND-LINE END-ACCEPT
           UNSTRING ARGS DELIMITED BY SPACE
               INTO INPUT-FILENAME OUTPUT-FILENAME
           END-UNSTRING

           IF  INPUT-FILENAME = SPACES 
           OR OUTPUT-FILENAME = SPACES
               DISPLAY 'USAGE: CARD1 INPUT-FILENAME' 
                   ' OUTPUT-FILENAME'
               GOBACK
           END-IF

           OPEN INPUT INPUT-FILE 
           OPEN OUTPUT OUTPUT-FILE
           .

       9200-READ-INPUT-FILE.
           READ INPUT-FILE
           .    

       9300-WRITE-OUTPUT-FILE.
           WRITE OUTPUT-RECORD FROM WS-OUTPUT-RECORD
           .    

       9400-CLOSE-FILES.
           CLOSE OUTPUT-FILE
           CLOSE INPUT-FILE
           .

       9999-END.
           .[/INST]{
  "id": "BR-002",
  "description": "The first 2 digits of a credit card number can be used to identify the type of card.  American Express starts with 34 or 37, Discover starts with 65 or 6011, Mastercard starts with 51-55, Visa starts with 4, and Diners Club starts with 36 or 38.",
  "condition": "IN-ACCOUNT-NUMBER(1:2)",
  "output": {
    "american-express": "AMERICAN EXPRESS",
    "discover": "DISCOVER",
    "mastercard": "MASTERCARD",
    "visa": "VISA",
    "diners-club": "DINERS CLUB",
    "unknown": "UNKNOWN"
  }
}[INST]      **********************************************************************
      * AUTHOR:    DAVE NICOLETTE
      * DATE:      10 JAN 2015
      * PURPOSE:   DEMONSTRATE MOCKING FEATURES OF ZUTZCPC.
      **********************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. CICSDEMO.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
       01  WS-RECORD.
           05  WS-KEY        PIC X(5).
           05  WS-FIELD-2    PIC X(5).
           05  WS-FIELD-3    PIC X(5).
           05  WS-FIELD-4    PIC X(5).

       LINKAGE SECTION.
           COPY DFHEIBLK.
       01  DFHCOMMAREA PIC X.    

       PROCEDURE DIVISION USING DFHEIBLK, DFHCOMMAREA.

       0100-READ-DATASET.

           EXEC CICS READ 
                DATASET('MYFILE') 
                RIDFLD('AAAAA') 
                INTO(WS-RECORD)
           END-EXEC    
           .

       0200-WRITE-DATASET.

           EXEC CICS WRITE 
                DATASET('YOURFILE') 
                RIDFLD('AAAAA') 
                FROM(WS-RECORD)
           END-EXEC    
           .

       9999-END.
           .[/INST]{
  "id": "BR-002",  "description": "The WS-RECORD data structure is used to read and write data from the MYFILE dataset.",
  "condition": null,
  "output": {
    "read": "EXEC CICS READ DATASET('MYFILE') RIDFLD('AAAAA') INTO(WS-RECORD)",
    "write": "EXEC CICS WRITE DATASET('YOURFILE') RIDFLD('AAAAA') FROM(WS-RECORD)"
  }
}[INST]      **********************************************************************
      * AUTHOR:    DAVE NICOLETTE
      * DATE:      21 JAN 2015
      * PURPOSE:   TEST DRIVER TO TEST CICSDEMO
      **********************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. CICSDRIV.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
           COPY DFHEIBLK.
       01  DFHCOMMAREA PIC X VALUE SPACES.
       PROCEDURE DIVISION.
           CALL 'CICSDEMO' USING
               BY REFERENCE DFHEIBLK
               BY REFERENCE DFHCOMMAREA
           END-CALL    
           .
       9999-END.
           .
[/INST]{
  "id": "BR-001",
  "description": "The CICSDEMO program is called using the DFHEIBLK and DFHCOMMAREA.",
  "condition": null,
  "output": {
    "call": "CALL 'CICSDEMO' USING BY REFERENCE DFHEIBLK BY REFERENCE DFHCOMMAREA END-CALL"
  }
}[INST]      **********************************************************************
      * AUTHOR:    DAVE NICOLETTE
      * DATE:      23 JAN 2015
      * PURPOSE:   CONVERT A COMMA DELIMITED FILE INTO A FIXED FORMAT FILE.
      *            "CLASSIC" COBOL VERSION (PERIOD AT END OF EACH SENTENCE).
      *
      * USAGE:     CONVERT INPUT-FILENAME OUTPUT-FILENAME
      **********************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. CONVER2.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

       SELECT INPUT-FILE ASSIGN TO INPUT-FILENAME
           FILE STATUS IS WS-INPUT-FILE-STATUS
           ORGANIZATION IS LINE SEQUENTIAL.

       SELECT OUTPUT-FILE ASSIGN TO OUTPUT-FILENAME
           ORGANIZATION IS LINE SEQUENTIAL.

       DATA DIVISION.
       FILE SECTION.

       FD INPUT-FILE.
       01 INPUT-RECORD PIC X(200).

       FD OUTPUT-FILE.
       01 OUTPUT-RECORD.
          COPY OUTPUT.

       WORKING-STORAGE SECTION.

       01  ARGS PIC X(500).

       01  ARG-VALUES.
           05  INPUT-FILENAME   PIC X(120).
           05  OUTPUT-FILENAME  PIC X(120).
 
       01  WS-FILE-STATUS.
           05  WS-INPUT-FILE-STATUS  PIC 9(02).
       01  EOF      PIC X VALUE SPACES.
           88  END-OF-FILE          VALUE "Y".
 
       01  INPUT-VALUES.
           05  TEXT-VALUE-1     PIC X(12).
           05  STATE-CODE-IN    PIC X(02).
           05  TEXT-VALUE-2     PIC X(24).
           05  DECIMAL-VALUE-1-X.
               10  DECIMAL-VALUE-1  PIC 9(3)V9(4). 

       01  TO-UPPER-CASE        PIC X(30).

       01  STATE-VALUES.
           05  FILLER           PIC X(32) VALUE "AKALASKA".
           05  FILLER           PIC X(32) VALUE "ARARKANSAS".
           05  FILLER           PIC X(32) VALUE "AZARIZONA".

       01  STATE-TABLE REDEFINES STATE-VALUES.
           05  STATE-TABLE-DATA OCCURS 3 TIMES 
                          ASCENDING KEY STATE-TABLE-CODE
                          INDEXED BY STATE-INDEX.
               10  STATE-TABLE-CODE   PIC X(02).
               10  STATE-TABLE-NAME   PIC X(30).

       PROCEDURE DIVISION.

       0000-MAIN.

           PERFORM 0500-INITIALIZE.
           PERFORM 1000-PROCESS-INPUT UNTIL END-OF-FILE.
           GOBACK.

       0500-INITIALIZE.

           ACCEPT ARGS FROM COMMAND-LINE.
           UNSTRING ARGS DELIMITED BY SPACE
               INTO INPUT-FILENAME OUTPUT-FILENAME.

           IF  INPUT-FILENAME = SPACES OR OUTPUT-FILENAME = SPACES
               DISPLAY 'USAGE: CONVERT INPUT-FILENAME OUTPUT-FILENAME'
               GOBACK.

       1000-PROCESS-INPUT.
           OPEN OUTPUT OUTPUT-FILE.
           OPEN INPUT INPUT-FILE.
           PERFORM UNTIL END-OF-FILE
               READ INPUT-FILE
                   AT END
                       SET END-OF-FILE TO TRUE
                   NOT AT END
                       PERFORM 2000-CONVERT-RECORD
                       PERFORM 3000-WRITE-OUTPUT
           END-PERFORM.            
           CLOSE OUTPUT-FILE.
           CLOSE INPUT-FILE.

       2000-CONVERT-RECORD.
           MOVE SPACES TO OUTPUT-RECORD.
           PERFORM 2050-BREAK-OUT-DELIMITED-VALUES.
           PERFORM 2100-CONVERT-TEXT-FIELD-1.
           PERFORM 2200-LOOKUP-STATE-NAME.
           PERFORM 2300-CONVERT-TEXT-FIELD-2.
           MOVE DECIMAL-VALUE-1 TO DECIMAL-OUT-1.

       2050-BREAK-OUT-DELIMITED-VALUES.
           UNSTRING INPUT-RECORD DELIMITED BY ','
               INTO TEXT-VALUE-1
                   STATE-CODE-IN
                   TEXT-VALUE-2
                   DECIMAL-VALUE-1.

       2100-CONVERT-TEXT-FIELD-1.
           IF  TEXT-VALUE-1 = LOW-VALUES
               MOVE SPACES TO TEXT-OUT-1
           ELSE
               MOVE TEXT-VALUE-1 TO TO-UPPER-CASE
               PERFORM 9000-TO-UPPER-CASE
               MOVE TO-UPPER-CASE TO TEXT-OUT-1.

       2200-LOOKUP-STATE-NAME.
           MOVE STATE-CODE-IN TO TO-UPPER-CASE.
           PERFORM 9000-TO-UPPER-CASE.
           MOVE TO-UPPER-CASE TO STATE-CODE-IN.

           SEARCH ALL STATE-TABLE-DATA
               AT END
                   MOVE SPACES TO STATE-NAME-OUT
               WHEN STATE-TABLE-CODE (STATE-INDEX) = STATE-CODE-IN
                   MOVE STATE-TABLE-NAME (STATE-INDEX) TO STATE-NAME-OUT.

       2300-CONVERT-TEXT-FIELD-2.
           CALL "C$TOUPPER" 
               USING TEXT-VALUE-2
               BY VALUE 
               LENGTH 1.
           CALL "C$JUSTIFY" 
               USING TEXT-VALUE-2
               "C".
           MOVE TEXT-VALUE-2 TO TEXT-OUT-2.
           IF TEXT-OUT-2 EQUAL LOW-VALUES
               MOVE SPACES TO TEXT-OUT-2.

       3000-WRITE-OUTPUT.
           WRITE 
               OUTPUT-RECORD.

       9000-TO-UPPER-CASE.
           CALL "C$TOUPPER" 
               USING TO-UPPER-CASE
               BY VALUE 
               LENGTH TO-UPPER-CASE.
[/INST]{
  "id": "BR-001",
  "description": "A state code must look up to a state name in the state name table.",
  "condition": "STATE-CODE-IN IN STATE-TABLE",
  "output": {
    "found": "STATE-NAME-OUT",
    "not_found": "SPACES"
  }
}[INST]       identification division.
       program-id. convert-bad.
       environment division.
       input-output section.
       file-control.
       select input-file assign to input-filename
           organization is line sequential.
       select output-file assign to output-filename
           organization is line sequential.
       data division.
       file section.
       fd input-file.
       01 input-record pic x(200).
       fd output-file.
       01 output-record.
          copy output.
       working-storage section.
       01  args pic x(120).
       01  arg-values.
           05  input-filename   pic x(40).
           05  output-filename  pic x(40).
       01  eof			pic x value spaces.
           88  end-of-file		      value "y".
       01  input-values.
           05  text-value-1     pic x(12).
           05  state-code-in    pic x(02).
           05  text-value-2     pic x(24).
           05  decimal-value-1  pic 9(3)V9(4). 
       01  to-upper-case        pic x(30).
       01  state-values.
           05  filler           pic x(32) value "AKAlaska".
           05  filler           pic x(32) value "ARArkansas".
           05  filler           pic x(32) value "AZArizona".
       01  state-table redefines state-values.
           05  state-table-data occurs 3 times 
                          ascending key state-table-code
                          indexed by state-index.
               10  state-table-code   pic x(02).
               10  state-table-name   pic x(30).
       procedure division.
           accept args from command-line end-accept
           unstring args delimited by space
               into input-filename output-filename
           end-unstring
           if  input-filename = spaces or output-filename = spaces
               display 'Usage: convert input-filename output-filename'
               goback
           end-if
           open output output-file
           open input input-file
           perform until end-of-file
               read input-file
                   at end
                       set end-of-file to true
                   not at end
                       move spaces to output-record
                       unstring input-record delimited by ','
                           into text-value-1
                               state-code-in
                               text-value-2
                               decimal-value-1
                       end-unstring
                       if  text-value-1 = low-values
                           move spaces to text-out-1
                       else
                           move text-value-1 to to-upper-case
                           call "C$TOUPPER" 
                               using to-upper-case
                               by value 
                               length to-upper-case
                           end-call
                           move to-upper-case to text-out-1
                       end-if    
                       move state-code-in to to-upper-case
                       call "C$TOUPPER" 
                           using to-upper-case
                           by value 
                           length to-upper-case
                       end-call
                       move to-upper-case to state-code-in
                       search all state-table-data
                           at end
                               move spaces to state-name-out
                           when state-table-code (state-index) = state-code-in
                               move state-table-name (state-index) to state-name-out
                       end-search
                       if  text-value-2 = low-values
                           move spaces to text-value-2
                       else    
                           call "C$TOUPPER" 
                               using text-value-2
                               by value 
                               length 1
                           end-call
                           call "C$JUSTIFY" 
                               using text-value-2
                               "C"
                           end-call
                       end-if    
                       move text-value-2 to text-out-2
                       move decimal-value-1 to decimal-out-1
                       write 
                           output-record from output-record
                       end-write
               end-read
           end-perform
           close output-file
           close input-file
           .
[/INST]{
  "id": "BR-002",
  "description": "The first 12 characters of the input record are the text-value-1.\\nIf the text-value-1 is empty, then the text-out-1 should be empty.",
  "condition": "text-value-1 = low-values",
  "output": {
    "empty": "move spaces to text-out-1"
  }
},
{
  "id": "BR-003",
  "description": "If the text-value-1 is not empty, then convert it to uppercase and move it to text-out-1.",
  "condition": "text-value-1 != low-values",
  "output": {
    "uppercase": "move to-upper-case to text-out-1"
  }
},
{
  "id": "BR-004",
  "description": "The next two characters of the input record are the state-code-in.\\nConvert the state-code-in to uppercase and move it to the state-code-in.",
  "condition": "state-code-in != low-values",
  "output": {
    "uppercase": "move to-upper-case to state-code-in"
  }
},
{
  "id": "BR-005",
  "description": "Search the state-table-data for the state-code-in.\\nIf the state-code-in is not found, then move spaces to state-name-out.\\nIf the state-code-in is found, then move the corresponding state-table-name to state-name-out.",
  "condition": "state-code-in != low-values",
  "output": {
    "not_found": "move spaces to state-name-out",
    "found": "move state-table-name (state-index) to state-name-out"
  }
},
{
  "id": "BR-006",
  "description": "The next 24 characters of the input record are the text-value-2.\\nIf the text-value-2 is empty, then move spaces to the text-out-2.",
  "condition": "text-value-2 = low-values",
  "output": {
    "empty": "move spaces to text-value-2"
  }
},
{
  "id": "BR-007",
  "description": "Convert the first character of text-value-2 to uppercase using C$TOUPPER.",
  "condition": "text-value-2 != low-values",
  "output": {
    "uppercase": "call \"C$TOUPPER\" \\nusing text-value-2\\nby value \\nlength 1"
  }
},
{
  "id": "BR-008",
  "description": "Justify the text-value-2 using C$JUSTIFY with \"C\" as the fill character.",
  "condition": "text-value-2 != low-values",
  "output": {
    "justify": "call \"C$JUSTIFY\" \\nusing text-value-2\\n\"C\""
  }
},
{
  "id": "BR-009",
  "description": "Move the text-value-2 to the text-out-2.",
  "condition": "text-value-2 != low-values",
  "output": {
    "move": "move text-value-2 to text-out-2"
  }
},
{
  "id": "BR-010",
  "description": "Move the decimal-value-1 to the decimal-out-1.",
  "condition": null,
  "output": {
    "move": "move decimal-value-1 to decimal-out-1"
  }
}[INST]       identification division.
       program-id. convert-bad2.
       environment division.
       input-output section.
       file-control.
       select input-file assign to input-filename
           organization is line sequential.
       select output-file assign to output-filename
           organization is line sequential.
       data division.
       file section.
       fd input-file.
       01 input-record pic x(200).
       fd output-file.
       01 output-record.
          copy output.
       working-storage section.
       01  args pic x(120).
       01  arg-values.
           05  input-filename   pic x(40).
           05  output-filename  pic x(40).
       01  eof			pic x value spaces.
           88  end-of-file		      value "y".
       01  input-values.
           05  text-value-1     pic x(12).
           05  state-code-in    pic x(02).
           05  text-value-2     pic x(24).
           05  decimal-value-1  pic 9(3)V9(4). 
       01  to-upper-case        pic x(30).
       01  state-values.
           05  filler           pic x(32) value "AKAlaska".
           05  filler           pic x(32) value "ARArkansas".
           05  filler           pic x(32) value "AZArizona".
       01  state-table redefines state-values.
           05  state-table-data occurs 3 times 
                          ascending key state-table-code
                          indexed by state-index.
               10  state-table-code   pic x(02).
               10  state-table-name   pic x(30).
       procedure division.
           accept args from command-line end-accept
           unstring args delimited by space
               into input-filename output-filename
           end-unstring
           if  input-filename = spaces or output-filename = spaces
               display 'Usage: convert input-filename output-filename'
               goback
           end-if
           open output output-file
           open input input-file
           perform until end-of-file
               read input-file
                   at end
                       set end-of-file to true
                   not at end
                       move spaces to output-record
                       unstring input-record delimited by ','
                           into text-value-1
                               state-code-in
                               text-value-2
                               decimal-value-1
                       end-unstring
                       if  text-value-1 = low-values
                           move spaces to text-out-1
                       else
                           move text-value-1 to to-upper-case
                           call "C$TOUPPER" 
                               using to-upper-case
                               by value 
                               length to-upper-case
                           end-call
                           move to-upper-case to text-out-1
                       end-if    
                       move state-code-in to to-upper-case
                       call "C$TOUPPER" 
                           using to-upper-case
                           by value 
                           length to-upper-case
                       end-call
                       move to-upper-case to state-code-in
                       search all state-table-data
                           at end
                               move spaces to state-name-out
                           when state-table-code (state-index) = state-code-in
                               move state-table-name (state-index) to state-name-out
                       end-search
                       if  text-value-2 = low-values
                           move spaces to text-value-2
                       else    
                           call "C$TOUPPER" 
                               using text-value-2
                               by value 
                               length 1
                           end-call
                           call "C$JUSTIFY" 
                               using text-value-2
                               "C"
                           end-call
                       end-if    
                       move text-value-2 to text-out-2
                       move decimal-value-1 to decimal-out-1
                       write 
                           output-record from output-record
                       end-write
               end-read
           end-perform
           close output-file
           close input-file
           .
[/INST]{
  "id": "BR-001",
  "description": "The length of the first text field must be 12 characters.",
  "condition": "LENGTH OF text-value-1 = 12",
  "output": null
},
{
  "id": "BR-002",
  "description": "The length of the second text field must be 24 characters.",
  "condition": "LENGTH OF text-value-2 = 24",
  "output": null
},
{
  "id": "BR-003",
  "description": "The decimal value must be 3 digits before the decimal point and 4 digits after the decimal point.",
  "condition": "LENGTH OF decimal-value-1 = 7",
  "output": null
}[INST]      ******************************************************************
      * AUTHOR:    DAVE NICOLETTE
      * DATE:      18 JUL 2014
      * PURPOSE:   FUNCTIONAL TEST DRIVER FOR CONVERT.CBL.
      *            READS SEQUENTIAL FILE WITH EXPECTED RECORDS AND 
      *            SEQUENTIAL OUTPUT FILE FROM 'CONVERT' AND COMPARES
      *            THEM RECORD BY RECORD.
      *
      * USAGE:     CONVERT-TEST EXPECTED-OUTPUT-FILE ACTUAL-OUTPUT-FILE
      ******************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. CONVERT-TEST.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
  
           SELECT EXPECTED-RESULT-FILE 
               ASSIGN TO EXPECTED-RESULT-FILENAME
               ORGANIZATION IS LINE SEQUENTIAL.

           SELECT ACTUAL-RESULT-FILE 
               ASSIGN TO ACTUAL-RESULT-FILENAME
               ORGANIZATION IS LINE SEQUENTIAL.

       DATA DIVISION.
       FILE SECTION.

       FD  EXPECTED-RESULT-FILE.
       01  EXPECTED-RESULT-RECORD.
           COPY OUTPUT.

       FD  ACTUAL-RESULT-FILE.
       01  ACTUAL-RESULT-RECORD.
           COPY OUTPUT.

       WORKING-STORAGE SECTION.

       01  ARGS PIC X(500).

       01  ARG-VALUES.
           05  EXPECTED-RESULT-FILENAME PIC X(120).
           05  ACTUAL-RESULT-FILENAME   PIC X(120).
 
       01  EOF-EXPECTED PIC X VALUE SPACES.
           88  END-OF-EXPECTED          VALUE "Y".
       01  EOF-ACTUAL PIC X VALUE SPACES.
           88  END-OF-ACTUAL            VALUE "Y".
       01  TEST-STATUS                  PIC X(11) VALUE "     PASS: ".
           88  TEST-PASS                VALUE "     PASS: ".
           88  TEST-FAIL                VALUE "**** FAIL: ".
       01  EXPECTED-LINE-NUMBER         PIC 9(6) VALUE ZERO.
       01  ACTUAL-LINE-NUMBER           PIC 9(6) VALUE ZERO.
       01  STATUS-MESSAGE               PIC X(100) VALUE SPACES.

       PROCEDURE DIVISION.

       0000-MAIN.

           PERFORM 0500-INITIALIZE
           PERFORM 1000-COMPARE-FILES
           GOBACK
           .

       0500-INITIALIZE.

           ACCEPT ARGS FROM COMMAND-LINE END-ACCEPT
           UNSTRING ARGS DELIMITED BY SPACE
               INTO EXPECTED-RESULT-FILENAME ACTUAL-RESULT-FILENAME
           END-UNSTRING

           IF  EXPECTED-RESULT-FILENAME = SPACES 
           OR ACTUAL-RESULT-FILENAME = SPACES
               DISPLAY 'USAGE: CONVERT EXPECTED-RESULT-FILENAME' 
                   ' ACTUAL-RESULT-FILENAME'
               GOBACK
           END-IF
           .

       1000-COMPARE-FILES.
           OPEN INPUT EXPECTED-RESULT-FILE
           OPEN INPUT ACTUAL-RESULT-FILE

           DISPLAY "==================================================="
           DISPLAY " FUNCTIONAL TESTS FOR CONVERT.CBL"
           DISPLAY " EXPECTED OUTPUT FILE: " EXPECTED-RESULT-FILENAME
           DISPLAY " ACTUAL OUTPUT FILE:   " ACTUAL-RESULT-FILENAME

           PERFORM 2000-COMPARE-RECORDS
               UNTIL TEST-FAIL OR END-OF-EXPECTED OR END-OF-ACTUAL

           IF  TEST-FAIL
               DISPLAY TEST-STATUS 
               FUNCTION SUBSTITUTE
                   (STATUS-MESSAGE; "LINE"; EXPECTED-LINE-NUMBER)
           ELSE
               DISPLAY TEST-STATUS "ACTUAL RESULT MATCHES"
                   " EXPECTED RESULT"    
           END-IF

           DISPLAY "==================================================="

           CLOSE EXPECTED-RESULT-FILE
           CLOSE ACTUAL-RESULT-FILE
           .

       2000-COMPARE-RECORDS.

           IF  NOT END-OF-EXPECTED
               READ EXPECTED-RESULT-FILE
               AT END
                   SET END-OF-EXPECTED TO TRUE
               NOT AT END
                   ADD 1 TO EXPECTED-LINE-NUMBER    
               END-READ
           END-IF

           IF  NOT END-OF-ACTUAL
               READ ACTUAL-RESULT-FILE
               AT END
                   SET END-OF-ACTUAL TO TRUE
               NOT AT END
                   ADD 1 TO ACTUAL-LINE-NUMBER
               END-READ
           END-IF

           IF  END-OF-EXPECTED AND NOT END-OF-ACTUAL
               SET TEST-FAIL TO TRUE
               MOVE "MORE RECORDS THAN EXPECTED WERE WRITTEN" 
                 TO STATUS-MESSAGE
           END-IF

           IF  NOT END-OF-EXPECTED AND END-OF-ACTUAL
               SET TEST-FAIL TO TRUE
               MOVE "FEWER RECORDS THAN EXPECTED WERE WRITTEN" 
                 TO STATUS-MESSAGE
           END-IF

           IF  EXPECTED-RESULT-RECORD NOT = ACTUAL-RESULT-RECORD
               SET TEST-FAIL TO TRUE
               MOVE "FILES DO NOT MATCH STARTING AT LINE LINE" 
                 TO STATUS-MESSAGE
           END-IF
           .
 [/INST]{
  "id": "BR-002",  "description": "the files expected and actual should have the same number of records",
  "condition": "NOT END-OF-EXPECTED AND END-OF-ACTUAL",
  "output": {
    "fail": "FEWER RECORDS THAN EXPECTED WERE WRITTEN"
  }
}
{
  "id": "BR-003",  "description": "the files expected and actual should have the same number of records",
  "condition": "END-OF-EXPECTED AND NOT END-OF-ACTUAL",
  "output": {
    "fail": "MORE RECORDS THAN EXPECTED WERE WRITTEN"
  }
}
{
  "id": "BR-004",  "description": "the files expected and actual should have the same content",
  "condition": "EXPECTED-RESULT-RECORD NOT = ACTUAL-RESULT-RECORD",
  "output": {
    "fail": "FILES DO NOT MATCH STARTING AT LINE LINE"
  }
}[INST]      **********************************************************************
      * AUTHOR:    DAVE NICOLETTE
      * DATE:      18 JUL 2014
      * PURPOSE:   CONVERT A COMMA DELIMITED FILE INTO A FIXED FORMAT FILE.
      *
      * USAGE:     CONVERT INPUT-FILENAME OUTPUT-FILENAME
      **********************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. CONVERT.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

       SELECT INPUT-FILE ASSIGN TO INPUT-FILENAME
           FILE STATUS IS WS-INPUT-FILE-STATUS
           ORGANIZATION IS LINE SEQUENTIAL.

       SELECT OUTPUT-FILE ASSIGN TO OUTPUT-FILENAME
           ORGANIZATION IS LINE SEQUENTIAL.

       DATA DIVISION.
       FILE SECTION.

       FD INPUT-FILE.
       01 INPUT-RECORD PIC X(200).

       FD OUTPUT-FILE.
       01 OUTPUT-RECORD.
          COPY OUTPUT.

       WORKING-STORAGE SECTION.

       01  ARGS PIC X(500).

       01  ARG-VALUES.
           05  INPUT-FILENAME   PIC X(120).
           05  OUTPUT-FILENAME  PIC X(120).
 
       01  WS-FILE-STATUS.
           05  WS-INPUT-FILE-STATUS  PIC 9(02).
       01  EOF      PIC X VALUE SPACES.
           88  END-OF-FILE          VALUE 'N'.
 
       01  INPUT-VALUES.
           05  TEXT-VALUE-1     PIC X(12).
           05  STATE-CODE-IN    PIC X(02).
           05  TEXT-VALUE-2     PIC X(24).
           05  DECIMAL-VALUE-1-X.
               10  DECIMAL-VALUE-1  PIC 9(3)V9(4). 

       01  TO-UPPER-CASE        PIC X(30).

       01  STATE-VALUES.
           05  FILLER           PIC X(32) VALUE "AKALASKA".
           05  FILLER           PIC X(32) VALUE "ARARKANSAS".
           05  FILLER           PIC X(32) VALUE "AZARIZONA".

       01  STATE-TABLE REDEFINES STATE-VALUES.
           05  STATE-TABLE-DATA OCCURS 3 TIMES 
                          ASCENDING KEY STATE-TABLE-CODE
                          INDEXED BY STATE-INDEX.
               10  STATE-TABLE-CODE   PIC X(02).
               10  STATE-TABLE-NAME   PIC X(30).

       PROCEDURE DIVISION.

       0000-MAIN.

           PERFORM 0500-INITIALIZE
           PERFORM 1000-PROCESS-INPUT UNTIL END-OF-FILE
           GOBACK
           .

       0500-INITIALIZE.

           ACCEPT ARGS FROM COMMAND-LINE END-ACCEPT
           UNSTRING ARGS DELIMITED BY SPACE
               INTO INPUT-FILENAME OUTPUT-FILENAME
           END-UNSTRING

           IF  INPUT-FILENAME = SPACES OR OUTPUT-FILENAME = SPACES
               DISPLAY 'USAGE: CONVERT INPUT-FILENAME OUTPUT-FILENAME'
               GOBACK
           END-IF
           .

       1000-PROCESS-INPUT.
           OPEN OUTPUT OUTPUT-FILE
           OPEN INPUT INPUT-FILE
           PERFORM UNTIL END-OF-FILE
               READ INPUT-FILE 
                   AT END
                       SET END-OF-FILE TO TRUE
                   NOT AT END
                       PERFORM 2000-CONVERT-RECORD
                       PERFORM 3000-WRITE-OUTPUT
               END-READ
           END-PERFORM
           CLOSE OUTPUT-FILE
           CLOSE INPUT-FILE
           .

       2000-CONVERT-RECORD.
           MOVE SPACES TO OUTPUT-RECORD
           PERFORM 2050-BREAK-OUT-DELIMITED-VALUES
           PERFORM 2100-CONVERT-TEXT-FIELD-1
           PERFORM 2200-LOOKUP-STATE-NAME
           PERFORM 2300-CONVERT-TEXT-FIELD-2
           MOVE DECIMAL-VALUE-1 TO DECIMAL-OUT-1
           .

       2050-BREAK-OUT-DELIMITED-VALUES.
           UNSTRING INPUT-RECORD DELIMITED BY ','
               INTO TEXT-VALUE-1
                   STATE-CODE-IN
                   TEXT-VALUE-2
                   DECIMAL-VALUE-1
           END-UNSTRING
           . 

       2100-CONVERT-TEXT-FIELD-1.
           IF  TEXT-VALUE-1 = LOW-VALUES
               MOVE SPACES TO TEXT-OUT-1
           ELSE
               MOVE TEXT-VALUE-1 TO TO-UPPER-CASE
               PERFORM 9000-TO-UPPER-CASE
               MOVE TO-UPPER-CASE TO TEXT-OUT-1
           END-IF    
           . 

       2200-LOOKUP-STATE-NAME.
           MOVE STATE-CODE-IN TO TO-UPPER-CASE
           PERFORM 9000-TO-UPPER-CASE
           MOVE TO-UPPER-CASE TO STATE-CODE-IN

           SEARCH ALL STATE-TABLE-DATA
               AT END
                   MOVE SPACES TO STATE-NAME-OUT
               WHEN STATE-TABLE-CODE (STATE-INDEX) = STATE-CODE-IN
                   MOVE STATE-TABLE-NAME (STATE-INDEX) TO STATE-NAME-OUT
           END-SEARCH
           .

       2300-CONVERT-TEXT-FIELD-2.
           IF  TEXT-VALUE-2 = LOW-VALUES
               MOVE SPACES TO TEXT-VALUE-2
           ELSE    
               CALL "C$TOUPPER" 
                   USING TEXT-VALUE-2
                   BY VALUE 
                   LENGTH 1
               END-CALL

               CALL "C$JUSTIFY" 
                   USING TEXT-VALUE-2
                   "C"
               END-CALL
           END-IF    

           MOVE TEXT-VALUE-2 TO TEXT-OUT-2
           . 

       3000-WRITE-OUTPUT.
           WRITE 
               OUTPUT-RECORD FROM OUTPUT-RECORD
           END-WRITE
           .

       9000-TO-UPPER-CASE.
           CALL "C$TOUPPER" 
               USING TO-UPPER-CASE
               BY VALUE 
               LENGTH TO-UPPER-CASE
           END-CALL
           .     
[/INST]{
  "id": "BR-001",
  "description": "The input file is comma delimited.",
  "condition": "INPUT-RECORD PIC X(200)",
  "output": null
}
{
  "id": "BR-002",
  "description": "The output file is line sequential with a fixed format.",
  "condition": "OUTPUT-FILE ASSIGN TO OUTPUT-FILENAME\nORGANIZATION IS LINE SEQUENTIAL",
  "output": null
}
{
  "id": "BR-003",
  "description": "All fields in the output record must be initialized to spaces before writing to the file.",
  "condition": "MOVE SPACES TO OUTPUT-RECORD",
  "output": null
}
{
  "id": "BR-004",
  "description": "If the first text field is empty, it should be replaced with spaces in the output record.",
  "condition": "IF TEXT-VALUE-1 = LOW-VALUES\nMOVE SPACES TO TEXT-OUT-1",
  "output": {
    "empty": "Move spaces to TEXT-OUT-1",
    "not_empty": "Move TEXT-VALUE-1 to TO-UPPER-CASE and perform 9000-TO-UPPER-CASE and move TO-UPPER-CASE to TEXT-OUT-1"
  }
}
{
  "id": "BR-005",
  "description": "All text fields in the output record should be converted to uppercase.",
  "condition": "PERFORM 9000-TO-UPPER-CASE",
  "output": null
}
{
  "id": "BR-006",
  "description": "If the second text field is empty, it should be replaced with spaces in the output record.",
  "condition": "IF TEXT-VALUE-2 = LOW-VALUES\nMOVE SPACES TO TEXT-OUT-2",
  "output": {
    "empty": "Move spaces to TEXT-OUT-2",
    "not_empty": "Call \"C$TOUPPER\" using TEXT-VALUE-2 by value length 1, and call \"C$JUSTIFY\" using TEXT-VALUE-2 \"C\", and move TEXT-VALUE-2 to TEXT-OUT-2"
  }
}[INST]      **********************************************************************
      * AUTHOR:    DAVE NICOLETTE
      * DATE:      30 JUN 2015
      * PURPOSE:   DEMONSTRATE FILE MOCKING FEATURES OF ZUTZCPC.
      **********************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. FILEDEMO.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

       SELECT INPUT-FILE ASSIGN TO INPUT-FILENAME
           ORGANIZATION IS LINE SEQUENTIAL       
           FILE STATUS IS WS-INPUT-FILE-STATUS.

       SELECT OUTPUT-FILE ASSIGN TO OUTPUT-FILENAME
           ORGANIZATION IS LINE SEQUENTIAL.

       DATA DIVISION.
       FILE SECTION.

       FD INPUT-FILE.
       01 INPUT-RECORD PIC X(200).

       FD OUTPUT-FILE.
       01 OUTPUT-RECORD PIC X(200).      

       WORKING-STORAGE SECTION.

       01  WS-FILE-STATUS.
           05  WS-INPUT-FILE-STATUS   PIC X(02).
           05  WS-OUTPUT-FILE-STATUS  PIC X(02).
           05  WS-OTHER-FILE-STATUS   PIC X(02).

       01  WS-RECORD-AREAS.
           05  WS-INPUT-RECORD        PIC X(200).
           05  WS-OUTPUT-RECORD       PIC X(200).    

       PROCEDURE DIVISION.           

       0100-OPEN-INPUT.
           OPEN INPUT INPUT-FILE  
           .

       0200-READ-INPUT-FILE.
           READ INPUT-FILE
           .    

       9999-END.
           .[/INST]```json
{
  "id": "BR-001",
  "description": "File must be opened before reading from it",
  "condition": "OPEN INPUT INPUT-FILE"
}
```[INST]      ******************************************************************
      * AUTHOR:    DAVE NICOLETTE
      * DATE:      18 JUL 2014
      * PURPOSE:   FIZZBUZZ EXERCISE.
      *
      * USAGE:     FIZZBUZZ FROM TO
      ******************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. FIZZBUZZ.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  ARGS PIC X(120).
       01  ARGUMENTS.
           05  STARTING-NUMBER    PIC 9(4).
           05  ENDING-NUMBER      PIC 9(4).

       01  BINARY.    
           05  THE-REMAINDER      PIC S9(4).
           05  THE-QUOTIENT       PIC S9(4).
           05  THE-DIVISOR        PIC S9(4).
           05  OFFSET             PIC S9(4).

       01  FILLER.
           05  CURRENT-NUMBER     PIC 9(4).
           05  CURRENT-RESULT     PIC X(12).
           05  FIZZ-OUT           PIC X(4) VALUE SPACES.
           05  BUZZ-OUT           PIC X(4) VALUE SPACES.
           05  FILLER             PIC X VALUE 'N'.
               88  TEST-88 VALUE 'Y', FALSE 'N'.

       01  RETURN-VALUE.
           05  RETURN-LINE OCCURS 1 TO 10000 
                                  DEPENDING ON ENDING-NUMBER 
                                  PIC X(60).    

       PROCEDURE DIVISION.

       0000-MAIN.

           PERFORM 0500-INITIALIZE
           PERFORM
               VARYING CURRENT-NUMBER 
               FROM STARTING-NUMBER BY 1
               UNTIL CURRENT-NUMBER GREATER THAN ENDING-NUMBER

               PERFORM 1000-PROCESS-NUMBER
               DISPLAY 'Result for ' CURRENT-NUMBER
                       ' is ' CURRENT-RESULT
           END-PERFORM    
           GOBACK
           .

       0500-INITIALIZE.
           ACCEPT ARGS FROM COMMAND-LINE END-ACCEPT

           UNSTRING ARGS DELIMITED BY SPACE
               INTO STARTING-NUMBER, ENDING-NUMBER
           END-UNSTRING
           .

       1000-PROCESS-NUMBER.
           MOVE SPACES TO CURRENT-RESULT FIZZ-OUT BUZZ-OUT
           MOVE 15 TO THE-DIVISOR
           PERFORM 2000-DIVIDE
           IF THE-REMAINDER = 0
               MOVE "FIZZBUZZ" TO CURRENT-RESULT
           END-IF        
           IF  CURRENT-RESULT = SPACES
               MOVE 3 TO THE-DIVISOR
               PERFORM 2000-DIVIDE
               IF THE-REMAINDER = 0
                   MOVE "FIZZ" TO CURRENT-RESULT
               END-IF
           END-IF
           IF  CURRENT-RESULT = SPACES        
               MOVE 5 TO THE-DIVISOR
               PERFORM 2000-DIVIDE
               IF THE-REMAINDER = 0
                   MOVE "BUZZ" TO CURRENT-RESULT
               END-IF
           END-IF       
           IF  CURRENT-RESULT = SPACES        
               MOVE 7 TO THE-DIVISOR
               PERFORM 2000-DIVIDE
               IF THE-REMAINDER = 0
                   MOVE "BAZ" TO CURRENT-RESULT
               END-IF
           END-IF             
           IF  CURRENT-RESULT = SPACES 
               MOVE CURRENT-NUMBER TO CURRENT-RESULT
           END-IF    
           .

       2000-DIVIDE.
           DIVIDE THE-DIVISOR INTO CURRENT-NUMBER 
               GIVING THE-QUOTIENT 
               REMAINDER THE-REMAINDER 
           END-DIVIDE
           .
   
       9999-END.
           .    [/INST]{
"BR-001":{    
 "description": "When a number is divisible by 15, \\nthen the output should be \"FIZZBUZZ\"",
  "condition": "THE-REMAINDER=0\\nAND THE-DIVISOR=15",
  "output": {
    "true": "FIZZBUZZ"
  }
},
"BR-002":{
  "description": "When a number is divisible by 3, \\nthen the output should be \"FIZZ\"",
  "condition": "THE-REMAINDER=0\\nAND THE-DIVISOR=3",
  "output": {
    "true": "FIZZ"
  }
},
"BR-003":{
  "description": "When a number is divisible by 5, \\nthen the output should be \"BUZZ\"",
  "condition": "THE-REMAINDER=0\\nAND THE-DIVISOR=5",
  "output": {
    "true": "BUZZ"
  }
},
"BR-004":{
  "description": "When a number is divisible by 7, \\nthen the output should be \"BAZ\"",
  "condition": "THE-REMAINDER=0\\nAND THE-DIVISOR=7",
  "output": {
    "true": "BAZ"
  }
},
"BR-005":{
  "description": "When a number is not divisible by 3 or 5 or 15 or 7, then the output should be the number itself",
  "condition": "CURRENT-RESULT=SPACES",
  "output": {
    "true": "(the current-number itself)"
  }
}
}[INST]      **********************************************************************
      * AUTHOR:    DAVE NICOLETTE
      * DATE:      07 AUG 2014
      * PURPOSE:   SAMPLE PROGRAM THAT WORKS WITH DATES.
      *
      * USAGE:     INVDATE
      **********************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. INVDATE.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
           COPY DATETIME.
       01  WS-NEXT-INVOICE-DATE PIC X(8).   
       01  WS-QUOTIENT          PIC S9(4) COMP.
       01  WS-REMAINDER         PIC S9(4) COMP. 
       PROCEDURE DIVISION.

       0000-MAIN.

           PERFORM 0500-INITIALIZE
           PERFORM 1000-PROCESS-INVOICES
           GOBACK
           .

       0500-INITIALIZE.
           .

       1000-PROCESS-INVOICES.
           PERFORM 2000-NEXT-INVOICE-DATE
           .

       2000-NEXT-INVOICE-DATE.  
           EVALUATE TRUE
               WHEN FEBRUARY 
                    PERFORM 2100-HANDLE-FEBRUARY
               WHEN 30-DAY-MONTH
                    MOVE 30 TO WS-CURRENT-DAY
               WHEN OTHER 
                    MOVE 31 TO WS-CURRENT-DAY
           END-EVALUATE              
           MOVE WS-CURRENT-DATE TO WS-NEXT-INVOICE-DATE
           .

       2100-HANDLE-FEBRUARY.
           DIVIDE 4 INTO WS-CURRENT-YEAR
               GIVING WS-QUOTIENT
               REMAINDER WS-REMAINDER
           END-DIVIDE
           IF  WS-REMAINDER EQUAL ZERO
               MOVE 29 TO WS-CURRENT-DAY
           ELSE
               MOVE 28 TO WS-CURRENT-DAY
           END-IF            
           .

       9999-END.
           .     
[/INST]{
  "id": "BR-001",
  "description": "The number of days in a month is determined by the month itself, except for February, which is affected by whether the year is a leap year or not.",
  "condition": "MONTH",
  "output": {
    "FEBRUARY": "perform 2100-HANDLE-FEBRUARY",
    "30-DAY-MONTH": "MOVE 30 TO WS-CURRENT-DAY",
    "OTHER": "MOVE 31 TO WS-CURRENT-DAY"
  }
},
{
  "id": "BR-002",
  "description": "A leap year is a year that is divisible by 4 but not by 100, or a year that is divisible by 400.",
  "condition": "YEAR",
  "output": {
    "Divisible by 4 and not by 100": "MOVE 29 TO WS-CURRENT-DAY",
    "Divisible by 400": "MOVE 29 TO WS-CURRENT-DAY",
    "Otherwise": "MOVE 28 TO WS-CURRENT-DAY"
  }
}[INST]      **********************************************************************
      * AUTHOR:    DAVE NICOLETTE
      * DATE:      10 JAN 2015
      * PURPOSE:   DEMONSTRATE MOCKING FEATURES OF ZUTZCPC.
      **********************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. MOCKDEMO.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

       SELECT INPUT-FILE ASSIGN TO INPUT-FILENAME
           ORGANIZATION IS LINE SEQUENTIAL       
           FILE STATUS IS WS-INPUT-FILE-STATUS.

       SELECT OUTPUT-FILE ASSIGN TO OUTPUT-FILENAME
           ORGANIZATION IS LINE SEQUENTIAL.

       DATA DIVISION.
       FILE SECTION.

       FD INPUT-FILE.
       01 INPUT-RECORD PIC X(200).

       FD OUTPUT-FILE.
       01 OUTPUT-RECORD PIC X(200).      

       WORKING-STORAGE SECTION.

       01  WS-FILE-STATUS.
           05  WS-INPUT-FILE-STATUS   PIC X(02).
           05  WS-OUTPUT-FILE-STATUS  PIC X(02).
           05  WS-OTHER-FILE-STATUS   PIC X(02).

       01  WS-RECORD-AREAS.
           05  WS-INPUT-RECORD        PIC X(200).
           05  WS-OUTPUT-RECORD       PIC X(200).    

       01  WS-TEST-AREAS.
           05  WS-FIELD-A             PIC X(04) VALUE 'ORIG'.    
           05  WS-FIELD-B             PIC X(04) VALUE 'ORIG'.    

       PROCEDURE DIVISION.
           

       0100-OPEN-INPUT.
           OPEN INPUT INPUT-FILE  
           .

       0200-READ-INPUT-FILE.
           READ INPUT-FILE
           .    

       1000-PARA-A.
           MOVE 'A1' TO WS-FIELD-A
           .

       2000-PARA-B.
           MOVE 'B1' TO WS-FIELD-B
           .


       9999-END.
           .[/INST]{
  "id": "BR-002",
  "description": "The value of WS-FIELD-A is set to 'A1' in the procedure PARA-A",
  "condition": "PARA-A",
  "output": {
    "field_a": "'A1'"
  }
}
{
  "id": "BR-003",
  "description": "The value of WS-FIELD-B is set to 'B1' in the procedure PARA-B",
  "condition": "PARA-B",
  "output": {
    "field_b": "'B1'"
  }
}[INST]      **********************************************************************
      * AUTHOR:    DAVE NICOLETTE
      * DATE:      30 JUN 2015
      * PURPOSE:   DEMONSTRATE PARAGRAPH MOCKING FEATURES OF ZUTZCPC.
      **********************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. MOCKDEMO.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.

       SELECT INPUT-FILE ASSIGN TO INPUT-FILENAME
           ORGANIZATION IS LINE SEQUENTIAL       
           FILE STATUS IS WS-INPUT-FILE-STATUS.

       SELECT OUTPUT-FILE ASSIGN TO OUTPUT-FILENAME
           ORGANIZATION IS LINE SEQUENTIAL.

       DATA DIVISION.
       FILE SECTION.

       FD INPUT-FILE.
       01 INPUT-RECORD PIC X(200).

       FD OUTPUT-FILE.
       01 OUTPUT-RECORD PIC X(200).      

       WORKING-STORAGE SECTION.

       01  WS-FILE-STATUS.
           05  WS-INPUT-FILE-STATUS   PIC X(02).
           05  WS-OUTPUT-FILE-STATUS  PIC X(02).
           05  WS-OTHER-FILE-STATUS   PIC X(02).

       01  WS-RECORD-AREAS.
           05  WS-INPUT-RECORD        PIC X(200).
           05  WS-OUTPUT-RECORD       PIC X(200).    

       01  WS-TEST-AREAS.
           05  WS-FIELD-A             PIC X(04) VALUE 'ORIG'.    
           05  WS-FIELD-B             PIC X(04) VALUE 'ORIG'.    

       PROCEDURE DIVISION.
           

       0100-OPEN-INPUT.
           OPEN INPUT INPUT-FILE  
           .

       0200-READ-INPUT-FILE.
           READ INPUT-FILE
           .    

       1000-PARA-A.
           MOVE 'A1' TO WS-FIELD-A
           .

       2000-PARA-B.
           MOVE 'B1' TO WS-FIELD-B
           .


       9999-END.
           .[/INST]{
  "id": "BR-002",
  "description": "The value of WS-FIELD-A should be set to 'A1' in paragraph 1000-PARA-A.",
  "condition": "Paragraph 1000-PARA-A",
  "output": {
    "set": {
      "WS-FIELD-A": "'A1'"
    }
  }
},
{
  "id": "BR-003",
  "description": "The value of WS-FIELD-B should be set to 'B1' in paragraph 2000-PARA-B.",
  "condition": "Paragraph 2000-PARA-B",
  "output": {
    "set": {
      "WS-FIELD-B": "'B1'"
    }
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  SAMPLE.
      *****************************************************************
      * TRIVIAL PROGRAM TO EXERCISE ZUTZCPC.
      *****************************************************************       
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  FILLER.
           05  WS-MESSAGE-TYPE          PIC X(08) VALUE SPACES.
           05  WS-MESSAGE               PIC X(40) VALUE SPACES.
       PROCEDURE DIVISION.

       2000-SPEAK.
           IF WS-MESSAGE-TYPE IS EQUAL TO 'GREETING'
               MOVE 'HELLO, WORLD!' TO WS-MESSAGE
           END-IF  
           IF WS-MESSAGE-TYPE IS EQUAL TO 'FAREWELL'
               MOVE 'SEE YOU LATER, ALLIGATOR!' TO WS-MESSAGE  
           END-IF    
           .    

       9999-END.
           .
[/INST]{
  "id": "BR-002",
  "description": "The message is hello world when the message type is a GREETING.",
  "condition": "WS-MESSAGE-TYPE = 'GREETING'",
  "output": "WS-MESSAGE = 'HELLO, WORLD!'"
},
{
  "id": "BR-003",
  "description": "The message is see you later, alligator when the message type is a FAREWELL.",
  "condition": "WS-MESSAGE-TYPE = 'FAREWELL'",
  "output": "WS-MESSAGE = 'SEE YOU LATER, ALLIGATOR!'"
}[INST]      **********************************************************************
      * AUTHOR:    DAVE NICOLETTE
      * DATE:      21 JAN 2015
      * PURPOSE:   DEMONSTRATE UNIT TESTING A CALLED SUBPROGRAM
      **********************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. SUBPROG.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       LINKAGE SECTION.
       01  LS-ARGUMENTS.
           05  LS-ARG-1      PIC X(80).
           05  LS-ARG-2      PIC X(80).
       PROCEDURE DIVISION USING BY REFERENCE LS-ARGUMENTS.
           DISPLAY 'Enter SUBPROG'
           MOVE 'Production run' TO LS-ARG-1
           GOBACK
           .
       1000-RETURN-VALUE-A.
           MOVE 'This is value A' TO LS-ARG-2
           .           
       1000-RETURN-VALUE-B.
           MOVE 'This is value B' TO LS-ARG-2
           .           
       9999-END.
           .[/INST]{
  "id": "BR-001",
  "description": "The first parameter passed to the SUBPROG program is 'Production run'.",
  "condition": "LS-ARG-1 = 'Production run'",
  "output": {
    "set_return_value": "This is value A"
  }
},
{
  "id": "BR-002",
  "description": "The first parameter passed to the SUBPROG program is not 'Production run'.",
  "condition": "LS-ARG-1 not equal to 'Production run'",
  "output": {
    "set_return_value": "This is value B"
  }
}[INST]      ******************************************************************
      * AUTHOR:    DAVE NICOLETTE
      * DATE:      23 JAN 2015
      * PURPOSE:   "CLASSIC" COBOL CODING STYLE VERSION OF FIZZBUZZ.
      *
      * USAGE:     VIZZBUZZ FROM TO
      ******************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. VIZZBUZZ.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  ARGS PIC X(120).
       01  ARGUMENTS.
           05  STARTING-NUMBER    PIC 9(4).
           05  ENDING-NUMBER      PIC 9(4).

       01  BINARY.    
           05  THE-REMAINDER      PIC S9(4).
           05  THE-QUOTIENT       PIC S9(4).
           05  THE-DIVISOR        PIC S9(4).
           05  OFFSET             PIC S9(4).

       01  FILLER.
           05  CURRENT-NUMBER     PIC 9(4).
           05  CURRENT-RESULT     PIC X(12).
           05  FIZZ-OUT           PIC X(4) VALUE SPACES.
           05  BUZZ-OUT           PIC X(4) VALUE SPACES.
           05  FILLER             PIC X VALUE 'N'.
               88  TEST-88 VALUE 'Y', FALSE 'N'.

       01  RETURN-VALUE.
           05  RETURN-LINE OCCURS 1 TO 10000 
                                  DEPENDING ON ENDING-NUMBER 
                                  PIC X(60).    

       PROCEDURE DIVISION.

       0000-MAIN.

           PERFORM 0500-INITIALIZE.
           PERFORM
               VARYING CURRENT-NUMBER 
               FROM STARTING-NUMBER BY 1
               UNTIL CURRENT-NUMBER GREATER THAN ENDING-NUMBER

               PERFORM 1000-PROCESS-NUMBER
               DISPLAY 'Result for ' CURRENT-NUMBER
                       ' is ' CURRENT-RESULT
           END-PERFORM.            
           GOBACK.

       0500-INITIALIZE.
           ACCEPT ARGS FROM COMMAND-LINE.

           UNSTRING ARGS DELIMITED BY SPACE
               INTO STARTING-NUMBER, ENDING-NUMBER.

       1000-PROCESS-NUMBER.
           MOVE SPACES TO CURRENT-RESULT FIZZ-OUT BUZZ-OUT.
           MOVE 15 TO THE-DIVISOR.
           PERFORM 2000-DIVIDE.
           IF THE-REMAINDER EQUAL ZERO
               MOVE "FIZZBUZZ" TO CURRENT-RESULT.
           IF CURRENT-RESULT EQUAL SPACES
               MOVE 3 TO THE-DIVISOR
               PERFORM 2000-DIVIDE
               IF THE-REMAINDER EQUAL 0
                   MOVE "FIZZ" TO CURRENT-RESULT.
           IF CURRENT-RESULT EQUAL SPACES        
               MOVE 5 TO THE-DIVISOR
               PERFORM 2000-DIVIDE
               IF THE-REMAINDER EQUAL 0
                   MOVE "BUZZ" TO CURRENT-RESULT.
           IF CURRENT-RESULT EQUAL SPACES 
               MOVE CURRENT-NUMBER TO CURRENT-RESULT.

       2000-DIVIDE.
           DIVIDE THE-DIVISOR INTO CURRENT-NUMBER 
               GIVING THE-QUOTIENT 
               REMAINDER THE-REMAINDER. 

       9999-END.
           .
                 
   [/INST]{
  "id": "BR-001",
  "description": "If the remainder between CURRENT-NUMBER and 15 is equal to 0, print \\\"FIZZBUZZ\\\" to CURRENT-RESULT.",
  "condition": "THE-REMAINDER EQUAL ZERO",
  "output": {
    "success": "FIZZBUZZ"
  }
},
{
  "id": "BR-002",
  "description": "If the remainder of CURRENT-NUMBER divided by 3 equals 0, \\\"FIZZ\\\" is printed to CURRENT-RESULT.",
  "condition": "THE-REMAINDER EQUAL 0",
  "output": {
    "success": "FIZZ"
  }
},
{
  "id": "BR-003",
  "description": "If the remainder of CURRENT-NUMBER divided by 5 equals 0, \\\"BUZZ\\\" is printed to CURRENT-RESULT.",
  "condition": "THE-REMAINDER EQUAL 0",
  "output": {
    "success": "BUZZ"
  }
},
{
  "id": "BR-004",
  "description": "If none of the conditions BR-001, BR-002, BR-003 are met, set CURRENT-RESULT to CURRENT-NUMBER.",
  "condition": "CURRENT-RESULT EQUAL SPACES",
  "output": {
    "success": null
  }
}[INST]       >>SOURCE FORMAT FREE
identification division.
program-id. equals-test.
environment division.
configuration section.
repository. function all intrinsic.
data division.
working-storage section.
    copy "dd-fixtures" of "copybooks".
procedure division.
    perform numeric-data-test.
    perform floating-data-test.
    perform alphanumeric-data-test.
    perform misc-test.
    goback.
numeric-data-test section.
    call "assert-equals" using disp of numeric-data, disp of numeric-data.
    call "assert-equals" using disp-u of numeric-data, disp-u of numeric-data.
    call "assert-equals" using dispp of numeric-data, dispp of numeric-data.
    call "assert-equals" using dispp-u of numeric-data, dispp-u of numeric-data.
    call "assert-equals" using disppp of numeric-data, disppp of numeric-data.
    call "assert-equals" using disppp-u of numeric-data, disppp-u of numeric-data.
    call "assert-equals" using bin of numeric-data, bin of numeric-data.
    call "assert-equals" using bin-u of numeric-data, bin-u of numeric-data.
    call "assert-equals" using cmp3 of numeric-data, cmp3 of numeric-data.
    call "assert-equals" using cmp3-u of numeric-data, cmp3-u of numeric-data.
    call "assert-equals" using cmp5 of numeric-data, cmp5 of numeric-data.
    call "assert-equals" using cmp5-u of numeric-data, cmp5-u of numeric-data.
    call "assert-equals" using cmp6 of numeric-data, cmp6 of numeric-data.
    call "assert-equals" using cmpx of numeric-data, cmpx of numeric-data.
    call "assert-equals" using cmpx-u of numeric-data, cmpx-u of numeric-data.
    call "assert-equals" using chr of numeric-data, chr of numeric-data.
    call "assert-equals" using chr-u of numeric-data, chr-u of numeric-data.
    call "assert-equals" using shrt of numeric-data, shrt of numeric-data.
    call "assert-equals" using shrt-u of numeric-data, shrt-u of numeric-data.
    call "assert-equals" using long of numeric-data, long of numeric-data.
    call "assert-equals" using long-u of numeric-data, long-u of numeric-data.
    call "assert-equals" using dble of numeric-data, dble of numeric-data.
    call "assert-equals" using dble-u of numeric-data, dble-u of numeric-data.
floating-data-test section.
    call "assert-equals" using dbl of floating-data, dbl of floating-data.
    call "assert-equals" using flt of floating-data, flt of floating-data.
alphanumeric-data-test section.
    call "assert-equals" using alpnum of alphanumeric-data, alpnum of alphanumeric-data.
    call "assert-equals" using alpha of alphanumeric-data, alpha of alphanumeric-data.
misc-test section.
    call "assert-equals" using " ", " ".
    call "assert-equals" using "abc9xyz", "abc9xyz".
    call "assert-equals" using 
       "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor.", 
       "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor.".
end program equals-test.
[/INST]{
  "id": "BR-001",
  "description": "The compare function is used to compare two optionally null values of any data type.",
  "condition": "compare(a, b)",
  "output": {
    "a equals b": "call \"assert-equals\" using a, b",
    "a does not equal b": "don't assert that a equals b"
  }
}[INST]       >>SOURCE FORMAT FREE
identification division.
program-id. notequals-test.
environment division.
configuration section.
repository. function all intrinsic.
data division.
working-storage section.
    copy "dd-fixtures" of "copybooks".
procedure division.
    perform numeric-data-test.
    perform floating-data-test.
    perform alphanumeric-data-test.
    perform misc-test.
    goback.
numeric-data-test section.
    call "assert-notequals" using disp of numeric-data-alt, disp of numeric-data.
    call "assert-notequals" using disp-u of numeric-data-alt, disp-u of numeric-data.
    call "assert-notequals" using dispp of numeric-data-alt, dispp of numeric-data.
    call "assert-notequals" using dispp-u of numeric-data-alt, dispp-u of numeric-data.
    call "assert-notequals" using disppp of numeric-data-alt, disppp of numeric-data.
    call "assert-notequals" using disppp-u of numeric-data-alt, disppp-u of numeric-data.
    call "assert-notequals" using bin of numeric-data-alt, bin of numeric-data.
    call "assert-notequals" using bin-u of numeric-data-alt, bin-u of numeric-data.
    call "assert-notequals" using cmp3 of numeric-data-alt, cmp3 of numeric-data.
    call "assert-notequals" using cmp3-u of numeric-data-alt, cmp3-u of numeric-data.
    call "assert-notequals" using cmp5 of numeric-data-alt, cmp5 of numeric-data.
    call "assert-notequals" using cmp5-u of numeric-data-alt, cmp5-u of numeric-data.
    call "assert-notequals" using cmp6 of numeric-data-alt, cmp6 of numeric-data.
    call "assert-notequals" using cmpx of numeric-data-alt, cmpx of numeric-data.
    call "assert-notequals" using cmpx-u of numeric-data-alt, cmpx-u of numeric-data.
    call "assert-notequals" using chr of numeric-data-alt, chr of numeric-data.
    call "assert-notequals" using chr-u of numeric-data-alt, chr-u of numeric-data.
    call "assert-notequals" using shrt of numeric-data-alt, shrt of numeric-data.
    call "assert-notequals" using shrt-u of numeric-data-alt, shrt-u of numeric-data.
    call "assert-notequals" using long of numeric-data-alt, long of numeric-data.
    call "assert-notequals" using long-u of numeric-data-alt, long-u of numeric-data.
    call "assert-notequals" using dble of numeric-data-alt, dble of numeric-data.
    call "assert-notequals" using dble-u of numeric-data-alt, dble-u of numeric-data.
floating-data-test section.
    call "assert-notequals" using dbl of floating-data-alt, dbl of floating-data.
    call "assert-notequals" using flt of floating-data-alt, flt of floating-data.
alphanumeric-data-test section.
    call "assert-notequals" using alpnum of alphanumeric-data-alt, alpnum of alphanumeric-data.
    call "assert-notequals" using alpha of alphanumeric-data-alt, alpha of alphanumeric-data.
    call "assert-notequals" using edit-num1 of alphanumeric-data-alt, edit-num1 of alphanumeric-data.
    call "assert-notequals" using edit-num2 of alphanumeric-data-alt, edit-num2 of alphanumeric-data.
    call "assert-notequals" using edit-num3 of alphanumeric-data-alt, edit-num3 of alphanumeric-data.
misc-test section.
    call "assert-notequals" using "abc9xyz", "abc8xyz".
    call "assert-notequals" using 
       "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor.", 
       "Lorem ipsum dolor sit amet, consectetuer adipiscing elitAenean commodo ligula eget dolor.".
end program notequals-test.
[/INST]{
  "id": "BR-001",
  "description": "Two numeric data items are not equal if their DISPLAY PICTURE of their string value leaves trailing spaces, with or without a trailing coma.",
  "condition": "disp = disp-alt",
  "output": {
    "not equal": "disp = disp-alt"
  }
},
{
  "id": "BR-002",
  "description": "Two numeric data items are not equal if their DISPLAY PICTURE of their string value leaves trailing spaces, with or without a trailing coma, and if high-order zeros are suppressed.",
  "condition": "disp-u = disp-u-alt",
  "output": {
    "not equal": "disp-u = disp-u-alt"
  }
},
{
  "id": "BR-003",
  "description": "Two numeric data items are not equal if their DISPLAY PICTURE of their string value leaves trailing spaces, with or without a trailing coma, and if zero suppression is applied to all numeric digits.",
  "condition": "dispp = dispp-alt",
  "output": {
    "not equal": "dispp = dispp-alt"
  }
},
{
  "id": "BR-004",
  "description": "Two numeric data items are not equal if their DISPLAY PICTURE of their string value leaves trailing spaces, with or without a trailing coma, and if zero suppression is applied to all numeric digits and high-order zeros are suppressed.",
  "condition": "dispp-u = dispp-u-alt",
  "output": {
    "not equal": "dispp-u = dispp-u-alt"
  }
},
{
  "id": "BR-005",
  "description": "Two numeric data items are not equal if their DISPLAY PICTURE of their string value leaves trailing spaces, with or without a trailing coma, and if zero suppression is applied to more than one numeric digit.",
  "condition": "disppp = disppp-alt",
  "output": {
    "not equal": "disppp = disppp-alt"
  }
},
{
  "id": "BR-006",
  "description": "Two numeric data items are not equal if their DISPLAY PICTURE of their string value leaves trailing spaces, with or without a trailing coma, and if zero suppression is applied to more than one numeric digit and high-order zeros are suppressed.",
  "condition": "disppp-u = disppp-u-alt",
  "output": {
    "not equal": "disppp-u = disppp-u-alt"
  }
},
{
  "id": "BR-007",
  "description": "Two numeric data items are not equal if their BINARY PICTURE of their string value are different.",
  "condition": "bin = bin-alt",
  "output": {
    "not equal": "bin = bin-alt"
  }
},
{
  "id": "BR-008",
  "description": "Two numeric data items are not equal if their BINARY PICTURE of their string value are different and high-order zeros are suppressed.",
  "condition": "bin-u = bin-u-alt",
  "output": {
    "not equal": "bin-u = bin-u-alt"
  }
},
{
  "id": "BR-009",
  "description": "Two numeric data items are not equal if their COMPUTATIONAL-3 PICTURE of their string value are different.",
  "condition": "cmp3 = cmp3-alt",
  "output": {
    "not equal": "cmp3 = cmp3-alt"
  }
},
{
  "id": "BR-010",
  "description": "Two numeric data items are not equal if their COMPUTATIONAL-3 PICTURE of their string value are different and high-order zeros are suppressed.",
  "condition": "cmp3-u = cmp3-u-alt",
  "output": {
    "not equal": "cmp3-u = cmp3-u-alt"
  }
},
{
  "id": "BR-011",
  "description": "Two numeric data items are not equal if their COMPUTATIONAL-5 PICTURE of their string value are different.",
  "condition": "cmp5 = cmp5-alt",
  "output": {
    "not equal": "cmp5 = cmp5-alt"
  }
},
{
  "id": "BR-012",
  "description": "Two numeric data items are not equal if their COMPUTATIONAL-5 PICTURE of their string value are different and high-order zeros are suppressed.",
  "condition": "cmp5-u = cmp5-u-alt",
  "output": {
    "not equal": "cmp5-u = cmp5-u-alt"
  }
},
{
  "id": "BR-013",
  "description": "Two numeric data items are not equal if their COMPUTATIONAL-6 PICTURE of their string value are different.",
  "condition": "cmp6 = cmp6-alt",
  "output": {
    "not equal": "cmp6 = cmp6-alt"
  }
},
{
  "id": "BR-014",
  "description": "Two numeric data items are not equal if their COMPUTATIONAL-X PICTURE of their string value are different.",
  "condition": "cmpx = cmpx-alt",
  "output": {
    "not equal": "cmpx = cmpx-alt"
  }
},
{
  "id": "BR-015",
  "description": "Two numeric data items are not equal if their COMPUTATIONAL-X PICTURE of their string value are different and high-order zeros are suppressed.",
  "condition": "cmpx-u = cmpx-u-alt",
  "output": {
    "not equal": "cmpx-u = cmpx-u-alt"
  }
},
{
  "id": "BR-016",
  "description": "Two numeric data items are not equal if their PICTURE of their string value are different.",
  "condition": "chr = chr-alt",
  "output": {
    "not equal": "chr = chr-alt"
  }
},
{
  "id": "BR-017",
  "description": "Two numeric data items are not equal if their PICTURE of their string value are different and high-order zeros are suppressed.",
  "condition": "chr-u = chr-u-alt",
  "output": {
    "not equal": "chr-u = chr-u-alt"
  }
},
{
  "id": "BR-018",
  "description": "Two numeric data items are not equal if their PICTURE of their string value are different.",
  "condition": "shrt = shrt-alt",
  "output": {
    "not equal": "shrt = shrt-alt"
  }
},
{
  "id": "BR-019",
  "description": "Two numeric data items are not equal if their PICTURE of their string value are different and high-order zeros are suppressed.",
  "condition": "shrt-u = shrt-u-alt",
  "output": {
    "not equal": "shrt-u = shrt-u-alt"
  }
},
{
  "id": "BR-020",
  "description": "Two numeric data items are not equal if their PICTURE of their string value are different.",
  "condition": "long = long-alt",
  "output": {
    "not equal": "long = long-alt"
  }
},
{
  "id": "BR-021",
  "description": "Two numeric data items are not equal if their PICTURE of their string value are different and high-order zeros are suppressed.",
  "condition": "long-u = long-u-alt",
  "output": {
    "not equal": "long-u = long-u-alt"
  }
},
{
  "id": "BR-022",
  "description": "Two numeric data items are not equal if their PICTURE of their string value are different.",
  "condition": "dble = dble-alt",
  "output": {
    "not equal": "dble = dble-alt"
  }
},
{
  "id": "BR-023",
  "description": "Two numeric data items are not equal if their PICTURE of their string value are different and high-order zeros are suppressed.",
  "condition": "dble-u = dble-u-alt",
  "output": {
    "not equal": "dble-u = dble-u-alt"
  }
},
{
  "id": "BR-024",
  "description": "Two floating point data items are not equal if their DISPLAY PICTURE of their string value are different.",
  "condition": "dbl = dbl-alt",
  "output": {
    "not equal": "dbl = dbl-alt"
  }
},
{
  "id": "BR-025",
  "description": "Two floating point data items are not equal if their DISPLAY PICTURE of their string value are different.",
  "condition": "flt = flt-alt",
  "output": {
    "not equal": "flt = flt-alt"
  }
},
{
  "id": "BR-026",
  "description": "Two alphanumeric data items are not equal if their DISPLAY PICTURE of their string value are different.",
  "condition": "alpnum = alpnum-alt",
  "output": {
    "not equal": "alpnum = alpnum-alt"
  }
},
{
  "id": "BR-027",
  "description": "Two alphanumeric data items are not equal if their DISPLAY PICTURE of their string value are different.",
  "condition": "alpha = alpha-alt",
  "output": {
    "not equal": "alpha = alpha-alt"
  }
},
{
  "id": "BR-028",
  "description": "Two alphanumeric data items are not equal if their DISPLAY PICTURE of their string value are different.",
  "condition": "edit-num1 = edit-num1-alt",
  "output": {
    "not equal": "edit-num1 = edit-num1-alt"
  }
},
{
  "id": "BR-029",
  "description": "Two alphanumeric data items are not equal if their DISPLAY PICTURE of their string value are different.",
  "condition": "edit-num2 = edit-num2-alt",
  "output": {
    "not equal": "edit-num2 = edit-num2-alt"
  }
},
{
  "id": "BR-030",
  "description": "Two alphanumeric data items are not equal if their DISPLAY PICTURE of their string value are different.",
  "condition": "edit-num3 = edit-num3-alt",
  "output": {
    "not equal": "edit-num3 = edit-num3-alt"
  }
},
{
  "id": "BR-031",
  "description": "The text 'abc9xyz' is not equal to the text 'abc8xyz'.",
  "condition": '"abc9xyz" = "abc8xyz"',
  "output": {
    "not equal": "abc9xyz = abc8xyz"
  }
},
{
  "id": "BR-032",
  "description": "The text 'Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor.' is not equal to the text 'Lorem ipsum dolor sit amet, consectetuer adipiscing elitAenean commodo ligula eget dolor.'.",
  "condition": '"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor." = "Lorem ipsum dolor sit amet, consectetuer adipiscing elitAenean commodo ligula eget dolor."',
  "output": {
    "not equal": "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. = Lorem ipsum dolor sit amet, consectetuer adipiscing elitAenean commodo ligula eget dolor."
  }
}[INST]       >>SOURCE FORMAT FREE
identification division.
program-id. banking-test.
environment division.
configuration section.
repository.
    function iban-checksum.
data division.
working-storage section.
procedure division.
    call "assert-equals" using "1", iban-checksum("BE71096123456769").
    call "assert-equals" using "1", iban-checksum("FR7630006000011234567890189").
    call "assert-equals" using "1", iban-checksum("DE91100000000123456789").
    call "assert-equals" using "1", iban-checksum("GR9608100010000001234567890").
    call "assert-equals" using "1", iban-checksum("RO09 BCYP 0000 0012 3456 7890").
    call "assert-equals" using "1", iban-checksum("ES79 2100 0813 6101 2345 6789").
    call "assert-equals" using "1", iban-checksum("CH56 0483 5012 3456 7800 9").
    call "assert-equals" using "1", iban-checksum("GB98 MIDL 0700 9312 3456 78").
end program banking-test.
copy "src/banking.cbl".
[/INST]{
  "id": "BR-001",
  "description": "The IBAN IBAN has a valid checksum if the given function returns 1.",
  "condition": "iban-checksum(IBAN) = 1",
  "output": {
    "valid": "The IBAN has a valid checkusm."
  }
}[INST]       >>SOURCE FORMAT FREE
identification division.
function-id. iban-checksum.
environment division.
configuration section.
repository. function all intrinsic.
data division.
working-storage section.
    01 filler value 
       "AD24" &
       "AE23" &
       "AL28" &
       "AT20" &
       "AZ28" &
       "BA20" &
       "BE16" &
       "BG22" &
       "BH22" &
       "BR29" &
       "CH21" &
       "CR21" &
       "CY28" &
       "CZ24" &
       "DE22" &
       "DK18" &
       "DO28" &
       "EE20" &
       "ES24" &
       "FI18" &
       "FO18" &
       "FR27" &
       "GB22" &
       "GE22" &
       "GI23" &
       "GL18" &
       "GR27" &
       "GT28" &
       "HR21" &
       "HU28" &
       "IE22" &
       "IL23" &
       "IS26" &
       "IT27" &
       "KW30" &
       "KZ20" &
       "LB28" &
       "LI21" &
       "LT20" &
       "LU20" &
       "LV21" &
       "MC27" &
       "MD24" &
       "ME22" &
       "MK19" &
       "MR27" &
       "MT31" &
       "MU30" &
       "NL18" &
       "NO15" &
       "PK24" &
       "PL28" &
       "PS29" &
       "PT25" &
       "RO24" &
       "RS22" &
       "SA24" &
       "SE24" &
       "SI19" &
       "SK24" &
       "SM27" &
       "TN24" &
       "TR26" &
       "VG24".
       05 country-lengths occurs 64 times indexed by country-lengths-idx.
           10 country-code pic x(2).
           10 country-length pic 9(2).
    01 ws-idx pic 9(2).
    01 ws-iban-numeric pic x(64) value SPACES.
    01 ws-digit-idx pic 9(2) value 1.
    01 ws-letter-digits pic 9(2).
    01 ws-iban pic x(64) value SPACES.
linkage section.
    01 l-iban pic x any length.
    01 l-checksum pic 9 value 0.
procedure division using l-iban returning l-checksum.
    initialize ws-iban-numeric, ws-digit-idx, l-checksum, ws-iban all to value.
    set country-lengths-idx to 1.
    search country-lengths at end goback
        when country-code(country-lengths-idx) equals l-iban(1:2)
           if country-length(country-lengths-idx) not equals length(l-iban)
               goback
           end-if
    end-search.
    move l-iban(5:) to ws-iban.
    move l-iban(1:4) to ws-iban(length(l-iban) - 3:).
    perform varying ws-idx from 1 by 1 until ws-idx > length(l-iban)
        if ws-iban(ws-idx:1) is numeric
            move ws-iban(ws-idx:1) to ws-iban-numeric(ws-digit-idx:1)
            add 1 to ws-digit-idx
        else
            compute ws-letter-digits = ord(ws-iban(ws-idx:1)) - ord("A") + 10
            move ws-letter-digits to ws-iban-numeric(ws-digit-idx:2)
            add 2 to ws-digit-idx
        end-if
    end-perform.
    move mod(numval(ws-iban-numeric), 97) to l-checksum.
end function iban-checksum.
[/INST]{
  "id": "BR-001",
  "description": "For a given IBAN input with a specific format and length, the checksum is computed and returned.",
  "condition": "The input string has a valid IBAN format and length defined in the program that adheres to a specific country code.",
  "output": {
    "valid": "The checksum has been computed and returned"
  }
}[INST]       >>SOURCE FORMAT FREE
identification division.
program-id. microservice.
environment division.
configuration section.
repository. 
    function csv-ecb-rates
    function all intrinsic.
input-output section.
file-control.
    select file-csv assign to "resources/eurofxref.csv" 
    organization is sequential
    file status is file-status.
data division.
file section.
fd file-csv.
    01 csv-content pic x(1024).
working-storage section.
    78 SYSLOG-FACILITY-USER value 8.
    78 SYSLOG-SEVERITY-ERRROR value 3.
    01 file-status pic x(2).
        88 file-exists value "00".
    01 dataset external.
        05 dataset-ptr usage pointer.
procedure division. 
    open input file-csv.
    if not file-exists
        display "Error reading file" upon syserr
        stop run
    end-if. 
    perform until exit
        read file-csv at end exit perform end-read
    end-perform.
    close file-csv.
    move csv-ecb-rates(csv-content) to dataset.
    call "receive-tcp" using "localhost", 8000, 0, address of entry "http-handler".
end program microservice.
identification division.
program-id. http-handler.
environment division.
configuration section.
repository. function all intrinsic.
data division.
working-storage section.
    78 CRLF value x"0D" & x"0A".
    78 HTTP-OK value "200 OK".
    78 HTTP-NOT-FOUND value "404 Not Found".
    01 dataset external.
        05 dataset-ptr usage pointer.
    01 exchange-rates based.
        05 filer occurs 64 times indexed by idx.
            10 rate-currency pic x(3).
            10 rate-value pic 9(7)V9(8).
    01 request-method pic x(3).
        88 http-get value "GET".
    01 request-path.
        05 filler pic x value "/".
        05 get-currency pic x(3).
        05 filler pic x value "/".
        05 get-amount pic x(32).
    01 response.
        05 response-header.
            10 filler pic x(9) value "HTTP/1.1" & SPACE.
            10 response-status pic x(13).
            10 filler pic x(2) value CRLF.
            10 filler pic x(32) value "Content-Type: application/json" & CRLF.
            10 filler pic x(16) value "Content-Length: ".
            10 response-content-length pic 9(2).
            10 filler pic x(2) value CRLF.
            10 filler pic x(2) value CRLF.
        05 response-content.
            10 filler pic x(11) value '{"amount": '.
            10 eur-amount pic z(14)9.9(16).
            10 filler pic x(1) value '}'.
linkage section.
    01 l-buffer pic x any length.
    01 l-length usage binary-int unsigned.
procedure division using l-buffer, l-length returning omitted.
    set address of exchange-rates to dataset-ptr.
    unstring l-buffer(1:l-length) delimited by all SPACES into 
       request-method, request-path.
    if not http-get
        perform response-NOK
    end-if.
    perform varying idx from 1 by 1 until idx > 64
        if rate-currency(idx) = get-currency
            compute eur-amount = numval(get-amount) / rate-value(idx) 
                on size error perform response-NOK
            end-compute
           perform response-OK
        end-if
    end-perform.
    perform response-NOK.
response-OK section.
    move HTTP-OK to response-status.
    move byte-length(response-content) to response-content-length.
    perform response-any.
response-NOK section.
    move HTTP-NOT-FOUND to response-status.
    move 0 to response-content-length.
    perform response-any.
response-any section.
    string response delimited by size into l-buffer.
    compute l-length = byte-length(response-header) + response-content-length.
    goback.
end program http-handler.
copy "modules/modules.cpy".
[/INST]{
  "id": "BR-002",
  "description": "The Microservice recieves TCP requests containing the currency and amount and sends back the converted amount in EUR.",
  "condition": "The request method is GET",
  "output": {
    "successful": {
      "header": "HTTP/1.1 200 OK\\nContent-Type: application/json\\nContent-Length: [LENGTH]\\n\\n",
      "body": '{"amount": [AMOUNT]}'
    },
    "not found": {
      "header": "HTTP/1.1 404 Not Found\\nContent-Type: application/json\\nContent-Length: 0\\n\\n",
      "body": ""
    },
    "syntax error": {
      "header": "",
      "body": ""
    }
  }
}[INST]       IDENTIFICATION              DIVISION.
       PROGRAM-ID.                 FETCHTBL.
       AUTHOR.                     TSH.
       DATE-WRITTEN.               2013-06-28.
       DATA                        DIVISION.
       WORKING-STORAGE             SECTION.
       01  D-EMP-REC.
           05  D-EMP-NO            PIC  9(04).
           05  FILLER              PIC  X.
           05  D-EMP-NAME          PIC  X(20).
           05  FILLER              PIC  X.
           05  D-EMP-SALARY        PIC  --,--9.
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  DBNAME                  PIC  X(30) VALUE SPACE.
       01  USERNAME                PIC  X(30) VALUE SPACE.
       01  PASSWD                  PIC  X(10) VALUE SPACE.
       01  EMP-REC-VARS.
           05  EMP-NO              PIC S9(04).
           05  EMP-NAME            PIC  X(20) .
           05  EMP-SALARY          PIC S9(04).
       01  EMP-CNT                 PIC  9(04).
       EXEC SQL END DECLARE SECTION END-EXEC.
       EXEC SQL INCLUDE SQLCA END-EXEC.
       PROCEDURE                   DIVISION.
       MAIN-RTN.
           DISPLAY "*** FETCHTBL STARTED ***".
           MOVE  "testdb@db"       TO   DBNAME.
           MOVE  "postgres"        TO   USERNAME.
           MOVE  SPACE             TO   PASSWD.
           EXEC SQL
               CONNECT :USERNAME IDENTIFIED BY :PASSWD USING :DBNAME 
           END-EXEC.
           IF  SQLCODE NOT = ZERO PERFORM ERROR-RTN STOP RUN.
           EXEC SQL 
               SELECT COUNT(*) INTO :EMP-CNT FROM EMP
           END-EXEC.
           DISPLAY "TOTAL RECORD: " EMP-CNT.
           EXEC SQL 
               DECLARE C1 CURSOR FOR
               SELECT EMP_NO, EMP_NAME, EMP_SALARY 
                      FROM EMP
                      ORDER BY EMP_NO
           END-EXEC.
           EXEC SQL
               OPEN C1
           END-EXEC.
           DISPLAY "---- -------------------- ------".
           DISPLAY "NO   NAME                 SALARY".
           DISPLAY "---- -------------------- ------".
           EXEC SQL 
               FETCH C1 INTO :EMP-NO, :EMP-NAME, :EMP-SALARY
           END-EXEC.
           PERFORM UNTIL SQLCODE NOT = ZERO
              MOVE  EMP-NO        TO    D-EMP-NO
              MOVE  EMP-NAME      TO    D-EMP-NAME
              MOVE  EMP-SALARY    TO    D-EMP-SALARY
              DISPLAY D-EMP-REC
              EXEC SQL 
                  FETCH C1 INTO :EMP-NO, :EMP-NAME, :EMP-SALARY
              END-EXEC
           END-PERFORM.
           EXEC SQL 
               CLOSE C1 
           END-EXEC. 
           EXEC SQL 
               COMMIT WORK
           END-EXEC.
           EXEC SQL
               DISCONNECT ALL
           END-EXEC.
           DISPLAY "*** FETCHTBL FINISHED ***".
           STOP RUN.
       ERROR-RTN.
           DISPLAY "*** SQL ERROR ***".
           DISPLAY "SQLCODE: " SQLCODE " " NO ADVANCING.
           EVALUATE SQLCODE
              WHEN  +10
                 DISPLAY "Record not found"
              WHEN  -01
                 DISPLAY "Connection falied"
              WHEN  -20
                 DISPLAY "Internal error"
              WHEN  -30
                 DISPLAY "PostgreSQL error"
                 DISPLAY "ERRCODE: "  SQLSTATE
                 DISPLAY SQLERRMC
                 EXEC SQL
                     ROLLBACK
                 END-EXEC
              WHEN  OTHER
                 DISPLAY "Undefined error"
                 DISPLAY "ERRCODE: "  SQLSTATE
                 DISPLAY SQLERRMC
           END-EVALUATE.
[/INST]{
  "id": "BR-002",
  "description": "The number of records in the EMP table is stored in the EMP-CNT variable.",
  "condition": null,
  "output": {
    "statement": "TOTAL RECORD: " EMP-CNT
  }
}[INST]       IDENTIFICATION              DIVISION.
       PROGRAM-ID.                 INSERTTBL.
       AUTHOR.                     TSH.
       DATE-WRITTEN.               2013-06-28.
       DATA                        DIVISION.
       WORKING-STORAGE             SECTION.
       01  TEST-DATA.
         03 FILLER       PIC X(28) VALUE "0001HOKKAI TARO         0400".
         03 FILLER       PIC X(28) VALUE "0002AOMORI JIRO         0350".
         03 FILLER       PIC X(28) VALUE "0003AKITA SABURO        0300".
         03 FILLER       PIC X(28) VALUE "0004IWATE SHIRO         025p".
         03 FILLER       PIC X(28) VALUE "0005MIYAGI GORO         020p".
         03 FILLER       PIC X(28) VALUE "0006FUKUSHIMA RIKURO    0150".
         03 FILLER       PIC X(28) VALUE "0007TOCHIGI SHICHIRO    010p".
         03 FILLER       PIC X(28) VALUE "0008IBARAKI HACHIRO     0050".
         03 FILLER       PIC X(28) VALUE "0009GUMMA KURO          020p".
         03 FILLER       PIC X(28) VALUE "0010SAITAMA JURO        0350".
       01  TEST-DATA-R   REDEFINES TEST-DATA.
         03  TEST-TBL    OCCURS  10.
           05  TEST-NO             PIC S9(04).
           05  TEST-NAME           PIC  X(20) .
           05  TEST-SALARY         PIC S9(04).
       01  IDX                     PIC  9(02).
       01  SYS-TIME                PIC  9(08).
       EXEC SQL BEGIN DECLARE SECTION END-EXEC.
       01  DBNAME                  PIC  X(30) VALUE SPACE.
       01  USERNAME                PIC  X(30) VALUE SPACE.
       01  PASSWD                  PIC  X(10) VALUE SPACE.
       01  EMP-REC-VARS.
         03  EMP-NO                PIC S9(04) VALUE ZERO.
         03  EMP-NAME              PIC  X(20) .
         03  EMP-SALARY            PIC S9(04) VALUE ZERO.
       EXEC SQL END DECLARE SECTION END-EXEC.
       EXEC SQL INCLUDE SQLCA END-EXEC.
       PROCEDURE                   DIVISION.
       MAIN-RTN.
           DISPLAY "*** INSERTTBL STARTED ***".
           MOVE  "testdb@db"       TO   DBNAME.
           MOVE  "postgres"        TO   USERNAME.
           MOVE  SPACE             TO   PASSWD.
           EXEC SQL
               CONNECT :USERNAME IDENTIFIED BY :PASSWD USING :DBNAME 
           END-EXEC.
           IF  SQLCODE NOT = ZERO PERFORM ERROR-RTN STOP RUN.
           EXEC SQL
               DROP TABLE IF EXISTS EMP
           END-EXEC.
           IF  SQLCODE NOT = ZERO PERFORM ERROR-RTN.
           EXEC SQL
                CREATE TABLE EMP
                (
                    EMP_NO     NUMERIC(4,0) NOT NULL,
                    EMP_NAME   CHAR(20),
                    EMP_SALARY NUMERIC(4,0),
                    CONSTRAINT IEMP_0 PRIMARY KEY (EMP_NO)
                )
           END-EXEC.
           IF  SQLCODE NOT = ZERO PERFORM ERROR-RTN STOP RUN.
           EXEC SQL
               INSERT INTO EMP VALUES (46, 'KAGOSHIMA ROKURO', -320)
           END-EXEC.
           IF  SQLCODE NOT = ZERO PERFORM ERROR-RTN.
           EXEC SQL
               INSERT INTO EMP VALUES (47, 'OKINAWA SHICHIRO', 480)
           END-EXEC.
           IF  SQLCODE NOT = ZERO PERFORM ERROR-RTN.
           PERFORM VARYING IDX FROM 1 BY 1 UNTIL IDX > 10
              MOVE TEST-NO(IDX)     TO  EMP-NO
              MOVE TEST-NAME(IDX)   TO  EMP-NAME
              MOVE TEST-SALARY(IDX) TO  EMP-SALARY
              EXEC SQL
                 INSERT INTO EMP VALUES
                        (:EMP-NO,:EMP-NAME,:EMP-SALARY)
              END-EXEC
              IF  SQLCODE NOT = ZERO 
                  PERFORM ERROR-RTN
                  EXIT PERFORM
              END-IF
           END-PERFORM.
           EXEC SQL COMMIT WORK END-EXEC.
           EXEC SQL
               DISCONNECT ALL
           END-EXEC.
           DISPLAY "*** INSERTTBL FINISHED ***".
           STOP RUN.
       ERROR-RTN.
           DISPLAY "*** SQL ERROR ***".
           DISPLAY "SQLCODE: " SQLCODE " " NO ADVANCING.
           EVALUATE SQLCODE
              WHEN  +10
                 DISPLAY "Record not found"
              WHEN  -01
                 DISPLAY "Connection falied"
              WHEN  -20
                 DISPLAY "Internal error"
              WHEN  -30
                 DISPLAY "PostgreSQL error"
                 DISPLAY "ERRCODE: "  SQLSTATE
                 DISPLAY SQLERRMC
                 EXEC SQL
                     ROLLBACK
                 END-EXEC
              WHEN  OTHER
                 DISPLAY "Undefined error"
                 DISPLAY "ERRCODE: "  SQLSTATE
                 DISPLAY SQLERRMC
           END-EVALUATE.
[/INST]{
  "id": "BR-001",
  "description": "All employee numbers specified in the TEST-DATA must have a unique EMP_NO value in the EMP table",
  "condition": "EMP_NO",
  "output": {
    "insert": ":EMP-NO",
    "constraint": "IEMP_0 PRIMARY KEY (EMP_NO)"
  }
}[INST]       01  SQLCA GLOBAL.
           05  SQLCAID               PIC X(8).
           05  SQLCABC               PIC S9(9) COMP-5.
           05  SQLCODE               PIC S9(9) COMP-5.
           05  SQLERRM.
           49  SQLERRML              PIC S9(4) COMP-5.
           49  SQLERRMC              PIC X(70).
           05  SQLERRP               PIC X(8).                          *> not used
           05  SQLERRD OCCURS 6 TIMES                                   *> used only ERRD(3)
                                     PIC S9(9) COMP-5.
           05  SQLWARN.                                                 *> not used
               10 SQLWARN0           PIC X(1).
               10 SQLWARN1           PIC X(1).
               10 SQLWARN2           PIC X(1).
               10 SQLWARN3           PIC X(1).
               10 SQLWARN4           PIC X(1).
               10 SQLWARN5           PIC X(1).
               10 SQLWARN6           PIC X(1).
               10 SQLWARN7           PIC X(1).
           05  SQLSTATE              PIC X(5).
[/INST]{
  "id": "BR-001",  "description": "A SQL statement error occurs if the SQLCODE is not 0.",
  "condition": "SQLCODE != 0",
  "output": {
    "error": "A SQL statement error occurs"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. genrand.
       AUTHOR. Owain Kenway.
       DATA DIVISION.
           WORKING-STORAGE SECTION.
           01 samples USAGE IS BINARY-LONG UNSIGNED VALUE 10000000.
           01 r       USAGE IS FLOAT-LONG.
       PROCEDURE DIVISION.
           DISPLAY "r" 
           PERFORM samples TIMES
               CALL "genrand_" USING r END-CALL
               DISPLAY r 
           END-PERFORM
           MOVE 0 TO RETURN-CODE
           GOBACK. 
[/INST]{
  "id": "BR-001",
  "description": "You must generate 1,000,000 pseudo random numbers between 0 and 1.",
  "condition": "TRUE",
  "output": "An array of 1,000,000 random numbers between 0 and 1."
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. genrand.
       AUTHOR. Owain Kenway.
       DATA DIVISION.
           WORKING-STORAGE SECTION.
           01 samples USAGE IS BINARY-LONG UNSIGNED VALUE 10000000.
           01 r       USAGE IS FLOAT-LONG.
       PROCEDURE DIVISION.
           DISPLAY "r"
           PERFORM samples TIMES
               COMPUTE r = FUNCTION RANDOM
               DISPLAY r
           END-PERFORM
           GOBACK. 
[/INST]{
  "id": "BR-001",
  "description": "The program generates \\n10,000,000 random numbers",
  "condition": "samples = 10000000",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. FACTORIAL.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
         77 fact pic 9(15) comp.
         77 n pic 99.
         77 i pic 99.
         77 ist pic XX.
         77 factst pic X(18).
       PROCEDURE DIVISION.
         move 16 to n
         move 0 to i
         move 1 to fact
         perform until i greater than n
           move i to ist
           move fact to factst
           display ist "! = " factst
           add 1 to i
           multiply i by fact
             on size error display "value too big"
           end-multiply
         end-perform.
         stop run.[/INST]{
  "id": "BR-001",
  "description": "The factorial of a positive integer n is the product of all positive integers less than or equal to n. It is denoted by n! ",
  "condition": "n <= 16",
  "output": {
    "fact": "n! = fact"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. FIB.
       DATA DIVISION.
       FILE SECTION.
       WORKING-STORAGE SECTION.
       01  N0             BINARY-C-LONG VALUE 0.
       01  N1             BINARY-C-LONG VALUE 1.
       01  SWAP           BINARY-C-LONG VALUE 1.
       01  RESULT         PIC Z(20)9.
       01  I              BINARY-C-LONG VALUE 0.
       PROCEDURE DIVISION.
       MOVE N0 TO RESULT.
       DISPLAY RESULT.
       MOVE N1 TO RESULT.
       DISPLAY RESULT.
       PERFORM VARYING I FROM 1 BY 1 UNTIL I = 15
               ADD N0 TO N1 GIVING SWAP
               MOVE N1 TO N0
               MOVE SWAP TO N1
               MOVE SWAP TO RESULT
               DISPLAY RESULT
       END-PERFORM.
       DISPLAY "THE PROGRAM HAS COMPLETED AND WILL NOW END".
       END PROGRAM FIB.
       GOBACK.[/INST]{
  "id": "BR-002",
  "description": "The nth term of the fibonacci series is the sum of the (n-1)th and (n-2)th terms.",
  "condition": null,
  "output": {
    "fibonacci": "Fibonacci series jusqu'au terme n"
  }
}[INST]       identification division.
       program-id. mandelbrotset.
       data division.
       working-storage section.
       01 resolutionx          constant 240.
       01 resolutiony          constant 100.
       01 realplanemin         constant -2.5.
       01 realplanemax         constant 0.8.
       01 imaginaryplanemin    constant -1.25.
       01 imaginaryplanemax    constant 1.25.
       01 proportionalx        pic s99v9(16) usage comp-5 value zeros.
       01 proportionaly        pic s99v9(16) usage comp-5 value zeros.
       01 iterationsmax        constant 60.
       01 threshold            constant 10000.
       01 screenx              pic 999 usage comp-5.
       01 screeny              pic 999 usage comp-5.
       01 mathplanex           pic s99v9(16) usage comp-5.
       01 mathplaney           pic s99v9(16) usage comp-5.
       01 pointx               pic s9(7)v9(8) usage comp-5.
       01 pointy               pic s9(7)v9(8) usage comp-5.
       01 xsquared             pic s9(10)v9(8) usage comp-5.
       01 ysquared             pic s9(10)v9(8) usage comp-5.
       01 iteration            pic 999 value zero.
       01 tempvar              pic s9(5)v9(8) usage comp-5.
       procedure division.
       compute proportionalx = (realplanemax - realplanemin) /
           (resolutionx - 1)
       compute proportionaly = (imaginaryplanemax - imaginaryplanemin) /
           (resolutiony - 1)
       perform varying screeny from 0 by 1 until screeny is equal to
           resolutiony
           compute mathplaney = imaginaryplanemin +
               (proportionaly * screeny)
           perform varying screenx from 0 by 1 until screenx is equal to
               resolutionx
               compute mathplanex = realplanemin +
                   (proportionalx * screenx)
               move zero to pointx
               move zero to pointy
               multiply pointx by pointx giving xsquared
               multiply pointy by pointy giving ysquared
               perform with test after varying iteration from 0 by 1
                   until iteration >= iterationsmax or
                         xsquared + ysquared >= threshold
                     compute tempvar = xsquared - ysquared + mathplanex
                     compute pointy = 2 * pointx * pointy + mathplaney
                     move tempvar to pointx
                     compute xsquared = pointx * pointx
                     compute ysquared = pointy * pointy
               end-perform
               if iteration is equal to iterationsmax
                   display "*" with no advancing
               else
                   display " " with no advancing
               end-if
           end-perform
           display " "
       end-perform
       stop run.
       end program mandelbrotset.[/INST]{
  "id": "BR-001",
  "description": "The resolution on the x-axis of the screen is 240 pixels.",
  "condition": null,
  "output": {
    "value": 240
  }
},
{
  "id": "BR-002",
  "description": "The resolution on the y-axis of the screen is 100 pixels.",
  "condition": null,
  "output": {
    "value": 100
  }
},
{
  "id": "BR-003",
  "description": "The real plane minimum on the x-axis is -2.5.",
  "condition": null,
  "output": {
    "value": -2.5
  }
},
{
  "id": "BR-004",
  "description": "The real plane maximum on the x-axis is 0.8.",
  "condition": null,
  "output": {
    "value": 0.8
  }
},
{
  "id": "BR-005",
  "description": "The imaginary plane minimum on the y-axis is -1.25.",
  "condition": null,
  "output": {
    "value": -1.25
  }
},
{
  "id": "BR-006",
  "description": "The imaginary plane maximum on the y-axis is 1.25.",
  "condition": null,
  "output": {
    "value": 1.25
  }
},
{
  "id": "BR-007",
  "description": "The maximum number of iterations is 60.",
  "condition": null,
  "output": {
    "value": 60
  }
},
{
  "id": "BR-008",
  "description": "The threshold value is 10000.",
  "condition": null,
  "output": {
    "value": 10000
  }
}[INST]       identification division.
       program-id. sieveoferathosthenes.
       environment division.
       data division.
       working-storage section.
       77  prime                          pic 9(5) comp.
       77  prime-count                    pic 9(5) comp.
       77  i                              pic 9(4) comp.
       77  k                              pic 9(5) comp.
       01  bit-array.
            03 flag occurs 8191 times       pic 9 comp.
       procedure division.
       start-up.
            display "ten iterations".
            perform sieve through sieve-end.
            display "primes found: ", prime-count.
            stop run.
       sieve.
            move zero to prime-count.
            move 1 to i.
            perform init-bits 8191 times.
            move 1 to i.
            perform scan-for-primes through end-scan-for-primes
                 8191 times.
       sieve-end.
            exit.
       init-bits.
            move 1 to flag (i).
            add 1 to i.
       end-init-bits.
            exit.
       scan-for-primes.
            if flag (i) = 0
                 then
                      go to not-prime.
            add i i 1 giving prime.
            display prime
            add i prime giving k.
            perform strikout until k > 8191.
            add 1 to prime-count.
       not-prime.
            add 1 to i.
       end-scan-for-primes.
            exit.
       strikout.
            move 0 to flag (k).
            add prime to k.
       end-program.
            exit.[/INST]{
  "id": "BR-001",
  "description": "A number is prime if it is only divisible by 1 and itself.",
  "condition": null,
  "output": {
    "prime": "prime"
  }
}[INST]       IDENTIFICATION                                          DIVISION.
       PROGRAM-ID.         PONG0001.
       AUTHOR.             RODRIGO DORNELLES.
       INSTALLATION.       PSYWAVE GAMES.
       DATE-WRITTEN.       31/01/2021.
       DATE-COMPILED.      31/01/2021.
       ENVIRONMENT                                             DIVISION.
       CONFIGURATION                                            SECTION.
       REPOSITORY.
           FUNCTION ALL INTRINSIC.
       DATA                                                    DIVISION.
       WORKING-STORAGE                                          SECTION.
       01 R-CODE USAGE BINARY-LONG.
       01 R-KEY-UP             PIC 9.
       01 R-KEY-DOWN           PIC 9.
       01 R-KEY-ENTER          PIC 9.
       01 K-UP     PIC 9(8)    VALUE 265.
       01 K-DOWN   PIC 9(9)    VALUE 264.
       01 K-ESC    PIC 9(8)    VALUE 256.
       01 K-ENTER  PIC 9(8)    VALUE 257.
       78 K-PRESSED            VALUE 7.
       78 W-WIDTH              VALUE 800.
       78 W-HEIGHT             VALUE 450.
       78 W-NAME               VALUE "PONG COBOL GAME".
       78 W-GAMEOVER           VALUE "GAMEOVER! PRESS ENTER TO RESTART".
       01 W-FINISHED PIC 9     VALUE ZERO.
       01 C-WHITE.
           02 R    PIC S9(3)   VALUE 245 BINARY.
           02 G    PIC S9(3)   VALUE 245 BINARY.
           02 B    PIC S9(3)   VALUE 245 BINARY.
           02 A    PIC S9(3)   VALUE 255 BINARY.
       78 C-BLACK              VALUE 0.
       78 P-WIDTH              VALUE 16.
       78 P-HEIGHT             VALUE 80.
       78 P-POSX               VALUE 0.
       78 P-SPEED              VALUE 16.
       77 P-POSY               PIC 999V99.
       78 B-SIZE               VALUE 16.
       77 B-POSX               PIC 9(3)V9.
       77 B-POSY               PIC 9(3)V9.
       77 B-HSPEED             PIC S9(2)V9.
       77 B-VSPEED             PIC S9(2)V9.
       PROCEDURE                                               DIVISION.
       MAIN-PROCEDURE.
       PERFORM INIT-WINDOW.
       PERFORM GAME-INIT.
       PERFORM GAME-LOOP.
       PERFORM CLOSE-WINDOW.
       GOBACK.
       INIT-WINDOW                                              SECTION.
           CALL "InitWindow" USING
               BY VALUE W-WIDTH W-HEIGHT
               BY REFERENCE W-NAME RETURNING R-CODE
                   ON EXCEPTION
                   DISPLAY "exception error: raylib not found"
                   UPON SYSERR
                   END-DISPLAY
           END-CALL
           CALL "SetTargetFPS" USING BY VALUE 30
                   RETURNING OMITTED
           END-CALL.
       GAME-INIT                                                SECTION.
           MOVE 0 TO W-FINISHED
           MOVE -5.0 TO B-HSPEED
           MOVE 780 TO B-POSX
           MOVE 225 TO B-POSY
           PERFORM BALL-RANDOM.
       GAME-LOOP                                                SECTION.
           PERFORM UNTIL K-ESC = 1
               CALL "WindowShouldClose"
                   RETURNING K-ESC
               END-CALL
               IF R-KEY-ENTER = K-PRESSED THEN
                   PERFORM GAME-INIT
               END-IF
               PERFORM GAME-INPUT
               PERFORM PLAYER-MOVE
               PERFORM BALL-COLISION
               PERFORM BALL-MOVE
               PERFORM GAME-DRAW
           END-PERFORM.
       GAME-INPUT                                               SECTION.
           CALL "IsKeyDown" USING 
               BY VALUE K-UP
               RETURNING R-KEY-UP
           END-CALL
           CALL "IsKeyDown" USING 
               BY VALUE K-DOWN
               RETURNING R-KEY-DOWN
           END-CALL
           CALL "IsKeyDown" USING 
               BY VALUE K-ENTER
               RETURNING R-KEY-ENTER
           END-CALL.
       GAME-DRAW                                                SECTION.
           CALL STATIC "BeginDrawing"
               RETURNING OMITTED
           END-CALL 
           CALL "ClearBackground" USING BY VALUE C-BLACK
               RETURNING OMITTED
           END-CALL
           IF W-FINISHED <> 0 THEN
               CALL static "DrawText" USING
                   BY REFERENCE W-GAMEOVER
                   BY VALUE 32 200 32
                   BY CONTENT C-WHITE
               END-CALL
           ELSE
               PERFORM PLAYER-DRAW
               PERFORM BALL-DRAW
           END-IF
           CALL STATIC "EndDrawing"
               RETURNING OMITTED
           END-CALL.
       PLAYER-MOVE                                              SECTION.
           IF R-KEY-DOWN = K-PRESSED 
               AND SUM(P-POSY, P-HEIGHT, 1) < W-HEIGHT THEN 
                   ADD P-SPEED TO P-POSY
           ELSE
               IF R-KEY-UP = K-PRESSED AND P-POSY > 1 THEN
                   SUBTRACT P-SPEED FROM P-POSY
           END-IF. 
       PLAYER-DRAW                                              SECTION.
           CALL static "DrawRectangle" USING
               BY VALUE P-POSX P-POSY
               BY VALUE P-WIDTH P-HEIGHT
               BY CONTENT C-WHITE
           END-CALL.
       BALL-RANDOM                                              SECTION.
           PERFORM WITH TEST AFTER UNTIL ABS (B-VSPEED) > 4
               CALL "GetRandomValue" USING
                   BY VALUE -7
                   BY VALUE 7
                   RETURNING B-VSPEED
               END-CALL
           END-PERFORM.
       BALL-MOVE                                                SECTION.
           ADD B-HSPEED TO B-POSX 
           ADD B-VSPEED TO B-POSY.
       BALL-COLISION                                            SECTION.
           IF B-POSY <= B-SIZE/2
               OR B-POSY >= W-HEIGHT - B-SIZE/2 THEN 
               MULTIPLY -1 BY B-VSPEED
           END-IF
           IF B-POSX >= W-WIDTH - B-SIZE/2 THEN
               MULTIPLY -1 BY B-HSPEED
               PERFORM BALL-RANDOM 
           END-IF
           IF B-POSX <= P-WIDTH THEN
               IF B-POSY > P-POSY
                   AND B-POSY < P-POSY + P-HEIGHT THEN
                   MULTIPLY -1.2 BY B-HSPEED
                   PERFORM BALL-RANDOM 
               PERFORM BALL-RANDOM 
                   PERFORM BALL-RANDOM 
               ELSE
                   MOVE 1 TO W-FINISHED
               END-IF
           END-IF.
       BALL-DRAW                                                SECTION.
           CALL static "DrawRectangle" USING
               BY VALUE B-POSX B-POSY B-SIZE B-SIZE
               BY CONTENT C-WHITE
           END-CALL.
       CLOSE-WINDOW                                             SECTION.
           CALL "CloseWindow"
               RETURNING OMITTED
           END-CALL.
[/INST]{
  "id": "BR-001",
  "description": "The white rectangle (player 1) can only move vertically within the black rectangle (game window) and can not go outside of the window.",
  "condition": "the vertical position of player 1 (P-POSY) is greater or equal to 1 and less or equal to the height of the game window (W-HEIGHT)",
  "output": {
    "up": "subtract P-SPEED from P-POSY to move upwards",
    "down": "add P-SPEED to P-POSY to move downwards"
  }
}
{
  "id": "BR-002",
  "description": "The speed of the ball (B-HSPEED and B-VSPEED) can not be equal to zero.",
  "condition": "the absolute value of the vertical speed of the ball (ABS B-VSPEED) is greater than 4",
  "output": {
    "true": "randomize a new vertical speed for the ball between -7 and 7"
  }
}
{
  "id": "BR-003",
  "description": "The ball (white square) bounces off the top and bottom of the game window (black rectangle).",
  "condition": "the vertical position of the ball (B-POSY) is less than or equal to half the size of the ball (B-SIZE/2) or greater than or equal to the height of the game window minus half the size of the ball (W-HEIGHT - B-SIZE/2)",
  "output": {
    "true": "multiply -1 by the vertical speed of the ball (B-VSPEED)"
  }
}
{
  "id": "BR-004",
  "description": "The ball bounces off the right side of the game window (black rectangle).",
  "condition": "the horizontal position of the ball (B-POSX) is greater than or equal to the width of the game window minus half the size of the ball (W-WIDTH - B-SIZE/2)",
  "output": {
    "true": {
      "change 1": "multiply -1 by the horizontal speed of the ball (B-HSPEED)",
      "change 2": "randomize a new vertical speed for the ball between -7 and 7"
    }
  }
}
{
  "id": "BR-005",
  "description": "The ball bounces off the left side of the game window (black rectangle) and hits the player (white rectangle).",
  "condition": "the horizontal position of the ball (B-POSX) is less than or equal to the width of the player (P-WIDTH) AND the vertical position of the ball (B-POSY) is greater than or equal to the vertical position of the player (P-POSY) AND the vertical position of the ball is less than or equal to the vertical position of the player plus the height of the player (P-POSY + P-HEIGHT)",
  "output": {
    "true": {
      "change 1": "multiply -1.2 by the horizontal speed of the ball (B-HSPEED)",
      "change 2": "randomize a new vertical speed for the ball between -7 and 7"
    }
  }
}
{
  "id": "BR-006",
  "description": "If the ball (white square) goes past the player (white rectangle) without hitting it, the player loses and the game is over.",
  "condition": "the horizontal position of the ball (B-POSX) is less than or equal to the width of the player (P-WIDTH)",
  "output": {
    "true": {
      "check 1": "if the vertical position of the ball (B-POSY) is less than the vertical position of the player (P-POSY) or greater than the vertical position of the player plus the height of the player (P-POSY + P-HEIGHT)",
      "then 1": {
        "change 1": "randomize a new vertical speed for the ball between -7 and 7",
        "change 2": "randomize a new vertical speed for the ball between -7 and 7"
      },
      "else 1": {
        "change 1": "set W-FINISHED to 1 to indicate that the player has lost and the game is over"
      }
    }
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. asdf-format-uuid.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 ws-i                         PIC 99 COMP.
       01 ws-j                         PIC 99 COMP.
       01 ws-byte                      PIC 999 COMP.
       01 ws-nibble                    PIC 999 COMP.
       01 FILLER.
           02 ws-ord-0                 PIC 999 COMP VALUE 48.
           02 ws-ord-a                 PIC 999 COMP VALUE 97.
       LINKAGE SECTION.
       01 ls-in                        PIC X(16).
       01 ls-out                       PIC X(32).
       PROCEDURE DIVISION USING ls-in ls-out.
       para-main.
           MOVE 0 TO ws-j
           PERFORM para-byte VARYING ws-i FROM 1 BY 1 UNTIL ws-i > 16
           EXIT PROGRAM
           .
       para-byte.
           COMPUTE ws-byte = FUNCTION ORD(ls-in(ws-i : 1)) - 1
           PERFORM para-nibble-hi
           PERFORM para-nibble-lo
           .
       para-nibble-hi.
           ADD 1 TO ws-j
           DIVIDE 16 INTO ws-byte GIVING ws-nibble
           PERFORM para-nibble
           .
       para-nibble-lo.
           ADD 1 TO ws-j
           MOVE 15 TO ws-nibble
           CALL 'CBL_AND' USING ws-byte ws-nibble
               VALUE LENGTH OF ws-byte
           PERFORM para-nibble
           .
       para-nibble.
           EVALUATE ws-nibble
           WHEN  0 THRU  9
               ADD ws-ord-0 TO ws-nibble
           WHEN 10 THRU 15
               COMPUTE ws-nibble = ws-nibble - 10 + ws-ord-a
           END-EVALUATE
           MOVE FUNCTION CHAR(ws-nibble + 1) TO ls-out(ws-j : 1)
           .
[/INST]{
  "id": "BR-001",
  "description": "The function 'CBL_AND' calculates the bitwise AND of two binary numbers.",
  "condition": "ws-byte AND ws-nibble",
  "output": null
}
{
  "id": "BR-002",
  "description": "The function 'ORD' returns the numeric value of the first character in a string.",
  "condition": "ORD(ls-in(ws-i : 1))",
  "output": null
}
{
  "id": "BR-003",
  "description": "The function 'CHAR' converts a numeric value to a character.",
  "condition": "CHAR(ws-nibble + 1)",
  "output": null
}
{
  "id": "BR-004",
  "description": "The numeric value of a character in the range '0' to '9' is 48 plus the digit value.",
  "condition": "ws-nibble THRU 9",
  "output": {
    "numeric": "ws-ord-0 + ws-nibble"
  }
}
{
  "id": "BR-005",
  "description": "The numeric value of a character in the range 'A' to 'F' is 97 plus the digit value minus 10.",
  "condition": "ws-nibble THRU 15",
  "output": {
    "numeric": "ws-nibble - 10 + ws-ord-a"
  }
}
{
  "id": "BR-006",
  "description": "The loop iterates through the characters in the input string.",
  "condition": "PERFORM para-byte VARYING ws-i FROM 1 BY 1 UNTIL ws-i > 16",
  "output": null
}
{
  "id": "BR-007",
  "description": "The loop processes the high nibble of a byte.",
  "condition": "PERFORM para-nibble-hi",
  "output": null
}
{
  "id": "BR-008",
  "description": "The loop processes the low nibble of a byte.",
  "condition": "PERFORM para-nibble-lo",
  "output": null
}
{
  "id": "BR-009",
  "description": "The loop processes a nibble.",
  "condition": "PERFORM para-nibble",
  "output": null
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. asdf-generate-uuid.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
       SELECT fd-random
           ASSIGN TO '/dev/urandom'
           ACCESS IS SEQUENTIAL
           ORGANIZATION IS RECORD SEQUENTIAL.
       DATA DIVISION.
       FILE SECTION.
       FD fd-random.
       01 fs-uuid                      PIC X(16).
       WORKING-STORAGE SECTION.
       01 ws-uuid                      PIC X(16).
       LINKAGE SECTION.
       01 ls-uuid                      PIC X(16).
       PROCEDURE DIVISION USING ls-uuid.
           OPEN INPUT fd-random
           READ fd-random INTO ws-uuid
           CLOSE fd-random
           CALL 'CBL_AND' USING X'0F' ws-uuid(6:1) VALUE 1
           CALL 'CBL_OR'  USING X'40' ws-uuid(6:1) VALUE 1
           CALL 'CBL_AND' USING X'3F' ws-uuid(8:1) VALUE 1
           CALL 'CBL_OR'  USING X'80' ws-uuid(8:1) VALUE 1
           MOVE ws-uuid TO ls-uuid
           EXIT PROGRAM
           .
[/INST]{
  "id": "BR-001",
  "description": "A UUID MUST HAVE the character at position 6/7 EQUAL TO '4' and the character at position 8/13 EQUAL TO '3'.",
  "condition": "CHAR(ws-uuid(6:1)) = '4' AND CHAR(ws-uuid(8:1)) = '3'",
  "output": null
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. asdf-parse-uuid.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 ws-i                         PIC 99 COMP.
       01 ws-j                         PIC 99 COMP.
       01 ws-nibble                    PIC 999 COMP.
       01 ws-byte                      PIC 999 COMP.
       01 FILLER.
           02 ws-ord-0                 PIC 999 COMP VALUE 48.
           02 ws-ord-9                 PIC 999 COMP VALUE 57.
           02 ws-ord-a                 PIC 999 COMP VALUE 97.
           02 ws-ord-f                 PIC 999 COMP VALUE 102.
       LINKAGE SECTION.
       01 ls-in                        PIC X(32).
       01 ls-out                       PIC X(16).
       PROCEDURE DIVISION USING ls-in ls-out.
       para-main.
           MOVE 0 TO ws-j
           PERFORM para-byte VARYING ws-i FROM 1 BY 1 UNTIL ws-i > 16
           EXIT PROGRAM
           .
       para-byte.
           PERFORM para-nibble-hi
           PERFORM para-nibble-lo
           MOVE FUNCTION CHAR(ws-byte + 1) TO ls-out(ws-i : 1)
           .
       para-nibble-hi.
           ADD 1 TO ws-j
           PERFORM para-nibble
           MULTIPLY 16 BY ws-nibble GIVING ws-byte
           .
       para-nibble-lo.
           ADD 1 TO ws-j
           PERFORM para-nibble
           ADD ws-nibble TO ws-byte
           .
       para-nibble.
           COMPUTE ws-nibble = FUNCTION ORD(ls-in(ws-j : 1)) - 1
           EVALUATE ws-nibble
           WHEN ws-ord-0 THRU ws-ord-9
               SUBTRACT ws-ord-0 FROM ws-nibble
           WHEN ws-ord-a THRU ws-ord-f
               COMPUTE ws-nibble = ws-nibble - ws-ord-a + 10
           END-EVALUATE
           .
[/INST]{
  "id": "BR-001",  "description": "Each nibble in the UUID is computed by subtracting the ASCII code of '0' (48) or 'a' (97) from the ordinal value of the character.",
  "condition": "ws-nibble = FUNCTION ORD(ls-in(ws-j : 1)) - 1",
  "output": [
    "ws-nibble = ws-nibble - ws-ord-0",
    "ws-nibble = ws-nibble - ws-ord-a + 10"
  ]
},
{
  "id": "BR-002",  "description": "UUID is a 128-bit value, therefore it has 16 bytes.",
  "condition": "ws-i = 17",
  "output": []
},
{
  "id": "BR-003",  "description": "The first nibble of each byte is computed using the high nibble of the character",
  "condition": "PERFORM para-nibble-hi",
  "output": []
},
{
  "id": "BR-004",  "description": "The second nibble of each byte is computed using the low nibble of the character",
  "condition": "PERFORM para-nibble-lo",
  "output": []
}[INST]       identification division.
       program-id. cobmud-command-look.
       data division.
       linkage section.
       01 player-id                     pic X(15).
       procedure division using reference player-id.
           display player-id
           exit program
           .
[/INST]{
  "id": "BR-002",  "description": "The player id must be displayed.",
  "condition": "DISPLAY player-id",
  "output": null
}[INST]000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID. SIMPLE CALCULATOR.
000300* --- Ð­ÑÐ¾ Ð¿ÑÑÑÐ°Ñ ÑÑÑÐ¾ÑÐºÐ°. ---
000400 ENVIRONMENT DIVISION.
000500 DATA DIVISION.
000510 WORKING-STORAGE SECTION.
000520 01 WS-A	     PIC 999.
000530 01 WS-B        PIC 9(3).
000540 01 WS-RESULT   PIC 9(6).
000600 PROCEDURE DIVISION.
000700 BEGIN.
000800    DISPLAY âHello I'm your new calculator!â.
000900    DISPLAY âPlease Enter first number from 0 to 999â.
001000    ACCEPT WS-A.
001100    DISPLAY âPlease Enter second number from 0 to 999â.
001200    ACCEPT WS-B.
001300    DISPLAY â------------------------------------â.
001400    DISPLAY â â.
001500    DISPLAY âYour results are:â.
001600    ADD WS-A TO WS-B GIVING WS-RESULT.
001700    DISPLAY âSumm is: â, WS-RESULT.
001800    SUBTRACT WS-A FROM WS-B GIVING WS-RESULT.
001900    DISPLAY âSubtract is: â, WS-RESULT.
002000    MULTIPLY WS-A BY WS-B GIVING WS-RESULT.
002100    DISPLAY âMultiplication is: â, WS-RESULT.
002200    DIVIDE WS-A BY WS-B GIVING WS-RESULT.
002300    DISPLAY âDivide is: â, WS-RESULT.
002400    STOP RUN.[/INST]{
  "id": "BR-001",
  "description": "The first number entered by the user must be between 0 to 999.",
  "condition": null,
  "output": {
    "invalid": "Please Enter first number from 0 to 999."
  }
},
{
  "id": "BR-002",
  "description": "The second number entered by the user must be between 0 to 999.",
  "condition": null,
  "output": {
    "invalid": "Please Enter second number from 0 to 999."
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. cobol-calc.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. scootys-home.
       OBJECT-COMPUTER. scootys-home.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 firstnum  PIC 9(4) USAGE PACKED-DECIMAL.
       01 oper      PIC X(1).
       01 secondnum PIC 9(4) USAGE PACKED-DECIMAL.
       01 total     PIC 9(8) USAGE DISPLAY.
       PROCEDURE DIVISION.
       BEGIN.
       ACCEPT firstnum  FROM ARGUMENT-VALUE.
       ACCEPT oper      FROM ARGUMENT-VALUE.
       ACCEPT secondnum FROM ARGUMENT-VALUE.
       DISPLAY firstnum SPACE oper SPACE secondnum.
       IF oper = '+' THEN
           COMPUTE total = firstnum + secondnum
       ELSE
           IF oper = "-" THEN
                  COMPUTE total = firstnum - secondnum
       ELSE
           IF oper = "*" THEN
                  COMPUTE total = firstnum * secondnum
       ELSE
           IF oper = "/" THEN
                  COMPUTE total = firstnum / secondnum
       ELSE
           DISPLAY "Sorry I do not know that operator"
       END-IF.
       DISPLAY 'The total is: ' total.
       STOP RUN.
[/INST]{
  "id": "BR-002",  "description": "The total amount is the first number plus the second number when the operator is '+'.",
  "condition": "oper = '+'",
  "output": {
    "total": "firstnum + secondnum"
  }
},
{
  "id": "BR-003",  "description": "The total amount is the first number minus the second number when the operator is '-'.",
  "condition": "oper = '-'",
  "output": {
    "total": "firstnum - secondnum"
  }
},
{
  "id": "BR-004",  "description": "The total amount is the first number multiplied by the second number when the operator is '*'.",
  "condition": "oper = '*'",
  "output": {
    "total": "firstnum * secondnum"
  }
},
{
  "id": "BR-005",  "description": "The total amount is the first number divided by the second number when the operator is '/'.",
  "condition": "oper = '/'",
  "output": {
    "total": "firstnum / secondnum"
  }
},
{
  "id": "BR-006",  "description": "The calculation cannot continue if the operator is not '+', '-', '*', or '/'.",
  "condition": "oper != '+' OR oper != '-' OR oper != '*' OR oper != '/'",
  "output": {
    "error": "Sorry I do not know that operator"
  }
}[INST]// Start of script
START;
// Hello world in COBOL
DISPLAY("Hello");
WRITE("World");
// DISCLAIMER:
// I am writing this merely as a notepad++ syntax test. This program may not work.
END;
// End of script[/INST]{
  "id": "BR-001",  "description": "Say Hello World\\n",
  "condition": null,
  "output": {
    "hello-world": "Hello World"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. hello-world.
       PROCEDURE DIVISION.
           DISPLAY "Hello, world!"
[/INST]{
  "id": "BR-002",  "description": "The program will display \"Hello, world!\"",
  "condition": null,
  "output": "Hello, world!"
}[INST]       >>source format is fixed
       identification division.
       program-id. sign-guest-book.
       environment division.
       configuration section.
       repository.
           function get-param-value
           function html-decode
           function all intrinsic.
       input-output section.
       file-control.
           select fd-web-input assign to KEYBOARD
           file status is ws-input-status.
       data division.
       file section.
       fd  fd-web-input.
       01  f-chunk-of-post     pic x(2046).
       WORKING-STORAGE SECTION.
       EXEC SQL
           BEGIN DECLARE SECTION
       END-EXEC.
       01  HOSTVARS.
           05  BUFFER               PIC X(1024).
       01  ws-guest-book-entry.
           05  ws-guest-name        pic x(256).
           05  ws-guest-email       pic x(256).
           05  ws-guest-comment     pic x(1024).
       EXEC SQL
          END DECLARE SECTION
       END-EXEC.
       01  ws-http-request-method-header constant as "REQUEST_METHOD".
       01  ws-http-value-string pic x(2046).
           88  IS-POST          value 'POST'.
       01  ws-input-status          pic xx.
       01  ws-file-status           pic xx.
       01  newline                  pic x value x'0a'.
       01  ws-temp                  pic x(1024).
       local-storage section.
       procedure division.
           display "Content-type: text/html" newline
           display
               "<!DOCTYPE html>"
               "<html><head><title>GnuCOBOL Sample Guest Book - "
               "Signed Guest Book</title>"
               "<style>"
               "  table"
               "{ background-color:#e0ffff; border-collapse:collapse; }"
               "  table, th, td"
               "  { border: 1px solid black; }"
               "</style>"
               "</head><body>"
               newline
               '<h2><a href="/cgi-bin/view-guest-book.cgi">'
               'View Guest Book</a> | <a href="/sign-guest-book.html">'
               "Sign Guest Book</a></h2>"
               newline "<p><b>"
               'Written in GnuCOBOL by Erik Eriksen'
               newline "</b></p><hr />"
           end-display
           perform process-new-entry
           display
               '<a href="'
               'https://github.com/shamrice/COBOL-Guest-Book-Webapp">'
               "COBOL Source Code</a>"
               "</body></html>"
           end-display
           goback.
       process-new-entry.
           accept ws-http-value-string
               from environment ws-http-request-method-header
           end-accept
           inspect ws-http-value-string converting "<>&" to spaces
           if IS-POST then
               open input fd-web-input
                   if ws-input-status < 10 then
                       read fd-web-input end-read
                       if ws-input-status > 9 then
                           move spaces to f-chunk-of-post
                       end-if
                   end-if
               close fd-web-input
               inspect f-chunk-of-post converting "<>&" to spaces
               move function
                   get-param-value(f-chunk-of-post, "answer")
                   to ws-temp
               if trim(ws-temp) not = "20" then
                   display
                       '<h2 style="color:red;">Wrong answer. '
                       "Not saving entry. : " ws-temp "</h2>"
                   end-display
                   exit paragraph
               else
                   move function
                       get-param-value(f-chunk-of-post, "name")
                       to ws-guest-name
                   move function
                       get-param-value(f-chunk-of-post, "email")
                       to ws-guest-email
                   move function
                       get-param-value(f-chunk-of-post, "comment")
                       to ws-guest-comment
                   if function trim(ws-guest-name) = spaces then
                       move "Anonymous" to ws-guest-name
                   end-if
                   if function trim(ws-guest-comment) = spaces then
                       display
                           '<h2 style="color:red;">Comment field '
                           "cannot be blank. Please try again.</h2>"
                       end-display
                       exit paragraph
                   end-if
                   move function
                   html-decode(ws-guest-name) to ws-guest-name
                   move function
                   html-decode(ws-guest-email) to ws-guest-email
                   move function
                   html-decode(ws-guest-comment) to ws-guest-comment
                   perform insert-into-database
                   display
                       '<h2 style="text-align:center;">'
                       "Thank you for signing the guest book!</h2>"
                   end-display
               end-if
           end-if
           exit paragraph.
       insert-into-database.
           STRING 'DRIVER={PostgreSQL Unicode};'
                'SERVER=localhost;'
                'PORT=5432;'
                'DATABASE=guestbookdb;'
                'UID=postgres;'
                'PWD=password;'
                'COMRESSED_PROTO=0;'
           INTO BUFFER.
           EXEC SQL
               CONNECT TO :BUFFER
           END-EXEC.
           EXEC SQL
               INSERT INTO GUEST_ENTRY(
                   GUEST_NAME, GUEST_EMAIL, GUEST_COMMENT)
               VALUES (
                   :ws-guest-name, :ws-guest-email, :ws-guest-comment);
           END-EXEC
           EXEC SQL
               CONNECT RESET
           END-EXEC.
           perform sqlstate-check
           exit paragraph.
       sqlstate-check section.
           if sqlcode < 0
               display 'SQLSTATE='  sqlstate,
                   ', SQLCODE=' sqlcode
               if sqlerrml > 0
                   display 'SQL Error message:' sqlerrmc(1:sqlerrml)
               end-if
               move sqlcode to return-code
               stop run
           else if sqlcode > 0 and not = 100
               display 'SQLSTATE='  sqlstate,
                   ', SQLCODE=' sqlcode
               if sqlerrml > 0
                   display 'SQL Warning message:' sqlerrmc(1:sqlerrml)
               end-if
           end-if
           exit section.
       end program sign-guest-book.
[/INST]{
  "id": "BR-001",
  "description": "In order to enter an entry in the Guest Book the user must provide a name, an email address and a comment.\\nIf the comment field is blank the entry is not saved and an error message is displayed.\\nThe user must answer a captcha with the value 20. If the answer is wrong the entry is not saved and an error message is displayed.",
  "condition": null,
  "output": {
    "blank_comment_error": "Comment field cannot be blank. Please try again.",
    "wrong_answer_error": "Wrong answer. Not saving entry."
  }
}[INST]       >>source format is fixed
       identification division.
       program-id. view-guest-book.
       environment division.
       configuration section.
       repository.
           function all intrinsic.
       input-output section.
       file-control.
       data division.
       file section.
       WORKING-STORAGE SECTION.
       EXEC SQL
           BEGIN DECLARE SECTION
       END-EXEC.
       01  HOSTVARS.
           05  BUFFER               PIC X(1024).
       01  ws-guest-book-entry.
           05  ws-guest-name        pic x(256).
           05  ws-guest-email       pic x(256).
           05  ws-guest-date        pic x(256).
           05  ws-guest-comment     pic x(1024).
       EXEC SQL
          END DECLARE SECTION
       END-EXEC.
       01  newline                  constant as x'0a'.
       local-storage section.
       procedure division.
           STRING 'DRIVER={PostgreSQL Unicode};'
                'SERVER=localhost;'
                'PORT=5432;'
                'DATABASE=guestbookdb;'
                'UID=postgres;'
                'PWD=password;'
                'COMRESSED_PROTO=0;'
           INTO BUFFER.
           EXEC SQL
               CONNECT TO :BUFFER
           END-EXEC.
           display "Content-type: text/html" newline
           display
               "<!DOCTYPE html>"
               "<html><head><title>GnuCOBOL Sample Guest Book - "
               "View Guest Book</title>"
               "<style>"
               "  table"
               "  {background-color:#e0ffff; border-collapse:collapse;}"
               "  table, th, td"
               "  { border: 1px solid black; }"
               "</style>"
               "</head><body>"
               newline
               '<h2>View Guest Book | <a href="/sign-guest-book.html">'
               "Sign Guest Book</a></h2>"
               newline "<p><b>"
               'Written in GnuCOBOL by Erik Eriksen'
               newline "</b></p><hr />"
           end-display
           EXEC SQL
               DECLARE CUR_ALL CURSOR FOR
               SELECT
                   GUEST_NAME, GUEST_EMAIL, GUEST_COMMENT, CREATE_DT
               FROM GUEST_ENTRY
               ORDER BY CREATE_DT DESC;
           END-EXEC
           perform sqlstate-check
           EXEC SQL
               OPEN CUR_ALL ;
           END-EXEC
           perform sqlstate-check
           perform until sqlcode = 100
               EXEC SQL
                   FETCH CUR_ALL
                   INTO
                       :ws-guest-name,
                       :ws-guest-email,
                       :ws-guest-comment,
                       :ws-guest-date ;
               END-EXEC
               perform sqlstate-check
               if sqlcode not = 100 then
                   display
                       "<p><table>"
                       "<tr><td>Name:</td><td>"
                       ws-guest-name "</td></tr>"
                       "<tr><td>Email:</td><td>"
                       ws-guest-email "</td></tr>"
                       "<tr><td>Date:</td><td>"
                       ws-guest-date "</td></tr>"
                       "<tr><td>Comment:</td><td>"
                       ws-guest-comment "</td></tr>"
                       "</p></table><hr />"
                   end-display
               end-if
           end-perform
           EXEC SQL
               CONNECT RESET
           END-EXEC.
           perform sqlstate-check
           display
               '<a href="'
               'https://github.com/shamrice/COBOL-Guest-Book-Webapp">'
               "COBOL Source Code</a>"
               "</body></html>"
           end-display
           goback.
       sqlstate-check section.
           if sqlcode < 0
               display 'SQLSTATE='  sqlstate,
                   ', SQLCODE=' sqlcode
               if sqlerrml > 0
                   display 'SQL Error message:' sqlerrmc(1:sqlerrml)
               end-if
               move sqlcode to return-code
               stop run
           else if sqlcode > 0 and not = 100
               display 'SQLSTATE='  sqlstate,
                   ', SQLCODE=' sqlcode
               if sqlerrml > 0
                   display 'SQL Warning message:' sqlerrmc(1:sqlerrml)
               end-if
           end-if
           exit section.
       end program view-guest-book.
[/INST]{
  "id": "BR-001",
  "description": "Guest book entries should be ordered by the date they were created, with the most recent entry appearing first.",
  "condition": "SELECT GUEST_NAME, GUEST_EMAIL, GUEST_COMMENT, CREATE_DT\nFROM GUEST_ENTRY\nORDER BY CREATE_DT DESC",
  "output": {
    "true": "Guest book entries are ordered by creation date (most recent first)."
  }
}[INST]       >>source format is fixed
       identification division.
       function-id. get-param-value.
       environment division.
       configuration section.
       data division.
       working-storage section.
       01  ws-max-keys                     constant as 100.
       local-storage section.
       01  ls-string-map                   occurs 0 to ws-max-keys times
                                           depending on ls-num-keys.
           05  ls-string-key               pic x(1024).
           05  ls-string-value             pic x(1024).
       01  ls-raw-key-value-strings        pic x(1024)
                                           occurs 0 to ws-max-keys times
                                           depending on ls-num-keys
                                           value spaces.
       01  ls-idx                          pic 9(5) comp-3.
       01  ls-starting-pointer             pic 9(5) comp-3.
       01  ls-num-keys                     pic 9(5) comp-3.
       linkage section.
       01  l-raw-map-string                pic x any length.
       01  l-param-search-key              pic x any length.
       01  l-found-value                   pic x(1024).
       procedure division
           using l-raw-map-string, l-param-search-key
           returning l-found-value.
           move 1 to ls-starting-pointer
           move space to l-found-value
           inspect function trim(l-raw-map-string)
           tallying ls-num-keys for all '='
           if ls-num-keys = 0 then
               goback
           end-if
           perform varying ls-idx from 1 by 1 until ls-idx > ls-num-keys
               unstring l-raw-map-string delimited by space
                   into ls-raw-key-value-strings(ls-idx)
                   with pointer ls-starting-pointer
               end-unstring
           end-perform
           perform varying ls-idx from 1 by 1 until ls-idx > ls-num-keys
               if ls-raw-key-value-strings(ls-idx) not = spaces then
                   unstring ls-raw-key-value-strings(ls-idx)
                       delimited by '=' into
                       ls-string-key(ls-idx)
                       ls-string-value(ls-idx)
                   end-unstring
                   if function trim(ls-string-key(ls-idx)) =
                       function trim(l-param-search-key) then
                       move function trim(ls-string-value(ls-idx))
                       to l-found-value
                       goback
                   end-if
               end-if
           end-perform
           goback.
       end function get-param-value.
       identification division.
       function-id. html-decode.
       environment division.
       configuration section.
       data division.
       working-storage section.
       01  ws-max-string-length           constant as 2048.
       local-storage section.
       linkage section.
       01  l-html-encoded-string          pic x any length.
       01  l-html-decoded-string          pic x(ws-max-string-length).
       procedure division
           using l-html-encoded-string
           returning l-html-decoded-string.
           move l-html-encoded-string to l-html-decoded-string
           move function substitute(l-html-decoded-string, "+", space)
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%21", "!")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%27", "'")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%40", "@")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%7E", "~")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%23", "#")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%25", "%")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%5E", "^")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%26", "&")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%28", "(")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%29", ")")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%2B", "+")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%60", "`")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%3D", "=")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%5B", "[")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%5D", "]")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%5C", "\")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%7B", "{")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%7D", "}")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%7C", "|")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%3B", ";")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%3A", ":")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%22", '"')
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%2C", ",")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%2F", "/")
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%3C", space)
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%3E", space)
           to l-html-decoded-string
           move function substitute(l-html-decoded-string, "%3F", "?")
           to l-html-decoded-string
           move function
           substitute(l-html-decoded-string, "%0D%0A", "<br />")
           to l-html-decoded-string
           goback.
       end function html-decode.
[/INST]{
  "id": "BR-001",
  "description": "A key-value map must not have more than 100 elements.",
  "condition": "ls-num-keys <= ws-max-keys",
  "output": {
    "true": "The key-value map is valid.",
    "false": "The key-value map has too many elements."
  }
}
{
  "id": "BR-002",
  "description": "A key in a key-value map must not be empty.",
  "condition": "ls-raw-key-value-strings(ls-idx) <> spaces",
  "output": {
    "true": "The key is not empty.",
    "false": "The key is empty."
  }
}
{
  "id": "BR-003",
  "description": "A key in a key-value map must not be longer than 1024 characters.",
  "condition": "function length(ls-string-key(ls-idx)) <= 1024",
  "output": {
    "true": "The key is not too long.",
    "false": "The key is too long."
  }
}
{
  "id": "BR-004",
  "description": "A value in a key-value map must not be longer than 1024 characters.",
  "condition": "function length(ls-string-value(ls-idx)) <= 1024",
  "output": {
    "true": "The value is not too long.",
    "false": "The value is too long."
  }
}
{
  "id": "BR-005",
  "description": "The HTML-decoded string must not be longer than 2048 characters.",
  "condition": "function length(l-html-decoded-string) <= ws-max-string-length",
  "output": {
    "true": "The HTML-decoded string is not too long.",
    "false": "The HTML-decoded string is too long."
  }
}[INST]       identification division.
       program-id. add-action-history-item.
       environment division.
       input-output section.
       file-control.
           select optional fd-action-history-log
           assign to dynamic ws-ah-log-file-name
           organization is line sequential
           file status is ws-ah-file-status.
       data division.
       file section.
       fd  fd-action-history-log.
       01  f-ah-log-entry.
           05  f-ah-log-timestamp             pic x(23).
           05  f-ah-log-text                  pic x(80).
       working-storage section.
       01  ws-ah-log-file-name           pic x(16) value "DEFAULT.LOG".
       01  ws-ah-file-status             pic xx.
       78  ws-max-entries               value 150.                      
       01  ws-counter                    pic 999 comp.
       01  ws-current-idx                pic 999 comp value 1.
       01  ws-logging-enabled-sw         pic a value 'N'.
           88  ws-logging-enabled        value 'Y'.
           88  ws-logging-disabled       value 'N'.
       01 ws-current-date-data.
           05  ws-current-date.
               10  ws-current-year         pic 9(4).               
               10  ws-current-month        pic 9(2).
               10  ws-current-day          pic 9(2).
           05  ws-current-time.
               10  ws-current-hour         pic 9(2).
               10  ws-current-minute       pic 9(2).
               10  ws-current-second       pic 9(2).
               10  ws-current-millisecond  pic 9(2).
       78  ws-file-success                 value "00".
       78  ws-file-missing-optional        value "05".
       linkage section.
       01  l-new-history-text            pic x(75).
       copy "engine/copybooks/l-action-history.cpy".
       procedure division using 
               l-new-history-text l-action-history.
       main-procedure.
           if ws-current-idx < ws-max-entries then 
               move l-new-history-text to 
                   l-action-history-text(ws-current-idx) 
               add 1 to ws-current-idx
           else 
               perform varying ws-counter 
               from 1 by 1 until ws-counter = ws-max-entries 
                   move l-action-history-item(ws-counter + 1) to 
                       l-action-history-item(ws-counter) 
               end-perform 
               move l-new-history-text to 
                   l-action-history-text(ws-current-idx)      
           end-if 
           if ws-logging-enabled then 
               perform log-entry           
           end-if 
           goback.
       log-entry.
           move function current-date to ws-current-date-data           
           move function concatenate(ws-current-year, '-', 
               ws-current-month, '-', ws-current-day, 'T', 
               ws-current-hour, ':', ws-current-minute, ':', 
               ws-current-second, '.', ws-current-millisecond)
               to f-ah-log-timestamp
           move l-new-history-text to f-ah-log-text
           write f-ah-log-entry
           exit paragraph.
       start-history-loggging.
           entry "action-history-log-start"           
           move function current-date to ws-current-date-data
           move function concatenate(ws-current-date, "-CRL.LOG")
               to ws-ah-log-file-name
           open extend fd-action-history-log 
           if ws-ah-file-status = ws-file-success 
               or ws-file-missing-optional then 
               set ws-logging-enabled to true                
           end-if 
           goback. 
       end-history-logging.
           entry "action-history-log-end"
           if ws-logging-enabled then 
               set ws-logging-disabled to true 
               close fd-action-history-log
           end-if 
           goback.
       end program add-action-history-item.
[/INST]{
  "id": "BR-001",
  "description": "The maximum number of log entries is limited to 150.",
  "condition": "ws-current-idx < ws-max-entries"
}[INST]       identification division.
       program-id. add-edit-item.
       environment division.
       configuration section.
           special-names.
               crt status is ws-crt-status.
               cursor is ws-mouse-position.
       input-output section.
       file-control.
           select optional fd-item-list-data
               assign to dynamic ws-item-list-file-name
               organization is indexed
               access mode is dynamic 
               record key is f-item-id
               file status is ws-item-list-file-status.
       data division.
       file section.
       copy "shared/copybooks/fd-item-list-data.cpy".
       working-storage section.
       copy screenio.
       copy "shared/copybooks/ws-constants.cpy".      
       copy "shared/copybooks/ws-item-data.cpy".
       copy "shared/copybooks/ws-item-list-file.cpy".
       copy "shared/copybooks/ws-item-list-data.cpy".
       01  ws-mouse-flags              pic 9(4).
       01  ws-crt-status.
           05  ws-crt-status-key-1     pic 99.
           05  ws-crt-status-key-2     pic 99.
       01  ws-mouse-position.
           05  ws-mouse-row            pic 99.
           05  ws-mouse-col            pic 99.
       01  ws-mouse-click-status       pic a value 'N'.
           88  ws-mouse-clicked        value 'Y'.
           88  ws-mouse-not-clicked    value 'N'.
       01  ws-line-mask                   pic x(50) value spaces.
       01  ws-kb-input                    pic x.
       01  ws-eof                         pic a value 'N'.
           88  ws-is-eof                  value 'Y'.
           88  ws-not-eof                 value 'N'.
       01  ws-selected-idx              pic 999 comp value 0.
       01  ws-record-pos.
           05  ws-record-pos-y          pic 99.
           05  ws-record-pos-x          pic 99.
       01  ws-load-return-code          pic 9.
       01  ws-save-return-code          pic 9.
       linkage section.
       copy "item_creator/copybooks/l-item-list-data-record.cpy".
       01  l-return-code               pic 9.
       screen section.
       01  s-add-edit-item-screen.
           05  s-title-line foreground-color 7 background-color 1.
               10  line 4 column 15 pic x(50) value spaces. 
               10  line 4 column 20 value "Add/Edit Item".
           05  s-space-line foreground-color 0 background-color 7.
               10  line 5 column 15 pic x(50) value spaces.
           05  s-id-line foreground-color 0 background-color 7.
               10  line 6 column 15 pic x(50) value spaces. 
               10  line 6 column 16 value "         ID:".
               10  line 6 column 29 pic 9(6) using l-item-list-id.
           05  s-name-line foreground-color 0 background-color 7.
               10  line 7 column 15 pic x(50) value spaces. 
               10  line 7 column 16 value "       NAME:".
               10  line 7 column 29 pic x(16) using l-item-list-name.
           05  s-effect-id-line foreground-color 0 background-color 7.
               10  line 8 column 15 pic x(50) value spaces. 
               10  line 8 column 16 value "  EFFECT ID:".
               10  line 8 column 29 pic 99 using l-item-list-effect-id.
           05  s-worth-line foreground-color 0 background-color 7.
               10  line 9 column 15 pic x(50) value spaces. 
               10  line 9 column 16 value "WORTH/VALUE:".
               10  line 9 column 29 pic 999 using l-item-list-worth.
           05  s-color-line foreground-color 0 background-color 7.
               10  line 10 column 15 pic x(50) value spaces. 
               10  line 10 column 16 value "      COLOR:".
               10  line 10 column 29 pic 9 using l-item-list-color.
           05  s-char-line foreground-color 0 background-color 7.
               10  line 11 column 15 pic x(50) value spaces. 
               10  line 11 column 16 value "  CHARACTER:".
               10  line 11 column 29 pic x using l-item-list-char.
           05  s-highlight-line foreground-color 0 background-color 7.
               10  line 12 column 15 pic x(50) value spaces. 
               10  line 12 column 16 value "  HIGHLIGHT:".
               10  line 12 column 29 pic x 
                   using l-item-list-highlight-sw.
           05  s-blink-line foreground-color 0 background-color 7.
               10  line 13 column 15 pic x(50) value spaces. 
               10  line 13 column 16 value "      BLINK:".
               10  line 13 column 29 pic x using l-item-list-blink-sw.
           05  s-space-line foreground-color 0 background-color 7.
               10  line 14 column 15 pic x(50) value spaces.
           05  s-info-line foreground-color 0 background-color 7.
               10  line 15 column 15 pic x(50) value spaces. 
               10  line 15 column 16 
                   value "Arrow keys between fields ESC to cancel.".
           05  s-space-line foreground-color 0 background-color 7.
               10  line 16 column 15 pic x(50) value spaces.
       procedure division using 
           l-item-list-data-record l-return-code.
           set environment "COB_SCREEN_EXCEPTIONS" to 'Y'.
           set environment "COB_SCREEN_ESC" to 'Y'.
       main-procedure. 
           accept s-add-edit-item-screen
           evaluate ws-crt-status 
               when COB-SCR-ESC
                   move 9 to l-return-code
                   display space blank screen 
                   goback 
           end-evaluate
           if l-item-list-name not = spaces and l-item-list-id > zero 
           then 
               if l-item-list-color > 7 then 
                   move 7 to l-item-list-color
               end-if 
               move function upper-case(l-item-list-highlight-sw)
                   to l-item-list-highlight-sw
               move function upper-case(l-item-list-blink-sw)
                   to l-item-list-blink-sw
               if 'Y' not = l-item-list-highlight-sw then 
                   move 'N' to l-item-list-highlight-sw
               end-if
               if 'Y' not = l-item-list-blink-sw then 
                   move 'N' to l-item-list-blink-sw
               end-if 
               move 0 to l-return-code 
           else 
               move 1 to l-return-code 
           end-if 
           display space blank screen 
           goback.
       end program add-edit-item.
[/INST]{
  "id": "BR-001",
  "description": "If the item has a name and an ID greater than zero, it is valid and the return code should be 0.",
  "condition": "l-item-list-name not = spaces and l-item-list-id > zero",
  "output": {
    "valid": "move 0 to l-return-code",
    "invalid": "move 1 to l-return-code"
  }
},
{
  "id": "BR-002",
  "description": "If the item's color is greater than 7, it should be set to 7.",
  "condition": "l-item-list-color > 7",
  "output": {
    "set_color_to_7": "move 7 to l-item-list-color"
  }
},
{
  "id": "BR-003",
  "description": "The highlight and blink switches should be converted to uppercase.",
  "condition": "true",
  "output": {
    "uppercase_highlight": "move function upper-case(l-item-list-highlight-sw) to l-item-list-highlight-sw",
    "uppercase_blink": "move function upper-case(l-item-list-blink-sw) to l-item-list-blink-sw"
  }
},
{
  "id": "BR-004",
  "description": "If the highlight switch is not 'Y', it should be set to 'N'.",
  "condition": "'Y' not = l-item-list-highlight-sw",
  "output": {
    "set_highlight_to_n": "move 'N' to l-item-list-highlight-sw"
  }
},
{
  "id": "BR-005",
  "description": "If the blink switch is not 'Y', it should be set to 'N'.",
  "condition": "'Y' not = l-item-list-blink-sw",
  "output": {
    "set_blink_to_n": "move 'N' to l-item-list-blink-sw"
  }
}[INST]       identification division.
       program-id. command-line-parser.
       environment division.
       data division.
       working-storage section.
       78  ws-log-param                  value "--LOG=".
       78  ws-map-param                  value "--MAP=".
       78  ws-map-short-param            value "-M=".
       78  ws-help-param                 value "--HELP".
       78  ws-help-short-param           value "-H".   
       78  ws-enabled-str                value "ENABLED".    
       78  ws-new-line                   value x"0a".
       local-storage section.
       01  ls-found-param-counts.
           05  ls-log-param-count        pic 9.
           05  ls-map-param-count        pic 9.
           05  ls-help-param-count       pic 9.
       01  ls-param-count                pic 9 comp.      
       01  ls-key-val-pair.
           05  ls-key                    pic x(16).
           05  ls-value                  pic x(32).
       01  ls-parameter                  pic x(1024).    
       01  ls-param-idx                  pic 9 comp value 1. 
       01  ls-param-pointer              pic 9(5) comp value 1.       
       linkage section.
       01  l-command-args                pic x any length.
       01  l-map-name                    pic x(15).
       01  l-map-name-temp               pic x(15).
       procedure division using 
           l-command-args l-map-name l-map-name-temp.
       main-procedure.
           inspect function trim(l-command-args) tallying 
               ls-param-count for all "--", "-"          
           if ls-param-count = 0 then 
               goback
           end-if 
           perform varying ls-param-idx 
           from 1 by 1 until ls-param-idx > ls-param-count
               unstring l-command-args delimited by all spaces
                   into ls-parameter
                   with pointer ls-param-pointer     
               end-unstring
               move zeros to ls-found-param-counts               
               inspect function upper-case(ls-parameter) tallying 
                   ls-log-param-count 
                       for all ws-log-param
                   ls-map-param-count 
                       for all ws-map-param, ws-map-short-param
                   ls-help-param-count 
                       for all ws-help-param, ws-help-short-param
               if ls-help-param-count > 0 then 
                   perform display-help-and-quit
               end-if 
               if ls-log-param-count > 0 then 
                   perform process-key-val-pair
                   if ls-value not = spaces 
                   and ls-value = ws-enabled-str then 
                       call "action-history-log-start"
                   end-if 
               end-if 
               if ls-map-param-count > 0 then                
                   perform process-key-val-pair
                   if ls-value not = spaces then 
                       move ls-value to l-map-name
                       move l-map-name to l-map-name-temp
                   else 
                       display "ERROR: Unable to parse map name."
                       stop run 
                   end-if 
               end-if 
               if ls-found-param-counts = zeros then 
                   display space 
                   display 
                       "ERROR: Invalid command line argument: " 
                       function trim(ls-parameter)
                   end-display                      
                   perform display-help-and-quit                                        
               end-if
           end-perform          
           goback.
       process-key-val-pair.
           move spaces to ls-key
           move spaces to ls-value 
           unstring function upper-case(ls-parameter) 
               delimited by "=" into ls-key, ls-value                   
           end-unstring
           exit paragraph.
       display-help-and-quit.           
           display space
           display            
           "COBOL Roguelike" ws-new-line 
           "-------------------------------" ws-new-line 
           "By: Erik Eriksen" ws-new-line 
           "Web: https://github.com/shamrice/COBOL-Roguelike" 
               ws-new-line 
           "__BUILD_DATE__" ws-new-line ws-new-line 
           "Command line parameters:" ws-new-line 
           " -h                     Display this help message."
                ws-new-line 
           "--help                  Display this help message."
                ws-new-line 
           "--log=enabled/disabled  Toggle logging (Default: disabled)" 
                ws-new-line 
           " -m=MAP_NAME            Load specified map."
                ws-new-line 
           "--map=MAP_NAME          Load specified map."
                ws-new-line  ws-new-line 
           end-display 
           call "action-history-log-end"
           stop run. 
       end program command-line-parser.
[/INST]{
  "id": "BR-001",
  "description": "Any command line argument that starts with a \"--\" or a \"-\" is a valid parameter.",
  "condition": null,
  "output": null
}
{
  "id": "BR-002",
  "description": "If a command line argument starts with \"--HELP\" or \"-H\" then the program should display the help message and quit.",
  "condition": "inspect function upper-case(ls-parameter) tallying\nls-help-param-count\nfor all ws-help-param, ws-help-short-param",
  "output": {
    "true": "perform display-help-and-quit"
  }
}
{
  "id": "BR-003",
  "description": "If a command line argument starts with \"--LOG=\" then the program should enable logging if the value is \"ENABLED\".",
  "condition": "inspect function upper-case(ls-parameter) tallying\nls-log-param-count\nfor all ws-log-param",
  "output": {
    "true": "if ls-value not = spaces\nand ls-value = ws-enabled-str then\ncall \"action-history-log-start\""
  }
}
{
  "id": "BR-004",
  "description": "If a command line argument starts with \"--MAP=\" or \"-M=\" then the program should load the specified map.",
  "condition": "inspect function upper-case(ls-parameter) tallying\nls-map-param-count\nfor all ws-map-param, ws-map-short-param",
  "output": {
    "true": "if ls-value not = spaces then\nmove ls-value to l-map-name\nmove l-map-name to l-map-name-temp"
  }
}
{
  "id": "BR-005",
  "description": "If a command line argument does not start with \"--\" or \"-\" or does not match any of the known parameters, then the program should display an error message and quit.",
  "condition": "if ls-found-param-counts = zeros then",
  "output": {
    "true": "display space\ndisplay\n\"ERROR: Invalid command line argument: \" function trim(ls-parameter)\nend-display\nperform display-help-and-quit"
  }
}[INST]       identification division.
       program-id. display-action-history.
       environment division.
       data division.
       working-storage section.
       78  ws-max-entries               value 150.
       78  ws-draw-row-start            value 21.
       01  ws-line-mask                 pic x(75) value spaces.
       local-storage section.
       01  ls-counter                   pic 999 comp.
       01  ls-draw-pos.
           05  ls-draw-y                pic 99.
           05  ls-draw-x                pic 99.       
       linkage section.
       copy "engine/copybooks/l-action-history.cpy".
       procedure division using l-action-history.
       main-procedure.
           move ws-draw-row-start to ls-draw-y
           move 01 to ls-draw-x 
           perform varying ls-counter 
           from ws-max-entries by -1 
           until ls-counter = 0 or ls-draw-y > 25
               if l-action-history-text(ls-counter) not = spaces then 
                   display ws-line-mask at ls-draw-pos
                   display l-action-history-text(ls-counter) 
                       at ls-draw-pos 
                   end-display 
                   add 1 to ls-draw-y 
               end-if                
           end-perform     
           goback.
       end program display-action-history.
[/INST]{
  "id": "BR-001",
  "description": "The maximum number of entries that can be displayed on the action history is 150.",
  "condition": null,
  "output": null
}[INST]       identification division.
       program-id. display-debug.
       environment division.
       data division.
       working-storage section.
       copy "shared/copybooks/ws-constants.cpy".
       local-storage section.
       01  ws-kb-input                  pic x.
       01  ws-exit-sw                   pic a value 'N'.
           88  ws-exit                  value 'Y'.
           88  ws-not-exit              value 'N'.              
       linkage section.
       copy "engine/copybooks/l-player.cpy".
       copy "shared/copybooks/l-tile-map-table-matrix.cpy".
       copy "shared/copybooks/l-enemy-data.cpy".                           
       01  l-temp-map-pos.
           05  l-temp-map-pos-y        pic S99.
           05  l-temp-map-pos-x        pic S99.
       procedure division using 
               l-player l-tile-map-table-matrix l-enemy-data
               l-temp-map-pos.
       main-procedure.
           display space blank screen
           display "Debug Info" at 0115 with underline highlight 
           display "pscrpos: " at 1960 l-player-scr-pos at 1970
           display "P delta: " at 2101 l-player-pos-delta at 2110
           display "Pyx: " at 2301 l-player-pos at 2305
           display "MAPyx: " at 2240 l-temp-map-pos at 2246
           perform with test after until ws-exit 
               accept ws-kb-input at 0125
               if ws-kb-input = 'q' then 
                   set ws-exit to true 
               end-if 
           end-perform 
           goback.
       end program display-debug.
[/INST]{
  "id": "BR-001",
  "description": "The user can press 'q' to exit the program.",
  "condition": "ws-kb-input = 'q'",
  "output": {
    "exit": "set ws-exit to true"
  }
}[INST]       identification division.
       program-id. draw-tile-character.
       environment division.
       data division.
       working-storage section.
       copy "shared/copybooks/ws-constants.cpy".
       linkage section.
           01  l-scr-draw-pos.
               05  l-scr-draw-y            pic 99.
               05  l-scr-draw-x            pic 99.
           01  l-tile-map-data.
               10  l-tile-fg                   pic 9.   
               10  l-tile-bg                   pic 9.
               10  l-tile-char                 pic x.
               10  l-tile-highlight            pic a value 'N'.
                   88  l-tile-is-highlight      value 'Y'.
                   88  l-tile-not-highlight     value 'N'.
               10  l-tile-blocking             pic a value 'N'.
                   88  l-tile-is-blocking      value 'Y'.
                   88  l-tile-not-blocking     value 'N'.  
               10  l-tile-blinking             pic a value 'N'.
                   88  l-tile-is-blinking      value 'Y'.
                   88  l-tile-not-blinking     value 'N'.
               10  l-tile-effect-id            pic 99 comp.      
               10  l-tile-visibility           pic 999 comp.      
           01  l-char-to-draw                  pic x.
       procedure division using  
           l-scr-draw-pos l-tile-map-data l-char-to-draw.
       main-procedure.
           evaluate true 
               when l-tile-is-highlight and l-tile-not-blinking
                   display 
                       l-char-to-draw 
                       at l-scr-draw-pos 
                       background-color l-tile-bg 
                       foreground-color l-tile-fg
                       highlight
                   end-display
               when l-tile-is-highlight and l-tile-is-blinking
                   display 
                       l-char-to-draw
                       at l-scr-draw-pos 
                       background-color l-tile-bg 
                       foreground-color l-tile-fg
                       highlight blink 
                   end-display 
               when l-tile-not-highlight and l-tile-is-blinking
                   display 
                       l-char-to-draw
                       at l-scr-draw-pos 
                       background-color l-tile-bg 
                       foreground-color l-tile-fg
                       blink
                   end-display 
               when other  
                   display 
                       l-char-to-draw at l-scr-draw-pos 
                       background-color l-tile-bg 
                       foreground-color l-tile-fg 
                   end-display
           end-evaluate
           goback.
       end program draw-tile-character.
[/INST]{
  "id": "BR-001",
  "description": "The background color for drawing a character on a tile is specified in the l-tile-bg variable.",
  "condition": null,
  "output": {
    "background-color": "l-tile-bg"
  }
},
{
  "id": "BR-002",
  "description": "The foreground color for drawing a character on a tile is specified in the l-tile-fg variable.",
  "condition": null,
  "output": {
    "foreground-color": "l-tile-fg"
  }
},
{
  "id": "BR-003",
  "description": "A highlighted character should be drawn with a highlight effect if the l-tile-is-highlight flag is set to 'Y' and l-tile-is-blinking is set to 'N'.",
  "condition": "l-tile-is-highlight and l-tile-not-blinking",
  "output": {
    "highlight": true
  }
},
{
  "id": "BR-004",
  "description": "A highlighted character should be drawn with a highlight and blink effect if the l-tile-is-highlight flag is set to 'Y' and l-tile-is-blinking is set to 'Y'.",
  "condition": "l-tile-is-highlight and l-tile-is-blinking",
  "output": {
    "highlight": true,
    "blink": true
  }
},
{
  "id": "BR-005",
  "description": "A non-highlighted character should be drawn with a blink effect if the l-tile-is-highlight flag is set to 'N' and l-tile-is-blinking is set to 'Y'.",
  "condition": "l-tile-not-highlight and l-tile-is-blinking",
  "output": {
    "blink": true
  }
}[INST]       identification division.
       program-id. load-map-data.
       environment division.
       input-output section.
       file-control.
           select optional fd-tile-data 
               assign to dynamic l-map-dat-file 
               organization is record sequential
               file status is ls-map-file-status.
           select optional fd-teleport-data
               assign to dynamic l-map-tel-file
               organization is record sequential
               file status is ls-teleport-file-status.            
           select optional fd-enemy-data
               assign to dynamic l-map-enemy-file
               organization is record sequential
               file status is ls-enemy-file-status.
           select optional fd-item-data
               assign to dynamic l-map-item-file
               organization is record sequential
               file status is ls-item-file-status.
       data division.
       file section.
       copy "shared/copybooks/fd-tile-data.cpy".
       copy "shared/copybooks/fd-teleport-data.cpy".
       copy "shared/copybooks/fd-enemy-data.cpy".
       copy "shared/copybooks/fd-item-data.cpy".
       working-storage section.
       copy "shared/copybooks/ws-constants.cpy".
       01  ws-test-data                 pic 99.
       local-storage section.
       01  ls-counter-1                 pic 999 comp.
       01  ls-counter-2                 pic 999 comp.
       01  ls-map-file-statuses.
           05  ls-map-file-status      pic xx.
           05  ls-teleport-file-status pic xx.
           05  ls-enemy-file-status    pic xx.
           05  ls-item-file-status     pic xx.
       01  ls-eof-sw                    pic a value 'N'.
           88 ls-is-eof                 value 'Y'.
           88 ls-not-eof                value 'N'.
       linkage section.
       01  l-map-files.  
           05  l-map-name             pic x(15).
           05  l-map-name-temp        pic x(15). 
           05  l-map-dat-file         pic x(15).               
           05  l-map-tel-file         pic x(15).
           05  l-map-enemy-file       pic x(15).   
           05  l-map-item-file        pic x(15).
       copy "shared/copybooks/l-tile-map-table-matrix.cpy".
       copy "shared/copybooks/l-enemy-data.cpy".
       copy "shared/copybooks/l-teleport-data.cpy".
       copy "shared/copybooks/l-item-data.cpy".
       01  l-return-code                   pic 9 value 0.
       procedure division using 
               l-map-files l-tile-map-table-matrix 
               l-enemy-data l-teleport-data
               l-item-data
               l-return-code.
       main-procedure.
           move function concatenate(
               function trim(l-map-name), ws-data-file-ext)
               to l-map-dat-file
           move function concatenate(
               function trim(l-map-name), ws-teleport-file-ext)
               to l-map-tel-file
           move function concatenate(
               function trim(l-map-name), ws-enemy-file-ext)
               to l-map-enemy-file    
           move function concatenate(
               function trim(l-map-name), ws-item-file-ext)
               to l-map-item-file    
           open input fd-tile-data
           if ls-map-file-status not = ws-file-status-ok then
               close fd-tile-data  
               display 
                   "Failed to open tile data: " at 0101
                   l-map-dat-file at 0130
               end-display 
               move ws-load-status-fail to l-return-code
               goback                
           end-if     
           perform varying ls-counter-1 
           from 1 by 1 until ls-counter-1 > ws-max-map-height
               perform varying ls-counter-2 
               from 1 by 1 until ls-counter-2 > ws-max-map-width
                   read fd-tile-data 
                       into l-tile-map-data(ls-counter-1, ls-counter-2)
                   end-read 
                   if ls-map-file-status not = ws-file-status-ok then 
                       display "Error reading tile map data." at 0101
                       display ls-map-file-status at 0201
                       close fd-tile-data
                       move ws-load-status-read-fail 
                           to l-return-code
                       goback 
                   end-if 
               end-perform
           end-perform
           close fd-tile-data
           move 0 to l-cur-num-enemies
           set ls-not-eof to true             
           open input fd-enemy-data      
               perform until ls-is-eof 
                   if l-cur-num-enemies < ws-max-num-enemies then  
                       add 1 to l-cur-num-enemies           
                       initialize l-enemy(l-cur-num-enemies) 
                       read fd-enemy-data 
                           into l-enemy(l-cur-num-enemies)    
                           at end 
                               set ls-is-eof to true 
                               subtract 1 from l-cur-num-enemies                              
                       end-read
                       if ls-enemy-file-status not = 
                       ws-file-status-ok and ls-enemy-file-status not = 
                       ws-file-status-eof then 
                           display "Error reading enemy data." at 0101
                           display ls-enemy-file-status at 0201
                           close fd-enemy-data
                           move ws-load-status-read-fail 
                               to l-return-code
                           goback 
                       end-if  
                   else 
                       set ls-is-eof to true 
                   end-if 
               end-perform 
           close fd-enemy-data
           move 0 to l-cur-num-teleports
           set ls-not-eof to true             
           open input fd-teleport-data      
               perform until ls-is-eof                    
                   if l-cur-num-teleports < ws-max-num-teleports then  
                       add 1 to l-cur-num-teleports 
                       initialize 
                           l-teleport-data-record(l-cur-num-teleports)  
                       read fd-teleport-data 
                           into l-teleport-data-record(
                               l-cur-num-teleports)
                           at end set ls-is-eof to true 
                       end-read
                       if ls-teleport-file-status not = 
                       ws-file-status-ok and ls-teleport-file-status 
                       not = ws-file-status-eof then 
                           display "Error reading tele data." at 0101
                           display ls-teleport-file-status at 0201
                           close fd-teleport-data
                           move ws-load-status-read-fail 
                               to l-return-code
                           goback 
                       end-if  
                   else 
                       set ls-is-eof to true 
                   end-if      
               end-perform 
           close fd-teleport-data
           move 0 to l-cur-num-items
           set ls-not-eof to true             
           open input fd-item-data      
               perform until ls-is-eof                    
                   if l-cur-num-items < ws-max-num-items then  
                       add 1 to l-cur-num-items
                       initialize 
                           l-item-data-record(l-cur-num-items)  
                       read fd-item-data 
                           into l-item-data-record(
                               l-cur-num-items)
                           at end set ls-is-eof to true 
                       end-read
                       if ls-item-file-status not = 
                       ws-file-status-ok and ls-item-file-status 
                       not = ws-file-status-eof then 
                           display "Error reading item data." at 0101
                           display ls-item-file-status at 0201
                           close fd-item-data
                           move ws-load-status-read-fail 
                               to l-return-code
                           goback 
                       end-if  
                   else 
                       set ls-is-eof to true 
                   end-if                    
               end-perform 
           close fd-item-data
           move ws-load-status-success to l-return-code               
           goback.
       end program load-map-data.
[/INST]{
  "id": "BR-001",
  "description": "The number of enemies loaded onto the game map must be less than or equal to the maximum number of enemies that the game can support.",
  "condition": "l-cur-num-enemies <= ws-max-num-enemies",
  "output": {
    "true": "Load the enemy onto the game map.",
    "false": "Do not load the enemy onto the game map."
  }
},
{
  "id": "BR-002",
  "description": "The number of teleporters loaded onto the game map must be less than or equal to the maximum number of teleporters that the game can support.",
  "condition": "l-cur-num-teleports <= ws-max-num-teleports",
  "output": {
    "true": "Load the teleporter onto the game map.",
    "false": "Do not load the teleporter onto the game map."
  }
},
{
  "id": "BR-003",
  "description": "The number of items loaded onto the game map must be less than or equal to the maximum number of items that the game can support.",
  "condition": "l-cur-num-items <= ws-max-num-items",
  "output": {
    "true": "Load the item onto the game map.",
    "false": "Do not load the item onto the game map."
  }
}[INST]       identification division.
       program-id. set-tile-effect.
       environment division.
       configuration section.
       input-output section.
       file-control.
       data division.
       file section.
       working-storage section.      
       copy "shared/copybooks/ws-constants.cpy".
       01  ws-temp-input               pic a.
       01  ws-counter-1                pic 999 comp.
       local-storage section.
       01  ls-teleport-found           pic a value 'N'.
           88  ls-teleport-is-found    value 'Y'.
           88  ls-teleport-not-found   value 'N'.
       01  ls-found-idx                pic 999 comp.
       linkage section.
       01  l-placement-pos.
           05  l-placement-pos-y         pic S99.
           05  l-placement-pos-x         pic S99.  
       01  l-cur-tile-effect-id          pic 99 comp.
       copy "editor/copybooks/l-cursor.cpy".
       copy "shared/copybooks/l-teleport-data.cpy".          
       procedure division using 
           l-placement-pos l-cur-tile-effect-id 
           l-cursor l-teleport-data.
       main-procedure.
           evaluate l-cursor-draw-effect
               when ws-no-tile-effect-id
                   move ws-no-tile-effect-id to l-cur-tile-effect-id              
               when ws-teleport-effect-id
                   perform set-teleport
               when ws-conveyor-right-effect-id
                   perform set-conveyor-right
               when ws-conveyor-down-effect-id
                   perform set-conveyor-down
               when ws-conveyor-left-effect-id
                   perform set-conveyor-left
               when ws-conveyor-up-effect-id
                   perform set-conveyor-up
               when ws-conveyor-reverse-effect-id
                   perform set-conveyor-reverse
               when ws-player-start-effect-id
                   move ws-player-start-effect-id 
                       to l-cur-tile-effect-id
               when other 
                   display "Not implemented" at 2525
           end-evaluate 
           goback.
       set-teleport.        
           set ls-teleport-not-found to true
           move zeros to ls-found-idx
           perform varying ws-counter-1 from 1 by 1
               until ws-counter-1 > l-cur-num-teleports
               if l-placement-pos = l-teleport-pos(ws-counter-1) then 
                   set ls-teleport-is-found to true 
                   move ws-counter-1 to ls-found-idx
                   exit perform 
               end-if 
           end-perform 
           if ls-teleport-is-found then 
               display "Remove placed teleport? [y/n] " at 2101                
               accept ws-temp-input at 2130 with auto-skip upper
               if ws-temp-input = 'Y' then                    
                   perform varying ws-counter-1 
                       from ls-found-idx by 1 
                       until ws-counter-1 > l-cur-num-teleports + 1
                       move l-teleport-data-record(ws-counter-1 + 1) to 
                           l-teleport-data-record(ws-counter-1)
                   end-perform 
                   subtract 1 from l-cur-num-teleports
                   move zeros to l-cur-tile-effect-id             
               end-if 
               exit paragraph 
           end-if 
           if l-cursor-tel-dest-y not = zeros 
               and l-cursor-tel-dest-x not = zeros
               and l-cursor-tel-dest-map not = spaces then 
               add 1 to l-cur-num-teleports
               move l-cursor-draw-effect to l-cur-tile-effect-id
               move l-placement-pos 
                   to l-teleport-pos(l-cur-num-teleports)
               move l-cursor-tel-dest-y 
                   to l-teleport-dest-y(l-cur-num-teleports)
               move l-cursor-tel-dest-x
                   to l-teleport-dest-x(l-cur-num-teleports)
               move l-cursor-tel-dest-map
                   to l-teleport-dest-map(l-cur-num-teleports)                   
               display 
                   "Teleport placed at:" at 2401 
                   l-teleport-pos(l-cur-num-teleports) at 2417                  
               end-display
           end-if    
           exit paragraph.
       set-conveyor-right.
           move ws-conveyor-right-effect-id to l-cur-tile-effect-id
           exit paragraph.
       set-conveyor-down.
           move ws-conveyor-down-effect-id to l-cur-tile-effect-id
           exit paragraph.
       set-conveyor-left.
           move ws-conveyor-left-effect-id to l-cur-tile-effect-id
           exit paragraph.
       set-conveyor-up.
           move ws-conveyor-up-effect-id to l-cur-tile-effect-id
           exit paragraph.
       set-conveyor-reverse.
           move ws-conveyor-reverse-effect-id to l-cur-tile-effect-id
           exit paragraph.
       end program set-tile-effect.
[/INST]{
  "id": "BR-001",
  "description": "A teleport can only be placed on a tile where there is no teleport already.",
  "condition": "ls-teleport-is-found = true",
  "output": {
    "yes": "Remove placed teleport? [y/n] "
  }
}
{
  "id": "BR-002",
  "description": "Teleports can only be placed on tiles that are not covered by a wall.",
  "condition": "l-cursor-tel-dest-y = 0\\nand\\nl-cursor-tel-dest-x = 0\\nand\\nl-cursor-tel-dest-map = \" \"",
  "output": {
    "valid": "\"Teleport placed at:\" at 2401\\nl-teleport-pos(l-cur-num-teleports) at 2417"
  }
}[INST]       identification division.
       program-id. setup-tile-effect.
       environment division.
       configuration section.
       input-output section.
       file-control.
       data division.
       file section.
       working-storage section.
       copy screenio.
       copy "shared/copybooks/ws-constants.cpy".
       01  ws-filler                   pic a.
       01  ws-blank-line               pic a(50) value spaces.
       linkage section.
       01  l-cursor-tile-effect-id            pic 99.
       01  l-cursor-teleport-settings.
           05  l-cursor-tel-dest-y            pic 99.
           05  l-cursor-tel-dest-x            pic 99.
           05  l-cursor-tel-dest-map          pic x(15).              
       01  l-cursor-draw-char                 pic x.
       procedure division using 
           l-cursor-tile-effect-id l-cursor-teleport-settings
           l-cursor-draw-char.
       main-procedure.
           evaluate l-cursor-tile-effect-id
               when ws-no-tile-effect-id
                   goback
               when ws-teleport-effect-id
                   perform setup-teleport
               when ws-conveyor-right-effect-id
                   move ">" to l-cursor-draw-char
               when ws-conveyor-down-effect-id
                   move "v" to l-cursor-draw-char
               when ws-conveyor-left-effect-id
                   move "<" to l-cursor-draw-char
               when ws-conveyor-up-effect-id
                   move "^" to l-cursor-draw-char
               when ws-conveyor-reverse-effect-id
                   move "\" to l-cursor-draw-char
               when ws-player-start-effect-id
                   display "Nothing to set." at 2101
               when other 
                   display ws-blank-line at 2101
                   display "Not implemented. Press any key." at 2101
                   accept ws-filler at 2150 with auto-skip no-echo 
                   display ws-blank-line at 2101
                   move zeros to l-cursor-tile-effect-id                   
           end-evaluate 
           goback.
       setup-teleport.
           display "Enter teleport destination map: " at 2101
           accept l-cursor-tel-dest-map at 2133 update upper           
           display "Enter teleport destination Y position: " at 2101
           accept l-cursor-tel-dest-y at 2140 update 
           display "Enter teleport destination X position: " at 2101
           accept l-cursor-tel-dest-x at 2140 update 
           if l-cursor-tel-dest-map = spaces or l-cursor-tel-dest-y <= 0 
           or l-cursor-tel-dest-x <= 0 then 
               move zeros to l-cursor-tile-effect-id 
               display "Tile effect canceled. Press Enter.  " at 2101
               display "                         " at 2135
               accept ws-filler at 2140
           end-if 
           exit paragraph.
       end program setup-tile-effect.
[/INST]{
  "id": "BR-001",
  "description": "When a tile effect is set, the tile effect id must be greater than \\0.",
  "condition": "l-cursor-tile-effect-id > 0",
  "output": {
    "valid": "Continue with tile effect setup.",
    "invalid": "Cancel tile effect setup."
  }
}[INST]       identification division.
       program-id. set-map-exploration.
       environment division.
       data division.
       working-storage section.
       copy "shared/copybooks/ws-constants.cpy".
       local-storage section.
       01  ls-start-idx-y             pic S99 comp.
       01  ls-end-idx-y               pic S99 comp.
       01  ls-start-idx-x             pic S99 comp.
       01  ls-end-idx-x               pic S99 comp.
       01  ls-idx-y                   pic S99 comp.
       01  ls-idx-x                   pic S99 comp.
       linkage section.
       copy "engine/copybooks/l-map-explored-data.cpy".       
       01  l-cur-map-pos.
           05  l-cur-map-pos-y        pic S99.
           05  l-cur-map-pos-x        pic S99.
       01  l-tile-visibility          pic 999 comp.
       procedure division using 
           l-map-explored-data l-cur-map-pos l-tile-visibility.
       main-procedure.
           compute ls-start-idx-y = l-cur-map-pos-y - l-tile-visibility
           compute ls-end-idx-y = l-cur-map-pos-y + l-tile-visibility
           compute ls-start-idx-x = l-cur-map-pos-x - l-tile-visibility
           compute ls-end-idx-x = l-cur-map-pos-x + l-tile-visibility
           perform varying ls-idx-y from ls-start-idx-y by 1 
           until ls-idx-y > ls-end-idx-y
               perform varying ls-idx-x from ls-start-idx-x by 1 
               until ls-idx-x > ls-end-idx-x 
                   if ls-idx-y > 0 and ls-idx-x > 0 
                   and ls-idx-y < ws-max-map-height 
                   and ls-idx-x < ws-max-map-width then 
                       set l-is-explored(
                           ls-idx-y, ls-idx-x) to true 
                   end-if 
               end-perform
           end-perform
           goback.
       end program set-map-exploration.
[/INST]{
  "id": "BR-001",
  "description": "The program sets the value of the l-is-explored index \\nbased on the current map position and the visibility of the tile.\\nThe value of the index is set to true if the index is within the range of the map.",
  "condition": "ls-idx-y > 0 and ls-idx-x > 0 and\nls-idx-y < ws-max-map-height and\nls-idx-x < ws-max-map-width",
  "action": "set l-is-explored(ls-idx-y, ls-idx-x) to true"
}[INST]       identification division.
       program-id. tile-effect-handler.
       environment division.
       data division.
       working-storage section.
       copy "shared/copybooks/ws-constants.cpy".
       01  ws-tele-idx                   pic 999 comp.
       01  ws-idx-y                      pic 999 comp.
       01  ws-idx-x                      pic 999 comp.
       01  ws-color-temp              pic 9.
       01  ws-swap-colors-sw             pic a value 'N'.
           88  ws-swap-colors            value 'Y'.
           88  ws-not-swap-colors        value 'N'.
       local-storage section.
       01  ls-action-history-temp          pic x(75).      
       linkage section.
       01  l-tile-effect-id-src            pic 99 comp.
       01  l-tile-char-src                 pic x.       
       copy "engine/copybooks/l-player.cpy".
       01  l-temp-map-pos.
           05  l-temp-map-pos-y        pic S99.
           05  l-temp-map-pos-x        pic S99.
       copy "shared/copybooks/l-teleport-data.cpy".
       copy "engine/copybooks/l-map-files.cpy".
       copy "shared/copybooks/l-tile-map-table-matrix.cpy".
       01  l-tile-effect-return-code      pic 99.
       01  l-player-moved-sw              pic a.
           88  l-player-moved             value 'Y'.
           88  l-player-not-moved         value 'N'.
       copy "engine/copybooks/l-action-history.cpy".
       procedure division using 
           l-tile-effect-id-src 
           l-tile-char-src
           l-player l-temp-map-pos
           l-teleport-data l-map-files 
           l-tile-map-table-matrix
           l-player-moved-sw
           l-action-history
           l-tile-effect-return-code.
       main-procedure.
           move zeros to l-tile-effect-return-code
           if l-tile-effect-id-src is zeros then 
               goback
           end-if 
           evaluate l-tile-effect-id-src
               when ws-teleport-effect-id
                   perform check-teleport
               when ws-conveyor-right-effect-id
                   perform handle-conveyor-right
               when ws-conveyor-down-effect-id
                   perform handle-conveyor-down
               when ws-conveyor-left-effect-id
                   perform handle-conveyor-left
               when ws-conveyor-up-effect-id                   
                   perform handle-conveyor-up
               when ws-conveyor-reverse-effect-id 
                   if l-player-moved then                   
                       perform handle-conveyor-reverse-switch
                   end-if 
           end-evaluate
           goback.
       check-teleport.
           if l-cur-num-teleports = 0 then 
               exit paragraph
           end-if 
           perform varying ws-tele-idx 
           from 1 by 1 until ws-tele-idx > l-cur-num-teleports
               if l-teleport-pos(ws-tele-idx) = l-temp-map-pos then 
                   compute l-player-y = 
                       l-teleport-dest-y(ws-tele-idx) - l-player-scr-y
                   end-compute 
                   compute l-player-x = 
                       l-teleport-dest-x(ws-tele-idx) - l-player-scr-x
                   end-compute 
                   if l-teleport-dest-map(ws-tele-idx) 
                   not = l-map-name then
                       move l-teleport-dest-map(ws-tele-idx) 
                           to l-map-name-temp                       
                   end-if 
                   exit perform 
               end-if 
           end-perform           
           if l-map-name-temp not = l-map-name then    
               move l-map-name-temp to l-map-name             
               move ws-load-map-tele-return-code 
                   to l-tile-effect-return-code                   
           end-if    
           exit paragraph.    
       handle-conveyor-right.           
           add 1 to l-player-x              
           exit paragraph.
       handle-conveyor-down.           
           add 1 to l-player-y
           exit paragraph.
       handle-conveyor-left.           
           subtract 1 from l-player-x          
           exit paragraph.
       handle-conveyor-up.           
           subtract 1 from l-player-y           
           exit paragraph.           
       handle-conveyor-reverse-switch.
           if l-tile-char-src = '\' then 
               move '/' to l-tile-char-src
               move "Switch pressed. Conveyor belt direction: REVERSE"
                   to ls-action-history-temp
           else 
               move '\' to l-tile-char-src
               move "Switch pressed. Conveyor belt direction: FORWARD"
                   to ls-action-history-temp
           end-if   
           call "add-action-history-item" using
               ls-action-history-temp l-action-history
           end-call                         
           perform varying ws-idx-y 
           from 1 by 1 until ws-idx-y > ws-max-map-height
               perform varying ws-idx-x 
               from 1 by 1 until ws-idx-x > ws-max-map-width                   
                   set ws-not-swap-colors to true 
                   evaluate l-tile-effect-id(ws-idx-y, ws-idx-x)
                       when ws-conveyor-right-effect-id
                           move '<' to l-tile-char(ws-idx-y, ws-idx-x)
                           move ws-conveyor-left-effect-id
                               to l-tile-effect-id(ws-idx-y, ws-idx-x)
                           set ws-swap-colors to true 
                       when ws-conveyor-down-effect-id
                           move '^' to l-tile-char(ws-idx-y, ws-idx-x)
                           move ws-conveyor-up-effect-id
                               to l-tile-effect-id(ws-idx-y, ws-idx-x)
                           set ws-swap-colors to true 
                       when ws-conveyor-left-effect-id
                           move '>' to l-tile-char(ws-idx-y, ws-idx-x)
                           move ws-conveyor-right-effect-id
                               to l-tile-effect-id(ws-idx-y, ws-idx-x)
                           set ws-swap-colors to true 
                       when ws-conveyor-up-effect-id
                           move 'v' to l-tile-char(ws-idx-y, ws-idx-x)
                           move ws-conveyor-down-effect-id
                               to l-tile-effect-id(ws-idx-y, ws-idx-x)
                           set ws-swap-colors to true 
                   end-evaluate
                   if ws-swap-colors then 
                       move l-tile-bg(ws-idx-y, ws-idx-x) 
                           to ws-color-temp
                       move l-tile-fg(ws-idx-y, ws-idx-x)
                           to l-tile-bg(ws-idx-y, ws-idx-x) 
                       move ws-color-temp
                           to l-tile-fg(ws-idx-y, ws-idx-x)
                       if l-tile-is-blinking(ws-idx-y, ws-idx-x) then 
                           set l-tile-not-blinking(ws-idx-y, ws-idx-x)
                               to true
                       else
                           set l-tile-is-blinking(ws-idx-y, ws-idx-x)
                               to true
                       end-if  
                   end-if 
               end-perform
           end-perform
           exit paragraph.
       end program tile-effect-handler.
[/INST]{
  "id": "BR-001",  "description": "If the tile bitmap contains '|' the player can teleport to where it is pointing to.",
  "condition": "bitmap at (x, y) = '|'",
  "output": {
    "teleport": {
      "x": "l-teleport-dest-x",
      "y": "l-teleport-dest-y",
      "map": "l-teleport-dest-map"
    }
  }
}
{
  "id": "BR-002",  "description": "If the player steps onto a tile with the bitmap '\\' the conveyor moves to the left, otherwise it is to the right if the tile has '/'",
  "condition": "bitmap at (x, y) = '/'",
  "output": {
    "move conveyor": {
      "direction": "right"
    }
  }
}
{
  "id": "BR-003",  "description": "If the player steps onto a tile with the bitmap '^' the conveyor moves the player down, otherwise it is up if the tile has 'v'",
  "condition": "bitmap at (x, y) = '^'",
  "output": {
    "move conveyor": {
      "direction": "down"
    }
  }
}
{
  "id": "BR-004",  "description": "If the player steps onto a tile with the bitmap '<' the conveyor moves the player up, otherwise it is down if the tile has 'v'",
  "condition": "bitmap at (x, y) = '<'",
  "output": {
    "move conveyor": {
      "direction": "left"
    }
  }
}
{
  "id": "BR-005",  "description": "If the player steps onto a tile with the bitmap 'v' the conveyor moves the player left, otherwise it is right if the tile has '>'",
  "condition": "bitmap at (x, y) = 'v'",
  "output": {
    "move conveyor": {
      "direction": "left"
    }
  }
}
{
  "id": "BR-006",  "description": "If the conveyor is not on reverse mode and a switch is pressed, place a '|' on the tile and put the conveyor in reverse.",
  "condition": "bitmap at (x, y) = '>' && ws-swap-colors = 'Y'",
  "output": {
    "change conveyor": {
      "bitmap at (x, y)": "|",
      "direction": "left"
    }
  }
}
{
  "id": "BR-007",  "description": "If the conveyor is on reverse mode and a switch is pressed, place a '|' on the tile and change the conveyor to normal direction.",
  "condition": "bitmap at (x, y) = '=' && ws-swap-colors = 'Y'",
  "output": {
    "change conveyor": {
      "bitmap at (x, y)": "|",
      "direction": "right"
    }
  }
}[INST]       identification division.
       program-id. write-map-data.
       environment division.
       configuration section.
       input-output section.
       file-control.
           select optional fd-tile-data 
               assign to dynamic l-map-dat-file 
               organization is record sequential
               file status is ls-map-file-status.
           select optional fd-teleport-data
               assign to dynamic l-map-tel-file
               organization is record sequential
               file status is ls-teleport-file-status.            
           select optional fd-enemy-data
               assign to dynamic l-map-enemy-file
               organization is record sequential
               file status is ls-enemy-file-status.
           select optional fd-item-data
               assign to dynamic l-map-item-file
               organization is record sequential
               file status is ls-item-file-status.
       data division.
       file section.
       copy "shared/copybooks/fd-tile-data.cpy".
       copy "shared/copybooks/fd-teleport-data.cpy".
       copy "shared/copybooks/fd-enemy-data.cpy".
       copy "shared/copybooks/fd-item-data.cpy".
       working-storage section.
       copy "shared/copybooks/ws-constants.cpy".
       01  ws-counter-1                 pic 999 comp.
       01  ws-counter-2                 pic 999 comp.
       local-storage section.
       01  ls-map-file-statuses.
           05  ls-map-file-status      pic xx.
           05  ls-teleport-file-status pic xx.
           05  ls-enemy-file-status    pic xx.
           05  ls-item-file-status     pic xx.
       linkage section.
       01  l-map-files.  
           05  l-map-name             pic x(15).
           05  l-map-name-temp        pic x(15). 
           05  l-map-dat-file         pic x(15).               
           05  l-map-tel-file         pic x(15).
           05  l-map-enemy-file       pic x(15).   
           05  l-map-item-file        pic x(15).
       copy "shared/copybooks/l-tile-map-table-matrix.cpy".
       copy "shared/copybooks/l-enemy-data.cpy".
       copy "shared/copybooks/l-teleport-data.cpy".
       copy "shared/copybooks/l-item-data.cpy".
       01  l-return-code                   pic 9 value 0.         
       procedure division using 
           l-map-files l-tile-map-table-matrix 
           l-enemy-data l-teleport-data l-item-data
           l-return-code. 
       main-procedure.
           move ws-save-status-fail to l-return-code 
           open output fd-tile-data
           perform varying ws-counter-1 
           from 1 by 1 until ws-counter-1 > ws-max-map-height
               perform varying ws-counter-2 
               from 1 by 1 until ws-counter-2 > ws-max-map-width
                   move l-tile-map-data(ws-counter-1, ws-counter-2) 
                       to f-tile-data-record
                   write f-tile-data-record                                                                      
               end-perform
           end-perform
           close fd-tile-data
           open output fd-enemy-data
               perform varying ws-counter-1 
               from 1 by 1 until ws-counter-1 > l-cur-num-enemies
                   move l-enemy(ws-counter-1) to f-enemy
                   write f-enemy 
               end-perform 
           close fd-enemy-data
           open output fd-teleport-data
               perform varying ws-counter-1 
               from 1 by 1 until ws-counter-1 > l-cur-num-teleports
                   move l-teleport-data-record(ws-counter-1) 
                       to f-teleport-data-record
                   write f-teleport-data-record
               end-perform 
           close fd-teleport-data
           open output fd-item-data
               perform varying ws-counter-1 
               from 1 by 1 until ws-counter-1 > l-cur-num-items
                   move l-item-data-record(ws-counter-1) 
                       to f-item-data-record
                   write f-item-data-record
               end-perform 
           close fd-item-data
           move ws-save-status-success to l-return-code
           goback.
       end program write-map-data.
[/INST]{
  "id": "BR-001",
  "description": "The size of a map is determined by the maximum height and width values.",
  "condition": "ws-counter-1 > ws-max-map-height",
  "output": {
    "end": "move l-tile-map-data(ws-counter-1, ws-counter-2) to f-tile-data-record\nwrite f-tile-data-record"
  }
},
{
  "id": "BR-002",
  "description": "The number of enemies in a map is stored in l-cur-num-enemies.",
  "condition": "ws-counter-1 > l-cur-num-enemies",
  "output": {
    "end": "move l-enemy(ws-counter-1) to f-enemy\nwrite f-enemy"
  }
},
{
  "id": "BR-003",
  "description": "The number of teleports in a map is stored in l-cur-num-teleports.",
  "condition": "ws-counter-1 > l-cur-num-teleports",
  "output": {
    "end": "move l-teleport-data-record(ws-counter-1) to f-teleport-data-record\nwrite f-teleport-data-record"
  }
},
{
  "id": "BR-004",
  "description": "The number of items in a map is stored in l-cur-num-items.",
  "condition": "ws-counter-1 > l-cur-num-items",
  "output": {
    "end": "move l-item-data-record(ws-counter-1) to f-item-data-record\nwrite f-item-data-record"
  }
}[INST]       identification division.
       program-id. browser-launcher.
       environment division.
       configuration section.
       repository.
           function get-config 
           function pipe-open
           function pipe-close.
       input-output section.
       data division.
       file section.
       working-storage section.
       01  ws-pipe-record.
           05  ws-pipe-pointer                  usage pointer.
           05  ws-pipe-return                   usage binary-long.
       01  ws-web-cmd.
           05  ws-web-cmd-start                 pic x(32) value spaces.
           05  ws-browser-cmd                   pic x(32) value "lynx ".
           05  ws-url                           pic x(255) value spaces. 
           05  ws-web-cmd-end                   pic x(10) value spaces.
       77  ws-launch-status                     pic 9 value 9.
       local-storage section.
       01  ls-config-val-temp                   pic x(32) value spaces.
       linkage section.
       01  l-item-link                          pic x any length.
       screen section.
       copy "./screens/blank_screen.cpy".
       procedure division using 
           l-item-link.
       main-procedure.
           display spaces blank screen 
           move function get-config("browser") to ws-browser-cmd           
           if ws-browser-cmd = "NOT-SET" then 
               call "logger" using function concatenate(
                   "browser configuration is currently set to 'NOT-SET'"
                   ". Cannot launch item link: " l-item-link)
               end-call 
               goback 
           end-if 
           move function trim(l-item-link) to ws-url
           move function substitute(ws-url, "&", "\&") to ws-url          
           move function get-config("newwin") to ls-config-val-temp
           if ls-config-val-temp = "true" then 
               move function get-config("newwin_s") to ws-web-cmd-start
               move function get-config("newwin_e") to ws-web-cmd-end
           end-if 
           call "logger" using ws-url 
           call "logger" using function concatenate(
               "Launching item in browser using command: ",
               ws-web-cmd)
           end-call
           move pipe-open(ws-web-cmd, "w") to ws-pipe-record
           call "logger" using "pipe open called..."
           if ws-pipe-return not equal 255 then
               call "logger" using "pipe return value check."
               move pipe-close(ws-pipe-record) to ws-launch-status
               if ws-launch-status is zero then
                   call "logger" using function concatenate(
                       "Web launch success. Status=", ws-launch-status)
                   end-call 
               else
                   call "logger" using function concatenate(
                       "Error launching ", function trim(ws-web-cmd), 
                       ".. Status=", ws-launch-status)
                   end-call
               end-if
           end-if
           display spaces blank screen       
           goback.
       end program browser-launcher.
[/INST]{
  "id": "BR-001",
  "description": "If the browser configuration is not set, the browser cannot be launched.",
  "condition": "ws-browser-cmd = \"NOT-SET\"",
  "output": {
    "fail": "browser configuration is currently set to 'NOT-SET'"
  }
},
{
  "id": "BR-002",
  "description": "The URL to be opened in the browser must be trimmed before use.",
  "condition": "ws-url = function trim(l-item-link)",
  "output": {}
},
{
  "id": "BR-003",
  "description": "The URL to be opened in the browser must have '&' characters replaced with '\\&'.",
  "condition": "ws-url = function substitute(ws-url, \"&\", \"\\&\")",
  "output": {}
},
{
  "id": "BR-004",
  "description": "If the browser configuration specifies a new window, use the appropriate command prefixes and suffixes.",
  "condition": "ls-config-val-temp = \"true\"",
  "output": {}
},
{
  "id": "BR-005",
  "description": "The browser command to be executed must be logged before execution.",
  "condition": "call \"logger\" using ws-url",
  "output": {}
},
{
  "id": "BR-006",
  "description": "The browser command to be executed must be logged before execution.",
  "condition": "call \"logger\" using function concatenate( \"Launching item in browser using command: \", ws-web-cmd)",
  "output": {}
},
{
  "id": "BR-007",
  "description": "If the pipe is not opened successfully, an error must be logged.",
  "condition": "ws-pipe-return not equal 255",
  "output": {
    "fail": "pipe return value check."
  }
},
{
  "id": "BR-008",
  "description": "If the pipe is closed successfully, the launch status must be set to zero.",
  "condition": "ws-launch-status is zero",
  "output": {
    "success": "Web launch success. Status="
  }
},
{
  "id": "BR-009",
  "description": "If the pipe is not closed successfully, an error must be logged.",
  "condition": "ws-launch-status is not zero",
  "output": {
    "fail": "Error launching "
  }
}[INST]       replace ==:BUFFER-SIZE:== by ==32768==.
       identification division.
       program-id. logger.
       environment division.
       configuration section.
       input-output section.
           file-control.
               select optional fd-log-file
               assign to dynamic ws-file-name
               organization is line sequential.
       data division.
       file section.
           FD fd-log-file.
           01 f-log-text-raw                 pic x(:BUFFER-SIZE:).
       working-storage section.
       01  ws-date-record.
           05  ws-current-date.
               10  ws-year               pic 9(4).
               10  ws-month              pic 99.
               10  ws-day                pic 99.
           05 ws-current-time.
               10  ws-hour               pic 99.
               10  ws-min                pic 99.
               10  ws-sec                pic 99.
               10  ws-milli              pic 99.
           05  ws-time-offset            pic S9(4).
       01  ws-log-enabled-sw             pic a value 'N'.
           88  ws-log-enabled            value 'Y'.
           88  ws-log-disabled           value 'N'.
       77  ws-log-buffer                 pic x(:BUFFER-SIZE:).
       77  ws-file-name                  pic x(18) 
                                         value "crssr_UNSET.log".
       78  ws-log-enabled-switch         value "==ENABLE-LOG==".
       78  ws-log-disabled-switch        value "==DISABLE-LOG==".
       linkage section.
       01  l-log-text                     pic x any length.
       procedure division 
           using l-log-text.
       main-procedure.
           if l-log-text = ws-log-disabled-switch then
               set ws-log-disabled to true
           end-if 
           if l-log-text = ws-log-enabled-switch then 
               set ws-log-enabled to true
           end-if
           if ws-log-disabled then 
               goback
           end-if 
           move spaces to ws-log-buffer
           move function current-date to ws-date-record
           string
               "crssr" delimited by size
               "_" delimited by size  
               ws-year delimited by size
               ws-month delimited by size
               ws-day delimited by size 
               ".log" delimited by size 
               into ws-file-name
           end-string
           string 
               "[" delimited by size
               ws-year delimited by size 
               "-" delimited by size 
               ws-month delimited by size
               "-" delimited by size 
               ws-day delimited by size 
               " " delimited by size
               ws-hour delimited by size
               ":" delimited by size
               ws-min delimited by size
               ":" delimited by size
               ws-sec delimited by size
               "." delimited by size
               ws-milli delimited by size
               "] " delimited by size
               l-log-text delimited by size
               into ws-log-buffer
           end-string
           open extend fd-log-file
               write f-log-text-raw from ws-log-buffer
           close fd-log-file
           goback.
       end program logger.
[/INST]{
  "id": "BR-001",
  "description": "The logger file is enabled when the input text is “==ENABLE-LOG==”.",
  "condition": "l-log-text = ws-log-enabled-switch",
  "output": {
    "enabled": "logger is enabled"
  }
},
{
  "id": "BR-002",
  "description": "The logger file is disabled when the input text is “==DISABLE-LOG==”.",
  "condition": "l-log-text = ws-log-disabled-switch",
  "output": {
    "disabled": "logger is disabled"
  }
},
{
  "id": "BR-003",
  "description": "If the logger is disabled, the program terminates.",
  "condition": "ws-log-disabled",
  "output": {
    "exit": "program exits"
  }
},
{
  "id": "BR-004",
  "description": "The log file name is constructed using the current date and time.",
  "condition": null,
  "output": {
    "log_file_name": "crssr_YYYY_MM_DD.log"
  }
},
{
  "id": "BR-005",
  "description": "Log entries are written to the log file in the following format: \"[YYYY-MM-DD HH:MM:SS.mmm] text\".",
  "condition": null,
  "output": {
    "log_entry_format": "[YYYY-MM-DD HH:MM:SS.mmm] text"
  }
}[INST]       identification division.
       function-id. remove-rss-record.
       environment division.
       configuration section.
       repository.
       special-names.
       input-output section.
           file-control.                              
               copy "./copybooks/filecontrol/rss_list_file.cpy".
       data division.
       file section.
           copy "./copybooks/filedescriptor/fd_rss_list_file.cpy".
       working-storage section.
       copy "./copybooks/wsrecord/ws-rss-list-record.cpy".
       78  ws-rss-list-file-name               value "./feeds/list.dat".
       linkage section.
       01  l-rss-link                          pic x(256).
       01  l-delete-feed-status                pic 9 value zero.
           88  l-return-status-success           value 1.
           88  l-return-status-bad-param         value 2.
           88  l-return-status-not-found         value 3.
       screen section.    
       procedure division 
           using l-rss-link 
           returning l-delete-feed-status.
       main-procedure.
           if l-rss-link = spaces then 
               call "logger" using function concatenate(
                   "URL is required to delete an RSS feed. No URL ",
                   "passed to remove-rss-record. Returning status 2.")
               end-call
               set l-return-status-bad-param to true 
               goback 
           end-if
           move l-rss-link to f-rss-link   
           perform delete-rss-record
           goback.
       delete-rss-record.
           call "logger" using function concatenate(
               "Deleting RSS with URL: ", f-rss-link)
           end-call 
           open i-o fd-rss-list-file
               delete fd-rss-list-file record
                   invalid key
                       call "logger" using function concatenate( 
                           "No RSS record to delete with url: ", 
                           f-rss-link, " : No record found.") 
                       end-call
                       set l-return-status-not-found to true 
                   not invalid key
                       call "logger" using function concatenate( 
                           "RSS Record id ", f-rss-feed-id, " deleted.") 
                       end-call 
                       set l-return-status-success to true 
               end-delete
           close fd-rss-list-file
           exit paragraph.
       end function remove-rss-record.
[/INST]{
  "id": "BR-1",
  "description": "A URL is required to delete an RSS feed.",
  "condition": "l-rss-link = spaces",
  "output": {
    "error": "URL is required to delete an RSS feed."
  }
},
{
  "id": "BR-2",
  "description": "An RSS Record with a given URL should be found before deleting.",
  "condition": "perform delete-rss-record",
  "output": {
    "success": "RSS Record id [f-rss-feed-id] deleted.",
    "not found": "No RSS record to delete with url: [f-rss-link] : No record found."
  }
}[INST]       replace ==:BUFFER-SIZE:== by ==32768==.
       identification division.
       program-id. reset-files.
       environment division.
       configuration section.
       repository.
       special-names.
       input-output section.
           file-control.                              
               select optional fd-rss-last-id-file
               assign to dynamic ws-rss-last-id-file-name
               organization is line sequential
               status is ws-last-id-file-status.
               select fd-rss-list-file 
               assign to dynamic ws-rss-list-file-name
               organization is indexed
               access is dynamic
               record key is f-rss-link
               alternate record key is f-rss-feed-id
               status is ws-list-file-status.
               select fd-rss-content-file 
               assign to dynamic ws-rss-dat-file-name
               status is ws-dat-file-status.
               select fd-temp-rss-file
               assign to dynamic ws-rss-working-temp-file-name
               organization is line sequential
               status is ws-temp-file-status.
       data division.
       file section.
           copy "./copybooks/filedescriptor/fd_rss_list_file.cpy".
           copy "./copybooks/filedescriptor/fd_rss_last_id_file.cpy".
           copy "./copybooks/filedescriptor/fd_rss_content_file.cpy".
           FD fd-temp-rss-file.
           01 f-temp-rss-file-raw                 pic x(:BUFFER-SIZE:).
       working-storage section.
       copy "./copybooks/wsrecord/ws-last-id-record.cpy".
       01  ws-file-status.
           05  ws-last-id-file-status        pic 99.
           05  ws-list-file-status           pic 99.
           05  ws-dat-file-status            pic 99.
           05  ws-temp-file-status           pic 99.
       01  ws-counter                        pic 9(5).
       01  ws-accept-delete                  pic a.
       01  ws-eof-sw                         pic a value 'N'.
           88  ws-eof                        value 'Y'.
           88  ws-not-eof                    value 'N'.     
       01  ws-rss-dat-file-name              pic x(128) value spaces.
       78  ws-rss-last-id-file-name          value "./feeds/lastid.dat".
       78  ws-rss-list-file-name             value "./feeds/list.dat".
       01  ws-rss-working-temp-file-name     pic x(128).
       78  ws-rss-temp-file-name             value "./feeds/temp.rss".
       78  ws-rss-temp-retry-file-name       value "./feeds/temp1.rss".
       78  ws-file-status-not-found          value 35.
       local-storage section.
       linkage section.
       procedure division.
       main-procedure.
           display space 
           display "---------------------------------------------------"
           display " WARNING: All current feeds will be removed!"
           display "---------------------------------------------------"
           display 
               "Are you sure you would like to reset all data files? "
               "(Y/N) "
               with no advancing 
           end-display 
           accept ws-accept-delete
           if ws-accept-delete <> "Y" and "y" then 
               display "Aborting data reset and exiting..." 
               goback
           end-if 
           call "logger" using 
               "Removing all RSS feed related data files."
           end-call 
           perform load-highest-rss-record
           perform delete-files
           display "Done."
           goback.
       load-highest-rss-record.
           set ws-not-eof to true 
           open input fd-rss-last-id-file
               perform until ws-eof
                   read fd-rss-last-id-file into ws-last-id-record
                       at end set ws-eof to true                    
                   end-read
               end-perform
           close fd-rss-last-id-file
           call "logger" using function concatenate(
               "Highest record found: ", ws-last-id-record)
           end-call 
           exit paragraph.
       delete-files.
           call "logger" using "Deleting files."
           if ws-last-id-record <> zero then
               display "Deleting RSS data files..."
               perform varying ws-counter 
                   from 1 by 1 until ws-counter > ws-last-id-record
                   move function concatenate(
                       "./feeds/rss_", ws-counter, ".dat") 
                       to ws-rss-dat-file-name 
                   delete file fd-rss-content-file
                   if ws-dat-file-status <> zero 
                   and ws-dat-file-status <> ws-file-status-not-found 
                   then 
                       display "Error deleting " 
                           function trim(ws-rss-dat-file-name) 
                           ". Delete status: " ws-dat-file-status
                       end-display
                       call "logger" using function concatenate(
                           "Failed to delete file: ", 
                           function trim(ws-rss-dat-file-name),
                           " : Delete status: " ws-dat-file-status)
                       end-call
                   else
                       call "logger" using function concatenate(
                           "Successfully deleted: ", 
                           function trim(ws-rss-dat-file-name),
                           " : Delete status: " ws-dat-file-status)
                       end-call 
                   end-if
               end-perform 
           else
               call "logger" using "No data files to delete. Skipping."
           end-if 
           display "Deleting RSS record list data file..."
           delete file fd-rss-list-file
           if ws-list-file-status <> zero 
           and ws-list-file-status <> ws-file-status-not-found then
               display "Error deleting " 
                   function trim(ws-rss-list-file-name) 
                   ". Delete status: " ws-list-file-status
               end-display
               call "logger" using function concatenate(
                   "Failed to delete file: ", 
                   function trim(ws-rss-list-file-name),
                   " : Delete status: " ws-list-file-status)
               end-call
           else
               call "logger" using function concatenate(
                   "Successfully deleted: ", 
                   function trim(ws-rss-list-file-name),
                   " : Delete status: " ws-list-file-status)
               end-call                
           end-if
           display "Deleting last id data file..."
           delete file fd-rss-last-id-file
           if ws-last-id-file-status <> zero
           and ws-last-id-file-status <> ws-file-status-not-found then
               display "Error deleting " 
                   function trim(ws-rss-last-id-file-name) 
                   ". Delete status: " ws-last-id-file-status
               end-display
               call "logger" using function concatenate(
                   "Failed to delete file: ", 
                   function trim(ws-rss-last-id-file-name),
                   " : Delete status: " ws-last-id-file-status)
               end-call
           else
               call "logger" using function concatenate(
                   "Successfully deleted: ", 
                   function trim(ws-rss-last-id-file-name),
                   " : Delete status: " ws-last-id-file-status)
               end-call                
           end-if
           display "Deleting temp data file(s)..."
           move ws-rss-temp-file-name to ws-rss-working-temp-file-name
           perform delete-temp-files
           move ws-rss-temp-retry-file-name 
               to ws-rss-working-temp-file-name
           perform delete-temp-files
           exit paragraph.
       delete-temp-files.
           if ws-rss-working-temp-file-name = spaces then 
               call "logger" using 
                   "Cannot delete temp file. No file name has been set."
               end-call 
               exit paragraph
           end-if 
           delete file fd-temp-rss-file
           if ws-temp-file-status <> 0 
           and ws-temp-file-status <> ws-file-status-not-found then
               display "Error deleting " 
                   function trim(ws-rss-working-temp-file-name) 
                   ". Delete status: " ws-temp-file-status
               end-display
               call "logger" using function concatenate(
                   "Failed to delete file: ", 
                   function trim(ws-rss-working-temp-file-name),
                   " : Delete status: " ws-temp-file-status)
               end-call
           else
               call "logger" using function concatenate(
                   "Successfully deleted: ", 
                   function trim(ws-rss-working-temp-file-name),
                   " : Delete status: " ws-temp-file-status)
               end-call                
           end-if                      
           exit paragraph.
       end program reset-files.
[/INST]{
  "id": "BR-001",
  "description": "Before deleting all the related data files, a confirmation is required.",
  "condition": "The user must accept to delete all the data files by entering (Y/y).",
  "output": {}
},
{
  "id": "BR-002",
  "description": "The program logs 'Removing all RSS feed related data files'.",
  "condition": "It performs a call to the \"logger\" function with the parameter 'Removing all RSS feed related data files'.",
  "output": {}
},
{
  "id": "BR-003",
  "description": "The program should load the highest RSS record from the last id data file.",
  "condition": "It has to open the last id file for reading, perform a loop until the end-of-file is reached, and read the last id record from the file.",
  "output": {}
},
{
  "id": "BR-004",
  "description": "If the last id record is not zero, then the program should delete all the RSS data files.",
  "condition": "If WS-LAST-ID-RECORD <> ZERO then",
  "output": {}
},
{
  "id": "BR-005",
  "description": "The program should delete the RSS record list data file.",
  "condition": "It performs a delete operation on the RSS record list data file.",
  "output": {}
},
{
  "id": "BR-006",
  "description": "The program should delete the last id data file.",
  "condition": "It performs a delete operation on the last id data file.",
  "output": {}
},
{
  "id": "BR-007",
  "description": "The program should delete the temp data files.",
  "condition": "It performs a delete operation on the temp data files.",
  "output": {}
}[INST]       replace ==:BUFFER-SIZE:== by ==32768==.
       identification division.
       function-id. rss-downloader.
       environment division.
       configuration section.
       repository.
           function get-config 
           function pipe-open
           function pipe-close
           function rss-parser.
       input-output section.
           file-control.           
               copy "./copybooks/filecontrol/rss_list_file.cpy".
       data division.
       file section.
           copy "./copybooks/filedescriptor/fd_rss_list_file.cpy".
       working-storage section.
       01  ws-pipe-record.
           05  ws-pipe-pointer                usage pointer.
           05  ws-pipe-return                 usage binary-long.
       01  ws-download-cmd-start              pic x(32).
       01  ws-xmllint-cmd                     pic x(32). 
       77  ws-rss-temp-filename               pic x(255)
                                              value "./feeds/temp.rss".
       77  ws-rss-temp-filename-retry         pic x(255)
                                              value "./feeds/temp1.rss".
       78  ws-rss-list-file-name             value "./feeds/list.dat".
       local-storage section.
       77  ls-download-cmd                    pic x(:BUFFER-SIZE:).
       77  ls-xmllint-cmd-full                pic x(:BUFFER-SIZE:).
       77  ls-rss-feed-url                    pic x(256) value spaces.
       77  ls-download-status                 pic 9 value 9.
       77  ls-parse-status                    pic S9 value 0.
       77  ls-format-status                   pic 9 value 0.
       77  ls-url-prefix                      pic x(4).
       77  ls-download-parse-status-temp      pic 9 value 0.
       linkage section.
           01  l-feed-url                         pic x(256).
           01  l-download-and-parse-status        pic 9 value zero.
               88  l-return-status-success        value 1.
               88  l-return-status-parse-fail     value 2.
               88  l-return-status-download-fail  value 3.
               88  l-return-status-url-invalid    value 4.
               88  l-return-status-format-fail    value 5.
       procedure division 
           using l-feed-url
           returning l-download-and-parse-status.
       main-procedure.
           call "logger" using 
               function concatenate("URL passed to downloader: ", 
               l-feed-url)
           end-call
           move function lower-case(l-feed-url(1:4)) to ls-url-prefix
           if ls-url-prefix not = "http" then               
               call "logger" 
                   using "Cannot download RSS Feed. Url is invalid." 
               end-call
               set l-return-status-url-invalid to true 
               goback 
           end-if 
           move l-feed-url to ls-rss-feed-url
           perform download-rss-feed   
           if ls-download-status is not zero then
               call "logger" using function concatenate(
                   "Error downloading RSS feed. Status: ",
                   ls-download-status)
               end-call
               set l-return-status-download-fail to true
           else
               call "logger" using 
                   "Download complete. Attempting to parse data"
               end-call
               move function rss-parser(
                   ws-rss-temp-filename, ls-rss-feed-url)
                   to ls-parse-status
               if ls-parse-status = 1 then 
                   call "logger" using "Parsing success."
                   set l-return-status-success to true 
               else 
                   call "logger" using function concatenate(
                       "Parse failure. Parse Status code:",
                       ls-parse-status)
                   end-call 
                   set l-return-status-parse-fail to true 
                   perform xmllint-and-reparse-temp-file
               end-if                                                 
           end-if
           perform save-rss-feed-status
           goback.
       download-rss-feed.
           call "logger" using 
               function concatenate(
               "Downloading RSS Feed: ", function trim(ls-rss-feed-url))
           end-call.
           move function get-config("down_cmd") to ws-download-cmd-start
           move function concatenate(
               function trim(ws-download-cmd-start), SPACE, 
               function trim(ws-rss-temp-filename), SPACE,
               function trim(ls-rss-feed-url), SPACE)
           to ls-download-cmd
           call "logger" using function trim(ls-download-cmd)
           move pipe-open(ls-download-cmd, "r") to ws-pipe-record
           if ws-pipe-return not equal 255 then
               move pipe-close(ws-pipe-record) to ls-download-status
               if ls-download-status is zero then
                   call "logger" using function concatenate(
                       "Download success. Status=", ls-download-status)
                   end-call
               else
                   call "logger" using function concatenate(
                       "Error downloading RSS feed. Status=", 
                       ls-download-status)
                   end-call
               end-if
           end-if
           exit paragraph.
       xmllint-and-reparse-temp-file.
           move function get-config("xmllint") to ws-xmllint-cmd
           if ws-xmllint-cmd = "NOT-SET" then 
               call "logger" using function concatenate(
                   "Xmllint is not configured. Not attempting to format"
                   " and reparse downloaded file.")
               end-call 
               exit paragraph
           end-if 
           move function concatenate(
               ws-xmllint-cmd,
               function trim(ws-rss-temp-filename),  
               " > ", function trim(ws-rss-temp-filename-retry))
           to ls-xmllint-cmd-full
           call "logger" using function trim(ls-xmllint-cmd-full)
           move zero to ls-format-status
           move zero to ws-pipe-return
           move pipe-open(ls-xmllint-cmd-full, "r") to ws-pipe-record
           if ws-pipe-return = 255 then
               call "logger" using function concatenate(
                   "Failed to open xmllint format command: " 
                   ls-xmllint-cmd-full)
               end-call 
               set l-return-status-format-fail to true 
               exit paragraph 
           end-if 
           move pipe-close(ws-pipe-record) to ls-format-status
           if ls-format-status is not zero then
               call "logger" using function concatenate(
                   "Error formatting RSS feed. Status=", 
                   ls-format-status)
               end-call
               set l-return-status-format-fail to true 
               exit paragraph
           end-if 
           call "logger" using function concatenate(
               "Format success. Status=", ls-format-status, 
               " : Attempting to reparse file.")
           end-call
           move function rss-parser(
               ws-rss-temp-filename-retry, ls-rss-feed-url)
               to ls-parse-status
           if ls-parse-status = 1 then 
               call "logger" using "Parsing success."
               set l-return-status-success to true 
           else 
               call "logger" using function concatenate(
                   "Parse failure. Parse Status code:",
                   ls-parse-status)
               end-call 
               set l-return-status-parse-fail to true 
           end-if          
           exit paragraph.
       save-rss-feed-status.
           move ls-rss-feed-url to f-rss-link 
           move l-download-and-parse-status 
               to ls-download-parse-status-temp
           open i-o fd-rss-list-file 
               read fd-rss-list-file
                   invalid key 
                       call "logger" using function concatenate( 
                           "No RSS list record to update for key: "
                           ls-rss-feed-url)
                       end-call 
                       close fd-rss-list-file
                       exit paragraph                   
               end-read 
               move ls-download-parse-status-temp to f-rss-feed-status 
               rewrite f-rss-list-record 
                   invalid key 
                       call "logger" using function concatenate(
                           "Unable to save RSS feed status: " 
                           ls-download-parse-status-temp
                           ". Key is invalid: " 
                           ls-rss-feed-url)
                       end-call
                   not invalid key 
                       call "logger" using function concatenate(
                           "Successfully updated RSS feed status: "
                           ls-download-parse-status-temp
                           " for RSS list key: " 
                           ls-rss-feed-url)
                       end-call 
               end-rewrite
           close fd-rss-list-file 
           exit paragraph.
       end function rss-downloader.
[/INST]{
  "id": "BR-001",
  "description": "The URL passed to the downloader must start with the string \"http\".",
  "condition": "ls-url-prefix not = \"http\"",
  "output": {
    "valid": "The URL is valid.",
    "invalid": "The URL is invalid."
  }
},
{
  "id": "BR-002",
  "description": "If the download status is not zero, then there was an error downloading the RSS feed.",
  "condition": "ls-download-status is not zero",
  "output": {
    "success": "Download successful.",
    "failure": "Download failed."
  }
},
{
  "id": "BR-003",
  "description": "If the parse status is 1, then the parsing was successful.",
  "condition": "ls-parse-status = 1",
  "output": {
    "success": "Parsing successful.",
    "failure": "Parsing failed."
  }
},
{
  "id": "BR-004",
  "description": "If the format status is not zero, then there was an error formatting the RSS feed.",
  "condition": "ls-format-status is not zero",
  "output": {
    "success": "Formatting successful.",
    "failure": "Formatting failed."
  }
},
{
  "id": "BR-005",
  "description": "If the download and parse status is not zero, then there was an error downloading or parsing the RSS feed.",
  "condition": "l-download-and-parse-status is not zero",
  "output": {
    "success": "Download and parse successful.",
    "failure": "Download or parse failed."
  }
}[INST]       identification division.
       program-id. rss-reader-add-feed.
       environment division.
       configuration section.
       repository.
           function rss-downloader.
       special-names.
           crt status is ws-crt-status.
       input-output section.
       data division.
       file section.
       working-storage section.
       copy "screenio.cpy".
       01  ws-crt-status. 
           05  ws-key1                       pic x. 
           05  ws-key2                       pic x. 
           05  filler                        pic x. 
           05  filler                        pic x.
       01  ws-rss-url                        pic x(256) value space.
       01  ws-add-feed-status                pic 9 value zero.
       01  ws-message-screen-fields.
           05  ws-msg-title                  pic x(70) value spaces.
           05  ws-msg-body                   occurs 2 times.
               10  ws-msg-body-text          pic x(70) value spaces.
           05  ws-msg-input                  pic x value space.
       01  ws-exit-sw                        pic a value 'N'.
           88  ws-exit-true                  value 'Y'.
           88  ws-exit-false                 value 'N'.
       77  ws-empty-line                     pic x(80) value spaces. 
       linkage section.
       screen section.
       copy "./screens/blank_screen.cpy".
       copy "./screens/rss_add_feed_screen.cpy".
       copy "./screens/message_screen.cpy".
       procedure division.
       set environment 'COB_SCREEN_EXCEPTIONS' TO 'Y'.
       set environment 'COB_SCREEN_ESC'        TO 'Y'.
       main-procedure.
           move "Add Feed Status" to ws-msg-title
           perform handle-user-input
           display s-blank-screen 
           goback.
       handle-user-input.
           perform until ws-exit-true
               accept s-rss-add-feed-screen 
               evaluate true 
                   when ws-key1 = COB-SCR-OK
                       call "logger" using ws-rss-url
                       move function rss-downloader(ws-rss-url)
                           to ws-add-feed-status
                       if ws-add-feed-status = 1 then 
                           move "New RSS feed added successfully." to
                               ws-msg-body-text(1)
                       else 
                           move function concatenate(
                               "Downloading and parsing RSS feed ",
                               "failed.")
                               to ws-msg-body-text(1)
                           move function concatenate(
                               "Please check logs. Status: ", 
                               ws-add-feed-status)
                               to ws-msg-body-text(2)
                       end-if    
                       accept s-message-screen
                       set ws-exit-true to true 
                   when ws-crt-status = COB-SCR-ESC
                       set ws-exit-true to true 
               end-evaluate
           end-perform
           exit paragraph.
       end program rss-reader-add-feed.
[/INST]{
  "id": "BR-001",
  "description": "The status of adding an RSS feed is stored in the variable ws-add-feed-status.",
  "condition": null,
  "output": {}
}[INST]       identification division.
       program-id. rss-reader-delete-feed.
       environment division.
       configuration section.
       repository.
           function remove-rss-record.
       special-names.
           crt status is ws-crt-status.
       input-output section.
           file-control.                              
               copy "./copybooks/filecontrol/rss_list_file.cpy".
       data division.
       file section.
           copy "./copybooks/filedescriptor/fd_rss_list_file.cpy".
       working-storage section.
       copy "screenio.cpy".
       copy "./copybooks/wsrecord/ws-rss-list-record.cpy".
       01  ws-crt-status. 
           05  ws-key1                       pic x. 
           05  ws-key2                       pic x. 
           05  filler                        pic x. 
           05  filler                        pic x.
       01  ws-accept                         pic x value zero.
       01  ws-delete-feed-status             pic 9 value zero.
       01  ws-delete-msg.
           05  ws-delete-line-1              pic x(70) value spaces.
           05  ws-delete-line-2              pic x(70) value spaces.
       01  ws-message-screen-fields.
           05  ws-msg-title                  pic x(70) value spaces.
           05  ws-msg-body                   occurs 2 times.
               10  ws-msg-body-text          pic x(70) value spaces.
           05  ws-msg-input                  pic x value space.
       01  ws-exit-sw                        pic a value 'N'.
           88  ws-exit-true                  value 'Y'.
           88  ws-exit-false                 value 'N'.
       77  ws-empty-line                     pic x(80) value spaces. 
       78  ws-rss-list-file-name             value "./feeds/list.dat".
       linkage section.
       01  l-rss-feed-id                     pic 9(5).
       screen section.
       copy "./screens/blank_screen.cpy".
       copy "./screens/rss_delete_feed_screen.cpy".
       copy "./screens/message_screen.cpy".
       procedure division using l-rss-feed-id.
       set environment 'COB_SCREEN_EXCEPTIONS' TO 'Y'.
       set environment 'COB_SCREEN_ESC'        TO 'Y'.
       main-procedure.
           if l-rss-feed-id is zeros then 
               call "logger" using function concatenate(
                   "Cannot delete RSS feed with ID ", l-rss-feed-id,
                   ". Ignoring delete request and returning.")
               end-call
               goback 
           end-if
           move "Delete Feed Status" to ws-msg-title
           move l-rss-feed-id to f-rss-feed-id   
           perform load-feed-to-delete
           move function concatenate("Delete feed ", 
               function trim(ws-rss-title), 
               " from feed list?") to ws-delete-msg
           perform handle-user-input
           display s-blank-screen 
           goback.
       handle-user-input.
           perform until ws-exit-true
               accept s-rss-delete-feed-screen 
               evaluate true 
                   when ws-key1 = COB-SCR-OK
                       call "logger" using l-rss-feed-id
                       perform delete-rss-record
                       accept s-message-screen
                       set ws-exit-true to true 
                   when ws-crt-status = COB-SCR-ESC
                       set ws-exit-true to true
               end-evaluate
           end-perform
           exit paragraph.
       load-feed-to-delete.
           open input fd-rss-list-file
               read fd-rss-list-file into ws-rss-list-record
               key is f-rss-feed-id
                   invalid key 
                       call "logger" using function concatenate( 
                           "Delete RSS feed: Unable to load feed by ",
                           "rss list id. Invalid key: ", f-rss-feed-id)
                       end-call
                   not invalid key                            
                       call "logger" using function concatenate( 
                           "Found to delete :: ID: ", f-rss-feed-id, 
                           " :: Title: ", ws-rss-title)
                       end-call     
               end-read       
           close fd-rss-list-file      
           exit paragraph.
       delete-rss-record.
           call "logger" using function concatenate(
               "Deleting RSS id: ", f-rss-feed-id)
           end-call 
           move function remove-rss-record(f-rss-link) 
               to ws-delete-feed-status
           if ws-delete-feed-status = 1 then 
               call "logger" using function concatenate( 
                   "RSS Record " f-rss-feed-id " deleted.") 
               end-call 
               move "Successfully deleted RSS Feed from list."
                   to ws-msg-body-text(1)
           else
               move "Unable to delete RSS feed from list."
                   to ws-msg-body-text(1)
               move function concatenate(
                   "Delete status code: ", ws-delete-feed-status)
                   to ws-msg-body-text(2)
           end-if
           exit paragraph.
       end program rss-reader-delete-feed.
[/INST]{
  "id": "BR-001",  "description": "A feed can only be deleted if the feed ID in the feed list file has the same ID as the selected feed ID.\\nIf found, the Feed ID, the feed link, and the feed title are outputted to the log file.",
  "condition": "key is f-rss-feed-id",
  "output": {
    "invalid key": "Delete RSS feed: Unable to load feed by rss list id. Invalid key: \\n" + f-rss-feed-id"",
    "not invalid key": "Found to delete :: ID: \\n" + f-rss-feed-id + " :: Title: \\n" + ws-rss-title""
  }
}
{
  "id": "BR-002",  "description": "If a delete-rss-record call is successful, then move a success message to the ws-msg-body-text field and move 1 to ws-delete-feed-status.",
  "condition": "ws-delete-feed-status = 1",
  "output": {
    "success": "Successfully deleted RSS Feed from list."
  }
}
{
  "id": "BR-003",  "description": "If a delete-rss-record call is unsuccessful, then move a failure message to the ws-msg-body-text field.",
  "condition": "ws-delete-feed-status != 1",
  "output": {
    "failure": "Unable to delete RSS feed from list."
  }
}[INST]       identification division.
       program-id. rss-reader-export-feed.
       environment division.
       configuration section.
       repository.
           function rss-report-writer.
       special-names.
           crt status is ws-crt-status.
       input-output section.
           file-control.                              
               copy "./copybooks/filecontrol/rss_list_file.cpy".
       data division.
       file section.
           copy "./copybooks/filedescriptor/fd_rss_list_file.cpy".
       working-storage section.
       copy "screenio.cpy".
       copy "./copybooks/wsrecord/ws-rss-list-record.cpy".
       01  ws-crt-status. 
           05  ws-key1                       pic x. 
           05  ws-key2                       pic x. 
           05  filler                        pic x. 
           05  filler                        pic x.
       01  ws-accept                         pic x value zero.
       01  ws-export-name                    pic x(70) value spaces.
       01  ws-export-feed-status             pic 9 value zero.
       01  ws-export-msg.
           05  ws-export-line-1              pic x(70) value spaces.
           05  ws-export-line-2              pic x(70) value spaces.
       01  ws-message-screen-fields.
           05  ws-msg-title                  pic x(70) value spaces.
           05  ws-msg-body                   occurs 2 times.
               10  ws-msg-body-text          pic x(70) value spaces.
           05  ws-msg-input                  pic x value space.
       01  ws-exit-sw                        pic a value 'N'.
           88  ws-exit-true                  value 'Y'.
           88  ws-exit-false                 value 'N'.
       77  ws-empty-line                     pic x(80) value spaces. 
       78  ws-rss-list-file-name             value "./feeds/list.dat".
       linkage section.
       01  l-rss-feed-id                     pic 9(5).
       screen section.
       copy "./screens/blank_screen.cpy".
       copy "./screens/rss_export_feed_screen.cpy".
       copy "./screens/message_screen.cpy".
       procedure division using l-rss-feed-id.
       set environment 'COB_SCREEN_EXCEPTIONS' TO 'Y'.
       set environment 'COB_SCREEN_ESC'        TO 'Y'.
       main-procedure.
           if l-rss-feed-id is zeros then 
               call "logger" using function concatenate(
                   "Cannot export RSS feed with ID ", l-rss-feed-id,
                   ". Ignoring export request and returning.")
               end-call
               goback 
           end-if
           move "Export Feed Status" to ws-msg-title
           move l-rss-feed-id to f-rss-feed-id   
           perform load-feed-to-export
           move function concatenate("Please specify file name for ", 
               "export of feed ", function trim(ws-rss-title)) 
               to ws-export-msg
           perform handle-user-input
           display s-blank-screen 
           goback.
       handle-user-input.
           perform until ws-exit-true
               accept s-rss-export-feed-screen 
               evaluate true 
                   when ws-key1 = COB-SCR-OK
                       perform export-rss-record
                       accept s-message-screen
                       set ws-exit-true to true 
                   when ws-crt-status = COB-SCR-ESC
                       set ws-exit-true to true
               end-evaluate
           end-perform
           exit paragraph.
       load-feed-to-export.
           open input fd-rss-list-file
               read fd-rss-list-file into ws-rss-list-record
               key is f-rss-feed-id
                   invalid key 
                       call "logger" using function concatenate( 
                           "Export RSS feed: Unable to load feed by ",
                           "rss list id. Invalid key: ", f-rss-feed-id)
                       end-call
                   not invalid key                            
                       call "logger" using function concatenate( 
                           "Found to export :: ID: ", f-rss-feed-id, 
                           " :: Title: ", ws-rss-title)
                       end-call     
               end-read       
           close fd-rss-list-file      
           exit paragraph.
       export-rss-record.
           if ws-export-name = spaces then 
               call "logger" using function concatenate( 
                   "No export file name specified. Not calling report ",
                   "writer.")
               end-call 
               move "No file name specified. Not exporting feed."
                   to ws-msg-body(1) 
               exit paragraph
           end-if     
           call "logger" using function concatenate(
               "Exporting RSS id: ", f-rss-feed-id)
           end-call 
           move function rss-report-writer(f-rss-link, ws-export-name) 
               to ws-export-feed-status
           if ws-export-feed-status = 1 then 
               call "logger" using function concatenate( 
                   "RSS Record " f-rss-feed-id " exported to ", 
                   ws-export-name) 
               end-call 
               move "Successfully exported RSS Feed from list."
                   to ws-msg-body-text(1)
           else
               move "Unable to export RSS feed from list."
                   to ws-msg-body-text(1)
               move function concatenate(
                   "Export status code: ", ws-export-feed-status)
                   to ws-msg-body-text(2)
           end-if
           exit paragraph.
       end program rss-reader-export-feed.
[/INST]{
  "id": "BR-001",
  "description": "An RSS feed can only be exported if it has an ID.",
  "condition": "l-rss-feed-id is zeros",
  "output": {
    "error": "Cannot export RSS feed with ID 0. Ignoring export request and returning."
  }
}
{
  "id": "BR-002",
  "description": "The file name for the exported RSS record must be specified.",
  "condition": "ws-export-name = spaces",
  "output": {
    "error": "No export file name specified. Not calling report writer."
  }
}[INST]       identification division.
       program-id. rss-reader-view-feed.
       environment division.
       configuration section.
       special-names.
           cursor is ws-cursor-position        
           crt status is ws-crt-status.
       input-output section.
           file-control.               
               copy "./copybooks/filecontrol/rss_content_file.cpy".
       data division.
       file section.
           copy "./copybooks/filedescriptor/fd_rss_content_file.cpy".
       working-storage section.
       copy "screenio.cpy".
       copy "./copybooks/wsrecord/ws-rss-record.cpy".
       01  ws-cursor-position. 
           05  ws-cursor-line                        pic 99. 
           05  ws-cursor-col                         pic 99. 
       01  ws-crt-status. 
           05  ws-key1                               pic x. 
           05  ws-key2                               pic x. 
           05  filler                                pic x. 
           05  filler                                pic x.
       01  ws-accept-item                            pic x value space.
       01  ws-eof-sw                                 pic a value 'N'.
           88  ws-eof                                value 'Y'.
           88  ws-not-eof                            value 'N'.
       01  ws-exit-sw                                pic a value 'N'.
           88  ws-exit-true                          value 'Y'.
           88  ws-exit-false                         value 'N'.
       77  ws-empty-line                             pic x(80) 
                                                     value spaces. 
       77  ws-selected-id                       pic 9(5) value zeros.    
       77  ws-rss-content-file-name                  pic x(255) 
                                                     value spaces.
       77  ws-idx                                    pic 9(6) comp.       
       local-storage section. 
       01  ls-display-item-title                pic x(128) value spaces
                                                occurs 15 times.
       linkage section.
           01  l-rss-content-file-name               pic x(255).
       screen section.
       copy "./screens/rss_info_screen.cpy".
       copy "./screens/blank_screen.cpy".
       procedure division using l-rss-content-file-name.
       set environment 'COB_SCREEN_EXCEPTIONS' TO 'Y'.
       set environment 'COB_SCREEN_ESC'        TO 'Y'.
       main-procedure.
           display s-blank-screen 
           call "logger" using function concatenate(
               "viewing: ", function trim(l-rss-content-file-name))
           end-call
           if l-rss-content-file-name not = spaces then 
               move l-rss-content-file-name to ws-rss-content-file-name
               perform load-feed-data
               perform handle-user-input
           else 
               call "logger" using 
                   "ERROR: No feed file passed to feed viewer."
               end-call
               move spaces to ws-rss-record
               move "File name passed was empty" to ws-feed-title
               accept s-rss-info-screen
           end-if
           display s-blank-screen 
           goback.
       handle-user-input.
           perform until ws-exit-true
               accept s-rss-info-screen
               evaluate true 
                   when ws-key1 = COB-SCR-OK
                       perform view-selected-feed-item
                   when ws-crt-status = COB-SCR-ESC
                       set ws-exit-true to true 
                   when ws-crt-status = COB-SCR-LEFT-RELEASED
                       perform handle-mouse-click     
               end-evaluate
           end-perform
           exit paragraph.
       handle-mouse-click.
           if ws-cursor-line = 21 and ws-cursor-col >= 35 
           and ws-cursor-col < 59 then 
               set ws-exit-true to true                
           end-if 
           if ws-cursor-line < 20 then                 
               perform view-selected-feed-item
           end-if 
           exit paragraph.
       view-selected-feed-item.
           if ws-cursor-line not > 4 then 
               exit paragraph
           end-if 
           compute ws-selected-id = ws-cursor-line - 4
           move ws-num-items to ws-num-items-disp
           call "logger" using function concatenate(
                   "Selected item ID to view is: ", 
                   ws-selected-id " max: " ws-max-rss-items 
                   " num items: " ws-num-items-disp)
           end-call  
           if ws-selected-id > 0 and ws-selected-id <= ws-max-rss-items 
           and ws-selected-id <= ws-num-items then
               call "logger" using function concatenate(
                   "Selected item ID to view is: ", 
                   ws-selected-id, " Item: ", ws-items(ws-selected-id))
               end-call
               call "rss-reader-view-item" using by content 
                   ws-feed-title,
                   ws-feed-site-link,
                   ws-items(ws-selected-id)
               end-call
               cancel "rss-reader-view-item"
           end-if
           exit paragraph.
       load-feed-data.
           open input fd-rss-content-file
               perform until ws-eof
                   read fd-rss-content-file into ws-rss-record
                       at end set ws-eof to true 
                   not at end
                       call "logger" using function concatenate(
                           "Viewing feed data items for feed: ",
                           function trim(ws-feed-title))
                       end-call                      
                   end-read
               end-perform
           close fd-rss-content-file
           if ws-num-items > 0 then 
               perform varying ws-idx from 1 by 1 
               until ws-idx > ws-num-items or ws-idx > 15
                   move ws-item-title(ws-idx) 
                       to ls-display-item-title(ws-idx)
               end-perform 
           end-if
           exit paragraph.
       end program rss-reader-view-feed.
[/INST]{
  "id": "BR-001",  "description": "An empty string is either fully empty, or has only whitespace characters.", "condition": "l-rss-content-file-name = spaces", "output": { "empty": "File name passed was empty" }
}[INST]       identification division.
       program-id. rss-reader-view-item.
       environment division.
       configuration section.
       repository.
           function get-config.
       special-names.
           cursor is ws-cursor-position      
           crt status is ws-crt-status.
       input-output section.
       data division.
       file section.
       working-storage section.
       copy "screenio.cpy".
       01  ws-cursor-position. 
           05  ws-cursor-line                pic 99. 
           05  ws-cursor-col                 pic 99. 
       01  ws-crt-status. 
           05  ws-key1                       pic x. 
           05  ws-key2                       pic x. 
           05  filler                        pic x. 
           05  filler                        pic x.
       01  ws-accept-item                    pic x value space.
       01  ws-feed-header-lines.
           05  ws-feed-title                 pic x(128).
           05  ws-feed-site-link             pic x(256).
       01  ws-item-header-lines.
           05  ws-item-title                 pic x(128) value spaces.
           05  ws-item-link                  pic x(256) value spaces.
           05  ws-item-guid                  pic x(256) value spaces.
           05  ws-item-pub-date              pic x(128) value spaces.       
       01  ws-item-desc-lines.
           05  ws-desc-line                  pic x(70) value spaces                               
                                             occurs 8 times.
       01  ws-browser-key-text               pic x(7) value spaces. 
       01  ws-browser-text                   pic x(25) value spaces.
       01  ws-browser-enabled-sw             pic x value 'N'.
           88  ws-browser-enabled            value 'Y'.
           88  ws-browser-disabled           value 'N'.
       01  ws-exit-sw                        pic a value 'N'.
           88  ws-exit-true                  value 'Y'.
           88  ws-exit-false                 value 'N'.
       77  ws-empty-line                     pic x(80) value spaces. 
       01  ws-browser-key-fore-color        pic 9 value cob-color-white.
       01  ws-browser-key-back-color        pic 9 value cob-color-black.
       local-storage section.
       01  ls-config-val-temp                pic x(32) value spaces.
       linkage section.
       01  l-feed-title                      pic x any length.
       01  l-feed-site-link                  pic x any length.
       01  l-feed-item.           
           05  l-item-title                  pic x(128) value spaces.
           05  l-item-link                   pic x(256) value spaces.
           05  l-item-guid                   pic x(256) value spaces.
           05  l-item-pub-date               pic x(128) value spaces.
           05  l-item-desc                   pic x(512) value spaces.
       screen section.
       copy "./screens/rss_item_screen.cpy".
       copy "./screens/blank_screen.cpy".
       procedure division using 
           l-feed-title, l-feed-site-link, l-feed-item.
       set environment 'COB_SCREEN_EXCEPTIONS' TO 'Y'.
       set environment 'COB_SCREEN_ESC'        TO 'Y'.
       main-procedure.
           display space blank screen 
           call "logger" using function concatenate(
               "Viewing feed item: ", l-item-desc)
           end-call 
           move l-feed-title to ws-feed-title
           move l-feed-site-link to ws-feed-site-link
           move l-item-title to ws-item-title
           move l-item-link to ws-item-link
           move l-item-guid to ws-item-guid
           move l-item-pub-date to ws-item-pub-date
           move l-item-desc to ws-item-desc-lines
           move function get-config("browser") to ls-config-val-temp           
           if ls-config-val-temp = "NOT-SET" then 
               set ws-browser-disabled to true
               move spaces to ws-browser-text
               move spaces to ws-browser-key-text
               move cob-color-black to ws-browser-key-fore-color
               move cob-color-black to ws-browser-key-back-color
           else 
               set ws-browser-enabled to true 
               move " Enter " to ws-browser-key-text
               move cob-color-black to ws-browser-key-fore-color
               move cob-color-white to ws-browser-key-back-color
               evaluate ls-config-val-temp
                   when "lynx" 
                       move "Open In Lynx Browser" to ws-browser-text
                   when "links" 
                       move "Open In Links Browser" to ws-browser-text
                   when other 
                       move "Open In Browser" to ws-browser-text
               end-evaluate
           end-if 
           perform handle-user-input
           display space blank screen 
           goback.
       handle-user-input.
           perform until ws-exit-true
               accept s-rss-item-screen
               evaluate true 
                   when ws-key1 = COB-SCR-OK
                       if ws-browser-enabled then 
                           call "browser-launcher" using by content 
                               ws-item-link
                           end-call 
                           cancel "browser-launcher"
                       end-if 
                   when ws-crt-status = COB-SCR-ESC
                       set ws-exit-true to true
                   when ws-crt-status = COB-SCR-LEFT-RELEASED
                       perform handle-mouse-click    
               end-evaluate
           end-perform
           exit paragraph.
       handle-mouse-click.
           if ws-cursor-line = 21 then 
               evaluate true
                   when ws-cursor-col >= 3 and ws-cursor-col < 33
                       if ws-browser-enabled then 
                           call "browser-launcher" using by content 
                               ws-item-link
                           end-call 
                           cancel "browser-launcher"    
                       end-if 
                   when ws-cursor-col >= 35 and ws-cursor-col < 61 
                       set ws-exit-true to true                                              
               end-evaluate
           end-if 
           exit paragraph.
       end program rss-reader-view-item.
[/INST]{
  "id": "BR-001",
  "description": "If the config value of the browser is 'NOT-SET', then the browser is disabled, and all browser-related fields are set to default values.",
  "condition": "ls-config-val-temp = 'NOT-SET'",
  "output": {
    "enabled": {
      "ws-browser-enabled": "N",
      "ws-browser-text": " ",
      "ws-browser-key-text": " ",
      "ws-browser-key-fore-color": "cob-color-black",
      "ws-browser-key-back-color": "cob-color-black"
    },
    "disabled": {
      "ws-browser-enabled": "Y",
      "ws-browser-text": "Enter ",
      "ws-browser-key-text": "Open In Browser",
      "ws-browser-key-fore-color": "cob-color-black",
      "ws-browser-key-back-color": "cob-color-white"
    }
  }
}[INST]       replace ==:BUFFER-SIZE:== by ==32768==.
       identification division.
       function-id. remove-leading-spaces.
       environment division.
       configuration section.
       repository.
       data division.
       working-storage section.
       01  ws-tab-char                     constant as x"09".
       local-storage section.
       01  ls-space-count                  pic 9(5) value zeros.
       01  ls-length                       pic 9(5) value zeros.
       01  ls-final-offset                 pic 9(5) value zeros.
       01  ls-non-space-found-sw           pic a.
           88  ls-non-space-found          value 'Y'.
           88  ls-non-space-not-found      value 'N'.
       linkage section.
       01  l-field                         pic x any length.
       01  l-updated-record                pic x(:BUFFER-SIZE:) 
                                               value spaces.
       procedure division 
           using l-field
           returning l-updated-record.
       main-procedure.
           initialize l-updated-record
           move function length(l-field) to ls-length
           call "logger" using 
               function concatenate("Removing leading spaces from: ", 
               function trim(l-field), " Length: ", ls-length)
           end-call
           set ls-non-space-not-found to true 
           perform varying ls-space-count from 1 by 1 
           until ls-non-space-found or ls-space-count >= ls-length 
               if l-field(ls-space-count:1) not = space then 
                   if l-field(ls-space-count:1) = ws-tab-char then 
                       add 1 to ls-space-count
                       call "logger" using function concatenate(
                           "Found tab at: " ls-space-count 
                           " tallying character as two spaces")
                   else  
                       set ls-non-space-found to true 
                       subtract 1 from ls-space-count
                   end-if 
               end-if 
           end-perform 
           if ls-space-count > 1 then 
               compute ls-final-offset = ls-length - ls-space-count
               call "logger" using function concatenate("Found ", 
                   ls-space-count, " leading spaces in field. Length: ",
                   ls-length, " : Final offset: ", ls-final-offset)
               end-call
               move l-field(ls-space-count:ls-final-offset) 
                   to l-updated-record
           else              
               call "logger" using function concatenate(
                   "No leading spaces in field. Length: ",
                   ls-length)
               end-call
               move l-field to l-updated-record
           end-if
           goback.
       end function remove-leading-spaces.
       replace ==:BUFFER-SIZE:== by ==32768==.
       identification division.
       function-id. sanitize-rss-field.
       environment division.
       configuration section.
       repository.
           function remove-leading-spaces.
       data division.
       working-storage section.
       linkage section.
       01  l-field               pic x any length.
       01  l-updated-record      pic x(:BUFFER-SIZE:) value spaces.
       procedure division 
           using l-field
           returning l-updated-record.
       main-procedure.
           initialize l-updated-record
           if l-field = spaces then 
               call "logger" using "No value to sanitize. Returning."
               move l-field to l-updated-record
               goback
           end-if
           call "logger" using 
               function concatenate("Sanitizing raw RSS field: ", 
               function trim(l-field))
           end-call
           move function substitute-case(l-field, 
               "&amp;", "&",
               "&#38;", "&",
               "&#038;", "&",
               "&#8211;", "-",
               "&#8217;", "'",
               "<description>", space, 
               "</description>", space,
               "<title>", space, 
               "</title>", space,
               "<link>", space, 
               "</link>", space,
               "<guid>", space, 
               '<guid isPermaLink="false">', space,
               '<guid isPermaLink="true">', space,
               "</guid>", space,
               "<pubDate>", space, 
               "</pubDate>", space,
               "&lt;br /&gt;", space,
               "&lt;br&gt;", space,
               "&lt;b&gt;", space,
               "&lt;/b&gt;", space,
               "&lt;a", space,
               "&lt;/p", space,
               "&lt;p", space   
               "&lt;span", space,
               "&lt;/span", space,              
               "target=&quot;_blank&quot;", space,
               "href=&quot;", space,
               "&quot;&gt;", space,
               "&lt;/a&gt;", space,
               "&lt;h1&gt;", space,
               "&lt;/h1&gt;", space,
               "&lt;hr /&gt;", space,
               "&#39;", "'",
               "&quot;", '"',
               "&lt;/h2&gt;", space,
               "&lt;h2&gt;", space,
               "&lt;pre&gt;", space,
               "&lt;/pre&gt;", space,
               "&lt;u&gt;", space,
               "&lt;/u&gt;", space,   
               "<![CDATA[", space,
               "]]>", space,
               '<a href="', space,
               '">', space,
               "</a>", space,
               "<p>", space,
               "</p>", space,
               "<i>", space, 
               "</i>", space,
               "<u>", space,
               "</u>", space,
               "<b>", space,
               "</b>", space,
               "&lt;", space,
               "/&gt;", space,
               "&gt;", space
               ) to l-field  
           move function remove-leading-spaces(l-field) 
               to l-updated-record
           goback.
       end function sanitize-rss-field.
[/INST]{
  "id": "BR-001",
  "description": "For replacement of ampersand HTML Character entity, the replacement must happen in the order specified.",
  "condition": "function substitute-case(l-field, \n               \"&amp;\", \"&\",\n               \"&#38;\", \"&\",\n               \"&#038;\", \"&\",\n               \"&#8211;\", \"-\",\n               \"&#8217;\", \"'\",\n               \"<description>\", space, \n               \"</description>\", space,\n               \"<title>\", space, \n               \"</title>\", space,\n               \"<link>\", space, \n               \"</link>\", space,\n               \"<guid>\", space, \n               '<guid isPermaLink=\"false\">', space,\n               '<guid isPermaLink=\"true\">', space,\n               \"</guid>\", space,\n               \"<pubDate>\", space, \n               \"</pubDate>\", space,\n               \"&lt;br /&gt;\", space,\n               \"&lt;br&gt;\", space,\n               \"&lt;b&gt;\", space,\n               \"&lt;/b&gt;\", space,\n               \"&lt;a", space,\n               \"&lt;/p", space,\n               \"&lt;p", space   \n               \"&lt;span", space,\n               \"&lt;/span", space,              \n               \"target=&quot;_blank&quot;\", space,\n               \"href=&quot;\", space,\n               \"&quot;&gt;\", space,\n               \"&lt;/a&gt;\", space,\n               \"&lt;h1&gt;\", space,\n               \"&lt;/h1&gt;\", space,\n               \"&lt;hr /&gt;\", space,\n               \"&#39;\", \"'\",\n               \"&quot;\", \"'\",\n               \"&lt;/h2&gt;\", space,\n               \"&lt;h2&gt;\", space,\n               \"&lt;pre&gt;\", space,\n               \"&lt;/pre&gt;\", space,\n               \"&lt;u&gt;\", space,\n               \"&lt;/u&gt;\", space,   \n               \"<![CDATA[\", space,\n               \"]]\>", space,\n               '<a href=\"', space,\n               '\">', space,\n               \"</a>\", space,\n               \"<p>\", space,\n               \"</p>\", space,\n               \"<i>\", space, \n               \"</i>\", space,\n               \"<u>\", space,\n               \"</u>\", space,\n               \"<b>\", space,\n               \"</b>\", space,\n               \"&lt;\", space,\n               \"/&gt;\", space,\n               \"&gt;\", space\n               )",
  "output": {
    "Replacement": "Replacement of Ampersand HTML Character entity, the replacement must happen in the order specified."
  }
},
{
  "id": "BR-002",
  "description": "Leading and trailing white spaces should be removed from the string.",
  "condition": "l-field not = spaces",
  "output": {
    "remove white spaces": "Leading and trailing white spaces should be removed from the string."
  }
},
{
  "id": "BR-003",
  "description": "If there are multiple spaces then multiple white spaces should be treated as a single space.",
  "condition": "l-field(ls-space-count:1) = ws-tab-char",
  "output": {
    "handle tabs": "If there are multiple spaces then multiple white spaces should be treated as a single space."
  }
},
{
  "id": "BR-004",
  "description": "First non-space character should always be processed.",
  "condition": "ls-non-space-found = 'Y'",
  "output": {
    "first non-space char": "First non-space character should always be processed."
  }
}
}[INST]      * FizzBuzz program
       IDENTIFICATION DIVISION.
       PROGRAM-ID. FIZZBUZZ.

       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  LS-INPUT               PIC 9(2).
       01  LS-RESULT              PIC X(8).
       01  LS-REMAINDER           PIC 9(2).
       01  LS-DIVISION            PIC 9(2).

       PROCEDURE DIVISION.

       0000-MAIN.
           PERFORM 1000-PRINT-FIZZBUZZ VARYING LS-INPUT 
           FROM 1 BY 1 UNTIL LS-INPUT=15. 
       
       1000-PRINT-FIZZBUZZ.
          PERFORM 2000-FIZZBUZZ.
          DISPLAY LS-INPUT ": " LS-RESULT. 


       2000-FIZZBUZZ.
           DIVIDE LS-INPUT BY 3 GIVING LS-DIVISION 
           REMAINDER LS-REMAINDER.

           IF LS-REMAINDER EQUAL 0 THEN

             MOVE 'Fizz' TO LS-RESULT

           ELSE

             DIVIDE LS-INPUT BY 5 GIVING LS-DIVISION
             REMAINDER LS-REMAINDER

             IF LS-REMAINDER EQUAL 0 THEN
               MOVE 'Buzz' TO LS-RESULT
             ELSE
               MOVE LS-INPUT TO LS-RESULT
             END-IF

           END-IF.
[/INST]{
  "id": "BR-001",
  "description": "Any number divisible by 15 results in \"FizzBuzz\".",
  "condition": "LS-INPUT DIV 15",
  "output": {
    "FizzBuzz": "\"FizzBuzz\""
  }
},
{
  "id": "BR-002",
  "description": "Any number divisible by 3 results in \"Fizz\".",
  "condition": "LS-INPUT DIV 3",
  "output": {
    "Fizz": "\"Fizz\""
  }
},
{
  "id": "BR-003",
  "description": "Any number divisible by 5 results in \"Buzz\".",
  "condition": "LS-INPUT DIV 5",
  "output": {
    "Buzz": "\"Buzz\""
  }
},
{
  "id": "BR-004",
  "description": "Any number not divisible by 3 or 5 will be represented by the input number.",
  "condition": "none",
  "output": {
    "input_number": "LS-INPUT"
  }
}[INST]           TESTSUITE 'FizzBuzz Kata'

           TESTCASE 'it returns 1 when input is 1'
           MOVE 1 TO LS-INPUT
           PERFORM 2000-FIZZBUZZ
           EXPECT LS-RESULT TO BE '01'           

           TESTCASE 'it returns 2 when input is 2'
           MOVE 2 TO LS-INPUT
           PERFORM 2000-FIZZBUZZ
           EXPECT LS-RESULT TO BE '02'

           TESTCASE 'it returns Fizz when input is 3'
           MOVE 3 TO LS-INPUT
           PERFORM 2000-FIZZBUZZ
           EXPECT LS-RESULT TO BE 'Fizz'

           TESTCASE 'it returns Buzz when input is 5'
           MOVE 5 TO LS-INPUT
           PERFORM 2000-FIZZBUZZ
           EXPECT LS-RESULT TO BE 'Buzz'

[/INST]{
  "id": "BR-001",  "description": "A number is a multiple of 3 if the remainder after dividing by 3 is 0.",
  "condition": "NUM DIV 3",
  "output": {
    "true": "Fizz"
  }
},
{
  "id": "BR-002",  "description": "A number is a multiple of 5 if the remainder after dividing by 5 is 0.",
  "condition": "NUM DIV 5",
  "output": {
    "true": "Buzz"
  }
},
{
  "id": "BR-003",  "description": "If a number is not a multiple of 3 or 5, return its own value.",
  "condition": "NUM DIV 3 && NUM DIV 5",
  "output": {
    "false": "NUM"
  }
}[INST]        01 Ams-Vendor.
           03 Brand               Pic x(3).
           03 Location-Number     Pic 9(4).
           03 Location-Type       Pic XX.
           03 Location-Name       Pic X(35).
           03 Address-1           Pic X(40).
           03 Address-2           Pic X(40).
           03 Address-3           Pic X(35).
           03 Postcode            Pic 9(10).
           03 State               Pic XXX.
           03 Location-Active     Pic X.[/INST]{
  "id": "BR-001",
  "description": "The vendor location is active when Location-Active = 'A'",
  "condition": "Location-Active = 'A'",
  "output": {
    "active": "The vendor location is active",
    "inactive": "The vendor location is inactive"
  }
}[INST]000100*                                                                         
000200*   DTAR020 IS THE OUTPUT FROM DTAB020 FROM THE IML                       
000300*   CENTRAL REPORTING SYSTEM                                              
000400*                                                                         
000500*   CREATED BY BRUCE ARTHUR  19/12/90                                     
000600*                                                                         
000700*   RECORD LENGTH IS 27.                                                  
000800*                                                                         
000900        03  DTAR020-KCODE-STORE-KEY.                                      
001000            05 DTAR020-KEYCODE-NO      PIC X(08).                         
001100            05 DTAR020-STORE-NO        PIC S9(03)   COMP-3.               
001200        03  DTAR020-DATE               PIC S9(07)   COMP-3.               
001300        03  DTAR020-DEPT-NO            PIC S9(03)   COMP-3.               
001400        03  DTAR020-QTY-SOLD           PIC S9(9)    COMP-3.               
001500        03  DTAR020-SALE-PRICE         PIC S9(9)V99 COMP-3.               
[/INST]{
  "id": "BR-001",
  "description": "The store key (DTAR020-KCODE-STORE-KEY) is composed of the store number (DTAR020-STORE-NO) and the key code (DTAR020-KEYCODE-NO).",
  "condition": null,
  "output": null
}[INST]000100******************************************************************
000200*                                                                *
000300*   DTAR107 - CUSTOMER FILE                                      *
000400*                                                                *
000500*   FORMAT  -  FB   54 CHARS.                                    *
000600*                                                                *
000700*  VER| DATE     | DESCRIPTION                  | AUTHOR         *
000800*  ---|----------|------------------------------|------------    *
000900*  01 | FEB 94   | FIRST ISSUE                  | R. GEALL       *
001000*                                                                *
001100******************************************************************
001200                                                                  
001300     03  DTAR107-STORE-NO               PIC S9(03)    COMP-3.     
001320     03  Filler REDEFINES DTAR107-STORE-NO.                              
001330          05  DTAR107-STORE-NO-REDEF    PIC X(2).                 
001400     03  DTAR107-TRANS-DATE             PIC S9(06)    COMP-3.     
001500     03  DTAR107-CUST-NO                PIC 9(16).                
001600     03  DTAR107-AMOUNT                 PIC S9(07)V99 COMP-3.     
001700     03  DTAR107-OPERATOR-NO            PIC S9(08)    COMP-3.     
001800     03  DTAR107-TERMINAL-NO            PIC S9(03)    COMP-3.    
001900     03  DTAR107-TIME                   PIC S9(04)    COMP-3.    
002000     03  DTAR107-TRANS-NO               PIC S9(04)    COMP-3.    
002100     03  DTAR107-TRANS-TYPE             PIC 9(02).               
002200         88 DTAR107-SALE                   VALUE 1.              
002300         88 DTAR107-REFUND                 VALUE 2.              
002400         88 DTAR107-LAYBY                  VALUE 3.              
002500         88 DTAR107-VOID                   VALUE 4.              
002600     03  DTAR107-TRANS-CODE             PIC 9(02).               
002700         88 DTAR107-SALE-DR                VALUE 10.             
002800         88 DTAR107-REFUND-CR              VALUE 20.             
002900         88 DTAR107-DR-REVERSAL            VALUE 12.             
003000         88 DTAR107-CR-REVERSAL            VALUE 22.             
003100     03  DTAR107-STD-POINTS             PIC S9(06)    COMP-3.    
003200     03  DTAR107-BONUS-POINTS           PIC S9(06)    COMP-3.    
003300     03  DTAR107-NO-OF-TXNS             PIC 9(02).               
003400                                                                 
[/INST]{
  "id": "BR-001",
  "description": "A refund transaction must have a negative amount.",
  "condition": "DTAR107-TRANS-TYPE = 'Refund' AND DTAR107-AMOUNT >= 0",
  "output": {
    "valid_refund_transaction": "Allow the transaction.",
    "invalid_refund_transaction": "Reject the transaction."
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. PROJECT2.
       ENVIRONMENT DIVISION.
       CONFIGURATION SECTION.
       SOURCE-COMPUTER. OCEANBLUE.
       OBJECT-COMPUTER. OCEANBLUE.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT SOURCE-FILE ASSIGN TO 'PR2FA17.txt'
           ORGANIZATION IS LINE SEQUENTIAL.
           SELECT REPORT-FILE ASSIGN TO 'SALES REPORT.txt'
           .
       DATA DIVISION.
       FILE SECTION.
           FD SOURCE-FILE.
           01 SPECULATIVE-SALES.
              05 CUSTOMER-ID                           PIC 9(5).
              05 CUSTOMER-NAME                         PIC X(25).
              05 PRODUCT-ID                            PIC X(3).
              05 FILLER                                PIC X(5).
              05 PRODUCT-NAME                          PIC X(14).
              05 QUANTITY-SOLD                         PIC 9(3).
              05 COST-PER-ITEM                         PIC 999V99.
           FD REPORT-FILE.
           01 REPORT-RECORD                            PIC X(71).
       WORKING-STORAGE SECTION.
           01 WS-WORK-AREAS.
              05 EOF-FLAG          PIC X(3) VALUE 'YES'.
              05 PROPER-SPACING    PIC 9(2) VALUE 0.
              05 LINE-NUM          PIC 9(2) VALUE 10.
              05 WS-QUANTITY-SOLD  PIC 9(3) VALUE 0.
              05 WS-COST-PER-ITEM  PIC 999V99.
              05 WS-SALES-VALUE    PIC 999999V99 VALUE ZEROES.
              05 WS-GROUPING-FLAG  PIC X(3) VALUE 'YES'.
              05 WS-TL-SALES-VALUE PIC 9999999V99.
              05 WS-TL-QUANTITY    PIC 999999.
              05 WS-FN-SALES-VALUE PIC 9999999V99.
              05 WS-FN-QUANTITY    PIC 999999.
           01 WS-DATE.
               05 WS-YEAR          PIC 9(2).
               05 WS-MONTH         PIC 9(2).
               05 WS-DAY           PIC 9(2).
           01 HEADING-LINE1.
               05                  PIC X(34) VALUE SPACES.
               05                  PIC X(7) VALUE 'DR.CHEB'.
           01 HEADING-LINE2.
               05                  PIC X(9) VALUE SPACES.
               05 HL-MONTH         PIC 9(2).
               05                  PIC X VALUE '/'.
               05 HL-DAY           PIC 9(2).
               05                  PIC X(3) VALUE '/20'.
               05 HL-YEAR          PIC 9(2).
               05                  PIC X(7) VALUE SPACES.
               05                  PIC X(24) VALUE
                                             'SALES SPECULATION REPORT'.
               05                  PIC X(18) VALUE SPACES.
               05                  PIC X(3) VALUE 'TSB'.
           01 HEADING-LINE3.
               05                  PIC X(17) VALUE SPACES.
               05                  PIC X(4) VALUE 'PROD'.
               05                  PIC X(11) VALUE SPACES.
               05                  PIC X(8) VALUE 'CUSTOMER'.
               05                  PIC X(13) VALUE SPACES.
               05                  PIC X(3) VALUE 'QTY'.
               05                  PIC X(9) VALUE SPACES.
               05                  PIC X(5) VALUE 'SALES'.
           01 HEADING-LINE4.
               05                  PIC X(2) VALUE SPACES.
               05                  PIC X(12) VALUE 'PRODUCT NAME'.
               05                  PIC X(4) VALUE SPACES.
               05                  PIC X(2) VALUE 'ID'.
               05                  PIC X(14) VALUE SPACES.
               05                  PIC X(4) VALUE 'NAME'.
               05                  PIC X(14) VALUE SPACES.
               05                  PIC X(4) VALUE 'SOLD'.
               05                  PIC X(9) VALUE SPACES.
               05                  PIC X(5) VALUE 'VALUE'.
           01 TOTALS-LINE.
               05 FILLER             PIC X(32) VALUE SPACES.
               05                    PIC X(6) VALUE 'TOTAL:'.
               05 FILLER             PIC X(12) VALUE SPACES.
               05 TL-QUANTITY-OUT    PIC ZZZ999.
               05 FILLER             PIC X(2) VALUE SPACES.
               05 TL-SALES-VALUE-OUT PIC $Z,ZZZ,ZZZ.99.
           01 TOTAL-FINAL-SOLD-LINE.
               05 FILLER             PIC X(30) VALUE SPACES.
               05                    PIC X(18) VALUE
                                                   'TOTAL AMOUNT SOLD:'.
               05 FILLER             PIC X(14) VALUE SPACES.
               05 FN-QUANTITY-OUT    PIC Z,ZZZ,ZZZ.
           01 TOTAL-FINAL-SALE-VALUE-LINE.
               05 FILLER             PIC X(27) VALUE SPACES.
               05                    PIC X(21) VALUE
                                                'TOTAL VALUE OF SALES:'.
               05 FILLER             PIC X(6) VALUE SPACES.
               05 FN-SALES-VALUE-OUT PIC $Z,ZZZ,ZZZ,ZZZ.99.
           01 DETAIL-LINE.
              05                   PIC X VALUE ' '.
              05 DL-PRODUCT-NAME   PIC X(14) VALUE SPACES.
              05                   PIC X(2) VALUE SPACES.
              05 DL-PRODUCT-ID     PIC X(3) VALUE SPACES.
              05                   PIC X(3) VALUE SPACES.
              05 DL-CUSTOMER-NAME  PIC X(25) VALUE SPACES.
              05                   PIC X(4) VALUE SPACES.
              05 DL-QUANTITY-SOLD  PIC Z999 VALUE ZEROES.
              05                   PIC X(5) VALUE SPACES.
              05 DL-SALES-VALUE    PIC ZZZ,ZZZ.99.
       PROCEDURE DIVISION.
       100-MAIN-MODULE.
           PERFORM 125-HOUSEKEEPING
           PERFORM 150-READ-SOURCE-FILE
           PERFORM 200-CLOSE-ROUTINE
           .
       125-HOUSEKEEPING.
           OPEN INPUT SOURCE-FILE
           OUTPUT REPORT-FILE
           PERFORM 130-DATE-ROUTINE
           PERFORM 145-HEADING-ROUTINE
           .
       130-DATE-ROUTINE.
           ACCEPT WS-DATE FROM DATE
           MOVE WS-MONTH TO HL-MONTH
           MOVE WS-DAY TO HL-DAY
           MOVE WS-YEAR TO HL-YEAR
           .
       145-HEADING-ROUTINE.
           MOVE 1 TO PROPER-SPACING
           WRITE REPORT-RECORD FROM HEADING-LINE1
             AFTER ADVANCING PROPER-SPACING
           WRITE REPORT-RECORD FROM HEADING-LINE2
             AFTER ADVANCING PROPER-SPACING
           MOVE 3 TO PROPER-SPACING
           WRITE REPORT-RECORD FROM HEADING-LINE3
             AFTER ADVANCING PROPER-SPACING
           MOVE 1 TO PROPER-SPACING
           WRITE REPORT-RECORD FROM HEADING-LINE4
             AFTER ADVANCING PROPER-SPACING
           MOVE SPACES TO REPORT-RECORD
           WRITE REPORT-RECORD
             AFTER ADVANCING PROPER-SPACING
           .
       150-READ-SOURCE-FILE.
           MOVE 1 TO PROPER-SPACING
           PERFORM UNTIL EOF-FLAG = 'NO'
             READ SOURCE-FILE
               AT END
                  MOVE 'NO' TO EOF-FLAG
                  PERFORM 185-WRITE-TOTALS
                  PERFORM 190-WRITE-FINAL-TOTALS
               NOT AT END
                  PERFORM 175-CONSTRUCT-DATA
                  ADD 1 TO LINE-NUM
                  IF LINE-NUM = 55
                     PERFORM 195-NEW-PAGE
                     MOVE 10 TO LINE-NUM
                  END-IF
             END-READ
           END-PERFORM
           .
       175-CONSTRUCT-DATA.
           PERFORM 180-GROUPING-ROUTINE
           MOVE PRODUCT-NAME TO DL-PRODUCT-NAME
           MOVE PRODUCT-ID TO DL-PRODUCT-ID
           MOVE CUSTOMER-NAME TO DL-CUSTOMER-NAME
           MOVE QUANTITY-SOLD TO DL-QUANTITY-SOLD WS-QUANTITY-SOLD
           MOVE COST-PER-ITEM TO WS-COST-PER-ITEM
           MULTIPLY WS-QUANTITY-SOLD BY WS-COST-PER-ITEM
             GIVING DL-SALES-VALUE WS-SALES-VALUE
           MOVE DETAIL-LINE TO REPORT-RECORD
           WRITE REPORT-RECORD
             AFTER ADVANCING PROPER-SPACING
           MOVE 1 TO PROPER-SPACING
           ADD WS-QUANTITY-SOLD TO WS-TL-QUANTITY
           ADD WS-SALES-VALUE TO WS-TL-SALES-VALUE
           .
       180-GROUPING-ROUTINE.
           IF PRODUCT-ID = DL-PRODUCT-ID
             MOVE SPACES TO PRODUCT-NAME
             MOVE 'YES' TO WS-GROUPING-FLAG
           ELSE
             IF WS-GROUPING-FLAG EQUALS 'YES'
             AND DL-PRODUCT-ID NOT EQUALS SPACES
             THEN
               MOVE 'NO' TO WS-GROUPING-FLAG
               PERFORM 185-WRITE-TOTALS
             ELSE
               MOVE 'NO' TO WS-GROUPING-FLAG
             END-IF
           END-IF
           .
       185-WRITE-TOTALS.
           MOVE WS-TL-SALES-VALUE TO TL-SALES-VALUE-OUT
           MOVE WS-TL-QUANTITY TO TL-QUANTITY-OUT
           MOVE TOTALS-LINE TO REPORT-RECORD
           MOVE 2 TO PROPER-SPACING
           WRITE REPORT-RECORD
             AFTER ADVANCING PROPER-SPACING
           MOVE 3 TO PROPER-SPACING
           ADD WS-TL-SALES-VALUE TO WS-FN-SALES-VALUE
           ADD WS-TL-QUANTITY TO WS-FN-QUANTITY
           MOVE ZEROES TO WS-TL-SALES-VALUE
           MOVE ZEROES TO WS-TL-QUANTITY
           .
       190-WRITE-FINAL-TOTALS.
           MOVE WS-FN-SALES-VALUE TO FN-SALES-VALUE-OUT
           MOVE WS-FN-QUANTITY TO FN-QUANTITY-OUT
           MOVE TOTAL-FINAL-SOLD-LINE TO REPORT-RECORD
           WRITE REPORT-RECORD
             AFTER ADVANCING PROPER-SPACING
           MOVE TOTAL-FINAL-SALE-VALUE-LINE TO REPORT-RECORD
           MOVE 2 TO PROPER-SPACING
           WRITE REPORT-RECORD
             AFTER ADVANCING PROPER-SPACING
           .
       195-NEW-PAGE.
           MOVE SPACES TO REPORT-RECORD
           WRITE REPORT-RECORD
             AFTER ADVANCING PAGE
           PERFORM 145-HEADING-ROUTINE
           .
       200-CLOSE-ROUTINE.
           CLOSE SOURCE-FILE
                 REPORT-FILE
           STOP RUN
           .
[/INST]{
  "id": "BR-001",
  "description": "If the product ID of the current record is the same as the product ID of the previous record, the product name should be blank and the grouping flag should be set to 'YES'.",
  "condition": "PRODUCT-ID = DL-PRODUCT-ID",
  "output": {
    "if-true": "PRODUCT-NAME blank\\nWS-GROUPING-FLAG set to 'YES'",
    "if-false": "WS-GROUPING-FLAG set to 'NO'"
  }
}
{
  "id": "BR-002",
  "description": "If the grouping flag is 'YES' and the product ID of the current record is not blank, the grouping flag should be set to 'NO' and the totals should be written.",
  "condition": "WS-GROUPING-FLAG EQUALS 'YES'\nAND DL-PRODUCT-ID NOT EQUALS SPACES",
  "output": {
    "default": "WS-GROUPING-FLAG set to 'NO'\\nPerform 185-WRITE-TOTALS"
  }
}
{
  "id": "BR-003",
  "description": "If the line number is 55, a new page should be started and the heading routine should be performed.",
  "condition": "LINE-NUM = 55",
  "output": {
    "default": "Perform 195-NEW-PAGE\\nPerform 145-HEADING-ROUTINE"
  }
}[INST]        10  BKU-HEADER.
            15  BKU-FILE-TYPE               PIC XX.
            15  BKU-RECD-TYPE               PIC XX.
            15  BKU-RECD-VERSION            PIC 99.
            15  BKU-RECD-LENGTH             PIC 9999.
        10  BKU-DETAIL                      PIC X(4086).
        10  BKU-SC-DETAIL         REDEFINES BKU-DETAIL.
            15  BKU-SC-NAME                 PIC X(16).
            15  BKU-SC-DESCRIPTION          PIC X(50).
            15  BKU-SC-AUTHOR               PIC X(32).
            15  BKU-SC-NOTES                PIC X(50).
            15  BKU-SC-TITLE                PIC X(50).
            15  BKU-SC-SHOW-DATE            PIC X.
            15  BKU-SC-SHOW-TIME            PIC X.
            15  BKU-SC-ACTION-REQUIRED      PIC X.
            15  BKU-SC-COLUMNS-MIN          PIC 999.
            15  BKU-SC-LINES-MIN            PIC 999.
            15  BKU-SC-PAIRS                PIC 999.
            15  BKU-SC-WS-SECTION           PIC X(16).
            15  BKU-SC-LINKAGE-SECTION      PIC X(16).
            15  BKU-SC-PROCEDURE-DIVISION   PIC X(16).
            15  BKU-SC-STRIP-CHARACTER      PIC X.
        10  BKU-FD-DETAIL         REDEFINES BKU-DETAIL.
            15  BKU-FD-SCREEN-NAME          PIC X(16).
            15  BKU-FD-FDEF-NO              PIC 999.
            15  BKU-FD-COBOL-NAME           PIC X(32).
            15  BKU-FD-DESCRIPTION          PIC X(40).
            15  BKU-FD-LINE                 PIC 999.
            15  BKU-FD-COLUMN               PIC 999.
            15  BKU-FD-BUFFER-LENGTH        PIC 9999.
            15  BKU-FD-WINDOW-LENGTH        PIC 9999.
            15  BKU-FD-CLEAR                PIC X.
            15  BKU-FD-UPPERCASE            PIC X.
            15  BKU-FD-PASSWORD             PIC X.
            15  BKU-FD-NOT-BLANK            PIC X.
            15  BKU-FD-YN                   PIC X.
            15  BKU-FD-RES-CHARSET          PIC X(8).
            15  BKU-FD-SIGNED               PIC X.
            15  BKU-FD-DIGITS               PIC 999.
            15  BKU-FD-DECIMALS             PIC 999.
            15  BKU-FD-VERIFY               PIC X.
            15  BKU-FD-VISIBLE              PIC X.
            15  BKU-FD-IGNORE-CHANGES       PIC X.
            15  BKU-FD-INPUT-SEQ            PIC X.
            15  BKU-FD-ACTION               PIC X.
            15  BKU-FD-HELP                 PIC X(80).
            15  BKU-FD-READ-ONLY            PIC X.
            15  BKU-FD-COMP-TYPE            PIC 99.
            15  BKU-FD-MENU-REF             PIC X(16).
            15  BKU-FD-ACTION-EDIT          PIC X.
        10  BKU-BG-DETAIL         REDEFINES BKU-DETAIL.
            15  BKU-BG-NAME                 PIC X(16).
            15  BKU-BG-SEGMENT-NO           PIC 999.
            15  BKU-BG-LINE                 PIC 999.
            15  BKU-BG-COLUMN               PIC 999.
            15  BKU-BG-LENGTH               PIC 99.
            15  BKU-BG-SEGMENT              PIC X(32).
            15  BKU-BG-ATTRIBUTE            PIC 9(9).
            15  BKU-BG-COLOUR-PAIR          PIC 9999.
            15  BKU-BG-HEX-SEGMENT          PIC X(64).
        10  BKU-FS-DETAIL         REDEFINES BKU-DETAIL.
            15  BKU-FS-SCREEN-NAME          PIC X(16).
            15  BKU-FS-STATE-NO             PIC 999.
            15  BKU-FS-FIELD-NO             PIC 999.
            15  BKU-FS-BACK-TO              PIC 999.
            15  BKU-FS-FORWARD-TO           PIC 999.
            15  BKU-FS-ESCAPE-TO            PIC 999.
            15  BKU-FS-SLASH-TO             PIC 999.
            15  BKU-FS-GROUP-HEADER         PIC X.
            15  BKU-FS-STATE-COBOL-NAME     PIC X(24).
        10  BKU-CS-DETAIL         REDEFINES BKU-DETAIL.
            15  BKU-CS-NAME                 PIC X(8).
            15  BKU-CS-DATA                 PIC X(80).
        10  BKU-MU-DETAIL         REDEFINES BKU-DETAIL.
            15  BKU-MU-MENU-NAME            PIC X(16).
            15  BKU-MU-MENU-TYPE            PIC 99.
            15  BKU-MU-TITLE                PIC X(64).
            15  BKU-MU-TOP-LEFT-LINE-NO     PIC 999.
            15  BKU-MU-TOP-LEFT-COLUMN-NO   PIC 999.
            15  BKU-MU-OPT-ONEVALUE         PIC X.
            15  BKU-MU-OPT-ROWMAJOR         PIC X.
            15  BKU-MU-OPT-IGNORECASE       PIC X.
            15  BKU-MU-OPT-SHOWDESC         PIC X.
            15  BKU-MU-OPT-NONCYCLIC        PIC X.
            15  BKU-MU-OPT-SHOWMATCH        PIC X.
            15  BKU-MU-OPT-ROWS             PIC 99.
            15  BKU-MU-OPT-COLS             PIC 99.
            15  BKU-MU-MODULE-NAME          PIC X(16).
            15  BKU-MU-ITEM-LIMIT           PIC 9999.
        10  BKU-IT-DETAIL         REDEFINES BKU-DETAIL.
            15  BKU-IT-MENU-NAME            PIC X(16).
            15  BKU-IT-NUMBER               PIC 9999.
            15  BKU-IT-ITEM-NAME            PIC X(32).
            15  BKU-IT-TEXT                 PIC X(64).
            15  BKU-IT-SELECTABLE           PIC X.
        10  BKU-MR-DETAIL         REDEFINES BKU-DETAIL.
            15  BKU-MR-SCREEN-NAME          PIC X(16).
            15  BKU-MR-MENU-NAME            PIC X(16).
[/INST]{
  "id": "BR-001",
  "description": "The SC detail defines the screen control details such as name, description, author, notes, title, action required indicator, etc.",
  "condition": null,
  "output": null
}[INST]        01  NC-ATTRIBUTE-DEFINITIONS.
            10  NC-ATTR-ATTRIBUTES PIC 9(9) COMP-5
                                   VALUE 65535 SYNCHRONIZED.
            10  NC-ATTR-NORMAL     PIC 9(9) COMP-5
                                   VALUE 1 SYNCHRONIZED.
            10  NC-ATTR-STANDOUT   PIC 9(9) COMP-5
                                   VALUE 2 SYNCHRONIZED.
            10  NC-ATTR-UNDERLINE  PIC 9(9) COMP-5
                                   VALUE 4 SYNCHRONIZED.
            10  NC-ATTR-REVERSE    PIC 9(9) COMP-5
                                   VALUE 8 SYNCHRONIZED.
            10  NC-ATTR-BLINK      PIC 9(9) COMP-5
                                   VALUE 16 SYNCHRONIZED.
            10  NC-ATTR-DIM        PIC 9(9) COMP-5
                                   VALUE 32 SYNCHRONIZED.
            10  NC-ATTR-BOLD       PIC 9(9) COMP-5
                                   VALUE 64 SYNCHRONIZED.
[/INST]{
  "id": "BR-001",
  "description": "Each terminal session can be in one of 9 mutually exclusive modes.",
  "condition": "Terminal session",
  "output": {
    "normal": "NC-ATTR-NORMAL",
    "standout": "NC-ATTR-STANDOUT",
    "underline": "NC-ATTR-UNDERLINE",
    "reverse": "NC-ATTR-REVERSE",
    "blink": "NC-ATTR-BLINK",
    "dim": "NC-ATTR-DIM",
    "bold": "NC-ATTR-BOLD"
  }
}[INST]        01  NC-COLOUR-DEFINITIONS.
            10  NC-COLOUR-BLACK    PIC 9(4) COMP-5 VALUE 0
                                            SYNCHRONIZED.
            10  NC-COLOUR-RED      PIC 9(4) COMP-5 VALUE 1
                                            SYNCHRONIZED.
            10  NC-COLOUR-GREEN    PIC 9(4) COMP-5 VALUE 2
                                            SYNCHRONIZED.
            10  NC-COLOUR-YELLOW   PIC 9(4) COMP-5 VALUE 3
                                            SYNCHRONIZED.
            10  NC-COLOUR-BLUE     PIC 9(4) COMP-5 VALUE 4
                                            SYNCHRONIZED.
            10  NC-COLOUR-MAGENTA  PIC 9(4) COMP-5 VALUE 5
                                            SYNCHRONIZED.
            10  NC-COLOUR-CYAN     PIC 9(4) COMP-5 VALUE 6
                                            SYNCHRONIZED.
            10  NC-COLOUR-WHITE    PIC 9(4) COMP-5 VALUE 7
                                            SYNCHRONIZED.
[/INST]{
  "id": "BR-001",
  "description": "Black colour has a numeric value of 0.",
  "condition": "NC-COLOUR-BLACK = 0",
  "output": {}
},
{
  "id": "BR-002",
  "description": "Red colour has a numeric value of 1.",
  "condition": "NC-COLOUR-RED = 1",
  "output": {}
},
{
  "id": "BR-003",
  "description": "Green colour has a numeric value of 2.",
  "condition": "NC-COLOUR-GREEN = 2",
  "output": {}
},
{
  "id": "BR-004",
  "description": "Yellow colour has a numeric value of 3.",
  "condition": "NC-COLOUR-YELLOW = 3",
  "output": {}
},
{
  "id": "BR-005",
  "description": "Blue colour has a numeric value of 4.",
  "condition": "NC-COLOUR-BLUE = 4",
  "output": {}
},
{
  "id": "BR-006",
  "description": "Magenta colour has a numeric value of 5.",
  "condition": "NC-COLOUR-MAGENTA = 5",
  "output": {}
},
{
  "id": "BR-007",
  "description": "Cyan colour has a numeric value of 6.",
  "condition": "NC-COLOUR-CYAN = 6",
  "output": {}
},
{
  "id": "BR-008",
  "description": "White colour has a numeric value of 7.",
  "condition": "NC-COLOUR-WHITE = 7",
  "output": {}
}[INST]        01  COBCURSES-EXTRAS.
            10  NC-EXTRA-STATE.
                15  NC-SHLIB-EXTRA-FLAG     PIC X VALUE 'N'.
                    88  NC-SHLIB-EXTRA-NI   VALUE 'N'.
            10  NC-EXTRA-CONFIG.
                15  NC-CSV-DELIMITER        PIC X VALUE ','.
                15  NC-CSV-MULT-DEL-FLAG    PIC X VALUE 'N'.
                    88  NC-SINGLE-DELIMTER  VALUE 'N'.
                    88  NC-MULT-DEL-AS-ONE  VALUE 'Y'.
                15  NC-CSV-QUOTE-CONVENTION PIC X VALUE '"'.
                    88  NC-CSV-QUOTE        VALUE '"'.
                    88  NC-CSV-BACKSLASH    VALUE '\'.
            10  COBCURSES-EXTRA-CONSTANTS.
                15  NC-NULL-HANDLE          PIC 9(9) VALUE 999999999.
            10  COBCURSES-CSV-TEXT.
                15  NC-CSV-TEXT             POINTER VALUE NULL
                                            SYNCHRONIZED.
                15  NC-CSV-LENGTH           PIC 9999 COMP-5 VALUE 0
                                            SYNCHRONIZED.
                15  NC-CSV-COLUMNS          PIC 9999 COMP-5 VALUE 0
                                            SYNCHRONIZED.
            10  COBCURSES-EXTRACT.
                15  NC-EXTRACT-FIELD        PIC 9999 COMP-5 VALUE 0
                                            SYNCHRONIZED.
                15  NC-EXTRACT-BUFFER       POINTER VALUE NULL
                                            SYNCHRONIZED.
                15  NC-EXTRACT-BUFLEN       PIC 9999 COMP-5 VALUE 0
                                            SYNCHRONIZED.
            10  COBCURSES-REGISTER-COLUMN.
                15  NC-CSV-HEADING          PIC X(64).
                15  NC-CSV-COLUMN-NO        PIC 9999 COMP-5
                                            SYNCHRONIZED.
                15  NC-CSV-COL-BUFFER       POINTER VALUE NULL
                                            SYNCHRONIZED.
                15  NC-CSV-COL-BUFLEN       PIC 9999 COMP-5
                                            SYNCHRONIZED.
[/INST]{
  "id": "BR-001",
  "description": "The initial value of NC-SHLIB-EXTRA-FLAG is 'N'.\nIf the value of NC-SHLIB-EXTRA-FLAG is 'N', then the value of NC-SHLIB-EXTRA-NI is 'N'.",
  "condition": "NC-SHLIB-EXTRA-FLAG = 'N'",
  "output": {
    "NC-SHLIB-EXTRA-FLAG = 'N'": "NC-SHLIB-EXTRA-NI = 'N'"
  }
},
{
  "id": "BR-002",
  "description": "The initial value of NC-CSV-DELIMITER is ','.\nIf the value of NC-CSV-MULT-DEL-FLAG is 'N', then the value of NC-SINGLE-DELIMTER is 'N'.",
  "condition": "NC-CSV-MULT-DEL-FLAG = 'N'",
  "output": {
    "NC-CSV-MULT-DEL-FLAG = 'N'": "NC-SINGLE-DELIMTER = 'N'"
  }
},
{
  "id": "BR-003",
  "description": "The initial value of NC-CSV-QUOTE-CONVENTION is '\"'.\nIf the value of NC-CSV-QUOTE-CONVENTION is '\"', then the value of NC-CSV-QUOTE is '\"'.",
  "condition": "NC-CSV-QUOTE-CONVENTION = '\"'",
  "output": {
    "NC-CSV-QUOTE-CONVENTION = '\"': "NC-CSV-QUOTE = '\"'"
  }
},
{
  "id": "BR-004",
  "description": "The initial value of NC-CSV-QUOTE-CONVENTION is '\\'.\nIf the value of NC-CSV-QUOTE-CONVENTION is '\\', then the value of NC-CSV-BACKSLASH is '\\'.",
  "condition": "NC-CSV-QUOTE-CONVENTION = '\\'",
  "output": {
    "NC-CSV-QUOTE-CONVENTION = '\\'": "NC-CSV-BACKSLASH = '\\'"
  }
}[INST]        01  NC-RETURN-CODES.
            10  NC-RET-OK               PIC S9(9) VALUE 0.
            10  NC-RET-FAILED           PIC S9(9) VALUE 1.
            10  NC-RET-OPEN             PIC S9(9) VALUE 2.
            10  NC-RET-NSUPPORT         PIC S9(9) VALUE 3.
            10  NC-RET-TRUNCATED        PIC S9(9) VALUE 4.
            10  NC-RET-NOTFOUND         PIC S9(9) VALUE 5.
            10  NC-RET-BADPARM          PIC S9(9) VALUE 6.
            10  NC-RET-END              PIC S9(9) VALUE 7.
            10  NC-RET-RESOURCE         PIC S9(9) VALUE 8.
[/INST]{
  "id": "BR-001",
  "description": "The value of NC-RET-OK is 0.",
  "condition": "NC-RET-OK",
  "output": {
    "value": "0"
  }
},
{
  "id": "BR-002",
  "description": "The value of NC-RET-FAILED is 1.",
  "condition": "NC-RET-FAILED",
  "output": {
    "value": "1"
  }
},
{
  "id": "BR-003",
  "description": "The value of NC-RET-OPEN is 2.",
  "condition": "NC-RET-OPEN",
  "output": {
    "value": "2"
  }
},
{
  "id": "BR-004",
  "description": "The value of NC-RET-NSUPPORT is 3.",
  "condition": "NC-RET-NSUPPORT",
  "output": {
    "value": "3"
  }
},
{
  "id": "BR-005",
  "description": "The value of NC-RET-TRUNCATED is 4.",
  "condition": "NC-RET-TRUNCATED",
  "output": {
    "value": "4"
  }
},
{
  "id": "BR-006",
  "description": "The value of NC-RET-NOTFOUND is 5.",
  "condition": "NC-RET-NOTFOUND",
  "output": {
    "value": "5"
  }
},
{
  "id": "BR-007",
  "description": "The value of NC-RET-BADPARM is 6.",
  "condition": "NC-RET-BADPARM",
  "output": {
    "value": "6"
  }
},
{
  "id": "BR-008",
  "description": "The value of NC-RET-END is 7.",
  "condition": "NC-RET-END",
  "output": {
    "value": "7"
  }
},
{
  "id": "BR-009",
  "description": "The value of NC-RET-RESOURCE is 8.",
  "condition": "NC-RET-RESOURCE",
  "output": {
    "value": "8"
  }
}[INST]       01   NC-LOCALS-77.
            10  NC-FIELD-INDEX              PIC 9999 COMP-5
                                            SYNCHRONIZED.
            10  NC-FKEY-INDEX               PIC 99 COMP-5
                                            SYNCHRONIZED.
            10  NC-THIS-FIELD               PIC 9999 COMP-5
                                            SYNCHRONIZED.
            10  NC-BEST-FIELD               PIC 9999 COMP-5
                                            SYNCHRONIZED.
            10  NC-DIFF-Y                   PIC 9999 COMP-5
                                            SYNCHRONIZED.
            10  NC-DIFF-X                   PIC 9999 COMP-5
                                            SYNCHRONIZED.
            10  NC-DIFF                     PIC 9999 COMP-5
                                            SYNCHRONIZED.
            10  NC-TEMP-END-COLUMN          PIC 9999 COMP-5
                                            SYNCHRONIZED.
            10  NC-FIELD-CHANGES            PIC 9999 COMP-5
                                            SYNCHRONIZED.
            10  NC-TEMP-COLOUR-PAIR         PIC 999 COMP-5
                                            SYNCHRONIZED.
            10  NC-SAVED-EXIT               PIC X.
            10  NC-SAVED-FKEY               PIC 99.
        01  NC-SCREEN-CONFIG.
            10  NC-SCREEN-COLUMNS-REQ       PIC 999.
            10  NC-SCREEN-LINES-REQ         PIC 999.
            10  NC-SCREEN-PAIRS-REQ         PIC 999.
       01   NC-FKEY-EXEMPTIONS.
            10  NC-FKEY-DEFN OCCURS 1 TO 12 TIMES.
                20  NC-FKEY-EXEMPT          PIC X.
       01   NC-FIELD-DESCRIPTORS.
            10  NC-FIELD-NUMBER             PIC 9999 COMP-5
                                            SYNCHRONIZED.
            10  NC-FDESC OCCURS 1 TO 80 TIMES.
                20  NC-FDESC-LINE           PIC 9999 COMP-5
                                            SYNCHRONIZED.
                20  NC-FDESC-COLUMN         PIC 9999 COMP-5
                                            SYNCHRONIZED.
                20  NC-FDESC-ADDRESS        POINTER
                                            SYNCHRONIZED.
                20  NC-FDESC-LENGTH         PIC 9999 COMP-5
                                            SYNCHRONIZED.
                20  NC-FDESC-WINLENGTH      PIC 9999 COMP-5
                                            SYNCHRONIZED.
                20  NC-FDESC-CLEAR          PIC X.
                20  NC-FDESC-UPPERCASE      PIC X.
                20  NC-FDESC-MASK           PIC X.
                20  NC-FDESC-NOT-BLANK      PIC X.
                20  NC-FDESC-YN             PIC X.
                20  NC-FDESC-RESTRICT       PIC 9999 COMP-5
                                            SYNCHRONIZED.
                20  NC-FDESC-SIGNED         PIC X.
                20  NC-FDESC-DIGITS         PIC 9999 COMP-5
                                            SYNCHRONIZED.
                20  NC-FDESC-DECPLACES      PIC 9999 COMP-5
                                            SYNCHRONIZED.
                20  NC-FDESC-VERIFY         PIC X.
                20  NC-FDESC-VISIBLE        PIC X.
                20  NC-FDESC-IGNORE-CHGS    PIC X.
                20  NC-FDESC-INFO           POINTER
                                            SYNCHRONIZED.
                20  NC-FDESC-INFOLEN        PIC 9999 COMP-5
                                            SYNCHRONIZED.
                20  NC-FDESC-CHG-FLAG       PIC X.
                    88  NC-FDESC-CHANGED    VALUE 'Y'.
                20  NC-FDESC-COLOUR-FLAG    PIC X.
                20  NC-FDESC-COLOUR-PAIR    PIC 999 COMP-5
                                            SYNCHRONIZED.
                20  NC-FDESC-READ-ONLY      PIC X.
                20  NC-FDESC-ACTION-EDIT    PIC X.
                20  NC-FDESC-COMP-TYPE      PIC 99.
                20  NC-FDESC-COMP-PTR       POINTER SYNCHRONIZED.
                20  NC-FDESC-MENU-PTR       POINTER SYNCHRONIZED.
       01   NC-RESTRICT-MAPS.
            10  NC-RESTRICTX                PIC 99 COMP-5
                                            SYNCHRONIZED.
            10  NC-RESTRICT-CHARSET         PIC X(80) OCCURS 20 TIMES.
       01   NC-FIELD-SEQUENCES.
            10  NC-FSEQ-LAST                PIC 9999 COMP-5 VALUE 0
                                            SYNCHRONIZED.
            10  NC-FSEQ-STATE               PIC 9999 COMP-5 VALUE 1
                                            SYNCHRONIZED.
            10  NC-FSEQ-NEXT                PIC 9999 COMP-5 VALUE 0
                                            SYNCHRONIZED.
            10  NC-FSEQUENCE OCCURS 1 TO 80 TIMES.
                20  NC-FSEQ-FIELD-NO        PIC 9999 COMP-5
                                            SYNCHRONIZED.
                20  NC-FSEQ-BCK-TO          PIC 9999 COMP-5
                                            SYNCHRONIZED.
                20  NC-FSEQ-FWD-TO          PIC 9999 COMP-5
                                            SYNCHRONIZED.
                20  NC-FSEQ-ESC-TO          PIC 9999 COMP-5
                                            SYNCHRONIZED.
                20  NC-FSEQ-SLASH-TO        PIC 9999 COMP-5
                                            SYNCHRONIZED.
       01   NC-SCREEN-DEFINITION.
            10  NC-SCREENX                  PIC 9999 COMP-5
                                            SYNCHRONIZED.
            10  NC-SCREEN-COUNT             PIC 9999 COMP-5
                                            SYNCHRONIZED.
            10  NC-SCREEN-DATE              PIC 9(8) COMP-5
                                            SYNCHRONIZED.
            10  NC-SCREEN-TIME              PIC 9(8) COMP-5
                                            SYNCHRONIZED.
            10  NC-SCREEN-TITLEX            PIC 9999 COMP-5
                                            SYNCHRONIZED.
            10  NC-BG-SCREEN OCCURS 80 TIMES.
                20  NC-BG-TEXT              POINTER
                                            SYNCHRONIZED.
                20  NC-BG-LENGTH            PIC 9999 COMP-5
                                            SYNCHRONIZED.
                20  NC-BG-Y                 PIC 9999 COMP-5
                                            SYNCHRONIZED.
                20  NC-BG-X                 PIC 9999 COMP-5
                                            SYNCHRONIZED.
                20  NC-BG-COLOUR-PAIR       PIC 9999 COMP-5
                                            SYNCHRONIZED.
                20  NC-BG-BOLD              PIC X.
                20  NC-BG-UNDERLINE         PIC X.
                20  NC-BG-REVERSE           PIC X.
                20  NC-BG-TITLE.
                    30  NC-BG-TITLE-FLAG    PIC X.
                    30  NC-BG-DATE          PIC X.
                    30  NC-BG-TIME          PIC X.
[/INST]{
  "id": "BR-001",
  "description": "The index of the field in the file is stored in \\\"NC-FIELD-INDEX\\\".",
  "condition": null,
  "output": null
}[INST]        NC-OPEN.
            CALL "libcobcurses" USING NC-COBCURSES.
            CALL "COBCURSES-OPEN" USING NC-COBCURSES.
            EXIT.
        NC-CLOSE.
            CALL "COBCURSES-CLOSE".
            EXIT.
[/INST]{
  "id": "BR-001",
  "description": "If a terminal can be opened successfully, then call the function \"COBCURSES-OPEN\"",
  "condition": "NC-OPEN",
  "output": {
    "success": "CALL \"COBCURSES-OPEN\" USING NC-COBCURSES."
  }
}
{
  "id": "BR-002",
  "description": "If a terminal is closed successfully, then call the function \"COBCURSES-CLOSE\"",
  "condition": "NC-CLOSE",
  "output": {
    "success": "CALL \"COBCURSES-CLOSE\"."
  }
}[INST]        NC-EXTRA-INIT.
            PERFORM NC-SHLIB-EXTRA-INIT.
            EXIT.
        NC-EXTRACT-CSV-FIELD.
            PERFORM NC-SHLIB-EXTRA-INIT.
            CALL "COBCURSES-EXTRACT-CSV-FIELD"
		USING BY REFERENCE COBCURSES-EXTRAS.
            EXIT.
        NC-CLEAR-CSV-HEADINGS.
            PERFORM NC-SHLIB-EXTRA-INIT.
            CALL "COBCURSES-CLEAR-CSV-HEADINGS".
            EXIT.
        NC-LOAD-CSV-HEADINGS.
            PERFORM NC-SHLIB-EXTRA-INIT.
            CALL "COBCURSES-LOAD-CSV-HEADINGS"
		USING BY REFERENCE COBCURSES-EXTRAS.
            EXIT.
        NC-REGISTER-CSV-COLUMN-NO.
            PERFORM NC-SHLIB-EXTRA-INIT.
            CALL "COBCURSES-REGISTER-CSV-COL-NO"
                USING BY REFERENCE COBCURSES-EXTRAS.
            EXIT.
        NC-REGISTER-CSV-COLUMN.
            PERFORM NC-SHLIB-EXTRA-INIT.
            CALL "COBCURSES-REGISTER-CSV-COLUMN"
                USING BY REFERENCE COBCURSES-EXTRAS.
            EXIT.
        NC-REGISTER-CSV-COLUMN-HEADING.
            PERFORM NC-SHLIB-EXTRA-INIT.
            CALL "COBCURSES-REGISTER-CSV-COL-HDG"
                USING BY REFERENCE COBCURSES-EXTRAS.
            EXIT.
        NC-EXTRACT-CSV-RECORD.
            PERFORM NC-SHLIB-EXTRA-INIT.
            CALL "COBCURSES-EXTRACT-CSV-RECORD"
		USING BY REFERENCE COBCURSES-EXTRAS.
            EXIT.
        NC-COUNT-CSV-COLUMNS.
            PERFORM NC-SHLIB-EXTRA-INIT.
            CALL "COBCURSES-COUNT-CSV-COLUMNS"
		USING BY REFERENCE COBCURSES-EXTRAS.
            EXIT.
        NC-EMIT-CSV-HEADINGS.
            PERFORM NC-SHLIB-EXTRA-INIT.
            CALL "COBCURSES-EMIT-CSV-HEADINGS"
		USING BY REFERENCE COBCURSES-EXTRAS.
            EXIT.
        NC-EMIT-CSV-RECORD.
            PERFORM NC-SHLIB-EXTRA-INIT.
            CALL "COBCURSES-EMIT-CSV-RECORD"
		USING BY REFERENCE COBCURSES-EXTRAS.
            EXIT.
        NC-SHLIB-EXTRA-INIT.
	    IF NC-SHLIB-EXTRA-NI THEN
                PERFORM NC-INTERNAL-EXTRA-INIT
            END-IF.
            EXIT.
        NC-INTERNAL-EXTRA-INIT.
            CALL "libcobcursex".
            MOVE 'Y' TO NC-SHLIB-EXTRA-FLAG.
            EXIT.
[/INST]{
  "id": "BR-001",
  "description": "The program calls a library containing extra functionality for parsing CSV files.",
  "condition": null,
  "output": {
    "initialization": "PERFORM NC-SHLIB-EXTRA-INIT."
  }
}[INST]01  GRAPHICS-CHAR-MENU.
    05  PIC X(16) VALUE "GRAPHICS-CHAR".                        *> THIS IS EFFECTIVELY IGNORED
    05  PIC 99 VALUE 01.                                        *> MENU TYPE 01 (STATIC)
    05  PIC 9(03) VALUE 029.                                    *> COLUMN #
    05  PIC 9(03) VALUE 013.                                    *> LINE #
    05  PIC X VALUE "Y".                                        *> OPTION ONEVALUE
    05  PIC X VALUE "Y".                                        *> OPTION ROWMAJOR
    05  PIC X VALUE "Y".                                        *> OPTION IGNORECASE
    05  PIC X VALUE "N".                                        *> OPTION SHOWDESC
    05  PIC X VALUE "N".                                        *> OPTION NONCYCLIC
    05  PIC X VALUE "Y".                                        *> OPTION SHOWMATCH
    05  PIC 99 VALUE 11.                                        *> OPTION FORMAT ROWS
    05  PIC 99 VALUE 04.                                        *> OPTION FORMAT COLS
    05  PIC 9(02) VALUE 08.                                     *> MENU TITLE LENGTH
    05  PIC X(08) VALUE "Graphics".                             *> MENU TITLE
    05  FILLER.
        10  PIC X(01) VALUE "Y".                                *> ITEM IS SELECTABLE
        10  PIC 99    VALUE 8.                                  *> ITEM NAME LENGTH
        10  PIC X(08) VALUE "ULCORNER".                         *> ITEM NAME
        10  PIC 99    VALUE 21.                                 *> ITEM DESCRIPTION LENGTH
        10  PIC X     VALUE X'01'.                              *> START OF ITEM DESCRIPTION (GRAPHIC)
        10  PIC X(20) VALUE " (Upper left corner)".             *> REMAINDER OF ITEM DESCRIPTION
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 8.
        10  PIC X(08) VALUE "LLCORNER".
        10  PIC 99    VALUE 21.
        10  PIC X     VALUE X'02'.
        10  PIC X(20) VALUE " (Lower left corner)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 8.
        10  PIC X(08) VALUE "URCORNER".      
        10  PIC 99    VALUE 22.
        10  PIC X     VALUE X'03'.
        10  PIC X(21) VALUE " (Upper right corner)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 8.
        10  PIC X(08) VALUE "LRCORNER".
        10  PIC 99    VALUE 22.
        10  PIC X     VALUE X'04'.
        10  PIC X(21) VALUE " (Lower right corner)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 4.
        10  PIC X(04) VALUE "LTEE".       
        10  PIC 99    VALUE 22.
        10  PIC X     VALUE X'05'.
        10  PIC X(21) VALUE " (Tee pointing right)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 4.
        10  PIC X(04) VALUE "RTEE".          
        10  PIC 99    VALUE 21.
        10  PIC X     VALUE X'06'.
        10  PIC X(20) VALUE " (Tee pointing left)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 4.
        10  PIC X(04) VALUE "BTEE".          
        10  PIC 99    VALUE 19.
        10  PIC X     VALUE X'07'.
        10  PIC X(18) VALUE " (Tee pointing up)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 4.
        10  PIC X(04) VALUE "TTEE".          
        10  PIC 99    VALUE 21.
        10  PIC X     VALUE X'08'.
        10  PIC X(20) VALUE " (Tee pointing down)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 5.
        10  PIC X(05) VALUE "HLINE".         
        10  PIC 99    VALUE 19.
        10  PIC X     VALUE X'09'.
        10  PIC X(18) VALUE " (Horizontal line)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 5.
        10  PIC X(05) VALUE "VLINE".         
        10  PIC 99    VALUE 17.
        10  PIC X     VALUE X'0A'.
        10  PIC X(16) VALUE " (Vertical line)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 4.
        10  PIC X(04) VALUE "PLUS".          
        10  PIC 99    VALUE 27.
        10  PIC X     VALUE X'0B'.
        10  PIC X(26) VALUE " (Large plus or crossover)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 2.
        10  PIC X(02) VALUE "S1".          	
        10  PIC 99    VALUE 15.
        10  PIC X     VALUE X'0C'.
        10  PIC X(14) VALUE " (Scan line 1)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 2.
        10  PIC X(02) VALUE "S9".            
        10  PIC 99    VALUE 16.
        10  PIC X     VALUE X'0D'.
        10  PIC X(15) VALUE " (Scan line 9)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 7.
        10  PIC X(07) VALUE "DIAMOND".       
        10  PIC 99    VALUE 11.
        10  PIC X     VALUE X'0F'.
        10  PIC X(10) VALUE " (Diamond)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 7.
        10  PIC X(07) VALUE "CKBOARD".       
        10  PIC 99    VALUE 27.
        10  PIC X     VALUE X'10'.
        10  PIC X(26) VALUE " (Checker board (stipple))".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 6.
        10  PIC X(06) VALUE "DEGREE".        
        10  PIC 99    VALUE 17.
        10  PIC X     VALUE X'11'.
        10  PIC X(16) VALUE " (Degree symbol)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 7.
        10  PIC X(07) VALUE "PLMINUS".       
        10  PIC 99    VALUE 14.
        10  PIC X     VALUE X'12'.
        10  PIC X(13) VALUE " (Plus/minus)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 6.
        10  PIC X(06) VALUE "BULLET".        
        10  PIC 99    VALUE 10.
        10  PIC X     VALUE X'13'.
        10  PIC X(09) VALUE " (Bullet)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 6.
        10  PIC X(06) VALUE "LARROW".        
        10  PIC 99    VALUE 23.
        10  PIC X     VALUE X'14'.
        10  PIC X(22) VALUE " (Arrow pointing left)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 6.
        10  PIC X(06) VALUE "RARROW".        
        10  PIC 99    VALUE 24.
        10  PIC X     VALUE X'15'.
        10  PIC X(23) VALUE " (Arrow pointing right)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 6.
        10  PIC X(06) VALUE "DARROW".        
        10  PIC 99    VALUE 23.
        10  PIC X     VALUE X'16'.
        10  PIC X(22) VALUE " (Arrow pointing down)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 6.
        10  PIC X(06) VALUE "UARROW".        
        10  PIC 99    VALUE 21.
        10  PIC X     VALUE X'17'.
        10  PIC X(20) VALUE " (Arrow pointing up)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 5.
        10  PIC X(05) VALUE "BOARD".         
        10  PIC 99    VALUE 20.
        10  PIC X     VALUE X'18'.
        10  PIC X(19) VALUE " (Board of squares)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 7.
        10  PIC X(07) VALUE "LANTERN".       
        10  PIC 99    VALUE 18.
        10  PIC X     VALUE X'19'.
        10  PIC X(17) VALUE " (Lantern symbol)".
    05  FILLER.
        10  PIC X(01) VALUE "Y".
        10  PIC 99    VALUE 5.
        10  PIC X(05) VALUE "BLOCK".         
        10  PIC 99    VALUE 22.
        10  PIC X     VALUE X'1A'.
        10  PIC X(21) VALUE " (Solid square block)".
    05  FILLER.
        10  PIC X(01) VALUE 'X'.                                *> END OF MENU DEFINITION
[/INST]{
  "id": "BR-001",
  "description": "All menu items are selectable.",
  "condition": null,
  "output": {
    "menu_item_selectable": true
  }
},
{
  "id": "BR-002",
  "description": "Graphics characters have a length of 1 byte.",
  "condition": null,
  "output": {
    "graphics_character_length": 1
  }
},
{
  "id": "BR-003",
  "description": "The default number of menu rows is 11.",
  "condition": null,
  "output": {
    "default_menu_rows": 11
  }
},
{
  "id": "BR-004",
  "description": "The default number of menu columns is 4.",
  "condition": null,
  "output": {
    "default_menu_columns": 4
  }
},
{
  "id": "BR-005",
  "description": "The default menu title length is 8 bytes.",
  "condition": null,
  "output": {
    "default_menu_title_length": 8
  }
},
{
  "id": "BR-006",
  "description": "The menu does not show menu descriptions by default.",
  "condition": null,
  "output": {
    "show_menu_descriptions": false
  }
},
{
  "id": "BR-007",
  "description": "The menu does not show item descriptions by default.",
  "condition": null,
  "output": {
    "show_item_descriptions": false
  }
},
{
  "id": "BR-008",
  "description": "The menu title is 'Graphics' by default.",
  "condition": null,
  "output": {
    "default_menu_title": "Graphics"
  }
},
{
  "id": "BR-009",
  "description": "The menu type is static by default.",
  "condition": null,
  "output": {
    "default_menu_type": "static"
  }
},
{
  "id": "BR-010",
  "description": "The option to cycle between menu items in a row only is not selected by default.",
  "condition": null,
  "output": {
    "option_cycle_row": false
  }
},
{
  "id": "BR-011",
  "description": "The option to match menu items to upper/lower case characters only is selected by default.",
  "condition": null,
  "output": {
    "option_ignore_case": true
  }
},
{
  "id": "BR-012",
  "description": "The option to only show matches to the menu item entered is selected by default.",
  "condition": null,
  "output": {
    "option_show_match": true
  }
},
{
  "id": "BR-013",
  "description": "The menu display is not non-cyclic by default.",
  "condition": null,
  "output": {
    "option_non_cyclic": false
  }
}
```[INST]            10  ITM-KEY.
                15  ITM-MENU-NAME               PIC X(16).
		15  ITM-NUMBER			PIC 9999.
            10  ITM-DATA.
                15  ITM-ITEM-NAME               PIC X(32).
                15  ITM-TEXT                    PIC X(64).
                15  ITM-SELECTABLE              PIC X.
                15  FILLER                      PIC X(31).
[/INST]{
  "id": "BR-002",  "description": "The item menu name and the item number are used as the key to identify an item.",
  "condition": null,
  "output": null
}[INST]            10  MNU-KEY.
                15  MNU-MENU-NAME               PIC X(16).
            10  MNU-DATA.
                15  MNU-MENU-TYPE               PIC 99.
                15  MNU-TITLE                   PIC X(64).
                15  MNU-TOP-LEFT-LINE-NO        PIC 999.
                15  MNU-TOP-LEFT-COLUMN-NO      PIC 999.
                15  MNU-OPT-ONEVALUE            PIC X.
                15  MNU-OPT-ROWMAJOR            PIC X.
                15  MNU-OPT-IGNORECASE          PIC X.
                15  MNU-OPT-SHOWDESC            PIC X.
                15  MNU-OPT-NONCYCLIC           PIC X.
                15  MNU-OPT-SHOWMATCH           PIC X.
                15  MNU-OPT-ROWS                PIC 99.
                15  MNU-OPT-COLS                PIC 99.
                15  MNU-MODULE-NAME             PIC X(16).
                15  MNU-ITEM-LIMIT              PIC 9999.
[/INST]{
  "id": "BR-001",
  "description": "The menu type should be a valid numeric value.",
  "condition": "MNU-MENU-TYPE is numeric",
  "output": {
    "valid": "Menu type is valid.",
    "invalid": "Menu type is invalid."
  }
},
{
  "id": "BR-002",
  "description": "The menu title should not exceed 64 characters.",
  "condition": "Length of MNU-TITLE <= 64",
  "output": {
    "valid": "Menu title is valid.",
    "invalid": "Menu title is invalid."
  }
},
{
  "id": "BR-003",
  "description": "The top-left line number should be a valid numeric value.",
  "condition": "MNU-TOP-LEFT-LINE-NO is numeric",
  "output": {
    "valid": "Top-left line number is valid.",
    "invalid": "Top-left line number is invalid."
  }
},
{
  "id": "BR-004",
  "description": "The top-left column number should be a valid numeric value.",
  "condition": "MNU-TOP-LEFT-COLUMN-NO is numeric",
  "output": {
    "valid": "Top-left column number is valid.",
    "invalid": "Top-left column number is invalid."
  }
},
{
  "id": "BR-005",
  "description": "The number of rows should be a valid numeric value.",
  "condition": "MNU-OPT-ROWS is numeric",
  "output": {
    "valid": "Number of rows is valid.",
    "invalid": "Number of rows is invalid."
  }
},
{
  "id": "BR-006",
  "description": "The number of columns should be a valid numeric value.",
  "condition": "MNU-OPT-COLS is numeric",
  "output": {
    "valid": "Number of columns is valid.",
    "invalid": "Number of columns is invalid."
  }
},
{
  "id": "BR-007",
  "description": "The module name should not exceed 16 characters.",
  "condition": "Length of MNU-MODULE-NAME <= 16",
  "output": {
    "valid": "Module name is valid.",
    "invalid": "Module name is invalid."
  }
},
{
  "id": "BR-008",
  "description": "The item limit should be a valid numeric value.",
  "condition": "MNU-ITEM-LIMIT is numeric",
  "output": {
    "valid": "Item limit is valid.",
    "invalid": "Item limit is invalid."
  }
}[INST]        05  MREF-KEY.
            10  MREF-SCREEN-NAME            PIC X(16).
            10  MREF-MENU-NAME              PIC X(16).
        05  MREF-DATA.
            10  FILLER                      PIC X(16).
[/INST]{
  "id": "BR-001",
  "description": "The menu name and screen name should be 16 characters in length.",
  "condition": "MREF-SCREEN-NAME and MREF-MENU-NAME",
  "validation": "length = 16"
}[INST]            10  SCN-NAME                        PIC X(16).
            10  SCN-DESCRIPTION                 PIC X(50).
            10  SCN-AUTHOR                      PIC X(32).
            10  SCN-NOTES                       PIC X(50).
            10  SCN-TITLE                       PIC X(50).
            10  SCN-SHOW-DATE                   PIC X.
            10  SCN-SHOW-TIME                   PIC X.
            10  SCN-ACTION-REQUIRED             PIC X.
            10  SCN-COLUMNS-MIN                 PIC 999.
            10  SCN-LINES-MIN                   PIC 999.
            10  SCN-PAIRS                       PIC 999.
            10  SCN-WS-SECTION                  PIC X(16).
            10  SCN-LINKAGE-SECTION             PIC X(16).
            10  SCN-PROCEDURE-DIVISION          PIC X(16).
            10  SCN-STRIP-CHARACTER             PIC X.
            10  FILLER                          PIC X(32).
[/INST]```json
{
  "id": "BR-001",
  "description": "The Screen Name (SCN-NAME) must be 16 characters long.",
  "condition": "LENGTH OF SCN-NAME = 16",
  "output": {
    "pass": "SCN-NAME is 16 characters long.",
    "fail": "SCN-NAME is not 16 characters long."
  }
},
{
  "id": "BR-002",
  "description": "The Screen Description (SCN-DESCRIPTION) must be 50 characters long.",
  "condition": "LENGTH OF SCN-DESCRIPTION = 50",
  "output": {
    "pass": "SCN-DESCRIPTION is 50 characters long.",
    "fail": "SCN-DESCRIPTION is not 50 characters long."
  }
},
{
  "id": "BR-003",
  "description": "The Screen Author (SCN-AUTHOR) must be 32 characters long.",
  "condition": "LENGTH OF SCN-AUTHOR = 32",
  "output": {
    "pass": "SCN-AUTHOR is 32 characters long.",
    "fail": "SCN-AUTHOR is not 32 characters long."
  }
},
{
  "id": "BR-004",
  "description": "The Screen Notes (SCN-NOTES) must be 50 characters long.",
  "condition": "LENGTH OF SCN-NOTES = 50",
  "output": {
    "pass": "SCN-NOTES is 50 characters long.",
    "fail": "SCN-NOTES is not 50 characters long."
  }
},
{
  "id": "BR-005",
  "description": "The Screen Title (SCN-TITLE) must be 50 characters long.",
  "condition": "LENGTH OF SCN-TITLE = 50",
  "output": {
    "pass": "SCN-TITLE is 50 characters long.",
    "fail": "SCN-TITLE is not 50 characters long."
  }
},
{
  "id": "BR-006",
  "description": "The Screen Show Date (SCN-SHOW-DATE) must be 1 character long.",
  "condition": "LENGTH OF SCN-SHOW-DATE = 1",
  "output": {
    "pass": "SCN-SHOW-DATE is 1 character long.",
    "fail": "SCN-SHOW-DATE is not 1 character long."
  }
},
{
  "id": "BR-007",
  "description": "The Screen Show Time (SCN-SHOW-TIME) must be 1 character long.",
  "condition": "LENGTH OF SCN-SHOW-TIME = 1",
  "output": {
    "pass": "SCN-SHOW-TIME is 1 character long.",
    "fail": "SCN-SHOW-TIME is not 1 character long."
  }
},
{
  "id": "BR-008",
  "description": "The Screen Action Required (SCN-ACTION-REQUIRED) must be 1 character long.",
  "condition": "LENGTH OF SCN-ACTION-REQUIRED = 1",
  "output": {
    "pass": "SCN-ACTION-REQUIRED is 1 character long.",
    "fail": "SCN-ACTION-REQUIRED is not 1 character long."
  }
},
{
  "id": "BR-009",
  "description": "The Screen Columns Minimum (SCN-COLUMNS-MIN) must be 3 digits long.",
  "condition": "LENGTH OF SCN-COLUMNS-MIN = 3",
  "output": {
    "pass": "SCN-COLUMNS-MIN is 3 digits long.",
    "fail": "SCN-COLUMNS-MIN is not 3 digits long."
  }
},
{
  "id": "BR-010",
  "description": "The Screen Lines Minimum (SCN-LINES-MIN) must be 3 digits long.",
  "condition": "LENGTH OF SCN-LINES-MIN = 3",
  "output": {
    "pass": "SCN-LINES-MIN is 3 digits long.",
    "fail": "SCN-LINES-MIN is not 3 digits long."
  }
},
{
  "id": "BR-011",
  "description": "The Screen Pairs (SCN-PAIRS) must be 3 digits long.",
  "condition": "LENGTH OF SCN-PAIRS = 3",
  "output": {
    "pass": "SCN-PAIRS is 3 digits long.",
    "fail": "SCN-PAIRS is not 3 digits long."
  }
},
{
  "id": "BR-012",
  "description": "The Screen Working-Storage Section (SCN-WS-SECTION) must be 16 characters long.",
  "condition": "LENGTH OF SCN-WS-SECTION = 16",
  "output": {
    "pass": "SCN-WS-SECTION is 16 characters long.",
    "fail": "SCN-WS-SECTION is not 16 characters long."
  }
},
{
  "id": "BR-013",
  "description": "The Screen Linkage Section (SCN-LINKAGE-SECTION) must be 16 characters long.",
  "condition": "LENGTH OF SCN-LINKAGE-SECTION = 16",
  "output": {
    "pass": "SCN-LINKAGE-SECTION is 16 characters long.",
    "fail": "SCN-LINKAGE-SECTION is not 16 characters long."
  }
},
{
  "id": "BR-014",
  "description": "The Screen Procedure Division (SCN-PROCEDURE-DIVISION) must be 16 characters long.",
  "condition": "LENGTH OF SCN-PROCEDURE-DIVISION = 16",
  "output": {
    "pass": "SCN-PROCEDURE-DIVISION is 16 characters long.",
    "fail": "SCN-PROCEDURE-DIVISION is not 16 characters long."
  }
},
{
  "id": "BR-015",
  "description": "The Screen Strip Character (SCN-STRIP-CHARACTER) must be 1 character long.",
  "condition": "LENGTH OF SCN-STRIP-CHARACTER = 1",
  "output": {
    "pass": "SCN-STRIP-CHARACTER is 1 character long.",
    "fail": "SCN-STRIP-CHARACTER is not 1 character long."
  }
}
```[INST]            10  SCRBG-KEY.
                20  SCRBG-NAME                  PIC X(16).
                20  SCRBG-SEGMENT-NO            PIC 999.
            10  SCRBG-LINE                      PIC 999.
            10  SCRBG-COLUMN                    PIC 999.
            10  SCRBG-LENGTH                    PIC 99.
            10  SCRBG-SEGMENT                   PIC X(32).
            10  SCRBG-ATTRIBUTE                 PIC 9(9) COMP
		SYNCHRONIZED.
            10  SCRBG-COLOUR-PAIR               PIC 9999.
            10  SCRBG-FILLER                    PIC X(16).
[/INST]{
  "id": "BR-002",
  "description": "The graphics screen buffer can have a maximum of 99 segments.",
  "condition": "SCRBG-SEGMENT-NO LE 999",
  "output": {
    "success": "valid segment number",
    "error": "segment number is greater than 999"
  }
}[INST]            10  SCR-FDEF-KEY.
                20  SCR-FDEF-SCREEN-NAME        PIC X(16).
                20  SCR-FDEF-NO                 PIC 999.
            10  SCR-FDEF-COBOL-NAME             PIC X(32).
            10  SCR-FDEF-DESCRIPTION            PIC X(40).
            10  SCR-FDEF-LINE                   PIC 999.
            10  SCR-FDEF-COLUMN                 PIC 999.
            10  SCR-FDEF-BUFFER-LENGTH          PIC 9999.
            10  SCR-FDEF-WINDOW-LENGTH          PIC 9999.
            10  SCR-FDEF-CLEAR                  PIC X.
            10  SCR-FDEF-UPPERCASE              PIC X.
            10  SCR-FDEF-PASSWORD               PIC X.
            10  SCR-FDEF-NOT-BLANK              PIC X.
            10  SCR-FDEF-YN                     PIC X.
            10  SCR-FDEF-RES-CHARSET            PIC X(8).
            10  SCR-FDEF-SIGNED                 PIC X.
            10  SCR-FDEF-DIGITS                 PIC 999.
            10  SCR-FDEF-DECIMALS               PIC 999.
            10  SCR-FDEF-VERIFY                 PIC X.
            10  SCR-FDEF-VISIBLE                PIC X.
            10  SCR-FDEF-IGNORE-CHANGES         PIC X.
            10  SCR-FDEF-INPUT-SEQ              PIC X.
            10  SCR-FDEF-ACTION                 PIC X.
            10  SCR-FDEF-HELP                   PIC X(80).
            10  SCR-FDEF-READ-ONLY              PIC X.
            10  SCR-FDEF-COMP-TYPE              PIC 99.
            10  SCR-FDEF-MENU-REF               PIC X(16).
            10  SCR-FDEF-ACTION-EDIT            PIC X.
            10  FILLER                          PIC X(13).
[/INST]{
  "id": "BR-001",  "description": "Each field has a name in the COBOL code, a screen name, and a description.",
  "condition": null,
  "output": null
}[INST]            10  SCR-FST-KEY.
                20  SCR-FST-SCREEN-NAME         PIC X(16).
                20  SCR-FST-STATE-NO            PIC 999.
            10  SCR-FST-FIELD-NO                PIC 999.
            10  SCR-FST-BACK-TO                 PIC 999.
            10  SCR-FST-FORWARD-TO              PIC 999.
            10  SCR-FST-ESCAPE-TO               PIC 999.
            10  SCR-FST-SLASH-TO                PIC 999.
            10  SCR-FST-GROUP-HEADER            PIC X.
            10  SCR-FST-STATE-COBOL-NAME        PIC X(24).
[/INST]{
  "id": "BR-001",  "description": "The first field on the screen is the field number specified in SCR-FST-FIELD-NO.",
  "condition": "SCR-FST-FIELD-NO = 1",
  "output": {
    "first field": "(first field is the field number specified in SCR-FST-FIELD-NO.)"
  }
}[INST]            10  SCREEN-COLUMNS                  PIC 999 COMP 
                                                SYNCHRONIZED.
            10  SCREEN-LINES                    PIC 999 COMP
                                                SYNCHRONIZED.
            10  SCREEN-LAST-LINE                PIC 999 COMP
                                                SYNCHRONIZED.
            10  SCREEN-LAST-COLUMN              PIC 999 COMP
                                                SYNCHRONIZED.
            10  SCREEN-HAS-TITLE                PIC X.
            10  SCREEN-SHOW-DATE                PIC X.
            10  SCREEN-SHOW-TIME                PIC X.
            10  SCREEN-LINE                     PIC X(300)
                OCCURS 1 TO 50 TIMES.
[/INST]{
  "id": "BR-001",
  "description": "The screen has maximum 50 lines.",
  "condition": null,
  "output": null
}[INST]            10  DTA-KEY                     PIC X(8).
            10  DTA-DATA                    PIC X(32).
            10  DTA-DESC                    PIC X(40).
            10  DTA-COMP-2                  PIC X(12).
[/INST]{
  "id": "BR-002",  "description": "DTA-KEY is a unique identifier for each data record.",
  "condition": null,
  "output": null
}[INST]       CBL CICS(SP)
       IDENTIFICATION DIVISION.
       PROGRAM-ID. ZECSPLT.
       AUTHOR.     Randy Frerking and Rich Jackson.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  ST-CODE                PIC  X(02) VALUE SPACES.
       01  EOF                    PIC  X(01) VALUE SPACES.
       01  ZC                     PIC  X(02) VALUE 'ZC'.
       01  URI-MAP.
           02  URI-PREFIX         PIC  X(04) VALUE SPACES.
           02  URI-SUFFIX         PIC  X(04) VALUE SPACES.
       01  URI-TRAN               PIC  X(04) VALUE SPACES.
       01  ZC-LENGTH              PIC S9(04) COMP VALUE 4.
       01  ZX-TRANID.
           02  FILLER             PIC  X(02) VALUE 'ZX'.
           02  ZX-SUFFIX          PIC  X(02) VALUE SPACES.
       01  CSSL                   PIC  X(04) VALUE '@tdq@'.
       01  TD-LENGTH              PIC S9(04) COMP VALUE ZEROES.
       01  TD-RECORD.
           02  FILLER             PIC  X(13) VALUE 'zECS start ZX'.
           02  TD-SUFFIX          PIC  X(02) VALUE SPACES.
           02  FILLER             PIC  X(01) VALUE SPACES.
           02  FILLER             PIC  X(04) VALUE 'for '.
           02  TD-TRAN            PIC  X(04) VALUE SPACES.
           02  FILLER             PIC  X(01) VALUE SPACES.
           02  TD-PATH            PIC  X(80) VALUE SPACES.
       01  URI-PATH               PIC X(256) VALUE SPACES.
       LINKAGE SECTION.
       01  DFHCOMMAREA            PIC  X(01).
       PROCEDURE DIVISION.
           PERFORM 1000-INQUIRE-START      THRU 1000-EXIT.
           PERFORM 2000-INQUIRE-NEXT       THRU 2000-EXIT
                   WITH TEST AFTER
                   UNTIL EOF EQUAL 'Y'.
           PERFORM 3000-INQUIRE-END        THRU 3000-EXIT.
           PERFORM 9000-RETURN             THRU 9000-EXIT.
       1000-INQUIRE-START.
           EXEC CICS INQUIRE URIMAP START
                NOHANDLE
           END-EXEC.
       1000-EXIT.
           EXIT.
       2000-INQUIRE-NEXT.
           EXEC CICS INQUIRE URIMAP(URI-MAP)
                PATH(URI-PATH)
                TRANSACTION(URI-TRAN)
                NEXT
                NOHANDLE
           END-EXEC.
           IF  EIBRESP NOT EQUAL DFHRESP(NORMAL)
               MOVE 'Y'    TO EOF.
           IF  EIBRESP     EQUAL DFHRESP(NORMAL)
               PERFORM 2100-CHECK-URIMAP   THRU 2100-EXIT.
       2000-EXIT.
           EXIT.
       2100-CHECK-URIMAP.
           IF  URI-PREFIX(1:2) EQUAL ZC
           AND URI-SUFFIX      EQUAL SPACES
               PERFORM 2200-START          THRU 2200-EXIT.
       2100-EXIT.
           EXIT.
       2200-START.
           MOVE URI-PREFIX(3:2)      TO ZX-SUFFIX
                                        TD-SUFFIX.
           MOVE LENGTH OF TD-RECORD  TO TD-LENGTH.
           EXEC CICS START TRANSID(ZX-TRANID)
                FROM(URI-TRAN)
                LENGTH(4)
                NOHANDLE
           END-EXEC.
           MOVE URI-TRAN             TO TD-TRAN.
           MOVE URI-PATH             TO TD-PATH.
           EXEC CICS WRITEQ TD QUEUE(CSSL)
                FROM  (TD-RECORD)
                LENGTH(TD-LENGTH)
                NOHANDLE
           END-EXEC.
           EXEC CICS WRITE OPERATOR
                TEXT(TD-RECORD)
                NOHANDLE
           END-EXEC.
       2200-EXIT.
           EXIT.
       3000-INQUIRE-END.
           EXEC CICS INQUIRE URIMAP END
                NOHANDLE
           END-EXEC.
       3000-EXIT.
           EXIT.
       9000-RETURN.
           EXEC CICS RETURN
           END-EXEC.
       9000-EXIT.
           EXIT.
[/INST]{
  "id": "BR-001",
  "description": "URI-Prefix must start with 'ZC'.",
  "condition": "URI-PREFIX(1:2) = ZC"
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    COMPSUM
       AUTHOR.        DON HIGGINS.
       DATE-WRITTEN.  05/12/12.
      * SUBROUTINE CALLED TO ADD 15 DATA FIELDS AND RETURN SUM.                              
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       LINKAGE SECTION.
       01 ZDATA.
          05 EH1 FLOAT-HEX-7.
          05 DH1 FLOAT-HEX-15.
          05 LH1 FLOAT-HEX-30.
          05 EB1 FLOAT-BINARY-7.
          05 DB1 FLOAT-BINARY-16.
          05 LB1 FLOAT-BINARY-34.
          05 ED1 FLOAT-DECIMAL-7.
          05 DD1 FLOAT-DECIMAL-16.
          05 LD1 FLOAT-DECIMAL-34.
          05 H1      COMP PIC S9(3)V9.
          05 F1      COMP PIC S9(7)V99.
          05 G1      COMP PIC S9(15)V999.
          05 Q1      COMP PIC S9(35)V9999.
          05 P1      COMP-3 PIC S9(26)V9(5).
          05 Z1             PIC S9(25)V9(6).
          05 PSUM    COMP-3 PIC S9(4)V9.
       PROCEDURE DIVISION USING ZDATA.
           COMPUTE PSUM = EH1+DH1+LH1
                         +EB1+DB1+LB1  
                         +ED1+DD1+LD1
                         +H1+F1+G1
                         +Q1+P1+Z1           .
           GOBACK.[/INST]{
  "id": "BR-001",
  "description": "The sum of 15 numeric data fields is computed and assigned to the PSUM field.",
  "condition": "PSUM = EH1+DH1+LH1+EB1+DB1+LB1+ED1+DD1+LD1+H1+F1+G1+Q1+P1+Z1",
  "output": {
    "result": "PSUM"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  COPYFILE.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT IN-FILE
               ASSIGN TO 'zcobol\demo\COPYFILE.IN'
               ORGANIZATION IS LINE SEQUENTIAL.
           SELECT OUT-FILE
               ASSIGN TO 'zcobol\demo\COPYFILE.OUT'
               ORGANIZATION IS LINE SEQUENTIAL.
       DATA DIVISION.
       FILE SECTION.
       FD  IN-FILE
           DATA RECORD IS IN-RECORD.
       01  IN-RECORD PIC X(80).
       FD  OUT-FILE
           DATA RECORD IS OUT-RECORD.
       01  OUT-RECORD PIC X(80).
       WORKING-STORAGE SECTION.
       01  WS-LINE PIC X(80).
       01  END-OF-FILE-FLAG PIC X VALUE 'F'.
       77  COUNT COMP-3 PIC S9(4) VALUE 0.
       LINKAGE SECTION.
       PROCEDURE DIVISION.
       MAINLINE.
           DISPLAY 'COPYFILE STARTED'
           PERFORM INITIALIZATION-ROUTINE.
           PERFORM THE-LOOP
                   UNTIL END-OF-FILE-FLAG = 'Y'.
           PERFORM EOJ-ROUTINE.
           DISPLAY 'COPYFILE RECORDS COPIED = ' COUNT.
           IF COUNT NOT = 17 
              DISPLAY 'COPYFILE RECORD COUNT ERROR'
              MOVE 16 TO RETURN-CODE
              STOP RUN
           END-IF 
           DISPLAY 'COPYFILE ENDED OK'
           STOP RUN.
       INITIALIZATION-ROUTINE.
           OPEN INPUT IN-FILE.
           OPEN OUTPUT OUT-FILE.
           READ IN-FILE INTO OUT-RECORD
                AT END MOVE 'Y' TO END-OF-FILE-FLAG.
       THE-LOOP.
           WRITE OUT-RECORD.
           ADD 1 TO COUNT
           READ IN-FILE INTO OUT-RECORD
                AT END MOVE 'Y' TO END-OF-FILE-FLAG.
       EOJ-ROUTINE.
           CLOSE IN-FILE.
           CLOSE OUT-FILE.
[/INST]{
  "id": "BR-001",
  "description": "The count of records copied must be 17.",
  "condition": "COUNT = 17",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  FORMAT-DATE-EXAMPLE.
       AUTHOR.      BILL ROGERS.
      * http://web.sxu.edu/rogers/cobol/datetime.html
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 SYSTEM-WEEKDAY            PIC 9.

       01 SYSTEM-DATE.
          02 SYSTEM-YEAR            PIC 99.
          02 SYSTEM-MONTH           PIC 99.
          02 SYSTEM-DAY             PIC 99.

       01 SYSTEM-TIME.
          02 SYSTEM-HOUR            PIC 99.
          02 SYSTEM-MINUTE          PIC 99.
          02 SYSTEM-SECOND          PIC 99.
          02 SYSTEM-HUNDREDTH       PIC 99.

       01 HEADER-LINE.
          02 HEADER-WEEKDAY         PIC X(3).
          02                        PIC X        VALUE SPACE.
          02 HEADER-MONTH           PIC X(3).
          02                        PIC X        VALUE SPACE.
          02 HEADER-DAY             PIC Z9.
          02                        PIC X        VALUE SPACE.
          02 HEADER-HOUR            PIC Z9.
          02                        PIC X        VALUE ':'.
          02 HEADER-MINUTE          PIC 99.
          02                        PIC X        VALUE SPACE.
          02 HEADER-AM-PM           PIC X(2).

       PROCEDURE DIVISION.
       MAINLINE.
           DISPLAY 'DATETIME STARTED'
           ACCEPT SYSTEM-WEEKDAY FROM DAY-OF-WEEK.
           ACCEPT SYSTEM-DATE FROM DATE.
           ACCEPT SYSTEM-TIME FROM TIME.

           EVALUATE SYSTEM-WEEKDAY
               WHEN  2  MOVE 'Mon' TO HEADER-WEEKDAY
               WHEN  3  MOVE 'Tue' TO HEADER-WEEKDAY
               WHEN  4  MOVE 'Wed' TO HEADER-WEEKDAY
               WHEN  5  MOVE 'Thu' TO HEADER-WEEKDAY
               WHEN  6  MOVE 'Fri' TO HEADER-WEEKDAY
               WHEN  7  MOVE 'Sat' TO HEADER-WEEKDAY
               WHEN  1  MOVE 'Sun' TO HEADER-WEEKDAY
           END-EVALUATE.

           EVALUATE SYSTEM-MONTH
               WHEN  1  MOVE 'Jan' TO HEADER-MONTH
               WHEN  2  MOVE 'Feb' TO HEADER-MONTH
               WHEN  3  MOVE 'Mar' TO HEADER-MONTH
               WHEN  4  MOVE 'Apr' TO HEADER-MONTH
               WHEN  5  MOVE 'May' TO HEADER-MONTH
               WHEN  6  MOVE 'Jun' TO HEADER-MONTH
               WHEN  7  MOVE 'Jul' TO HEADER-MONTH
               WHEN  8  MOVE 'Aug' TO HEADER-MONTH
               WHEN  9  MOVE 'Sep' TO HEADER-MONTH
               WHEN 10  MOVE 'Oct' TO HEADER-MONTH
               WHEN 11  MOVE 'Nov' TO HEADER-MONTH
               WHEN 12  MOVE 'Dec' TO HEADER-MONTH
           END-EVALUATE.

           MOVE SYSTEM-DAY TO HEADER-DAY.

           IF SYSTEM-HOUR IS LESS THAN 12
              MOVE 'AM' TO HEADER-AM-PM
           ELSE
              MOVE 'PM' TO HEADER-AM-PM
              IF SYSTEM-HOUR IS NOT LESS THAN 13
                 SUBTRACT 12 FROM SYSTEM-HOUR
              END-IF
           END-IF.
           MOVE SYSTEM-HOUR TO HEADER-HOUR.

           MOVE SYSTEM-MINUTE TO HEADER-MINUTE.

           DISPLAY HEADER-LINE.
           DISPLAY 'DATATIME ENDED OK'
           STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "The system weekday is a numeric value ranging from 1 to 7, with 1 representing Sunday and 7 representing Saturday.",
  "condition": "SYSTEM-WEEKDAY IN 1..7",
  "output": {
    "1": "Sun",
    "2": "Mon",
    "3": "Tue",
    "4": "Wed",
    "5": "Thu",
    "6": "Fri",
    "7": "Sat"
  }
}
{
  "id": "BR-002",
  "description": "The system month is a numeric value ranging from 1 to 12, with 1 representing January and 12 representing December.",
  "condition": "SYSTEM-MONTH IN 1..12",
  "output": {
    "1": "Jan",
    "2": "Feb",
    "3": "Mar",
    "4": "Apr",
    "5": "May",
    "6": "Jun",
    "7": "Jul",
    "8": "Aug",
    "9": "Sep",
    "10": "Oct",
    "11": "Nov",
    "12": "Dec"
  }
}
{
  "id": "BR-003",
  "description": "The system hour is a numeric value ranging from 0 to 23, with 0 representing midnight and 23 representing 11:00 PM.",
  "condition": "SYSTEM-HOUR IN 0..23",
  "output": {}
}
{
  "id": "BR-004",
  "description": "If the system hour is less than 12, the AM indicator is displayed. Otherwise, the PM indicator is displayed.",
  "condition": "SYSTEM-HOUR < 12",
  "output": {
    "true": "AM",
    "false": "PM"
  }
}
{
  "id": "BR-005",
  "description": "If the system hour is not less than 13, 12 is subtracted from the system hour.",
  "condition": "SYSTEM-HOUR >= 13",
  "output": {}
}[INST]000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID. HELLO.
000300 PROCEDURE DIVISION.
000400     DISPLAY 'Hello World'..
000500     STOP RUN.
[/INST]{
  "id": "BR-001",  "description": "The program displays 'Hello World'..",
  "condition": "true",
  "output": {
    "output": "Hello World.."
  }
}[INST]      * THIS PROGRAM CALCULATES ZPI FOR ABE
      * ZPI FROM 4(1 - 1/3 + 1/5 - 1/7 ETC.)
      *
      * Author: James Francis Cray
      *
       IDENTIFICATION DIVISION.
       PROGRAM-ID. ZPI.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  COUNTER        PIC 9(05)      VALUE 1.
       01  ITERATIONS     PIC 9(05)      VALUE 9999.
       01  TERM           PIC S9999V9999 VALUE +0.
       01  TEMP1          PIC S9999V9999 VALUE +0.
       01  TEMP2          PIC S9999V9999 VALUE +0.
       01  TEMP3          PIC S9999V9999 VALUE +0.
       01  TEMP4          PIC S9999V9999 VALUE +0.
       01  FAC            PIC S9         VALUE 1.
       01  FAC1           PIC S9         VALUE 0.
       01  MYSUM          PIC S9999V9999 VALUE +0.
       01  MYSUM1         PIC S9999V9999 VALUE +0.
       01  THANKS         PIC X(30)      VALUE
           'ABE THANKS FOR WATCHING ZPI '.
       
       PROCEDURE DIVISION.
       BEGIN.
           DISPLAY 'ABE HELLO'.
           PERFORM MYLOOP WITH TEST AFTER
               VARYING COUNTER FROM 1 BY 1
               UNTIL COUNTER GREATER THAN ITERATIONS.
           MULTIPLY MYSUM BY 4.00000 GIVING MYSUM1.
           DISPLAY ' ABE ZPI CALCULATED TO BE:'.
           DISPLAY MYSUM1.
           DISPLAY THANKS.
           STOP RUN.

       MYLOOP.
           MULTIPLY COUNTER BY 2.0 GIVING TEMP1.
           SUBTRACT 1.0 FROM TEMP1 GIVING TEMP2.
           DIVIDE 1.0 BY TEMP2 GIVING TEMP3.
           MULTIPLY TEMP3 BY FAC GIVING TEMP4.
           SUBTRACT FAC FROM 0 GIVING FAC1.
           MOVE FAC1 TO FAC.
           ADD TEMP4 TO MYSUM.[/INST]{
  "id": "BR-001",
  "description": "ZPI calculation uses a loop with a counter that starts at 1 and increases by 1 until it is greater than the number of iterations (9999).",
  "condition": null,
  "output": null
}
{
  "id": "BR-002",
  "description": "In each iteration of the loop, the current value of the counter is multiplied by 2, and then 1 is subtracted from the result. The result of this subtraction is then used to divide 1, and the result of the division is multiplied by the current value of the FAC variable.",
  "condition": null,
  "output": null
}
{
  "id": "BR-003",
  "description": "The result of the multiplication in the previous step is then added to the MYSUM variable.",
  "condition": null,
  "output": null
}
{
  "id": "BR-004",
  "description": "After the loop has finished, the MYSUM variable is multiplied by 4.00000 and the result is displayed as the calculated ZPI value.",
  "condition": null,
  "output": null
}[INST]      ***************************************************************
      * Author.  Don Higgins
      * Date.    06/29/06
      * Remarks. COBOL Powers of 2 from 0 to 126
      ***************************************************************
      * 03/14/09 RPI 1004 UPGRADED TO USE COMP PIC S9(39) QW
      ***************************************************************
       IDENTIFICATION DIVISION.
       PROGRAM-ID. POWERS.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 POWER  PIC S9(3)  COMP-3 VALUE 0.
       01 PNUM   PIC S9(39) COMP   VALUE 1.
       PROCEDURE DIVISION.
           PERFORM UNTIL POWER EQUALS 127
               DISPLAY 'POWER OF 2**' POWER ' = ' PNUM
               ADD PNUM TO PNUM
               ADD 1    TO POWER
           END-PERFORM.
[/INST]{
  "id": "BR-002",
  "description": "The power of 2 starts at 1 and increases by 1 until it reaches 127.",
  "condition": "POWER EQUALS 127",
  "output": {
    "match": "DISPLAY 'POWER OF 2**' POWER ' = ' PNUM"
  }
}[INST]      *****************************************************************
      * z390 - Mainframe assembler emulator and run-time engine
      * Copyright (C) 2021 z390 Assembler LLC
      *
      * This file is part of z390.
      *
      * z390 is free software; you can redistribute it and/or modify
      * it under the terms of the GNU General Public License as 
      * published by the Free Software Foundation; either version 2 of 
      * the License, or (at your option) any later version.
      * z390 is distributed in the hope that it will be useful,
      * but WITHOUT ANY WARRANTY; without even the implied warranty of
      * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      * GNU General Public License for more details.
      *
      * You should have received a copy of the GNU General Public 
      * License along with this program; if not, see 
      * https://www.gnu.org/licenses.
      *****************************************************************
      * Author - Don Higgins                                          *
      *****************************************************************
        IDENTIFICATION DIVISION.
      *
      * TEST BED 1 (COBOL)
      *
      *    TESTBED3 HAS BEEN LEFT AS ASM TO PROVE LINKAGE
      *
      *    TEST RETURN TRANSID AND COMMAREA
      *    BEC1 DISPLAYS 1ST LINE
      *    EACH SUBSEQUENT LINE INDEX COMES FROM IMPORTED COMMAREA
      *
      *    TEST LINK WITH DIFFERENT COMMAREAS
      *
      *    TEST XCTL WITH COMMAREA
      *
        PROGRAM-ID. TESTBEC1.
        ENVIRONMENT DIVISION.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        77  SENDWCC  PIC X.
        77  SENDSBA  PIC X(3).
        77  SENDLINE PIC X(45).
        77  MYCOMM   PIC 9(4)  COMP.
        77  WCC      PIC X     VALUE X'F5'.
        77  MYBEC2   PIC X(8)  VALUE 'TESTBEC2'.
        77  COMM1    PIC X(6)  VALUE 'QUOTE2'.
        77  COMM2    PIC X(6)  VALUE 'QUOTE3'.
        77  COMM3    PIC X(6)  VALUE 'QUOTE6'.

        01  SBAS.
      * SBA,3,2 THRU SBA,11,2
            02  FILLER   PIC X(3)  VALUE X'11C261'.
            02  FILLER   PIC X(3)  VALUE X'11C3F1'.
            02  FILLER   PIC X(3)  VALUE X'11C5C1'.
            02  FILLER   PIC X(3)  VALUE X'11C6D1'.
            02  FILLER   PIC X(3)  VALUE X'11C761'.
            02  FILLER   PIC X(3)  VALUE X'11C8F1'.
            02  FILLER   PIC X(3)  VALUE X'114AC1'.
            02  FILLER   PIC X(3)  VALUE X'114BD1'.
            02  FILLER   PIC X(3)  VALUE X'114C61'.
         01 FILLER REDEFINES SBAS.
            02  SBA      OCCURS 9 TIMES PIC X(3).

        01  LINES.
            02  LINE1    PIC X(45) VALUE 'What a piece of work is man'.
            02  FILLER   PIC X(45) VALUE 'How noble in reason'.
            02  FILLER   PIC X(45) VALUE 'How infinite in faculties'.
            02  FILLER   PIC X(45) VALUE
                      'In form and moving, how express and admirable'.
            02  FILLER   PIC X(45) VALUE 'In action, how like an angel'.
            02  FILLER   PIC X(45) VALUE
                      'In apprehension, how like a god'.
            02  FILLER   PIC X(45) VALUE 'The beauty of the world'.
            02  FILLER   PIC X(45) VALUE 'The paragon of animals'.
            02  FILLER   PIC X(45) VALUE 'END'.
         01 FILLER REDEFINES LINES.
            02  LINE_N   OCCURS 9 TIMES PIC X(45).

        LINKAGE SECTION.
        01  DFHCOMMAREA.
            02  INCOMM   PIC 9(4)  COMP.

        PROCEDURE DIVISION USING DFHEIBLK DFHCOMMAREA.
      * XC    MYCOMM,MYCOMM      INITIALISE COMMAREA
            MOVE 1 TO MYCOMM.
      *  MVC   SENDWCC,WCC        MOVE WCC
            MOVE WCC TO SENDWCC.
      *  OC    TCTTECA,TCTTECA    ANY COMMAREA ?
      *  BNZ   NOT1ST             EXIT IF NOT FIRST
            IF EIBCALEN = 0 THEN
      * FIRST LINE
      *  MVC   SENDSBA,SBA1       1ST SBA
               MOVE SBA (1) TO SENDSBA
      *  MVC   SENDLINE,LINE1     1ST LINE
               MOVE LINE_N (1) TO SENDLINE
               EXEC CICS SEND FROM(SENDWCC) LENGTH(49) END-EXEC
               EXEC CICS RETURN TRANSID('BEC1')
                                COMMAREA(MYCOMM) END-EXEC
            ELSE
      * NOT FIRST LINE
      *  L     R5,TCTTECA         ADDRESS RECEIVED COMMAREA
      *  LH    R6,0(R5)           R6=INDEX
      *  AHI   R6,1               INCREMENT
      *  STH   R6,0(R5)           SAVE
               ADD 1 TO INCOMM
      *  MS    R6,=F'3'           INDEX TO SBA
      *  LA    R7,SBA1(R6)        R7=ADDRESS OF NEXT SBA
      *  MVC   SENDSBA,0(R7)      MOVE NEXT SBA TO OUTPUT
               MOVE SBA (INCOMM) TO SENDSBA
      *  LH    R6,0(R5)           R6=INDEX
      *  MS    R6,=F'45'          INDEX TO NEXT LINE
      *  LA    R7,LINE1(R6)       R7=ADDRESS OF NEXT LINE
      *  MVC   SENDLINE,0(R7)     MOVE NEXT LINE TO OUTPUT
               MOVE LINE_N (INCOMM) TO SENDLINE
               EXEC CICS SEND FROM(SENDWCC) LENGTH(49) END-EXEC
      *  CLC   0(2,R5),=H'8'      DISPLAYED LAST ?
      *  BE    NEXT1              EXIT IF WE HAVE
               IF INCOMM NOT = 9 THEN
                  EXEC CICS RETURN TRANSID('BEC1') COMMAREA(INCOMM)
                                   LENGTH(2) END-EXEC
               ELSE
      * TEST LINK
                  EXEC CICS LINK PROGRAM(MYBEC2) END-EXEC
      * TEST LINK WITH COMMAREA 1
                  EXEC CICS LINK PROGRAM('TESTBEC2') COMMAREA(COMM1)
                                 END-EXEC
      * TEST LINK WITH COMMAREA 2
                  EXEC CICS LINK PROGRAM('TESTBEC2') COMMAREA(COMM2)
                                 LENGTH(6) END-EXEC
      * TEST XCTL WITH COMMAREA 3
                  EXEC CICS XCTL PROGRAM('TESTBED3') COMMAREA(COMM3)
                                 END-EXEC.
[/INST]{
  "id": "BR-001",
  "description": "First line has special SBA and line number 1. All subsequent lines have INCOMM + 1 SBA and line number.",
  "condition": "EIBCALEN > 0",
  "output": {
    "firstLine": {
      "SBA": "SBA1",
      "line": "LINE1"
    },
    "otherLines": {
      "SBA": {
        "value": "SBA (INCOMM)",
        "type": "array"
      },
      "line": {
        "value": "LINE_N (INCOMM)",
        "type": "array"
      }
    }
  }
}[INST]      *****************************************************************
      * z390 - Mainframe assembler emulator and run-time engine
      * Copyright (C) 2021 z390 Assembler LLC
      *
      * This file is part of z390.
      *
      * z390 is free software; you can redistribute it and/or modify
      * it under the terms of the GNU General Public License as 
      * published by the Free Software Foundation; either version 2 of 
      * the License, or (at your option) any later version.
      * z390 is distributed in the hope that it will be useful,
      * but WITHOUT ANY WARRANTY; without even the implied warranty of
      * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      * GNU General Public License for more details.
      *
      * You should have received a copy of the GNU General Public 
      * License along with this program; if not, see 
      * https://www.gnu.org/licenses.
      *****************************************************************
      * Author - Don Higgins                                          *
      *****************************************************************
        IDENTIFICATION DIVISION.
      *
      * TEST BED 2 (COBOL)
      *
      *    TESTBED3 HAS BEEN LEFT AS ASM TO PROVE LINKAGE
      *
      *    LINKED-TO FROM TESTBEC1
      *    DISPLAYS ANOTHER QUOTE
      *
      *    IF A COMMAREA IS PASSED, ANOTHER QUOTE IS DISPLAYED DEPENDING
      *    ON COMMAREA PASSED
      *
      *    XCTL TO TESTBED3 FOR FINAL QUOTE
      *    RETURN TO TESTBEC1
      *

        PROGRAM-ID. TESTBEC2.
        ENVIRONMENT DIVISION.
        DATA DIVISION.

        WORKING-STORAGE SECTION.
        01 SENDLNS1.
           02 FILLER PIC X      VALUE X'C3'.
           02 FILLER PIC X(3)   VALUE X'114DF1'.
           02 FILLER PIC X(55)  VALUE 'How sour sweet music is'.
           02 FILLER PIC X(3)   VALUE X'114FC1'.
           02 FILLER PIC X(55)  VALUE
                         'When time is broke and no proportion kept'.
           02 FILLER PIC X(3)   VALUE X'1150D1'.
           02 FILLER PIC X(55)  VALUE
                         'So is it in the music of men''s lives'.
           02 FILLER PIC X(3)   VALUE X'11D161'.
           02 FILLER PIC X(55)  VALUE 'END'.
        01 SENDLNS2.
           02 FILLER PIC X      VALUE X'C3'.
           02 FILLER PIC X(3)   VALUE X'11D2F1'.
           02 FILLER PIC X(55)  VALUE
              'This blessed plot, this earth, this realm, this England'.
           02 FILLER PIC X(3)   VALUE X'11D4C1'.
           02 FILLER PIC X(55)  VALUE 'END'.
        01 SENDLNS3.
           02 FILLER PIC X      VALUE X'C3'.
           02 FILLER PIC X(3)   VALUE X'11D5D1'.
           02 FILLER PIC X(55)  VALUE 'How beauteous mankind is!'.
           02 FILLER PIC X(3)   VALUE X'11D661'.
           02 FILLER PIC X(55)  VALUE
              'O brave new world, that hath such people in''t!'.
           02 FILLER PIC X(3)   VALUE X'11D7F1'.
           02 FILLER PIC X(55)  VALUE 'END'.

        LINKAGE SECTION.
        01  DFHCOMMAREA.
            02  INCOMM   PIC X(6).

        PROCEDURE DIVISION USING DFHEIBLK DFHCOMMAREA.
      *  MVC   SENDLNS1(LINE1END),LINE1 MESSAGE
            EXEC CICS SEND FROM(SENDLNS1) LENGTH(233) END-EXEC.

      *  ICM   R4,15,DFHEICAP     ANY COMMAREA ?
      *  BNZ   TRYCOMM1           EXIT IF THERE IS
            IF EIBCALEN = 0 THEN EXEC CICS RETURN END-EXEC
            ELSE
      *  TRYCOMM1 EQU   *
      *  CLC   0(6,R4),=C'QUOTE2' IS IT QUOTE 2 ?
      *  BNE   TRYCOMM2           EXIT IF NOT
            IF INCOMM = 'QUOTE2' THEN
      *  MVC   SENDLNS2(LINE2END),LINE2 MESSAGE
               EXEC CICS SEND FROM(SENDLNS2) LENGTH(117) END-EXEC
               EXEC CICS RETURN END-EXEC
            ELSE
            IF INCOMM = 'QUOTE3' THEN
      *  TRYCOMM2 EQU   *
      *  CLC   0(6,R4),=C'QUOTE3' IS IT QUOTE 3 ?
      *  BNE   ABORT              EXIT IF NOT
      *  MVC   SENDLNS3(LINE3END),LINE3 MESSAGE
               EXEC CICS SEND FROM(SENDLNS3) LENGTH(174) END-EXEC
      *
      * XCTL WITH NO COMMAREA TO TESTBED3 FOR THE NEXT QUOTE
      * CONTROL WILL RETURN TO TESTBEC1
      *
               EXEC CICS XCTL PROGRAM('TESTBED3') END-EXEC
            ELSE
      * ABORT    ABEND 999,DUMP
               EXEC CICS ABEND ABCODE(' 999') END-EXEC.
[/INST]{
  "id": "BR-001",  "description": "If there is no commarea, then display quote 1.",
  "condition": "EIBCALEN = 0",
  "output": {
    "display_quote1": "SEND FROM(SENDLNS1) LENGTH(233) END-EXEC"
  }
},
{
  "id": "BR-002",  "description": "If the commarea is 'QUOTE2', then display quote 2.",
  "condition": "INCOMM = 'QUOTE2'",
  "output": {
    "display_quote2": "SEND FROM(SENDLNS2) LENGTH(117) END-EXEC"
  }
},
{
  "id": "BR-003",  "description": "If the commarea is 'QUOTE3', then display quote 3.",
  "condition": "INCOMM = 'QUOTE3'",
  "output": {
    "display_quote3": "SEND FROM(SENDLNS3) LENGTH(174) END-EXEC"
  }
},
{
  "id": "BR-004",  "description": "If the commarea is not 'QUOTE2' or 'QUOTE3', then abend with code '999'.",
  "condition": "INCOMM <> 'QUOTE2' and INCOMM <> 'QUOTE3'",
  "output": {
    "abend": "EXEC CICS ABEND ABCODE(' 999') END-EXEC"
  }
}[INST]      *****************************************************************
      * z390 - Mainframe assembler emulator and run-time engine
      * Copyright (C) 2021 z390 Assembler LLC
      *
      * This file is part of z390.
      *
      * z390 is free software; you can redistribute it and/or modify
      * it under the terms of the GNU General Public License as 
      * published by the Free Software Foundation; either version 2 of 
      * the License, or (at your option) any later version.
      * z390 is distributed in the hope that it will be useful,
      * but WITHOUT ANY WARRANTY; without even the implied warranty of
      * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      * GNU General Public License for more details.
      *
      * You should have received a copy of the GNU General Public 
      * License along with this program; if not, see 
      * https://www.gnu.org/licenses.
      *****************************************************************
      * Author - Don Higgins                                          *
      *****************************************************************
        IDENTIFICATION DIVISION.
      *
      * TEST BED 4 IN COBOL
      *
      * TEST HANDLE AID AND DUMP
      *
        PROGRAM-ID. TESTBEC4.
        ENVIRONMENT DIVISION.

        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01  WORDSEND.
          02  FILLER   PIC X    VALUE X'C3'.
          02  WORDMSG.
              03  FILLER   PIC X(10).
              03  WORDLEN  PIC 9(4) COMP.
        77  KEYINDS  PIC X(18).
        77  KEYINTAB REDEFINES KEYINDS OCCURS 18 TIMES PIC X.
        77  KEYIDX   PIC 9(4) COMP.
        77  RECAREA  PIC X(80).
        77  RECLEN   PIC 9(4) COMP.
        77  DUMP1    PIC X(6)   VALUE 'ABCDEF'.
        77  DUMP2    PIC X(4)   VALUE 'STUV'.
        77  DUMP3    PIC X(11)  VALUE 'PQRSTUVWXYZ'.
        77  DUMP4    PIC X(26)  VALUE 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.
        77  DUMP5    PIC X(22)  VALUE 'ALPHA BETA GAMMA DELTA'.
        01  KEYTABLE PIC X(19)
                     VALUE X'F1F2F3F4F5F6F7F8F97A7B7CC1C2C3C4C5C6FF'.
        01  KEYTAB REDEFINES KEYTABLE.
            02  KEYS  OCCURS 19 TIMES PIC X.
        01  HEAD.
            02  FILLER  PIC X(6)  VALUE X'27F5C311C1D1'.
            02  FILLER  PIC X(24) VALUE 'TESTBEC4 TEST HANDLE AID'.
            02  FILLER  PIC X(3)  VALUE X'11C261'.
            02  FILLER  PIC X(31)
                        VALUE 'PRESS PF KEYS 1-18 IN ANY ORDER'.
            02  FILLER  PIC X(3)  VALUE X'11C3F1'.
            02  FILLER  PIC X(25) VALUE 'CLEAR WILL END TASK EARLY'.
        77  HEADL    PIC 9(4) COMP.
        01  TAIL.
            02  FILLER  PIC X(4)  VALUE X'C3114C61'.
            02  FILLER  PIC X(34)
                        VALUE 'TESTBEC4 ENDED OK, NOW PRESS CLEAR'.
        77  TAILL    PIC 9(4) COMP.
        01  WORDS.
            02  FILLER  PIC X(3)  VALUE X'11C6E7'.
            02  FILLER  PIC X(7)  VALUE 'that'.
            02  FILLER  PIC 9(4)  VALUE 8  COMP.
            02  FILLER  PIC X(3)  VALUE X'11C7F4'.
            02  FILLER  PIC X(7)  VALUE 'the'.
            02  FILLER  PIC 9(4)  VALUE 7  COMP.
            02  FILLER  PIC X(3)  VALUE X'11C6D8'.
            02  FILLER  PIC X(7)  VALUE 'go'.
            02  FILLER  PIC 9(4)  VALUE 6  COMP.
            02  FILLER  PIC X(3)  VALUE X'11C7E7'.
            02  FILLER  PIC X(7)  VALUE 'rage'.
            02  FILLER  PIC 9(4)  VALUE 8  COMP.
            02  FILLER  PIC X(3)  VALUE X'114AC7'.
            02  FILLER  PIC X(7)  VALUE 'Thomas'.
            02  FILLER  PIC 9(4)  VALUE 10 COMP.
            02  FILLER  PIC X(3)  VALUE X'11C77E'.
            02  FILLER  PIC X(7)  VALUE 'of'.
            02  FILLER  PIC 9(4)  VALUE 6  COMP.
            02  FILLER  PIC X(3)  VALUE X'11C6D1'.
            02  FILLER  PIC X(7)  VALUE 'Do'.
            02  FILLER  PIC 9(4)  VALUE 6  COMP.
            02  FILLER  PIC X(3)  VALUE X'11C6F1'.
            02  FILLER  PIC X(7)  VALUE 'night,'.
            02  FILLER  PIC 9(4)  VALUE 10 COMP.
            02  FILLER  PIC X(3)  VALUE X'11C76C'.
            02  FILLER  PIC X(7)  VALUE 'against'.
            02  FILLER  PIC 9(4)  VALUE 11 COMP.
            02  FILLER  PIC X(3)  VALUE X'11C6E2'.
            02  FILLER  PIC X(7)  VALUE 'into'.
            02  FILLER  PIC 9(4)  VALUE 8  COMP.
            02  FILLER  PIC X(3)  VALUE X'11C8C5'.
            02  FILLER  PIC X(7)  VALUE 'light.'.
            02  FILLER  PIC 9(4)  VALUE 10 COMP.
            02  FILLER  PIC X(3)  VALUE X'11C761'.
            02  FILLER  PIC X(7)  VALUE 'Rage,'.
            02  FILLER  PIC 9(4)  VALUE 9  COMP.
            02  FILLER  PIC X(3)  VALUE X'114AC1'.
            02  FILLER  PIC X(7)  VALUE 'Dylan'.
            02  FILLER  PIC 9(4)  VALUE 9  COMP.
            02  FILLER  PIC X(3)  VALUE X'11C66C'.
            02  FILLER  PIC X(7)  VALUE 'good'.
            02  FILLER  PIC 9(4)  VALUE 8  COMP.
            02  FILLER  PIC X(3)  VALUE X'11C8C1'.
            02  FILLER  PIC X(7)  VALUE 'the'.
            02  FILLER  PIC 9(4)  VALUE 7  COMP.
            02  FILLER  PIC X(3)  VALUE X'11C65B'.
            02  FILLER  PIC X(7)  VALUE 'gentle'.
            02  FILLER  PIC 9(4)  VALUE 10 COMP.
            02  FILLER  PIC X(3)  VALUE X'11C7F8'.
            02  FILLER  PIC X(7)  VALUE 'dying'.
            02  FILLER  PIC 9(4)  VALUE 9  COMP.
            02  FILLER  PIC X(3)  VALUE X'11C6D4'.
            02  FILLER  PIC X(7)  VALUE 'not'.
            02  FILLER  PIC 9(4)  VALUE 7  COMP.
        01  FILLER REDEFINES WORDS.
            02  WORDENT OCCURS 18 TIMES PIC X(12).
        01  SEGS.
            02  ADUMP1  PIC 9(9) COMP USAGE IS POINTER.
            02  ADUMP2  PIC 9(9) COMP USAGE IS POINTER.
            02  ADUMP3  PIC 9(9) COMP USAGE IS POINTER.
            02  ADUMP4  PIC 9(9) COMP USAGE IS POINTER.
            02  ADUMP5  PIC 9(9) COMP USAGE IS POINTER.
        01  LENS.
            02  LDUMP1  PIC 9(9) COMP.
            02  LDUMP2  PIC 9(9) COMP.
            02  LDUMP3  PIC 9(9) COMP.
            02  LDUMP4  PIC 9(9) COMP.
            02  LDUMP5  PIC 9(9) COMP.
        COPY DFHAID.

        PROCEDURE DIVISION USING DFHEIBLK DFHCOMMAREA.

            MOVE LENGTH OF HEAD TO HEADL.
            MOVE LENGTH OF TAIL TO TAILL.
      *  MVC   KEYINDS,=18X'FF'   MARK ALL KEYS UNPRESSED
            MOVE HIGH-VALUES TO KEYINDS.
      *  MVC   WORDWCC,WCC        SET WORD WCC
            EXEC CICS SEND FROM(HEAD) LENGTH(HEADL) END-EXEC.
      *
      * HANDLE PF KEYS 1-18
      *
            EXEC CICS HANDLE AID
                 ANYKEY(PROCKEY)
                 CLEAR PA1 PA2 PA3
                 PF19 PF20 PF21 PF22 PF23 PF24
                 END-EXEC.
      *
        KEYPRESS.
            MOVE 1 TO KEYIDX.
            EXEC CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN) END-EXEC.
      *  CLI   EIBAID,CLEAR       CLEAR PRESSED ?
      *  BE    RETURN             END TASK IF IT IS
      *  B     KEYPRESS           LOOP
            IF EIBAID = DFHCLEAR THEN GO TO ALLDONE
            ELSE GO TO KEYPRESS.
      *
      *  LA    R3,KEYTAB          ADDRESS KEY TABLE
      *  SR    R4,R4              CLEAR R4
      *  KEYLOOP  EQU   *
      *  CLC   0(1,R3),EIBAID     FOUND AID ?
      *  BE    GETWORD            EXIT TO PROCESS IT
      *  AHI   R4,1               BUMP INDEX
      *  AHI   R3,1               BUMP TABLE POINTER
      *  CLI   0(R3),X'FF'        STOPPER ?
      *  BE    ABEND              EXIT IF BAD AID
      *  B     KEYLOOP

        PROCKEY.
            IF EIBAID = KEYS (KEYIDX) THEN GO TO GETWORD.
            ADD 1 TO KEYIDX
            IF KEYS (KEYIDX) = X'FF' THEN GO TO ABEND.
            GO TO PROCKEY.

      * GETWORD  EQU   *
        GETWORD.
      * GOT A VALID AID
      *  LA    R5,KEYINDS(R4)     INDEX TO KEY INDICATORS
      *  MVI   0(R5),X'00'        RESET INDICATOR
            MOVE LOW-VALUE TO KEYINTAB (KEYIDX).
      *  MS    R4,=F'12'          INDEX TO WORD LIST
      *  LA    R4,WORDS(R4)       + WORD BASE
      *  MVC   WORDMSG(12),0(R4)  MOVE WORD
            MOVE WORDENT (KEYIDX) TO WORDMSG.
            EXEC CICS SEND FROM(WORDSEND) LENGTH(WORDLEN) END-EXEC.
      *  OC    KEYINDS,KEYINDS    ALL DONE YET ?
      *  BNZ   KEYPRESS           LOOP
            IF KEYINDS NOT = LOW-VALUES THEN GO TO KEYPRESS.
            EXEC CICS SEND FROM(TAIL) LENGTH(TAILL) END-EXEC.

        ALLDONE.
      * TEST DUMP
            EXEC CICS DUMP TRANSACTION DUMPCODE('MEL1') COMPLETE
                 END-EXEC.
            MOVE ADDRESS OF DUMP1 TO ADUMP1.
            MOVE ADDRESS OF DUMP2 TO ADUMP2.
            MOVE ADDRESS OF DUMP3 TO ADUMP3.
            MOVE ADDRESS OF DUMP4 TO ADUMP4.
            MOVE ADDRESS OF DUMP5 TO ADUMP5.
            MOVE LENGTH OF DUMP1 TO LDUMP1.
            MOVE LENGTH OF DUMP2 TO LDUMP2.
            MOVE LENGTH OF DUMP3 TO LDUMP3.
            MOVE LENGTH OF DUMP4 TO LDUMP4.
            MOVE LENGTH OF DUMP5 TO LDUMP5.
            EXEC CICS DUMP TRANSACTION DUMPCODE('MEL2')
                 FROM(KEYTAB) LENGTH(19)
                 SEGMENTLIST(SEGS) LENGTHLIST(LENS) NUMSEGMENTS(5)
                 END-EXEC.
            EXEC CICS RETURN END-EXEC.

        ABEND.
            EXEC CICS ABEND ABCODE('BEC4') END-EXEC.
[/INST]{
  "id": "BR-001",
  "description": "If the Clear key is pressed, then the COBOL program will stop executing and return to the operating system.",
  "condition": "EIBAID = DFHCLEAR",
  "output": {
    "true": "End task"
  }
},
{
  "id": "BR-002",
  "description": "If any PF key between 1 and 18 is pressed, then the COBOL program will process the corresponding word from the WORDS table and display it on the screen.",
  "condition": "EIBAID = KEYS (KEYIDX)",
  "output": {
    "true": "Process word from WORDS table and display it"
  }
},
{
  "id": "BR-003",
  "description": "If all 18 PF keys have been pressed, then the COBOL program will display the TAIL message on the screen.",
  "condition": "KEYINDS NOT = LOW-VALUES",
  "output": {
    "true": "Display TAIL message"
  }
}[INST]      *****************************************************************

      * z390 - Mainframe assembler emulator and run-time engine
      * Copyright (C) 2021 z390 Assembler LLC
      *
      * This file is part of z390.
      *
      * z390 is free software; you can redistribute it and/or modify
      * it under the terms of the GNU General Public License as 
      * published by the Free Software Foundation; either version 2 of 
      * the License, or (at your option) any later version.
      * z390 is distributed in the hope that it will be useful,
      * but WITHOUT ANY WARRANTY; without even the implied warranty of
      * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      * GNU General Public License for more details.
      *
      * You should have received a copy of the GNU General Public 
      * License along with this program; if not, see 
      * https://www.gnu.org/licenses.
      *****************************************************************
      * Author - Don Higgins                                          *
      *****************************************************************
        IDENTIFICATION DIVISION.
      *
      * TEST HANDLE ABEND
      *
      * TEST 1: HANDLE ASRA ABEND BY LABEL
      *         PRETEND NOTHING HAPPENED
      *
      * TEST 2: RAISE PGMIDERR
      *         HANDLE AEI0 ABEND BY LABEL
      *         PRETEND NOTHING HAPPENED
      *
      * TEST 3: HANDLE ASRA ABEND BY PROGRAM TESTBEC7
      *         PRETEND NOTHING HAPPENED
      *
      * THE FOLLOWING TESTS ARE DRIVEN BY TRANSID BEC5
      *
      * TEST 4: SET HANDLE ABEND LABEL HERE
      *         LINK TO TESTBEC7 AND ABEND ASRA
      *         RETURN IS AFTER OUR LINK
      *
      * TEST 5: LINK TO TESTBEC7 AND HANDLE ABEND AEI0 THERE BY PROGRAM
      *         TESTBEC8
      *         RETURN IS AFTER OUR LINK
      *
      * TEST 6: EXEC CICS ABEND WITH DUMP HANDLED HERE BY LABEL
      *         PRETEND NOTHING HAPPENED
      *
        PROGRAM-ID. TESTBEC6.
        ENVIRONMENT DIVISION.

        DATA DIVISION.
        WORKING-STORAGE SECTION.
        77  RECAREA  PIC X(80).
        77  RECLEN   PIC 9(4) COMP.
        01  TEST1.
            02  FILLER  PIC X(4)  VALUE X'C311C1D1'.
            02  FILLER  PIC X(59)
                VALUE 'TESTBEC6 TEST 1:PRESS AID KEY TO HANDLE ASRA ABEN
      -               'D BY LABEL'.
        77  TEST1L   PIC 9(4) COMP.
        01  TEST1R.
            02  FILLER  PIC X(4)  VALUE X'C311C261'.
            02  FILLER  PIC X(33)
                        VALUE 'TESTBEC6 ASRA HANDLED OK BY LABEL'.
            02  FILLER  PIC X(3)  VALUE X'11C3F1'.
            02  FILLER  PIC X(59)
                VALUE 'TESTBEC6 TEST 2:PRESS AID KEY TO HANDLE AEI0 ABEN
      -               'D BY LABEL'.
        77  TEST1RL  PIC 9(4) COMP.
        01  TEST2R.
            02  FILLER  PIC X(4)  VALUE X'C311C5C1'.
            02  FILLER  PIC X(33)
                        VALUE 'TESTBEC6 AEI0 HANDLED OK BY LABEL'.
            02  FILLER  PIC X(3)  VALUE X'11C6D1'.
            02  FILLER  PIC X(61)
                VALUE 'TESTBEC6 TEST 3:PRESS AID KEY TO HANDLE ASRA ABEN
      -               'D BY PROGRAM'.
        77  TEST2RL  PIC 9(4) COMP.
        01  TEST4.
            02  FILLER  PIC X(4)  VALUE X'C311C1D1'.
            02  FILLER  PIC X(77)
                VALUE 'TESTBEC6 TEST 4:PRESS AID KEY TO HANDLE ASRA ABEN
      -               'D IN LINKED PROGRAM BY LABEL'.
        77  TEST4L   PIC 9(4) COMP.
        01  TEST4R.
            02  FILLER  PIC X(4)  VALUE X'C311C3F1'.
            02  FILLER  PIC X(45)
                VALUE 'TESTBEC6 ASRA IN TESTBEC7 HANDLED OK BY LABEL'.
        77  TEST4RL  PIC 9(4) COMP.
        01  TEST4K.
            02  FILLER  PIC X(4)  VALUE X'C311C5C1'.
            02  FILLER  PIC X(43)
                VALUE 'TESTBEC6 HANDLE ABEND RETURNED SUCCESSFULLY'.
            02  FILLER  PIC X(3)  VALUE X'11C6D1'.
            02  FILLER  PIC X(79)
                VALUE 'TESTBEC6 TEST 5:PRESS AID KEY TO HANDLE AEI0 ABEN
      -               'D IN LINKED PROGRAM BY PROGRAM'.
        77  TEST4KL  PIC 9(4) COMP.
        01  TEST5K.
            02  FILLER  PIC X(4)  VALUE X'C3114AC1'.
            02  FILLER  PIC X(43)
                VALUE 'TESTBEC6 HANDLE ABEND RETURNED SUCCESSFULLY'.
            02  FILLER  PIC X(3)  VALUE X'114BD1'.
            02  FILLER  PIC X(55)
                VALUE 'TESTBEC6 TEST6:PRESS AID KEY TO ABEND, HANDLED BY
      -               ' LABEL'.
        77  TEST5KL  PIC 9(4) COMP.
        01  TEST6R.
            02  FILLER  PIC X(4)  VALUE X'C3114C61'.
            02  FILLER  PIC X(39)
                VALUE 'TESTBEC6 ABEND ZZZZ HANDLED OK BY LABEL'.
            02  FILLER  PIC X(3)  VALUE X'114FC1'.
            02  FILLER  PIC X(30)
                VALUE 'BEC5 ENDED OK, NOW PRESS CLEAR'.
        77  TEST6RL  PIC 9(4) COMP.
        77  ACOMM    PIC X(4) VALUE 'AEI0'.
        77  BADFLD1  PIC 9(4) COMP VALUE 0.
        77  BADFLD2  PIC S9(3) REDEFINES BADFLD1 COMP-3.

        PROCEDURE DIVISION USING DFHEIBLK DFHCOMMAREA.

            MOVE LENGTH OF TEST1   TO TEST1L.
            MOVE LENGTH OF TEST1R  TO TEST1RL.
            MOVE LENGTH OF TEST2R  TO TEST2RL.
            MOVE LENGTH OF TEST4   TO TEST4L.
            MOVE LENGTH OF TEST4R  TO TEST4RL.
            MOVE LENGTH OF TEST4K  TO TEST4KL.
            MOVE LENGTH OF TEST5K  TO TEST5KL.
            MOVE LENGTH OF TEST6R  TO TEST6RL.

      *  CLC   EIBTRNID,=C'BEC5'  SECOND TEST TRANSID ?
      *  BE    BEC5               EXIT IF IT IS
            IF EIBTRNID = 'BEC5' THEN GO TO BEC5.
            EXEC CICS SEND FROM(TEST1) LENGTH(TEST1L) END-EXEC.
      * CREATE AND MODIFY HANDLE ABEND BLOCK
            EXEC CICS HANDLE ABEND LABEL(BEC6ASRA) END-EXEC.
            EXEC CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN) END-EXEC.
      * CAUSE ASRA
      * THIS IS 'REPLACED' BY SEND AND B AB2
      *  DC    H'0'
            ADD 1 TO BADFLD2.

      * AB2      EQU   *
        AB2.
      * ASRA HANDLED OK
      * MODIFY HANDLE ABEND BLOCK
            EXEC CICS HANDLE ABEND LABEL(BEC6AEI0) END-EXEC.
            EXEC CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN) END-EXEC.

      * CAUSE AEI0
      * THIS IS 'REPLACED' BY SEND AND B AB3
            EXEC CICS LOAD PROGRAM('BADPROG') END-EXEC.

      * AB3      EQU   *
        AB3.
      * AEI0 HANDLED OK
      * MODIFY HANDLE ABEND BLOCK
            EXEC CICS HANDLE ABEND PROGRAM('TESTBEC7') END-EXEC.
            EXEC CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN) END-EXEC.

      * CAUSE ASRA
      * THIS ACTS AS THOUGH WE HAD AN XCTL TO TESTBEC7 HERE
      * THE RETURN IN TESTBEC7 ENDS THE TASK NORMALLY
      *  DC    H'0'
            MOVE 0 TO BADFLD1.
            ADD 1 TO BADFLD2.

      * BEC6ASRA EQU   *
        BEC6ASRA.
            EXEC CICS SEND FROM(TEST1R) LENGTH(TEST1RL) END-EXEC.
      * B     AB2                CONTINUE TESTS
            GO TO AB2.

      * BEC6AEI0 EQU   *
        BEC6AEI0.
            EXEC CICS SEND FROM(TEST2R) LENGTH(TEST2RL) END-EXEC.
      * B     AB3                CONTINUE TESTS
            GO TO AB3.
      *
      * BEC5 TESTS
      *
      * BEC5     EQU   *
        BEC5.
            EXEC CICS SEND FROM(TEST4) LENGTH(TEST4L) END-EXEC.
            EXEC CICS HANDLE ABEND LABEL(BEC7ASRA) END-EXEC.
            EXEC CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN) END-EXEC.
      * TESTBEC7 WILL ABEND ASRA
            EXEC CICS LINK PROGRAM('TESTBEC7') END-EXEC.
      *
        BEC7ASOK.
      * RETURN HERE AFTER HANDLING ASRA ABEND
            EXEC CICS SEND FROM(TEST4K) LENGTH(TEST4KL) END-EXEC.
            EXEC CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN) END-EXEC.
      * TESTBEC7 WILL ABEND AEI0
            EXEC CICS LINK PROGRAM('TESTBEC7') COMMAREA(ACOMM)
                      END-EXEC.

      * RETURN HERE AFTER HANDLING AEI0 ABEND
            EXEC CICS SEND FROM(TEST5K) LENGTH(TEST5KL) END-EXEC.
            EXEC CICS HANDLE ABEND LABEL(BEC6ZZZZ) END-EXEC.
            EXEC CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN) END-EXEC.
      * TAKE THE DUMP, IGNORE THE ABEND
            EXEC CICS ABEND ABCODE('ZZZZ') END-EXEC.
      * AB4      EQU   *
        AB4.
            EXEC CICS RETURN END-EXEC.

      * BEC7ASRA EQU   *
        BEC7ASRA.
            EXEC CICS SEND FROM(TEST4R) LENGTH(TEST4RL) END-EXEC.
            GO TO BEC7ASOK.

      * BEC6ZZZZ EQU   *
        BEC6ZZZZ.
            EXEC CICS SEND FROM(TEST6R) LENGTH(TEST6RL) END-EXEC.
      *  B     AB4                EXIT
            GO TO AB4.
[/INST]{
  "id": "BR-001",
  "description": "If the transaction ID is BEC5, then the program will execute the BEC5 tests.",
  "condition": "EIBTRNID = 'BEC5'",
  "output": {
    "true": "Execute BEC5 tests"
  }
},
{
  "id": "BR-002",
  "description": "If the EIBTRNID is not BEC5, then the program will execute the following steps:",
  "condition": "EIBTRNID != 'BEC5'",
  "output": {
    "false": "Do not execute BEC5 tests"
  }
},
{
  "id": "BR-003",
  "description": "Execute CICS SEND FROM(TEST1) LENGTH(TEST1L).",
  "condition": null,
  "output": {
    "true": "CICS SEND FROM(TEST1) LENGTH(TEST1L)"
  }
},
{
  "id": "BR-004",
  "description": "Create and modify a HANDLE ABEND block with a label of BEC6ASRA.",
  "condition": null,
  "output": {
    "true": "Create and modify a HANDLE ABEND block with a label of BEC6ASRA"
  }
},
{
  "id": "BR-005",
  "description": "Execute CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN).",
  "condition": null,
  "output": {
    "true": "Execute CICS RECEIVE INTO(RECAREA) LENGTH(RECLEN)"
  }
},
{
  "id": "BR-006",
  "description": "Add 1 to BADFLD2.",
  "condition": null,
  "output": {
    "true": "Add 1 to BADFLD2"
  }
},
{
  "id": "BR-007",
  "description": "Modify the HANDLE ABEND block with a label of BEC6AEI0.",
  "condition": null,
  "output": {
    "true": "Modify the HANDLE ABEND block with a label of BEC6AEI0"
  }
},
{
  "id": "BR-008",
  "description": "Execute CICS LOAD PROGRAM('BADPROG').",
  "condition": null,
  "output": {
    "true": "Execute CICS LOAD PROGRAM('BADPROG')"
  }
},
{
  "id": "BR-009",
  "description": "Modify the HANDLE ABEND block with a program of TESTBEC7.",
  "condition": null,
  "output": {
    "true": "Modify the HANDLE ABEND block with a program of TESTBEC7"
  }
},
{
  "id": "BR-010",
  "description": "Set BADFLD1 to 0.",
  "condition": null,
  "output": {
    "true": "Set BADFLD1 to 0"
  }
},
{
  "id": "BR-011",
  "description": "Send from TEST1R with a length of TEST1RL.",
  "condition": null,
  "output": {
    "true": "Send from TEST1R with a length of TEST1RL"
  }
},
{
  "id": "BR-012",
  "description": "Send from TEST2R with a length of TEST2RL.",
  "condition": null,
  "output": {
    "true": "Send from TEST2R with a length of TEST2RL"
  }
},
{
  "id": "BR-013",
  "description": "Send from TEST4 with a length of TEST4L.",
  "condition": null,
  "output": {
    "true": "Send from TEST4 with a length of TEST4L"
  }
},
{
  "id": "BR-014",
  "description": "Handle abend with a label of BEC7ASRA.",
  "condition": null,
  "output": {
    "true": "Handle abend with a label of BEC7ASRA"
  }
},
{
  "id": "BR-015",
  "description": "Send from TEST4K with a length of TEST4KL.",
  "condition": null,
  "output": {
    "true": "Send from TEST4K with a length of TEST4KL"
  }
},
{
  "id": "BR-016",
  "description": "Link to TESTBEC7 with a commarea of ACOMM.",
  "condition": null,
  "output": {
    "true": "Link to TESTBEC7 with a commarea of ACOMM"
  }
},
{
  "id": "BR-017",
  "description": "Send from TEST5K with a length of TEST5KL.",
  "condition": null,
  "output": {
    "true": "Send from TEST5K with a length of TEST5KL"
  }
},
{
  "id": "BR-018",
  "description": "Handle abend with a label of BEC6ZZZZ.",
  "condition": null,
  "output": {
    "true": "Handle abend with a label of BEC6ZZZZ"
  }
},
{
  "id": "BR-019",
  "description": "Abend with ABCODE of ZZZZ.",
  "condition": null,
  "output": {
    "true": "Abend with ABCODE of ZZZZ"
  }
},
{
  "id": "BR-020",
  "description": "Return from the program.",
  "condition": null,
  "output": {
    "true": "Return from the program"
  }
},
{
  "id": "BR-021",
  "description": "Send from TEST4R with a length of TEST4RL.",
  "condition": null,
  "output": {
    "true": "Send from TEST4R with a length of TEST4RL"
  }
},
{
  "id": "BR-022",
  "description": "Send from TEST6R with a length of TEST6RL.",
  "condition": null,
  "output": {
    "true": "Send from TEST6R with a length of TEST6RL"
  }
}[INST]      *****************************************************************

      * z390 - Mainframe assembler emulator and run-time engine
      * Copyright (C) 2021 z390 Assembler LLC
      *
      * This file is part of z390.
      *
      * z390 is free software; you can redistribute it and/or modify
      * it under the terms of the GNU General Public License as 
      * published by the Free Software Foundation; either version 2 of 
      * the License, or (at your option) any later version.
      * z390 is distributed in the hope that it will be useful,
      * but WITHOUT ANY WARRANTY; without even the implied warranty of
      * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      * GNU General Public License for more details.
      *
      * You should have received a copy of the GNU General Public 
      * License along with this program; if not, see 
      * https://www.gnu.org/licenses.
      *****************************************************************
      * Author - Don Higgins                                          *
      *****************************************************************
        IDENTIFICATION DIVISION.
      *
      * 1) HANDLE ABEND BY PROGRAM
      * 2) LINKED PROGRAM TO DEMO COMPLEX HANDLE ABEND
      *
        PROGRAM-ID. TESTBEC7.
        ENVIRONMENT DIVISION.
        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01  TEST1.
            02  FILLER  PIC X(4)  VALUE X'C311C761'.
            02  FILLER  PIC X(35)
                        VALUE 'TESTBEC7 IN TRANSID BEC4 SAYS HELLO'.
            02  FILLER  PIC X(3)  VALUE X'114AC1'.
            02  FILLER  PIC X(34)
                        VALUE 'BEC4 COMPLETED OK, NOW PRESS CLEAR'.
        77  TEST1L   PIC 9(4) COMP.
        01  TEST2.
            02  FILLER  PIC X(4)  VALUE X'C311C261'.
            02  FILLER  PIC X(51)
           VALUE 'TESTBEC7 IN TRANSID BEC5 SAYS HELLO AND ABENDS ASRA'.
        77  TEST2L   PIC 9(4) COMP.
        01  TEST3.
            02  FILLER  PIC X(4)  VALUE X'C311C761'.
            02  FILLER  PIC X(51)
           VALUE 'TESTBEC7 IN TRANSID BEC5 SAYS HELLO AND ABENDS AEI0'.
        77  TEST3L   PIC 9(4) COMP.
        77  BADFLD1  PIC 9(4) COMP VALUE 0.
        77  BADFLD2  PIC S9(3) REDEFINES BADFLD1 COMP-3.

        PROCEDURE DIVISION USING DFHEIBLK DFHCOMMAREA.

            MOVE LENGTH OF TEST1   TO TEST1L.
            MOVE LENGTH OF TEST2   TO TEST2L.
            MOVE LENGTH OF TEST3   TO TEST3L.

      *  CLC   EIBTRNID,=C'BEC5'  SECOND TEST TRANSID ?
      *  BE    BEC5               EXIT IF IT IS
            IF EIBTRNID = 'BEC5' THEN GO TO BEC5.
      * BEC4 ABEND HANDLER
            EXEC CICS SEND FROM(TEST1) LENGTH(TEST1L) END-EXEC.
            EXEC CICS RETURN END-EXEC.
      *
      * ABEND PRODUCER FOR TRANSID BEC5
      *
      * BEC5     EQU   *
        BEC5.
      *  OC    DFHEICAP,DFHEICAP  ANY COMMAREA ?
      *  BNZ   BEC5COMM           EXIT IF WE HAVE
            IF EIBCALEN NOT = 0 THEN GO TO BEC5COMM.
      * CAUSE ASRA TO BE HANDLED BY TESTBEC6
            EXEC CICS SEND FROM(TEST2) LENGTH(TEST2L) END-EXEC.
      *  DC    H'0'
            ADD 1 TO BADFLD2.

      * BEC5COMM EQU   *
        BEC5COMM.
            EXEC CICS HANDLE ABEND PROGRAM('TESTBEC8') END-EXEC.
            EXEC CICS SEND FROM(TEST3) LENGTH(TEST3L) END-EXEC.
      * CAUSE AEI0
      * THIS IS 'REPLACED' BY XCTL TO TESTBEC8 WITH OUR COMMAREA
            EXEC CICS LOAD PROGRAM('BADPROG7') END-EXEC.
[/INST]{
  "id": "BR-002", 
  "description": "The program will send a message with data from TEST1 and return if the transaction ID is BEC4.", 
  "condition": "EIBTRNID = 'BEC4'", 
  "output": {
    "true": "Send message with data from TEST1 and return."
  }
},
{
  "id": "BR-003", 
  "description": "The program will send a message with data from TEST2 and end with an ASRA abend if the transaction ID is BEC5 and there is no commarea.", 
  "condition": "EIBTRNID = 'BEC5' AND EIBCALEN = 0", 
  "output": {
    "true": "Send message with data from TEST2 and end with ASRA abend."
  }
},
{
  "id": "BR-004", 
  "description": "The program will handle the abend with program TESTBEC8 and send a message with data from TEST3 if the transaction ID is BEC5 and there is a commarea.", 
  "condition": "EIBTRNID = 'BEC5' AND EIBCALEN NOT = 0", 
  "output": {
    "true": "Handle abend with program TESTBEC8 and send message with data from TEST3."
  }
}[INST]      *****************************************************************

      * z390 - Mainframe assembler emulator and run-time engine
      * Copyright (C) 2021 z390 Assembler LLC
      *
      * This file is part of z390.
      *
      * z390 is free software; you can redistribute it and/or modify
      * it under the terms of the GNU General Public License as 
      * published by the Free Software Foundation; either version 2 of 
      * the License, or (at your option) any later version.
      * z390 is distributed in the hope that it will be useful,
      * but WITHOUT ANY WARRANTY; without even the implied warranty of
      * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      * GNU General Public License for more details.
      *
      * You should have received a copy of the GNU General Public 
      * License along with this program; if not, see 
      * https://www.gnu.org/licenses.
      *****************************************************************
      * Author - Don Higgins                                          *
      *****************************************************************
        IDENTIFICATION DIVISION.
      *
      * HANDLE ABEND BY PROGRAM (PART OF TRANSID BEC5)
      *
        PROGRAM-ID. TESTBEC8.
        ENVIRONMENT DIVISION.

        DATA DIVISION.
        WORKING-STORAGE SECTION.
        01  TEST1.
            02  FILLER   PIC X(4)  VALUE X'C311C8F1'.
            02  FILLER   PIC X(42)
                VALUE 'TESTBEC8 SAYS HELLO AND THE COMMAREA SAYS '.
            02  TESTAEI0 PIC X(4).
        77  TEST1L   PIC 9(4) COMP.

        LINKAGE SECTION.
        01  DFHCOMMAREA.
            02  COMMMSG  PIC X(4).

        PROCEDURE DIVISION USING DFHEIBLK DFHCOMMAREA.

            MOVE LENGTH OF TEST1   TO TEST1L.

      * BEC5 ABEND HANDLER
      *  L     R6,DFHEICAP        R6=COMMAREA ADDRESS
      *  MVC   TESTAEI0,0(R6)     MOVE TO MESSAGE
            MOVE COMMMSG TO TESTAEI0.
            EXEC CICS SEND FROM(TEST1) LENGTH(TEST1L) END-EXEC.
            EXEC CICS RETURN END-EXEC.
[/INST]{
  "id": "BR-001",
  "description": "The COMMAREA is populated by the calling program and is used to pass data to the called program.",
  "condition": null,
  "output": null
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTCAL1.
       AUTHOR.        DON HIGGINS.
       DATE-WRITTEN.  12/02/08.
      ***************************************************************
      * REGRESSION TEST CALL 
      *  FROM TESTCAL1.CBL TO TESTCAL2.CBL STATIC LINKED
      *  FROM TESTCBL2.CBL TO TESTCBL3.CBL DYNAMIC LINK
      *  FROM TESTCBL3.CBL TO TESTASM4.MLC STATIC LINK
      * USING BY VALUE PARM1 BY REFERENCE PARM2.
      ***************************************************************
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
           77 PARM1 PIC X(20) VALUE 'TESTCAL1 PARM1'.
           77 PARM2 PIC X(20) VALUE 'TESTCAL1 PARM2'.
           77 PGM3  PIC X(8)  VALUE 'TESTCAL3'.
       PROCEDURE DIVISION.
       MAINLINE.
           DISPLAY 'TESTCAL1 STARTING'
           DISPLAY 'TESTCAL1 PARM1 BY VALUE     = ' PARM1
           DISPLAY 'TESTCAL1 PARM2 BY REFERENCE = ' PARM2
           CALL 'TESTCAL2' USING BY VALUE PARM1 
                                 BY REFERENCE PARM2.
           CALL 'TESTCAL2' USING BY VALUE PARM1 
                                 BY REFERENCE PARM2.
           CALL PGM3 USING BY VALUE PARM1 
                     BY REFERENCE PARM2.
           CALL PGM3 USING BY VALUE PARM1 
                     BY REFERENCE PARM2.
           DISPLAY 'TESTCAL1 PARM1 BY VALUE     = ' PARM1
           DISPLAY 'TESTCAL1 PARM2 BY REFERENCE = ' PARM2
           DISPLAY 'TESTCAL1 ENDING OK'
           STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "The program is used for testing static and dynamic linking, as well as passing parameters by value and by reference.",
  "condition": null,
  "output": {
    "start": "TESTCAL1 STARTING",
    "end": "TESTCAL1 ENDING OK"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTCAL2.
       AUTHOR.        DON HIGGINS.
       DATE-WRITTEN.  12/02/08.
      ***************************************************************
      * REGRESSION TEST CALL 
      *  FROM TESTCAL1.CBL TO TESTCAL2.CBL STATIC LINKED
      *  FROM TESTCBL2.CBL TO TESTCBL3.CBL DYNAMIC LINK
      *  FROM TESTCBL3.CBL TO TESTASM4.MLC STATIC LINK
      * USING BY VALUE PARM1 BY REFERENCE PARM2.
      ***************************************************************
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77  PGM3 PIC X(8) VALUE 'TESTCAL3'.
       LINKAGE SECTION.
       01 PARM1 PIC X(20).
       01 PARM2 PIC X(20).
       PROCEDURE DIVISION USING PARM1 PARM2.
       MAINLINE.
           DISPLAY 'TESTCAL2 STARTING'
           DISPLAY 'TESTCAL2 PARM1 =' PARM1
           DISPLAY 'TESTCAL2 PARM2 =' PARM2
           MOVE    'TESTCAL2 UPDT1' TO PARM1
           MOVE    'TESTCAL2 UPDT2' TO PARM2
           CALL PGM3 USING BY VALUE     PARM1 
                           BY REFERENCE PARM2.
           CALL PGM3 USING BY VALUE     PARM1 
                           BY REFERENCE PARM2.
           DISPLAY 'TESTCAL2 PARM1 =' PARM1
           DISPLAY 'TESTCAL2 PARM2 =' PARM2
           DISPLAY 'TESTCAL2 ENDING OK'
           GOBACK.
[/INST]{
  "id": "BR-001",
  "description": "Calling a subroutine with BY VALUE and BY REFERENCE parmeters updates the BY REFERENCE parameter in the calling program.",
  "condition": "CALL a subroutine USING BY REFERENCE param",
  "output": {
    "ok": "TESTCAL2 ENDING OK"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTCAL3.
       AUTHOR.        DON HIGGINS.
       DATE-WRITTEN.  12/02/08.
      ***************************************************************
      * REGRESSION TEST CALL 
      *  FROM TESTCAL1.CBL TO TESTCAL2.CBL STATIC LINKED
      *  FROM TESTCBL2.CBL TO TESTCBL3.CBL DYNAMIC LINK
      *  FROM TESTCBL3.CBL TO TESTASM4.MLC STATIC LINK
      * USING BY VALUE PARM1 BY REFERENCE PARM2.
      ***************************************************************
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       LINKAGE SECTION.
       01 PARM1 PIC X(20).
       01 PARM2 PIC X(20).
       PROCEDURE DIVISION USING PARM1 PARM2.
       MAINLINE.
           DISPLAY 'TESTCAL3 STARTING'
           DISPLAY 'TESTCAL3 PARM1 =' PARM1
           DISPLAY 'TESTCAL3 PARM2 =' PARM2
           CALL 'TESTASM4' USING BY VALUE PARM1 
                                 BY REFERENCE PARM2.
           CALL 'TESTASM4' USING BY VALUE PARM1 
                                 BY REFERENCE PARM2.
           DISPLAY 'TESTCAL3 PARM1 =' PARM1
           DISPLAY 'TESTCAL3 PARM2 =' PARM2
           DISPLAY 'TESTCAL3 ENDING OK'
           GOBACK.
[/INST]{
  "id": "BR-001",
  "description": "PARM1 is passed by value to all called programs.",
  "condition": "CALL 'TESTASM4' USING BY VALUE PARM1",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTCMP4.
       AUTHOR.        DON HIGGINS.
       DATE-WRITTEN.  05/07/12.
      * TEST COMPUTE WITH SCALING FOR IMPLIED DECIMAL                              
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 EH1 FLOAT-HEX-7       VALUE 1.5.
       77 DH1 FLOAT-HEX-15      VALUE 1.5.
       77 LH1 FLOAT-HEX-30      VALUE 1.5.
       77 EB1 FLOAT-BINARY-7    VALUE 1.5.
       77 DB1 FLOAT-BINARY-16   VALUE 1.5.
       77 LB1 FLOAT-BINARY-34   VALUE 1.5.
       77 ED1 FLOAT-DECIMAL-7   VALUE 1.5.
       77 DD1 FLOAT-DECIMAL-16  VALUE 1.5.
       77 LD1 FLOAT-DECIMAL-34  VALUE 1.5.
       77 H1      COMP PIC S9(3)V9       VALUE 1.5.
       77 F1      COMP PIC S9(7)V99      VALUE 1.5.
       77 G1      COMP PIC S9(15)V999    VALUE 1.5.
       77 Q1      COMP PIC S9(35)V9(4)   VALUE 1.5.
       77 P1      COMP-3 PIC S9(26)V9(5) VALUE 1.5.
       77 Z1             PIC S9(25)V9(6) VALUE 1.5.
       77 H2      COMP PIC S9(3)V9       VALUE 1.5.
       77 F2      COMP PIC S9(7)V99      VALUE 1.5.
       77 G2      COMP PIC S9(15)V999    VALUE 1.5.
       77 Q2      COMP PIC S9(35)V9(4)   VALUE 1.5.
       77 P2      COMP-3 PIC S9(26)V9(5) VALUE 1.5.
       77 Z2             PIC S9(25)V9(6) VALUE 1.5.
       77 ZT1            PIC S9 VALUE 5.
       77 PT1     COMP-3 PIC S9 VALUE 5.
       77 ZT7            PIC S9(4)V999  VALUE 5.
       77 PT7     COMP-3 PIC S9(3)V9(4) VALUE 5.
       77 ZT8            PIC S9(5)V999  VALUE 5.
       77 PT8     COMP-3 PIC S9(4)V9(4) VALUE 5.
       77 ZT16           PIC S9(13)V999 VALUE 5.
       77 ZT31           PIC S9(31) VALUE 5.
       77 PT31    COMP-3 PIC S9(31) VALUE 5.
       77 ZT20           PIC S9(20) VALUE 5.
       77 PT20    COMP-3 PIC S9(20) VALUE 5.
       77 ZT21           PIC S9(21) VALUE 5.
       77 PT21    COMP-3 PIC S9(21) VALUE 5.
       77 PT16    COMP-3 PIC S9(16) VALUE 5.
       77 LD2 FLOAT-DECIMAL-34  VALUE 1.0.
       77 GOOD    COMP-3 PIC 9(4)   VALUE 0.
       77 BAD     COMP-3 PIC 9(4)   VALUE 0.
       PROCEDURE DIVISION.
       MAINLINE.
           DISPLAY 'TESTCMP4 TEST SCALED COMPUTE'.
           COMPUTE ZT7 = PT7 + 1.
           IF ZT7 = 6 PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE ZT8 = PT8 + 1.
           IF ZT8 = 6 PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE ZT16 = PT1 + 1.
           IF ZT16 = 6 PERFORM GOOD ELSE PERFORM BAD.
           MOVE 1234567890123.456 TO ZT16
           IF ZT16 = 1234567890123.456 PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE ZT20 = 12345678901234567890
           COMPUTE LD2  = 12345678901234567890
           IF ZT20 = LD2 PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE ZT21 = 123456789012345678901
           COMPUTE LD2  = 123456789012345678901
           IF ZT21 = LD2 PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE PT16 = PT1
           IF PT16 = PT1 ERFORM GOOD ELSE PERFORM BAD.
           COMPUTE ZT21 = PT21 + 1,
           IF ZT21 = 6 PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE ZT20 = PT20 + 1,
           IF ZT20 = 6 PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE ZT31 = PT31 + 1,
           IF ZT31 = 6 PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE ZT1 = PT1 + 1,
           IF ZT1 = 6 PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE Z2 = EH1+DH1+LH1
                       +EB1+DB1+LB1
                       +ED1+DD1+LD1
                       +H1+F1+G1
                       +Q1+P1+Z1
           IF Z2 = 22.5 PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE Z2 = Z1+P1+Q1
                       +G1+F1+H1
                       +LD1+DD1+ED1
                       +LB1+DB1+EB1
                       +LH1+DH1+EH1
           IF Z2 = 22.5 PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE Z2 = 1.5
           IF Z2 = 1.5  PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE Z2 = H1
           IF Z2 = 1.5  PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE Z2 = 1.5 + 1.5
           IF Z2 = 3    PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE Z2 = 1.5 - 1.5
           IF Z2 = 0    PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE Z2 = 1.5 * 1.5
           IF Z2 = 2.25 PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE Z2 = 1.5 / 1.5
           IF Z2 = 1    PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE H2 = 1111 + 2222
           IF H2 = 3333 PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE F2 = 111111111 + 222222222
           IF F2 = 333333333 PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE LD2 = 111111111111111.111
           COMPUTE G2  = LD2 + LD2
           COMPUTE LD2 = LD2 + LD2
           IF G2 = LD2  PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE LD2 = 1111111111111111111111111111111.1111
           COMPUTE Q2  = LD2 + LD2
           COMPUTE LD2 = LD2 + LD2
           IF Q2 = LD2  PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE LD2 = 11111111111111111111111111.11111
           COMPUTE P2  = LD2 + LD2
           COMPUTE LD2 = LD2 + LD2
           IF P2 = LD2  PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE LD2 = 1111111111111111111111111.111111
           COMPUTE Z2  = LD2 + LD2
           COMPUTE LD2 = LD2 + LD2
           IF Z2 = LD2  PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE Z2 = H1+F1+G1+Q1+P1+Z1
           IF Z2 = 9    PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE Z2 = Z1+P1+Q1+G1+F1+H1
           IF Z2 = 9    PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE Z2 = (H1 -F1)+(G1 -Q1)+(P1 -Z1)
           IF Z2 = 0    PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE Z2 = H1*F1+G1*Q1+P1*Z1
           IF Z2 = 6.75 PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE Z2 = H1/F1+G1/Q1
           IF Z2 = 2    PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE H2 = H1+H1
           IF H2 = 3    PERFORM GOOD ELSE PERFORM BAD..
           COMPUTE F2 = F1+F1
           IF F2 = 3    PERFORM GOOD ELSE PERFORM BAD..
           COMPUTE G2 = G1+G1
           IF G2 = 3    PERFORM GOOD ELSE PERFORM BAD..
           COMPUTE Q2 = Q1+Q1
           IF Q2 = 3    PERFORM GOOD ELSE PERFORM BAD..
           COMPUTE P2 = P1+P1
           IF P2 = 3    PERFORM GOOD ELSE PERFORM BAD..
           COMPUTE Z2 = Z1+Z1
           IF Z2 = 3    PERFORM GOOD ELSE PERFORM BAD..
           COMPUTE H2 = H1 -H1
           IF H2 = 0    PERFORM GOOD ELSE PERFORM BAD..
           COMPUTE F2 = F1 -F1
           IF F2 = 0    PERFORM GOOD ELSE PERFORM BAD..
           COMPUTE G2 = G1 -G1
           IF G2 = 0    PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE Q2 = Q1 -Q1
           IF Q2 = 0    PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE P2 = P1 -P1
           IF P2 = 0    PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE Z2 = Z1 -Z1
           IF Z2 = 0    PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE H2 = H1*H1
           IF H2 = 2.2  PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE F2 = F1*F1
           IF F2 = 2.25 PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE G2 = G1*G1
           IF G2 = 2.25 PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE Q2 = Q1*Q1
           IF Q2 = 2.25 PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE P2 = P1*P1
           IF P2 = 2.25 PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE Z2 = Z1*Z1
           IF Z2 = 2.25 PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE H2 = H1/H1
           IF H2 = 1.0  PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE F2 = F1/F1
           IF F2 = 1.0  PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE G2 = G1/G1
           IF G2 = 1.0  PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE Q2 = Q1/Q1
           IF Q2 = 1.0  PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE P2 = P1/P1
           IF P2 = 1.0  PERFORM GOOD ELSE PERFORM BAD.
           COMPUTE Z2 = Z1/Z1
           IF Z2 = 1.0  PERFORM GOOD ELSE PERFORM BAD.
           DISPLAY 'TOTAL GOOD = ' GOOD ' TOTAL BAD = ' BAD.
           STOP RUN.
       GOOD.
           DISPLAY 'GOOD-TEST'
           ADD 1 TO GOOD.
       BAD.
           DISPLAY 'BAD-TEST'
           MOVE 16 TO RETURN-CODE
           ADD 1 TO BAD.
[/INST]{
  "id": "BR-001",
  "description": "The sum of H1+F1+G1+Q1+P1+Z1 should be 9.",
  "condition": "\\nCOMPUTE Z2 = H1+F1+G1+Q1+P1+Z1\\nif z2 = 9 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-002",
  "description": "The sum of Z1+P1+Q1+G1+F1+H1 should be 9.",
  "condition": "\\nCOMPUTE Z2 = Z1+P1+Q1+G1+F1+H1\\nif z2 = 9 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-003",
  "description": "1.5 + 1.5 should be 3.",
  "condition": "\\nCOMPUTE Z2 = 1.5 + 1.5\\nif z2 = 3 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-004",
  "description": "1.5 - 1.5 should be 0.",
  "condition": "\\nCOMPUTE Z2 = 1.5 - 1.5\\nif z2 = 0 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-005",
  "description": "1.5 * 1.5 should be 2.25.",
  "condition": "\\nCOMPUTE Z2 = 1.5 * 1.5\\nif z2 = 2.25 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-006",
  "description": "1.5 / 1.5 should be 1.",
  "condition": "\\nCOMPUTE Z2 = 1.5 / 1.5\\nif z2 = 1 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-007",
  "description": "The sum of H1+F1+G1+Q1+P1+Z1 shlould be 6.75.",
  "condition": "\\nCOMPUTE Z2 = H1*F1+G1*Q1+P1*Z1\\nif z2 = 6.75 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-008",
  "description": "The sum of H1/F1+G1/Q1 should be 2.",
  "condition": "\\nCOMPUTE Z2 = H1/F1+G1/Q1\\nif z2 = 2 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-009",
  "description": "H1+H1 should be 3.",
  "condition": "\\nCOMPUTE H2 = H1+H1\\nif h2 = 3 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-010",
  "description": "F1+F1 should be 3.",
  "condition": "\\nCOMPUTE F2 = F1+F1\\nif f2 = 3 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-011",
  "description": "G1+G1 should be 3.",
  "condition": "\\nCOMPUTE G2 = G1+G1\\nif g2 = 3 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-012",
  "description": "Q1+Q1 should be 3.",
  "condition": "\\nCOMPUTE Q2 = Q1+Q1\\nif q2 = 3 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-013",
  "description": "P1+P1 should be 3.",
  "condition": "\\nCOMPUTE P2 = P1+P1\\nif p2 = 3 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-014",
  "description": "Z1+Z1 should be 3.",
  "condition": "\\nCOMPUTE Z2 = Z1+Z1\\nif z2 = 3 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-015",
  "description": "H1-H1 should be 0.",
  "condition": "\\nCOMPUTE H2 = H1-H1\\nif h2 = 0 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-016",
  "description": "F1-F1 should be 0.",
  "condition": "\\nCOMPUTE F2 = F1-F1\\nif f2 = 0 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-017",
  "description": "G1-G1 should be 0.",
  "condition": "\\nCOMPUTE G2 = G1-G1\\nif g2 = 0 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-018",
  "description": "Q1-Q1 should be 0.",
  "condition": "\\nCOMPUTE Q2 = Q1-Q1\\nif q2 = 0 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-019",
  "description": "P1-P1 should be 0.",
  "condition": "\\nCOMPUTE P2 = P1-P1\\nif p2 = 0 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-020",
  "description": "Z1-Z1 should be 0.",
  "condition": "\\nCOMPUTE Z2 = Z1-Z1\\nif z2 = 0 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-021",
  "description": "H1*H1 should be 2.2.",
  "condition": "\\nCOMPUTE H2 = H1*H1\\nif h2 = 2.2 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-022",
  "description": "F1*F1 should be 2.25.",
  "condition": "\\nCOMPUTE F2 = F1*F1\\nif f2 = 2.25 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-023",
  "description": "G1*G1 should be 2.25.",
  "condition": "\\nCOMPUTE G2 = G1*G1\\nif g2 = 2.25 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-024",
  "description": "Q1*Q1 should be 2.25.",
  "condition": "\\nCOMPUTE Q2 = Q1*Q1\\nif q2 = 2.25 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-025",
  "description": "P1*P1 should be 2.25.",
  "condition": "\\nCOMPUTE P2 = P1*P1\\nif p2 = 2.25 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-026",
  "description": "Z1*Z1 should be 2.25.",
  "condition": "\\nCOMPUTE Z2 = Z1*Z1\\nif z2 = 2.25 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-027",
  "description": "H1/H1 should be 1.",
  "condition": "\\nCOMPUTE H2 = H1/H1\\nif h2 = 1 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-028",
  "description": "F1/F1 should be 1.",
  "condition": "\\nCOMPUTE F2 = F1/F1\\nif f2 = 1 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-029",
  "description": "G1/G1 should be 1.",
  "condition": "\\nCOMPUTE G2 = G1/G1\\nif g2 = 1 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-030",
  "description": "Q1/Q1 should be 1.",
  "condition": "\\nCOMPUTE Q2 = Q1/Q1\\nif q2 = 1 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-031",
  "description": "P1/P1 should be 1.",
  "condition": "\\nCOMPUTE P2 = P1/P1\\nif p2 = 1 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
},
{
  "id": "BR-032",
  "description": "Z1/Z1 should be 1.",
  "condition": "\\nCOMPUTE Z2 = Z1/Z1\\nif z2 = 1 perform GOOD else perform BAD\\n",
  "output": {
    "true": "GOOD-TEST",
    "false": "BAD-TEST"
  }
}
][INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTCPY1.
       AUTHOR.        DON HIGGINS.
       DATE-WRITTEN.  12/01/08.
      ***************************************************************
      * REGRESSION TEST NESTED COPY SUPPORT
      ***************************************************************
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       COPY TESTCPYA.
       PROCEDURE DIVISION.
       MAINLINE.
           DISPLAY 'TESTCPY1 STARTING'
           DISPLAY 'TESTCPYA FROM TESTCPYA.CPZ =' TESTCPYA
           DISPLAY 'TESTCPYB FROM TESTCPYB.CPZ =' TESTCPYB
           DISPLAY 'TESTCPY1 ENDED OK'
           STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "TESTCPYA and TESTCPYB are created from TESTCPYA.CPZ and TESTCPYB.CPZ, respectively",
  "condition": null,
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTCPY1.
       AUTHOR.        DON HIGGINS.
       DATE-WRITTEN.  12/01/08.
      ***************************************************************
      * REGRESSION TEST NESTED COPY SUPPORT
      ***************************************************************
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 VER1.
       COPY TESTCPY2.
       01 VER2.        COPY TESTCPY2.
       PROCEDURE DIVISION.
       MAINLINE.
           DISPLAY 'TESTCPY2 STARTING'
           MOVE 'VER1 FLD' TO FIELD OF VER1
           MOVE 'VER2 FLD' TO FIELD OF VER2
           DISPLAY 'TESTCPY2 VER1 FIELD =' FIELD OF VER1
           DISPLAY 'TESTCPY2 VER2 FIELD =' FIELD OF VER2
           IF  FIELD OF VER1 = 'VER1 FLD'
           AND FIELD OF VER2 = 'VER2 FLD'
               DISPLAY 'TESTCPY2 ENDING OK'
           ELSE
               DISPLAY 'TESTCPY2 FAILED'
               MOVE 16 TO RETURN-CODE
           END-IF
           STOP RUN.
[/INST]{
  "id": "BR-002",  "description": "The Field property of a copy should match a value in order for the copy to be successful.",
  "condition": "FIELD OF VER1 = 'VER1 FLD' AND FIELD OF VER2 = 'VER2 FLD'",
  "output": {
    "success": "TESTCPY2 ENDING OK",
    "failure": "TESTCPY2 FAILED"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTDSP1.
       AUTHOR.        DON HIGGINS.
       DATE-WRITTEN.  11/28/08.
      * TEST DISPLAY OF LITERLS AND ALL FIELD TYPES                         
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 TA USAGE POINTER VALUE 1.
       77 TD COMP-1 VALUE 1.234567.  
       77 TE COMP-2 VALUE 1.23456789012345.             
       77 TF COMP   PIC S9(9)  VALUE 123456789.       
       77 TG COMP   PIC S9(18) VALUE 123456789012345678.
       77 TH COMP   PIC S9(4)  VALUE 1234.
       77 TQ COMP   PIC S9(39) 
                    VALUE 123456789012345678901234567890123456789.
       77 TP COMP-3 PIC S9(31) VALUE 1234567890123456789012345678901.
       77 TP3 COMP-3 PIC S9(3) VALUE 123.
       77 TP4 COMP-3 PIC S9(4) VALUE 1234.
       77 TX        PIC X(5)   VALUE 'ABCDE'
       77 TZ        PIC S9(31) VALUE 1234567890123456789012345678901.
       77 TZ3       PIC S9(3)  VALUE 123.
       77 TZ4       PIC S9(4)  VALUE 1234.
       77 I  COMP   PIC S9(4).
      * EXPLICIT HFP, BFP, AND DFP USAGE TYPES
       77 HFP-SRT FLOAT-HEX-7      VALUE 1234567.
       77 HFP-LNG FLOAT-HEX-15     VALUE 123456789012345.
       77 HFP-EXT FLOAT-HEX-30 
                  VALUE 123456789012345678901234567890.
       77 BFP-SRT FLOAT-BINARY-7   VALUE 1234567.
       77 BFP-LNG FLOAT-BINARY-16  VALUE 1234567890123456.
       77 BFP-EXT FLOAT-BINARY-34
                  VALUE 1234567890123456789012345678901234.
       77 DFP-SRT FLOAT-DECIMAL-7  VALUE 1234567.
       77 DFP-LNG FLOAT-DECIMAL-16 VALUE 1234567890123456.
       77 DFP-EXT FLOAT-DECIMAL-34
                  VALUE 1234567890123456789012345678901234.
      * GENERIC FLOATING TYPES DEFAULT TO DFP 
      * ZCOBOL OPTION FLOAT(HEX/BINARY/DECIMAL) WILL ASSIGN AS REQ'D
       77 FLT-SRT FLOAT-SHORT      VALUE 1234567.
       77 FLT-LNG FLOAT-LONG       VALUE 1234567890123456.
       77 FLT-EXT FLOAT-EXTENDED   
                  VALUE 1234567890123456789012345678901234.
       PROCEDURE DIVISION.
       MAINLINE.
           DISPLAY 'TESTDSP1 DISPLAY LITERALS AND ALL FIELD TYPES'
           DISPLAY 'TA =' TA
           DISPLAY 'TD =' TD
           DISPLAY 'TE =' TE
           DISPLAY 'TF =' TF
           DISPLAY 'TG =' TG
           DISPLAY 'TH =' TH
      *     DISPLAY 'TL=' TL
           DISPLAY 'TQ =' TQ
           DISPLAY 'TP =' TP
           DISPLAY 'TP3=' TP3
           DISPLAY 'TP4=' TP4
           DISPLAY 'TX =' TX
           DISPLAY 'TZ =' TZ
           DISPLAY 'TZ =' TZ3
           DISPLAY 'TZ4=' TZ4
           DISPLAY 'HFP-SRT=' HFP-SRT
           DISPLAY 'HFP-LNG=' HFP-LNG
           DISPLAY 'HFP-EXT=' HFP-EXT
           DISPLAY 'BFP-SRT=' BFP-SRT
           DISPLAY 'BFP-LNG=' BFP-LNG
           DISPLAY 'BFP-EXT=' BFP-EXT
           DISPLAY 'DFP-SRT=' DFP-SRT
           DISPLAY 'DFP-LNG=' DFP-LNG
           DISPLAY 'DFP-EXT=' DFP-EXT
           DISPLAY 'FLT-SRT=' FLT-SRT
           DISPLAY 'FLT-LNG=' FLT-LNG
           DISPLAY 'FLT-EXT=' FLT-EXT
           DISPLAY '  TH' '  TH' '  TH'
           DISPLAY TH TH TH
           MOVE    -1 TO TA
           MOVE    -1 TO TD
           MOVE    -1 TO TE
           MOVE    -1 TO TF
           MOVE    -1 TO TG
           MOVE    -1 TO TH
      *     MOVE    -1 TP TL
           MOVE    -1 TO TP
           MOVE    -1 TO TZ
           DISPLAY 'DISPLAY -1 FOR EACH TYPE'
           DISPLAY 'TA=' TA
           DISPLAY 'TD=' TD
           DISPLAY 'TE=' TE
           DISPLAY 'TF=' TF
           DISPLAY 'TG=' TG
           DISPLAY 'TH=' TH
      *     DISPLAY 'TH=' TL
           DISPLAY 'TP=' TP
           DISPLAY 'TX=' TX
           DISPLAY 'TZ=' TZ
           DISPLAY 'TESTDSP1 ENDED OK'
           STOP RUN.
          
[/INST]{
  "id": "BR-001",
  "description": "The program displays a fixed hardcoded text string as the program name after the word DISPLAY",
  "condition": " DISPLAY 'TESTDSP1 DISPLAY LITERALS AND ALL FIELD TYPES'",
  "output": "TESTDSP1 DISPLAY LITERALS AND ALL FIELD TYPES"
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  TESTFIL1.
      * THIS FAILED WITHOUT RPI 1048 FIX TO ZCOBOL\WORKING_STORAGE.MAC
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT IN-FILE
               ASSIGN TO 'zcobol\test\TESTFIL1.IN'
               ORGANIZATION IS LINE SEQUENTIAL.
           SELECT OUT-FILE
               ASSIGN TO 'zcobol\test\TESTFIL1.OUT'
               ORGANIZATION IS LINE SEQUENTIAL.
       DATA DIVISION.
       FILE SECTION.
       FD  IN-FILE
           DATA RECORD IS IN-RECORD.
       01  IN-RECORD PIC X(80).
       FD  OUT-FILE
           DATA RECORD IS OUT-RECORD.
       01  OUT-RECORD PIC X(80).
       WORKING-STORAGE SECTION.
       01  WS-LINE PIC X(80).
       01  END-OF-FILE-FLAG PIC X.
       01  HELP-WHY.
           02  IS-IT-LIKE-THIS PIC X(10).
       77  COUNT COMP-3 PIC S9(4) VALUE 0.
       PROCEDURE DIVISION.
       MAINLINE.
           DISPLAY 'TESTFIL1 STARTED'
           PERFORM INITIALIZATION-ROUTINE.
           PERFORM THE-LOOP
                   UNTIL END-OF-FILE-FLAG = 'Y'.
           PERFORM EOJ-ROUTINE.
           DISPLAY 'TESTFIL1 ENDED OK'
           STOP RUN.
       INITIALIZATION-ROUTINE.
           OPEN INPUT IN-FILE.
           OPEN OUTPUT OUT-FILE.
           READ IN-FILE INTO OUT-RECORD
                AT END MOVE 'Y' TO END-OF-FILE-FLAG.
       THE-LOOP.
           WRITE OUT-RECORD.
           ADD 1 TO COUNT
           READ IN-FILE INTO OUT-RECORD
                AT END MOVE 'Y' TO END-OF-FILE-FLAG.
       EOJ-ROUTINE.
           CLOSE IN-FILE.
           CLOSE OUT-FILE.
           DISPLAY 'RECORDS COPIED = ' COUNT.
           STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "The program is designed to copy records from one file to another file.",
  "condition": "none"
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  TESTFIL2.
      * THIS FAILED WITHOUT RPI 1048 FIX TO ZCOBOL\Z390\GEN_WS.MAC
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT IN-FILE
               ASSIGN TO 'ZCOBOL\TEST\TESTFIL2.IN'
               ORGANIZATION IS LINE SEQUENTIAL.
           SELECT OUT-FILE
               ASSIGN TO 'ZCOBOL\TEST\TESTFIL2.OUT'
               ORGANIZATION IS LINE SEQUENTIAL.
       DATA DIVISION.
       FILE SECTION.
       FD  IN-FILE
           DATA RECORD IS IN-RECORD.
       01  IN-RECORD PIC X(80).
       FD  OUT-FILE
           DATA RECORD IS OUT-RECORD.
       01  OUT-RECORD PIC X(80).
       WORKING-STORAGE SECTION.
       01  WS-LINE PIC X(80).
       01  END-OF-FILE-FLAG PIC X.

       77  COUNTER-1 COMP-3 PIC S9(4) VALUE 0.
       PROCEDURE DIVISION.
       MAINLINE.
           DISPLAY 'TESTFIL2 STARTED'.
           DISPLAY 'TESTFIL2 ENDED OK'.
           STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "The number of input lines in the IN-FILE is counted. If the COUNT of lines is 0, an error message is displayed. If the COUNT of lines is greater than 0, 'TESTFIL2 ENDED OK' is displayed.",
  "condition": "IN-FILE",
  "output": {
    "error": "IN-FILE not found or empty",
    "success": "TESTFIL2 ENDED OK"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTFUN1.
       AUTHOR.        DON HIGGINS.
       DATE-WRITTEN.  10/13/08.
      * TEST FUNCTIONS - LENGTH OF, ADDRESS OF                              
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 PTR-1   USAGE POINTER.    
       77 PTR-2   USAGE POINTER.           
       77 PTR-3   USAGE POINTER.           
       77 W1      PIC 9(9) COMP VALUE 0.           
       77 ADDR-1  PIC X(20).
       77 ADDR-2  PIC X(20).
       77 TP1     COMP-3 PIC S9.
       77 TP2     COMP-3 PIC S9.
       77 TZ1     PIC S9.
       77 TZ2     PIC S99.
       77 TX3     PIC X(3).
       77 TRM1    PIC X(3) VALUE 'ABC'.
      * THE FOLLOWING 3 TYPES ARE MAPPED TO DFP USING FLOAT(DECIMAL)
      * NOTE: FLOAT(DECIMAL) IS THE DEFAULT 
       77 FLT-SRT FLOAT-SHORT.
       77 FLT-LNG FLOAT-LONG. 
       77 FLT-EXT FLOAT-EXTENDED.
      * THE FOLLOWING 9 TYPES ALWAYS MAP TO HFP, BFP, AND DFP.
       77 HFP-SRT FLOAT-HEX-7      VALUE 1234567.
       77 HFP-LNG FLOAT-HEX-15     VALUE 123456789012345.
       77 HFP-EXT FLOAT-HEX-30 
                  VALUE 123456789012345678901234567890.
       77 BFP-SRT FLOAT-BINARY-7   VALUE 1234567.
       77 BFP-LNG FLOAT-BINARY-16  VALUE 1234567890123456.
       77 BFP-EXT FLOAT-BINARY-34
                  VALUE 1234567890123456789012345678901234.
       77 DFP-SRT FLOAT-DECIMAL-7  VALUE 1234567.
       77 DFP-LNG FLOAT-DECIMAL-16 VALUE 1234567890123456.
       77 DFP-EXT FLOAT-DECIMAL-34
                  VALUE 1234567890123456789012345678901234.
      * THE FOLLOWING 4 TYPES DEFINE 16, 32, 64, AND 128 BINARY TYPES
      * NOTE 39 DIGIT QW LIMITED TO 34 DIGITS TO FIT IN BFP/DFP_EXT
       77 HW      COMP PIC S9(4)  VALUE 1234.
       77 FW      COMP PIC S9(9)  VALUE 123456789.
       77 DW      COMP PIC S9(18) VALUE 123456789012345.
       77 QW      COMP PIC S9(39) 
                  VALUE 1234567890123456789012345678901234.
      * THE FOLLOWING 2 TYPES DEFINE 31 DIGIT PACKED AND ZONED DECIMAL
       77 PD      COMP-3 PIC S9(31) 
                  VALUE 1234567890123456789012345678901.
       77 ZD             PIC S9(31) 
                  VALUE 1234567890123456789012345678901.
       77 P1      COMP-3 PIC S9(31) VALUE 1.           
       77 Q1      COMP   PIC S9(39) VALUE 1.
       77 Z1             PIC S9(4)  VALUE 1.           
       77 D2      COMP-2            VALUE 2.           
       77 GOOD   COMP-3 PIC 9(4)   VALUE 0.
       PROCEDURE DIVISION.
       MAINLINE.
           DISPLAY 'TESTFUN1 FUNCTIONS STARTING'
           NOTE TEST COMMENT SENTENCE
      * TEST LENGTH OF
           DISPLAY 'TEST LENGTH OF'
           MOVE LENGTH OF PTR-1 TO W1
            IF W1 = 4 PERFORM GOOD ELSE PERFORM BAD.
      * TEST ADDRESS OF
           DISPLAY 'TEST ADDRESS OF'
           MOVE ADDRESS OF ADDR-1 TO PTR-1
           MOVE ADDRESS OF ADDR-2 TO PTR-2
           SUBTRACT PTR-1 FROM PTR-2
            IF PTR-2 = 20 PERFORM GOOD ELSE PERFORM BAD.           
      * TEST NUMERIC
           DISPLAY 'TEST NUMERIC'
           MOVE 1 TO TP1
            IF TP1 = NUMERIC PERFORM GOOD ELSE PERFORM BAD.           
           MOVE SPACES TO TP1
            IF TP1 NOT = NUMERIC PERFORM GOOD ELSE PERFORM BAD.           
           MOVE LOW-VALUES TO TP1
            IF TP1 NOT = NUMERIC PERFORM GOOD ELSE PERFORM BAD.           
           MOVE HIGH-VALUES TO TP1
            IF TP1 NOT = NUMERIC PERFORM GOOD ELSE PERFORM BAD.           
           MOVE 123 TO TP2
            IF TP2 = NUMERIC PERFORM GOOD ELSE PERFORM BAD.           
           MOVE SPACES TO TP2
            IF TP2 NOT = NUMERIC PERFORM GOOD ELSE PERFORM BAD.           
           MOVE 1 TO TZ1
            IF TZ1 = NUMERIC PERFORM GOOD ELSE PERFORM BAD.           
           MOVE SPACES TO TZ1
            IF TZ1 NOT = NUMERIC PERFORM GOOD ELSE PERFORM BAD.           
           MOVE -12 TO TZ2
            IF TZ2 = NUMERIC PERFORM GOOD ELSE PERFORM BAD.           
           MOVE SPACES TO TZ2
            IF TZ2 NOT = NUMERIC PERFORM GOOD ELSE PERFORM BAD.           
           MOVE '123' TO TX3
            IF TX3 = NUMERIC PERFORM GOOD ELSE PERFORM BAD.           
           MOVE SPACES TO TX3
            IF TX3 NOT = NUMERIC PERFORM GOOD ELSE PERFORM BAD.           
      * TEST ALPHANUMERIC
           DISPLAY 'TEST ALPHANUMERIC'
           MOVE 'ABC' TO TX3
            IF TX3 = ALPHABETIC PERFORM GOOD ELSE PERFORM BAD.           
           MOVE SPACES TO TX3
           IF TX3 NOT = ALPHABETIC PERFORM GOOD ELSE PERFORM BAD.           
      * TEST TRANSFORM
           DISPLAY 'TEST TRANSFORM'
           TRANSFORM TRM1 CHARACTERS FROM 'CBA' TO '321'
           IF TRM1 = '123' PERFORM GOOD ELSE PERFORM BAD.           
      * TEST CVTQTLB CONVERT Q 128 INT TO BFP LB
           DISPLAY 'TEST CVTQTLB'
           MOVE 1  TO Q1
           MOVE Q1 TO BFP-EXT
           DISPLAY 'BFP-EXT 1 =' BFP-EXT
            IF Q1 = 1 PERFORM GOOD ELSE PERFORM BAD.
           MOVE -1  TO Q1
           MOVE Q1 TO BFP-EXT
           DISPLAY 'BFP-EXT -1 =' BFP-EXT
            IF Q1 = -1 PERFORM GOOD ELSE PERFORM BAD.
           MOVE 0  TO Q1
           MOVE Q1 TO BFP-EXT
           DISPLAY 'BFP-EXT 0 =' BFP-EXT
            IF Q1 = 0 PERFORM GOOD ELSE PERFORM BAD.
           MOVE 1234567890123456789012345678901234 TO Q1
           MOVE Q1 TO BFP-EXT
           DISPLAY 'BFP-EXT 1234567890123456789012345678901234 =' 
              BFP-EXT
            IF Q1 = 1234567890123456789012345678901234 
               PERFORM GOOD ELSE PERFORM BAD.
           MOVE 123456789012345678901234567890123456789 TO Q1
           MOVE Q1 TO BFP-EXT
           DISPLAY 'BFP-EXT 123456789012345678901234567890123456789 ='
              BFP-EXT
            IF Q1 = 123456789012345678901234567890123456789 
               PERFORM GOOD ELSE PERFORM BAD.
      * TEST CVTLBTQ CONVERT BFP LB TO Q 128 BIT INTEGER
           DISPLAY 'TEST CVTLBTQ'
           MOVE 1  TO BFP-EXT
           MOVE BFP-EXT TO Q1
           DISPLAY 'Q1 1 =' Q1
            IF Q1 = 1 PERFORM GOOD ELSE PERFORM BAD.

           MOVE -1  TO BFP-EXT
           MOVE BFP-EXT TO Q1
           DISPLAY 'Q1 -1 =' Q1
            IF Q1 = -1 PERFORM GOOD ELSE PERFORM BAD.
           MOVE 0  TO BFP-EXT
           MOVE BFP-EXT TO Q1
           DISPLAY 'Q1 0 =' Q1
            IF Q1 = 0 PERFORM GOOD ELSE PERFORM BAD.
           MOVE 1234567890123456789012345678901234 TO BFP-EXT
           MOVE BFP-EXT TO Q1
           DISPLAY 'Q1 1234567890123456789012345678901234 =' Q1
            IF Q1 = 1234567890123456789012345678901234 
               PERFORM GOOD ELSE PERFORM BAD.
      * TEST CVTLDTP  CVT LD TO PD31
           DISPLAY 'TEST CVTLDTP'
           MOVE 1  TO DFP-EXT
           MOVE DFP-EXT TO P1
           DISPLAY 'P1 1 =' P1
            IF P1 = 1 PERFORM GOOD ELSE PERFORM BAD.
           MOVE -1  TO DFP-EXT
           MOVE DFP-EXT TO P1
           DISPLAY 'P1 -1 =' P1
            IF P1 = -1 PERFORM GOOD ELSE PERFORM BAD.
           MOVE 0  TO DFP-EXT
           MOVE DFP-EXT TO P1
           DISPLAY 'P1 0 =' P1
            IF P1 = 0 PERFORM GOOD ELSE PERFORM BAD.
           MOVE 1234567890123456789012345678901 TO DFP-EXT
           MOVE DFP-EXT TO P1
           DISPLAY 'P1 1234567890123456789012345678901 =' P1
            IF P1 = 1234567890123456789012345678901 
               PERFORM GOOD ELSE PERFORM BAD.
      * TEST MPYQ 128 BIT R0-R1 * 128 BIT R2-R3
           DISPLAY 'TEST MPYQ'
           MOVE     3  TO D2
           MOVE     2  TO Z1
           MULTIPLY D2 BY Z1 
            IF Z1 = 6 PERFORM GOOD ELSE PERFORM BAD.
           MOVE     3  TO D2
           MOVE     -2 TO Z1
           MULTIPLY D2 BY Z1 
            IF Z1 = -6 PERFORM GOOD ELSE PERFORM BAD.
           MOVE     -3  TO D2
           MOVE     2 TO Z1
           MULTIPLY D2 BY Z1 
            IF Z1 = -6 PERFORM GOOD ELSE PERFORM BAD.
           MOVE     -3  TO D2
           MOVE     -2 TO Z1
           MULTIPLY D2 BY Z1 
            IF Z1 = 6 PERFORM GOOD ELSE PERFORM BAD.
           MOVE     -3  TO D2
           MOVE     -2 TO Z1
           MULTIPLY D2 BY Z1 
            IF Z1 = 6 PERFORM GOOD ELSE PERFORM BAD.
           DISPLAY 'TESTFUN1 GOOD TESTS =' GOOD
           STOP RUN.
       GOOD. 
           ADD 1 TO GOOD.
       BAD.
           MOVE 16 TO RETURN-CODE
           STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "The length of a POINTER is 4 bytes.",
  "condition": "LENGTH OF PTR-1",
  "output": {
    "PTR-1 length 4": "GOOD"
  }
},
{
  "id": "BR-002",
  "description": "The address of a 20-byte variable is 20 bytes apart from another 20-byte variable address.",
  "condition": "ADDRESS OF ADDR-2 - ADDRESS OF ADDR-1",
  "output": {
    "ADDR-1 and ADDR-2 are 20 bytes apart": "GOOD"
  }
},
{
  "id": "BR-003",
  "description": "A `NUMERIC` field set to 1 is considered `NUMERIC`.",
  "condition": "TP1 = NUMERIC",
  "output": {
    "TP1 set to 1 is NUMERIC": "GOOD"
  }
},
{
  "id": "BR-004",
  "description": "A `NUMERIC` field set to spaces is not considered `NUMERIC`.",
  "condition": "TP1 NOT = NUMERIC",
  "output": {
    "TP1 set to spaces is not NUMERIC": "GOOD"
  }
},
{
  "id": "BR-005",
  "description": "A `NUMERIC` field set to LOW_VALUES is not considered `NUMERIC`.",
  "condition": "TP1 NOT = NUMERIC",
  "output": {
    "TP1 set to LOW_VALUES is not NUMERIC": "GOOD"
  }
},
{
  "id": "BR-006",
  "description": "A `NUMERIC` field set to HIGH_VALUES is not considered `NUMERIC`.",
  "condition": "TP1 NOT = NUMERIC",
  "output": {
    "TP1 set to HIGH_VALUES is not NUMERIC": "GOOD"
  }
},
{
  "id": "BR-007",
  "description": "A `NUMERIC` field set to 123 is considered `NUMERIC`.",
  "condition": "TP2 = NUMERIC",
  "output": {
    "TP2 set to 123 is NUMERIC": "GOOD"
  }
},
{
  "id": "BR-008",
  "description": "A `NUMERIC` field set to spaces is not considered `NUMERIC`.",
  "condition": "TP2 NOT = NUMERIC",
  "output": {
    "TP2 set to spaces is not NUMERIC": "GOOD"
  }
},
{
  "id": "BR-009",
  "description": "A `NUMERIC` field set to 1 is considered `NUMERIC`.",
  "condition": "TZ1 = NUMERIC",
  "output": {
    "TZ1 set to 1 is NUMERIC": "GOOD"
  }
},
{
  "id": "BR-010",
  "description": "A `NUMERIC` field set to spaces is not considered `NUMERIC`.",
  "condition": "TZ1 NOT = NUMERIC",
  "output": {
    "TZ1 set to spaces is not NUMERIC": "GOOD"
  }
},
{
  "id": "BR-011",
  "description": "A `NUMERIC` field set to -12 is considered `NUMERIC`.",
  "condition": "TZ2 = NUMERIC",
  "output": {
    "TZ2 set to -12 is NUMERIC": "GOOD"
  }
},
{
  "id": "BR-012",
  "description": "A `NUMERIC` field set to spaces is not considered `NUMERIC`.",
  "condition": "TZ2 NOT = NUMERIC",
  "output": {
    "TZ2 set to spaces is not NUMERIC": "GOOD"
  }
},
{
  "id": "BR-013",
  "description": "A `NUMERIC` field set to '123' is considered `NUMERIC`.",
  "condition": "TX3 = NUMERIC",
  "output": {
    "TX3 set to '123' is NUMERIC": "GOOD"
  }
},
{
  "id": "BR-014",
  "description": "A `NUMERIC` field set to spaces is not considered `NUMERIC`.",
  "condition": "TX3 NOT = NUMERIC",
  "output": {
    "TX3 set to spaces is not NUMERIC": "GOOD"
  }
},
{
  "id": "BR-015",
  "description": "An `ALPHANUMERIC` field set to 'ABC' is considered `ALPHANUMERIC`.",
  "condition": "TX3 = ALPHABETIC",
  "output": {
    "TX3 set to 'ABC' is ALPHABETIC": "GOOD"
  }
},
{
  "id": "BR-016",
  "description": "An `ALPHANUMERIC` field set to spaces is not considered `ALPHANUMERIC`.",
  "condition": "TX3 NOT = ALPHABETIC",
  "output": {
    "TX3 set to spaces is not ALPHABETIC": "GOOD"
  }
},
{
  "id": "BR-017",
  "description": "Transforming 'CBA' to '321' using TRM1 is successful.",
  "condition": "TRM1 = '123'",
  "output": {
    "Transforming 'CBA' to '321' is successful": "GOOD"
  }
},
{
  "id": "BR-018",
  "description": "Converting a 128-bit integer to a BFP long binary float and back to a 128-bit integer results in the original value.",
  "condition": "Q1 = 1",
  "output": {
    "Converting 1 to BFP long binary float and back to 128-bit integer is successful": "GOOD"
  }
},
{
  "id": "BR-019",
  "description": "Converting a 128-bit integer to a BFP long binary float and back to a 128-bit integer results in the original value.",
  "condition": "Q1 = -1",
  "output": {
    "Converting -1 to BFP long binary float and back to 128-bit integer is successful": "GOOD"
  }
},
{
  "id": "BR-020",
  "description": "Converting a 128-bit integer to a BFP long binary float and back to a 128-bit integer results in the original value.",
  "condition": "Q1 = 0",
  "output": {
    "Converting 0 to BFP long binary float and back to 128-bit integer is successful": "GOOD"
  }
},
{
  "id": "BR-021",
  "description": "Converting a 128-bit integer to a BFP long binary float and back to a 128-bit integer results in the original value.",
  "condition": "Q1 = 1234567890123456789012345678901234",
  "output": {
    "Converting 1234567890123456789012345678901234 to BFP long binary float and back to 128-bit integer is successful": "GOOD"
  }
},
{
  "id": "BR-022",
  "description": "Converting a 128-bit integer to a BFP long binary float and back to a 128-bit integer results in the original value.",
  "condition": "Q1 = 123456789012345678901234567890123456789",
  "output": {
    "Converting 123456789012345678901234567890123456789 to BFP long binary float and back to 128-bit integer is successful": "GOOD"
  }
},
{
  "id": "BR-023",
  "description": "Converting a BFP long binary float to a 128-bit integer and back to a BFP long binary float results in the original value.",
  "condition": "Q1 = 1",
  "output": {
    "Converting 1 to 128-bit integer and back to BFP long binary float is successful": "GOOD"
  }
},
{
  "id": "BR-024",
  "description": "Converting a BFP long binary float to a 128-bit integer and back to a BFP long binary float results in the original value.",
  "condition": "Q1 = -1",
  "output": {
    "Converting -1 to 128-bit integer and back to BFP long binary float is successful": "GOOD"
  }
},
{
  "id": "BR-025",
  "description": "Converting a BFP long binary float to a 128-bit integer and back to a BFP long binary float results in the original value.",
  "condition": "Q1 = 0",
  "output": {
    "Converting 0 to 128-bit integer and back to BFP long binary float is successful": "GOOD"
  }
},
{
  "id": "BR-026",
  "description": "Converting a BFP long binary float to a 128-bit integer and back to a BFP long binary float results in the original value.",
  "condition": "Q1 = 1234567890123456789012345678901234",
  "output": {
    "Converting 1234567890123456789012345678901234 to 128-bit integer and back to BFP long binary float is successful": "GOOD"
  }
},
{
  "id": "BR-027",
  "description": "Converting a BFP long binary float to a 128-bit integer and back to a BFP long binary float results in the original value.",
  "condition": "Q1 = 123456789012345678901234567890123456789",
  "output": {
    "Converting 123456789012345678901234567890123456789 to 128-bit integer and back to BFP long binary float is successful": "GOOD"
  }
},
{
  "id": "BR-028",
  "description": "Converting a DFP long decimal float to a PD31 packed decimal and back to a DFP long decimal float results in the original value.",
  "condition": "P1 = 1",
  "output": {
    "Converting 1 to PD31 packed decimal and back to DFP long decimal float is successful": "GOOD"
  }
},
{
  "id": "BR-029",
  "description": "Converting a DFP long decimal float to a PD31 packed decimal and back to a DFP long decimal float results in the original value.",
  "condition": "P1 = -1",
  "output": {
    "Converting -1 to PD31 packed decimal and back to DFP long decimal float is successful": "GOOD"
  }
},
{
  "id": "BR-030",
  "description": "Converting a DFP long decimal float to a PD31 packed decimal and back to a DFP long decimal float results in the original value.",
  "condition": "P1 = 0",
  "output": {
    "Converting 0 to PD31 packed decimal and back to DFP long decimal float is successful": "GOOD"
  }
},
{
  "id": "BR-031",
  "description": "Converting a DFP long decimal float to a PD31 packed decimal and back to a DFP long decimal float results in the original value.",
  "condition": "P1 = 1234567890123456789012345678901",
  "output": {
    "Converting 1234567890123456789012345678901 to PD31 packed decimal and back to DFP long decimal float is successful": "GOOD"
  }
},
{
  "id": "BR-032",
  "description": "Multiplying two 128-bit integers results in the correct 128-bit product.",
  "condition": "Z1 = 6",
  "output": {
    "Multiplying 3 and 2 results in 6": "GOOD"
  }
},
{
  "id": "BR-033",
  "description": "Multiplying two 128-bit integers results in the correct 128-bit product.",
  "condition": "Z1 = -6",
  "output": {
    "Multiplying 3 and -2 results in -6": "GOOD"
  }
},
{
  "id": "BR-034",
  "description": "Multiplying two 128-bit integers results in the correct 128-bit product.",
  "condition": "Z1 = -6",
  "output": {
    "Multiplying -3 and 2 results in -6": "GOOD"
  }
},
{
  "id": "BR-035",
  "description": "Multiplying two 128-bit integers results in the correct 128-bit product.",
  "condition": "Z1 = 6",
  "output": {
    "Multiplying -3 and -2 results in 6": "GOOD"
  }
},
{
  "id": "BR-036",
  "description": "Multiplying two 128-bit integers results in the correct 128-bit product.",
  "condition": "Z1 = 6",
  "output": {
    "Multiplying -3 and -2 results in 6": "GOOD"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTSIX1.
       AUTHOR.        DON HIGGINS.
       DATE-WRITTEN.  01/08/09.
      * TEST GO TO DEPENDING ON                                                 
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77  IF1   COMP   PIC S9(9)  VALUE 0.
       77  IG1   COMP   PIC S9(18) VALUE 0.
       77  IH1   COMP   PIC S9(4)  VALUE 0.
       77  IP1   COMP-3 PIC S9(9)  VALUE 0.
       77  IZ1          PIC S9(9)  VALUE 0.
       PROCEDURE DIVISION.
       MAINLINE.
           DISPLAY 'TESTGO1 STARTING'
           MOVE 1 TO IF1                
           GO TO P1 P2 DEPENDING ON IF1
           MOVE 16 TO RETURN-CODE
           DISPLAY 'ERROR BEFORE P2'.
       P2.
           MOVE 16 TO RETURN-CODE
           DISPLAY 'ERROR AT PE2'.
       P1.    
           MOVE 2 TO IG1
           GO TO P3 P4 DEPENDING ON IG1
           MOVE 16 TO RETURN-CODE
           DISPLAY 'ERROR BEFORE P3'.
       P3. 
           MOVE 16 TO RETURN-CODE
           DISPLAY 'ERROR AT P3'.
       P4. 
           MOVE 0 TO IH1
           GO TO P5 DEPENDING ON IH1
           GO TO P6.
       P5.
           MOVE 16 TO RETURN-CODE
           DISPLAY 'ERROR AT P5'.
       P6.
           MOVE 2 TO IP1
           GO TO P7 DEPENDING ON IP1
           GO TO P8.
       P7.
           MOVE 16 TO RETURN-CODE
           DISPLAY 'ERROR AT P7'.
       P8.
           MOVE 1 TO IZ1
           GO TO P10 DEPENDING ON IZ1
           MOVE 16 TO RETURN-CODE
           DISPLAY 'ERROR BEFORE P10'.
       P10.
           DISPLAY 'TESTGO1 ENDED OK'
           STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "The value of IF1 must be 1 to go to procedure P1, and 2 to go to procedure P2.",
  "condition": "IF1",
  "output": {
    "P1": "GO TO P1",
    "P2": "GO TO P2"
  }
},
{
  "id": "BR-002",
  "description": "The value of IG1 must be 2 to go to procedure P4, and anything else to go to procedure P3.",
  "condition": "IG1",
  "output": {
    "P3": "GO TO P3",
    "P4": "GO TO P4"
  }
},
{
  "id": "BR-003",
  "description": "The value of IH1 must be 0 to go to procedure P5, and anything else to go to procedure P6.",
  "condition": "IH1",
  "output": {
    "P5": "GO TO P5",
    "P6": "GO TO P6"
  }
},
{
  "id": "BR-004",
  "description": "The value of IP1 must be 2 to go to procedure P7, and anything else to go to procedure P8.",
  "condition": "IP1",
  "output": {
    "P7": "GO TO P7",
    "P8": "GO TO P8"
  }
},
{
  "id": "BR-005",
  "description": "The value of IZ1 must be 1 to go to procedure P10.",
  "condition": "IZ1",
  "output": {
    "P10": "GO TO P10"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTIF2.
       AUTHOR.        DON HIGGINS.
       DATE-WRITTEN.  08/15/09.
      * TEST COMPLETE IF WITH OMITTED OPERANDS, OPTIMIZED OR, ETC.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77  A PIC X VALUE 'A'.
       77  B PIC X VALUE 'B'.
       77  C PIC X VALUE 'C'.
       77  D PIC X VALUE 'A'.
       77  ERRORS  PIC X VALUE 'F'.
       77  GOOD COMP-3 PIC S9(4) VALUE 0.
       PROCEDURE DIVISION.
       MAINLINE.
           DISPLAY 'TESTIF2 STARTING'
     1     IF A = B OR > 'B' OR < 'B' 
           DISPLAY 'A=B OR > ''B'' OR < ''B''' 
           PERFORM GOOD ELSE PERFORM BAD.
     2     IF A = B OR 'C' OR 'A' 
           DISPLAY 'A=B OR ''C'' OR ''A''' 
           PERFORM GOOD ELSE PERFORM BAD.
     3     IF A = B OR C OR D 
           DISPLAY 'A=B OR C OR D' 
           PERFORM GOOD ELSE PERFORM BAD.
     4     IF A = B OR A = C OR A = D 
           DISPLAY 'A=B OR A=C OR A=D'     
           PERFORM GOOD ELSE PERFORM BAD.
           DISPLAY 'TESTIF2 GOOD TESTS =' GOOD
           STOP RUN.
       GOOD.
           ADD 1 TO GOOD.
       BAD.
           MOVE 16 TO RETURN-CODE
           STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "If expression A = B, it returns True",
  "condition": "A = B",
  "output": {
    "true": "Perform GOOD"
  }
},
{
  "id": "BR-002",
  "description": "If expression A > 'B', it returns True",
  "condition": "A > 'B'",
  "output": {
    "true": "Perform GOOD"
  }
},
{
  "id": "BR-003",
  "description": "If expression A < 'B', it returns True",
  "condition": "A < 'B'",
  "output": {
    "true": "Perform GOOD"
  }
},
{
  "id": "BR-004",
  "description": "If expression A = B OR 'C', it returns True",
  "condition": "A = B OR 'C'",
  "output": {
    "true": "Perform GOOD"
  }
},
{
  "id": "BR-005",
  "description": "If expression A = B OR A, it returns True",
  "condition": "A = B OR 'A'",
  "output": {
    "true": "Perform GOOD"
  }
},
{
  "id": "BR-006",
  "description": "If expression A = B OR C, it returns True",
  "condition": "A = B OR C",
  "output": {
    "true": "Perform GOOD"
  }
},
{
  "id": "BR-007",
  "description": "If expression A = B OR D, it returns True",
  "condition": "A = B OR D",
  "output": {
    "true": "Perform GOOD"
  }
},
{
  "id": "BR-008",
  "description": "If expression A = C OR A, it returns True",
  "condition": "A = C OR 'A'",
  "output": {
    "true": "Perform GOOD"
  }
},
{
  "id": "BR-009",
  "description": "If expression A = D OR A, it returns True",
  "condition": "A = D OR 'A'",
  "output": {
    "true": "Perform GOOD"
  }
},
{
  "id": "BR-010",
  "description": "If expression A = B OR A = C OR A = D, it returns True",
  "condition": "A = B OR A = C OR A = D",
  "output": {
    "true": "Perform GOOD"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTIF3.
       AUTHOR.        DON HIGGINS.
       DATE-WRITTEN.  04/12/12.
      * TEST IF WITH (,,,) AND/OR (....)                                   
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77  A PIC X VALUE 'A'.
       77  B PIC X VALUE 'B'.
       77  C PIC X VALUE 'C'.
       77  D PIC X VALUE 'D'.
       77  ERRORS  PIC X VALUE 'F'.
       77  GOOD COMP-3 PIC S9(4) VALUE 0.
       PROCEDURE DIVISION.
       MAINLINE.
           DISPLAY 'TESTIF3 STARTING'
     1     IF (A = 'A' OR B = ' ') AND (A = ' ' OR B = 'B') 
               DISPLAY 'TEST 1'
               PERFORM GOOD ELSE PERFORM BAD.
     2     IF NOT ((A = ' ' OR B = ' ') AND (A = ' ' OR B = 'B'))
               DISPLAY 'TEST 2'
               PERFORM GOOD ELSE PERFORM BAD.
     3     IF (A = 'A' AND B = 'B') AND (C = 'C' AND D = 'D')
               DISPLAY 'TEST 3'
               PERFORM GOOD ELSE PERFORM BAD.
     4     IF (A = 'A' AND B = 'B') OR (C = 'C' AND D = 'D')
                DISPLAY 'TEST 4'
                PERFORM GOOD ELSE PERFORM BAD.
     5     IF NOT ((A = 'A' AND B = ' ') OR (C = 'C' AND D = ' '))
                DISPLAY 'TEST 5'
                PERFORM GOOD ELSE PERFORM BAD.    
     6     IF (A = 'A' OR B = ' ') AND (C = ' ' OR D = 'D') 
               DISPLAY 'TEST 6'
               PERFORM GOOD ELSE PERFORM BAD.
           DISPLAY 'TESTIF2 GOOD TESTS =' GOOD
           STOP RUN.
       GOOD.
           ADD 1 TO GOOD.
       BAD.
           DISPLAY 'ERROR AFTER ' GOOD  ' GOOD TESTS'
           MOVE 16 TO RETURN-CODE
           STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "A OR B AND C OR D is true when either A or B is true, and either C or D is true.",
  "condition": "(A = 'A' OR B = ' ') AND (C = ' ' OR D = 'D')",
  "output": {
    "true": "TEST 1",
    "false": "ERROR AFTER x GOOD TESTS"
  }
},
{
  "id": "BR-002",
  "description": "NOT (A OR B) AND NOT (C OR D) is true when neither A nor B are true, and neither C nor D are true.",
  "condition": "NOT ((A = ' ' OR B = ' ') AND (A = ' ' OR B = 'B'))",
  "output": {
    "true": "TEST 2",
    "false": "ERROR AFTER x GOOD TESTS"
  }
},
{
  "id": "BR-003",
  "description": "A AND B AND C AND D is true only when all 4 conditions are true.",
  "condition": "(A = 'A' AND B = 'B') AND (C = 'C' AND D = 'D')",
  "output": {
    "true": "TEST 3",
    "false": "ERROR AFTER x GOOD TESTS"
  }
},
{
  "id": "BR-004",
  "description": "A AND B OR C AND D is true when either the first set of conditions A and B are both true, or the second set of conditions C and D are both true.",
  "condition": "(A = 'A' AND B = 'B') OR (C = 'C' AND D = 'D')",
  "output": {
    "true": "TEST 4",
    "false": "ERROR AFTER x GOOD TESTS"
  }
},
{
  "id": "BR-005",
  "description": "NOT (A AND B OR C AND D) is true when both sets of conditions are false.",
  "condition": "NOT ((A = 'A' AND B = ' ') OR (C = 'C' AND D = ' '))",
  "output": {
    "true": "TEST 5",
    "false": "ERROR AFTER x GOOD TESTS"
  }
},
{
  "id": "BR-006",
  "description": "A OR B AND C OR D is true when either A or B is true, and either C or D is true.",
  "condition": "(A = 'A' OR B = ' ') AND (C = ' ' OR D = 'D')",
  "output": {
    "true": "TEST 6",
    "false": "ERROR AFTER x GOOD TESTS"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTISP1.
       AUTHOR.        DON HIGGINS.
      * TEST INSPECT TALLYING, REPLACING, CONVERTING.
      * 03/17/09 DSH INITIAL CODING
      * 01/25/12 DSH RPI 1181 ADD TEST 22 INSPECT REPLACING ALL LOW-VALUES BY SPACES
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  RECORD PIC X(80) VALUE 'AACDDGGGA'.
        77  COUNT  COMP PIC S9(9).
        77  GOOD   COMP PIC S9(9) VALUE 0.
       PROCEDURE DIVISION.
       MAINLINE.
           MOVE 0 TO COUNT
     1     INSPECT RECORD TALLYING COUNT FOR CHARACTERS BEFORE 'D'
           IF COUNT NOT = 3 PERFORM BAD ELSE PERFORM GOOD.
           MOVE 0 TO COUNT
     2     INSPECT RECORD TALLYING COUNT FOR CHARACTERS AFTER 'C'
           IF COUNT NOT = 77 PERFORM BAD ELSE PERFORM GOOD.
           MOVE 0 TO COUNT
     3     INSPECT RECORD TALLYING COUNT FOR ALL 'A' 
           IF COUNT NOT = 3 PERFORM BAD ELSE PERFORM GOOD.
           MOVE 0 TO COUNT
     4     INSPECT RECORD TALLYING COUNT FOR ALL 'A' BEFORE 'D'
           IF COUNT NOT = 2 PERFORM BAD ELSE PERFORM GOOD.
           MOVE 0 TO COUNT
     5     INSPECT RECORD TALLYING COUNT FOR ALL 'A' AFTER 'C'
           IF COUNT NOT = 1 PERFORM BAD ELSE PERFORM GOOD.
           MOVE 0 TO COUNT
     6     INSPECT RECORD TALLYING COUNT FOR LEADING 'A' 
           IF COUNT NOT = 2 PERFORM BAD ELSE PERFORM GOOD.
           MOVE 0 TO COUNT
     7     INSPECT RECORD TALLYING COUNT FOR LEADING 'B' 
           IF COUNT NOT = 0 PERFORM BAD ELSE PERFORM GOOD.
           MOVE 0 TO COUNT
     8     INSPECT RECORD TALLYING COUNT FOR LEADING 'D' AFTER 'C'
           IF COUNT NOT = 2 PERFORM BAD ELSE PERFORM GOOD.
           MOVE 0 TO COUNT
     9     INSPECT RECORD TALLYING COUNT FOR LEADING 'E' AFTER 'C'
           IF COUNT NOT = 0 PERFORM BAD ELSE PERFORM GOOD.
    10     INSPECT RECORD REPLACING CHARACTERS BY 'X' BEFORE 'C'
           IF RECORD NOT = 'XXCDDGGGA' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 'AACDDGGGA' TO RECORD
    11     INSPECT RECORD REPLACING CHARACTERS BY ' ' AFTER 'C'
           IF RECORD NOT = 'AAC'       PERFORM BAD ELSE PERFORM GOOD.
           MOVE 'AACDDGGGA' TO RECORD
    12     INSPECT RECORD REPLACING ALL 'A' BY 'X' BEFORE 'C'
           IF RECORD NOT = 'XXCDDGGGA' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 'AACDDGGGA' TO RECORD
    13     INSPECT RECORD REPLACING ALL 'A' BY 'X' AFTER 'C'
           IF RECORD NOT = 'AACDDGGGX' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 'AACDDGGGA' TO RECORD
    14     INSPECT RECORD REPLACING LEADING 'A' BY 'X' BEFORE 'C'
           IF RECORD NOT = 'XXCDDGGGA' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 'AACDDGGGA' TO RECORD
    15     INSPECT RECORD REPLACING LEADING 'D' BY 'X' AFTER 'C'
           IF RECORD NOT = 'AACXXGGGA' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 'AACDDGGGA' TO RECORD
    16     INSPECT RECORD REPLACING FIRST 'A' BY 'X' BEFORE 'C'
           IF RECORD NOT = 'XACDDGGGA' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 'AACDDGGGA' TO RECORD
    17     INSPECT RECORD REPLACING FIRST 'G' BY 'X' AFTER 'C'
           IF RECORD NOT = 'AACDDXGGA' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 'AACDDGGGA' TO RECORD
    18     INSPECT RECORD CONVERTING 'AC' TO '12' BEFORE 'D'
           IF RECORD NOT = '112DDGGGA' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 'AACDDGGGA' TO RECORD
    19     INSPECT RECORD CONVERTING 'AD' TO '12' AFTER 'C'
           IF RECORD NOT = 'AAC22GGG1' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 'AACDDGGGA' TO RECORD
    20     INSPECT RECORD CONVERTING 'AD' TO '12' 
           IF RECORD NOT = '11C22GGG1' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 'AACDDGGGA' TO RECORD
    21     TRANSFORM RECORD CHARACTERS FROM 'AD' TO '12' 
           IF RECORD NOT = '11C22GGG1' PERFORM BAD ELSE PERFORM GOOD.
           MOVE LOW-VALUES TO RECORD
    22     INSPECT RECORD REPLACING ALL LOW-VALUES BY SPACES 
           IF RECORD NOT = SPACES PERFORM BAD ELSE PERFORM GOOD.
           DISPLAY 'TESTISP1 GOOD TESTS =' GOOD 
           STOP RUN.
       GOOD.
           ADD 1 TO GOOD
       BAD.
           MOVE 16 TO RETURN-CODE
           STOP RUN.
[/INST]{
  "id": "BR-002",
  "description": "The number of characters before 'D' in the string 'AACDDGGGA' should be 3.",
  "condition": "Inspect RECORD tallying count for characters before 'D'",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}
{
  "id": "BR-003",
  "description": "The number of characters after 'C' in the string 'AACDDGGGA' should be 77.",
  "condition": "Inspect RECORD tallying count for characters after 'C'",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}
{
  "id": "BR-004",
  "description": "The string 'AACDDGGGA' should contain exactly 3 occurrences of the character 'A'.",
  "condition": "Inspect RECORD tallying count for all 'A'",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}
{
  "id": "BR-005",
  "description": "There should be exactly 2 occurrences of the character 'A' before 'D' in the string 'AACDDGGGA'.",
  "condition": "Inspect RECORD tallying count for all 'A' before 'D'",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}
{
  "id": "BR-006",
  "description": "There should be exactly 1 occurrence of the character 'A' after 'C' in the string 'AACDDGGGA'.",
  "condition": "Inspect RECORD tallying count for all 'A' after 'C'",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}
{
  "id": "BR-007",
  "description": "The string 'AACDDGGGA' should start with exactly 2 occurrences of the character 'A'.",
  "condition": "Inspect RECORD tallying count for leading 'A'",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}
{
  "id": "BR-008",
  "description": "The string 'AACDDGGGA' should not start with any occurrences of the character 'B'.",
  "condition": "Inspect RECORD tallying count for leading 'B'",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}
{
  "id": "BR-009",
  "description": "The string 'AACDDGGGA' should have exactly 2 occurrences of the character 'D' after 'C'.",
  "condition": "Inspect RECORD tallying count for leading 'D' after 'C'",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}
{
  "id": "BR-010",
  "description": "The string 'AACDDGGGA' should not have any occurrences of the character 'E' after 'C'.",
  "condition": "Inspect RECORD tallying count for leading 'E' after 'C'",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}
{
  "id": "BR-011",
  "description": "Replacing all characters before 'C' in the string 'AACDDGGGA' with 'X' should result in the string 'XXCDDGGGA'.",
  "condition": "Inspect RECORD replacing characters by 'X' before 'C'",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}
{
  "id": "BR-012",
  "description": "Replacing all characters after 'C' in the string 'AACDDGGGA' with ' ' should result in the string 'AAC       '.",
  "condition": "Inspect RECORD replacing characters by ' ' after 'C'",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}
{
  "id": "BR-013",
  "description": "Replacing all occurrences of the character 'A' before 'C' in the string 'AACDDGGGA' with 'X' should result in the string 'XXCDDGGGA'.",
  "condition": "Inspect RECORD replacing all 'A' by 'X' before 'C'",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}
{
  "id": "BR-014",
  "description": "Replacing all occurrences of the character 'A' after 'C' in the string 'AACDDGGGA' with 'X' should result in the string 'AACDDGGGX'.",
  "condition": "Inspect RECORD replacing all 'A' by 'X' after 'C'",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}
{
  "id": "BR-015",
  "description": "Replacing the first occurrence of the character 'A' before 'C' in the string 'AACDDGGGA' with 'X' should result in the string 'XACDDGGGA'.",
  "condition": "Inspect RECORD replacing leading 'A' by 'X' before 'C'",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}
{
  "id": "BR-016",
  "description": "Replacing the first occurrence of the character 'D' after 'C' in the string 'AACDDGGGA' with 'X' should result in the string 'AACXXGGGA'.",
  "condition": "Inspect RECORD replacing leading 'D' by 'X' after 'C'",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}
{
  "id": "BR-017",
  "description": "Replacing the first occurrence of the character 'G' after 'C' in the string 'AACDDGGGA' with 'X' should result in the string 'AACDDXGGA'.",
  "condition": "Inspect RECORD replacing first 'G' by 'X' after 'C'",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}
{
  "id": "BR-018",
  "description": "Converting the substring 'AC' to '12' before 'D' in the string 'AACDDGGGA' should result in the string '112DDGGGA'.",
  "condition": "Inspect RECORD converting 'AC' to '12' before 'D'",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}
{
  "id": "BR-019",
  "description": "Converting the substring 'AD' to '12' after 'C' in the string 'AACDDGGGA' should result in the string 'AAC22GGG1'.",
  "condition": "Inspect RECORD converting 'AD' to '12' after 'C'",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}
{
  "id": "BR-020",
  "description": "Converting all occurrences of the substring 'AD' to '12' in the string 'AACDDGGGA' should result in the string '11C22GGG1'.",
  "condition": "Inspect RECORD converting 'AD' to '12'",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}
{
  "id": "BR-021",
  "description": "Transforming the substring 'AD' to '12' in the string 'AACDDGGGA' should result in the string '11C22GGG1'.",
  "condition": "Transform RECORD characters from 'AD' to '12'",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}
{
  "id": "BR-022",
  "description": "Replacing all occurrences of low-value characters in the string 'AACDDGGGA' with spaces should result in the string '        '.",
  "condition": "Inspect RECORD replacing all low-values by spaces",
  "output": {
    "correct": "perform good",
    "incorrect": "perform bad"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTMOV1.
       AUTHOR.        DON HIGGINS.
      * TEST MOVE.
      ***************************************************************
      * 01/26/12 DSH RPI 1181 ADD TEST 21
      ***************************************************************
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  ABCDEF PIC X(6) VALUE 'ABCDEF'.
       01  ABC    PIC X(3) REDEFINES ABCDEF OCCURS 2.
        77  NF1    COMP PIC S9(9).
        77  DF1    PIC Z(9).
        77  DF2    PIC Z(8)9.
        77  DF3    PIC ZZZ,ZZZ,ZZ9.
        77  NH1    COMP PIC S9(4).
        77  DH1    PIC Z(4).
        77  DH2    PIC Z(3)9.
        77  NP1    COMP-3 PIC S9.
        77  NP2    COMP-3 PIC S9(4).
        77  DP1    PIC Z.
        77  DP2    PIC Z(3)9.
        77  DP3    PIC ZZ-99.
        77  FLD1   PIC XX VALUE  'XY'.
        77  FLD2   PIC XXX VALUE 'ABC'.
        77  GOOD   COMP PIC S9(9) VALUE 0..
       77 SUB1 PIC 9.
       PROCEDURE DIVISION.
       MAINLINE.
           MOVE 0 TO NF1
     1     MOVE NF1 TO DF1                                           
           IF DF1 NOT = '         ' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 1 TO NF1
     2     MOVE NF1 TO DF1                                            
           IF DF1 NOT = '        1' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 0 TO NF1
     3     MOVE NF1 TO DF2                                            
           IF DF2 NOT = '        0' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 123456789 TO NF1
     4     MOVE NF1 TO DF2                                            
           IF DF2 NOT = '123456789' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 0 TO NF1
     5     MOVE NF1 TO DF3                                            
           IF DF3 NOT = '          0' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 123456789 TO NF1
     6     MOVE NF1 TO DF3                                            
           IF DF3 NOT = '123,456,789' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 0 TO NH1
     7     MOVE NH1 TO DH1                                            
           IF DH1 NOT = '    ' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 1 TO NH1
     8     MOVE NH1 TO DH1                                            
           IF DH1 NOT = '   1' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 0 TO NH1
     9     MOVE NH1 TO DH2                                            
           IF DH2 NOT = '   0' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 1234 TO NH1
    10     MOVE NH1 TO DH2                                            
           IF DH2 NOT = '1234' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 0 TO NP1
    11     MOVE NP1 TO DP1                                           
           IF DP1 NOT = ' ' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 1 TO NP1
    12     MOVE NP1 TO DP1                                            
           IF DP1 NOT = '1' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 0 TO NP1
    13     MOVE NP1 TO DP2                                            
           IF DP2 NOT = '   0' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 0 TO NP2
    14     MOVE NP2 TO DP2                                            
           IF DP2 NOT = '   0' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 1234 TO NP2
    15     MOVE NP2 TO DP2                                            
           IF DP2 NOT = '1234' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 12 TO NP2
    16     MOVE NP2 TO DP3                                            
           IF DP3 NOT = '   12' PERFORM BAD ELSE PERFORM GOOD.
           MOVE 1234 TO NP2
    17     MOVE NP2 TO DP3                                            
           IF DP3 NOT = '12-34' PERFORM BAD ELSE PERFORM GOOD.
    18     MOVE ABCDEF(2:1) TO ABCDEF(5:1)
           IF ABCDEF NOT = 'ABCDBF' PERFORM BAD ELSE PERFORM GOOD.
    19     IF ABC(1)(2:1) NOT = ABC(2)(2:1)
               PERFORM BAD ELSE PERFORM GOOD.
    20     MOVE ABC(1)(2:2) TO ABC(2)(2:2)
           IF ABC(2) NOT = 'DBC' PERFORM BAD ELSE PERFORM GOOD.
    21     MOVE FLD1 TO FLD2(2:2)
           IF FLD2 NOT = 'AXY' PERFORM BAD ELSE PERFORM GOOD.
    22     MOVE 2 TO SUB1
           MOVE '12' TO FLD2(SUB1:2)
           IF FLD2 NOT = 'A12' PERFORM BAD ELSE PERFORM GOOD.
    23     MOVE 1 TO SUB1
            MOVE '12' TO FLD2(SUB1+1:2)
           IF FLD2 NOT = 'A12' PERFORM BAD ELSE PERFORM GOOD.
    24     MOVE 3 TO SUB1
            MOVE '12' TO FLD2(SUB1 -1:2)
           IF FLD2 NOT = 'A12' PERFORM BAD ELSE PERFORM GOOD.
       WRAP-UP.
           DISPLAY 'TESTMOV1 GOOD TESTS =' GOOD 
           STOP RUN.
       GOOD.
           ADD 1 TO GOOD
       BAD.
           DISPLAY 'TESTMOV1 GOOD TESTS =' GOOD 'BAD TESTS=1'.
           MOVE 16 TO RETURN-CODE
           STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "All numeric fields should default to zero or spaces",
  "condition": "1st char of field is 0 or space",
  "output": {
    "valid": "Move is working properly",
    "invalid": "Move is NOT working properly"
  }
}
{
  "id": "BR-002",
  "description": "9 digit numeric fields should move without truncation",
  "condition": "the 9-digit field has the same value before and after the move",
  "output": {
    "valid": "Move is working properly",
    "invalid": "Move is NOT working properly"
  }
}
{
  "id": "BR-003",
  "description": "Numeric fields should have the comma at the appropriate location",
  "condition": "there are commas at every 3rd position from the right",
  "output": {
    "valid": "Move is working properly",
    "invalid": "Move is NOT working properly"
  }
}
{
  "id": "BR-004",
  "description": "All alpha fields should default to spaces",
  "condition": "1st char of field is space",
  "output": {
    "valid": "Move is working properly",
    "invalid": "Move is NOT working properly"
  }
}
{
  "id": "BR-005",
  "description": "3-character alpha fields should move without truncation",
  "condition": "the 3-character alpha field has the same value before and after the move",
  "output": {
    "valid": "Move is working properly",
    "invalid": "Move is NOT working properly"
  }
}
{
  "id": "BR-006",
  "description": "2-character fields can only be moved into character positions 2 and up",
  "condition": "move of 2-character field does not start in position 1",
  "output": {
    "valid": "Move is working properly",
    "invalid": "Move is NOT working properly"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTMOV1.
       AUTHOR.        DON HIGGINS.
      * TEST MOVE ALIGNMENT  FOR NON FP TYPES
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        01  DF30   PIC ' ZZ9.'.
        01  DF31   PIC ' ZZ9.9'.
        01  DF32   PIC ' ZZ9.99'.
        77  ZF30   PIC S9(3)    VALUE 123.
        77  ZF31   PIC S9(3)V9  VALUE 123.4.
        77  ZF32   PIC S9(3)V99 VALUE 123.45.
        77  PF30   COMP-3 PIC S9(3)    VALUE 123.
        77  PF31   COMP-3 PIC S9(3)V9  VALUE 123.4.
        77  PF32   COMP-3 PIC S9(3)V99 VALUE 123.45.        
        77  HF30   COMP   PIC S9(3)    VALUE 123.
        77  HF31   COMP   PIC S9(3)V9  VALUE 123.4.
        77  HF32   COMP   PIC S9(2)V99 VALUE 23.45.
        77  FF30   COMP   PIC S9(6)    VALUE 123.
        77  FF31   COMP   PIC S9(6)V9  VALUE 123.4.
        77  FF32   COMP   PIC S9(6)V99 VALUE 123.45.
        77  GF30   COMP   PIC S9(16)    VALUE 123.
        77  GF31   COMP   PIC S9(16)V9  VALUE 123.4.
        77  GF32   COMP   PIC S9(16)V99 VALUE 23.45.
        77  QF30   COMP   PIC S9(29)    VALUE 123.
        77  QF31   COMP   PIC S9(29)V9  VALUE 123.4.
        77  QF32   COMP   PIC S9(29)V99 VALUE 123.45.
        77  GOOD   COMP PIC S9(9) VALUE 0.
       PROCEDURE DIVISION.
       MAINLINE.
    Z1     MOVE ZF30 TO DF30                                           
           IF DF30 NOT = ' 123'     PERFORM BAD ELSE PERFORM GOOD.
    Z2     MOVE ZF30 TO DF31                                           
           IF DF31 NOT = ' 123.0'   PERFORM BAD ELSE PERFORM GOOD.      
    Z3     MOVE ZF30 TO DF32                                           
           IF DF32 NOT = ' 123.00'  PERFORM BAD ELSE PERFORM GOOD.
    Z4     MOVE ZF31 TO DF30                                           
           IF DF30 NOT = ' 123'     PERFORM BAD ELSE PERFORM GOOD.
    Z5     MOVE ZF31 TO DF31                                           
           IF DF31 NOT = ' 123.4'   PERFORM BAD ELSE PERFORM GOOD.      
    Z6     MOVE ZF31 TO DF32                                           
           IF DF32 NOT = ' 123.40'  PERFORM BAD ELSE PERFORM GOOD.
    Z7     MOVE ZF32 TO DF30                                           
           IF DF30 NOT = ' 123'     PERFORM BAD ELSE PERFORM GOOD.
    Z8     MOVE ZF32 TO DF31                                           
           IF DF31 NOT = ' 123.4'   PERFORM BAD ELSE PERFORM GOOD.      
    Z9     MOVE ZF32 TO DF32                                           
           IF DF32 NOT = ' 123.45'  PERFORM BAD ELSE PERFORM GOOD.     
    P1     MOVE PF30 TO DF30                                           
            IF DF30 NOT = ' 123'     PERFORM BAD ELSE PERFORM GOOD.
    P2     MOVE PF30 TO DF31                                           
            IF DF31 NOT = ' 123.0'   PERFORM BAD ELSE PERFORM GOOD.      
    P3     MOVE PF30 TO DF32                                           
            IF DF32 NOT = ' 123.00'  PERFORM BAD ELSE PERFORM GOOD.
    P4     MOVE PF31 TO DF30                                           
            IF DF30 NOT = ' 123'     PERFORM BAD ELSE PERFORM GOOD.
    P5     MOVE PF31 TO DF31                                           
            IF DF31 NOT = ' 123.4'   PERFORM BAD ELSE PERFORM GOOD.      
    P6     MOVE PF31 TO DF32                                           
            IF DF32 NOT = ' 123.40'  PERFORM BAD ELSE PERFORM GOOD.
    P7     MOVE PF32 TO DF30                                           
            IF DF30 NOT = ' 123'     PERFORM BAD ELSE PERFORM GOOD.
    P8     MOVE PF32 TO DF31                                           
            IF DF31 NOT = ' 123.4'   PERFORM BAD ELSE PERFORM GOOD.      
    P9     MOVE PF32 TO DF32                                           
            IF DF32 NOT = ' 123.45'  PERFORM BAD ELSE PERFORM GOOD.     
    H1     MOVE HF30 TO DF30                                           
           IF DF30 NOT = ' 123'     PERFORM BAD ELSE PERFORM GOOD.
    H2     MOVE HF30 TO DF31                                           
           IF DF31 NOT = ' 123.0'   PERFORM BAD ELSE PERFORM GOOD.      
    H3     MOVE HF30 TO DF32                                           
           IF DF32 NOT = ' 123.00'  PERFORM BAD ELSE PERFORM GOOD.
    H4     MOVE HF31 TO DF30                                           
           IF DF30 NOT = ' 123'     PERFORM BAD ELSE PERFORM GOOD.
    H5     MOVE HF31 TO DF31                                           
           IF DF31 NOT = ' 123.4'   PERFORM BAD ELSE PERFORM GOOD.      
    H6     MOVE HF31 TO DF32                                           
           IF DF32 NOT = ' 123.40'  PERFORM BAD ELSE PERFORM GOOD.
    H7     MOVE HF32 TO DF30                                           
           IF DF30 NOT = '  23'     PERFORM BAD ELSE PERFORM GOOD.
    H8     MOVE HF32 TO DF31                                           
           IF DF31 NOT = '  23.4'   PERFORM BAD ELSE PERFORM GOOD.      
    H9     MOVE HF32 TO DF32                                           
           IF DF32 NOT = '  23.45'  PERFORM BAD ELSE PERFORM GOOD.     
    F1     MOVE FF30 TO DF30                                           
            IF DF30 NOT = ' 123'     PERFORM BAD ELSE PERFORM GOOD.
    F2     MOVE FF30 TO DF31                                           
            IF DF31 NOT = ' 123.0'   PERFORM BAD ELSE PERFORM GOOD.      
    F3     MOVE FF30 TO DF32                                           
            IF DF32 NOT = ' 123.00'  PERFORM BAD ELSE PERFORM GOOD.
    F4     MOVE FF31 TO DF30                                           
            IF DF30 NOT = ' 123'     PERFORM BAD ELSE PERFORM GOOD.
    F5     MOVE FF31 TO DF31                                           
            IF DF31 NOT = ' 123.4'   PERFORM BAD ELSE PERFORM GOOD.      
    F6     MOVE FF31 TO DF32                                           
            IF DF32 NOT = ' 123.40'  PERFORM BAD ELSE PERFORM GOOD.
    F7     MOVE FF32 TO DF30                                           
            IF DF30 NOT = ' 123'     PERFORM BAD ELSE PERFORM GOOD.
    F8     MOVE FF32 TO DF31                                           
            IF DF31 NOT = ' 123.4'   PERFORM BAD ELSE PERFORM GOOD.      
    F9     MOVE FF32 TO DF32                                           
            IF DF32 NOT = ' 123.45'  PERFORM BAD ELSE PERFORM GOOD. 
    G1     MOVE GF30 TO DF30                                           
           IF DF30 NOT = ' 123'     PERFORM BAD ELSE PERFORM GOOD.
    G2     MOVE GF30 TO DF31                                           
           IF DF31 NOT = ' 123.0'   PERFORM BAD ELSE PERFORM GOOD.      
    G3     MOVE GF30 TO DF32                                           
           IF DF32 NOT = ' 123.00'  PERFORM BAD ELSE PERFORM GOOD.
    G4     MOVE GF31 TO DF30                                           
           IF DF30 NOT = ' 123'     PERFORM BAD ELSE PERFORM GOOD.
    G5     MOVE GF31 TO DF31                                           
           IF DF31 NOT = ' 123.4'   PERFORM BAD ELSE PERFORM GOOD.      
    G6     MOVE GF31 TO DF32                                           
           IF DF32 NOT = ' 123.40'  PERFORM BAD ELSE PERFORM GOOD.
    G7     MOVE GF32 TO DF30                                           
           IF DF30 NOT = '  23'     PERFORM BAD ELSE PERFORM GOOD.
    G8     MOVE GF32 TO DF31                                           
           IF DF31 NOT = '  23.4'   PERFORM BAD ELSE PERFORM GOOD.      
    G9     MOVE GF32 TO DF32                                           
           IF DF32 NOT = '  23.45'  PERFORM BAD ELSE PERFORM GOOD.     
    Q1     MOVE QF30 TO DF30                                           
            IF DF30 NOT = ' 123'     PERFORM BAD ELSE PERFORM GOOD.
    Q2     MOVE QF30 TO DF31                                           
            IF DF31 NOT = ' 123.0'   PERFORM BAD ELSE PERFORM GOOD.      
    Q3     MOVE QF30 TO DF32                                           
            IF DF32 NOT = ' 123.00'  PERFORM BAD ELSE PERFORM GOOD.
    Q4     MOVE QF31 TO DF30                                           
            IF DF30 NOT = ' 123'     PERFORM BAD ELSE PERFORM GOOD.
    Q5     MOVE QF31 TO DF31                                           
            IF DF31 NOT = ' 123.4'   PERFORM BAD ELSE PERFORM GOOD.      
    Q6     MOVE QF31 TO DF32                                           
            IF DF32 NOT = ' 123.40'  PERFORM BAD ELSE PERFORM GOOD.
    Q7     MOVE QF32 TO DF30                                           
            IF DF30 NOT = ' 123'     PERFORM BAD ELSE PERFORM GOOD.
    Q8     MOVE QF32 TO DF31                                           
            IF DF31 NOT = ' 123.4'   PERFORM BAD ELSE PERFORM GOOD.      
    Q9     MOVE QF32 TO DF32                                           
            IF DF32 NOT = ' 123.45'  PERFORM BAD ELSE PERFORM GOOD. 
           DISPLAY 'TESTMOV2 GOOD TESTS =' GOOD 
           STOP RUN.
       GOOD.
           ADD 1 TO GOOD
       BAD.
           MOVE 16 TO RETURN-CODE
           STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "The receiving DF field and sending ZF field must match data types in order to move correctly.",
  "condition": "Receiving and sending data types MUST match",
  "output": {
    "correct": "TESTMOV2 GOOD TESTS = x",
    "incorrect": "TESTMOV2 GOOD TESTS = 0"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. COMPTYPE.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
***************************************************************
      
***************************************************************
       01  Z-cobol-data-Types-comp-unsigned.
         03 comp-9-00 
            pic  9(00) comp 
                       value x'FF00'.
         03 comp-9-01 
            pic  9(01) comp 
                       value x'FF01'.
         03 comp-9-02 
            pic  9(02) comp 
                       value x'FF02'.
         03 comp-9-03 
            pic  9(03) comp 
                       value x'FF03'.
         03 comp-9-04 
            pic  9(04) comp 
                       value x'FF04'.
         03 comp-9-05 
            pic  9(05) comp 
                       value x'FF05'.
         03 comp-9-06 
            pic  9(06) comp 
                       value x'FF06'.
         03 comp-9-07 
            pic  9(07) comp 
                       value x'FF07'.
         03 comp-9-08 
            pic  9(08) comp 
                       value x'FF08'.
         03 comp-9-09 
            pic  9(09) comp 
                       value x'FF000009'.
         03 comp-9-10 
            pic  9(10) comp 
                       value x'FF0000000000000A'.
         03 comp-9-11 
            pic  9(11) comp 
                       value x'FF0000000000000B'.
         03 comp-9-12 
            pic  9(12) comp 
                       value x'FF0000000000000C'.
         03 comp-9-13 
            pic  9(13) comp 
                       value x'FF0000000000000D'.
         03 comp-9-14 
            pic  9(14) comp 
                       value x'FF0000000000000E'.
         03 comp-9-15 
            pic  9(15) comp 
                       value x'FF0000000000000F'.
         03 comp-9-16 
            pic  9(16) comp 
                       value x'FF00000000000010'.
         03 comp-9-17 
            pic  9(17) comp 
                       value x'FF00000000000011'.
         03 comp-9-18 
            pic  9(18) comp 
                       value x'FF00000000000012'.
         03 comp-9-19 
            pic  9(19) comp 
                       value x'FF000000000000000000000000000013'.
         03 comp-9-20 
            pic  9(20) comp 
                       value x'FF000000000000000000000000000014'.
         03 comp-9-21 
            pic  9(21) comp 
                       value x'FF000000000000000000000000000015'.
         03 comp-9-22 
            pic  9(22) comp 
                       value x'FF000000000000000000000000000016'.
         03 comp-9-23 
            pic  9(23) comp 
                       value x'FF000000000000000000000000000017'.
         03 comp-9-24 
            pic  9(24) comp 
                       value x'FF000000000000000000000000000018'.
         03 comp-9-25 
            pic  9(25) comp 
                       value x'FF000000000000000000000000000019'.
         03 comp-9-26 
            pic  9(26) comp 
                       value x'FF00000000000000000000000000001A'.
         03 comp-9-27 
            pic  9(27) comp 
                       value x'FF00000000000000000000000000001B'.
         03 comp-9-28 
            pic  9(28) comp 
                       value x'FF00000000000000000000000000001C'.
         03 comp-9-29 
            pic  9(29) comp 
                       value x'FF00000000000000000000000000001D'.
         03 comp-9-30 
            pic  9(30) comp 
                       value x'FF00000000000000000000000000001E'.
         03 comp-9-31 
            pic  9(31) comp 
                       value x'FF00000000000000000000000000001F'.
         03 comp-9-32 
            pic  9(32) comp 
                       value x'FF000000000000000000000000000020'.
         03 comp-9-33 
            pic  9(33) comp 
                       value x'FF000000000000000000000000000021'.
         03 comp-9-34 
            pic  9(34) comp 
                       value x'FF000000000000000000000000000022'.
         03 comp-9-35 
            pic  9(35) comp 
                       value x'FF000000000000000000000000000023'.
         03 comp-9-36 
            pic  9(36) comp 
                       value x'FF000000000000000000000000000024'.
         03 comp-9-37 
            pic  9(37) comp 
                       value x'FF000000000000000000000000000025'.
         03 comp-9-38 
            pic  9(38) comp 
                       value x'FF000000000000000000000000000026'.
         03 comp-9-39 
            pic  9(39) comp 
                       value x'FF000000000000000000000000000027'.
                                       
       01  Z-cobol-data-Types-comp-Signed.
      ***************************************************************
         03 comp-S9-00 
             pic S9(00) comp 
                        value x'8000'.
         03 comp-S9-01 
             pic S9(01) comp 
                        value x'8001'.
         03 comp-S9-02 
             pic S9(02) comp 
                        value x'8002'.
         03 comp-S9-03 
             pic S9(03) comp 
                        value x'8003'.
         03 comp-S9-04 
             pic S9(04) comp 
                        value x'8004'.
         03 comp-S9-05 
             pic S9(05) comp 
                        value x'8005'.
         03 comp-S9-06 
             pic S9(06) comp 
                        value x'8006'.
         03 comp-S9-07 
             pic S9(07) comp 
                        value x'8007'.
         03 comp-S9-08 
             pic S9(08) comp 
                        value x'8008'.
         03 comp-S9-09 
             pic S9(09) comp 
                        value x'80000009'.
         03 comp-S9-10 
             pic S9(10) comp 
                        value x'800000000000000A'.
         03 comp-S9-11 
             pic S9(11) comp 
                        value x'800000000000000B'.
         03 comp-S9-12 
             pic S9(12) comp 
                        value x'800000000000000C'.
         03 comp-S9-13 
             pic S9(13) comp 
                        value x'800000000000000D'.
         03 comp-S9-14 
             pic S9(14) comp 
                        value x'800000000000000E'.
         03 comp-S9-15 
             pic S9(15) comp 
                        value x'800000000000000F'.
         03 comp-S9-16 
             pic S9(16) comp 
                        value x'8000000000000010'.
         03 comp-S9-17 
             pic S9(17) comp 
                        value x'8000000000000011'.
         03 comp-S9-18 
             pic S9(18) comp 
                        value x'8000000000000012'.
         03 comp-S9-19 
             pic S9(19) comp 
                        value x'80000000000000000000000000000013'.
         03 comp-S9-20 
             pic S9(20) comp 
                        value x'80000000000000000000000000000014'.
         03 comp-S9-21 
             pic S9(21) comp 
                        value x'80000000000000000000000000000015'.
         03 comp-S9-22 
             pic S9(22) comp 
                        value x'80000000000000000000000000000016'.
         03 comp-S9-23 
             pic S9(23) comp 
                        value x'80000000000000000000000000000017'.
         03 comp-S9-24 
             pic S9(24) comp 
                        value x'80000000000000000000000000000018'.
         03 comp-S9-25 
             pic S9(25) comp 
                        value x'80000000000000000000000000000019'.
         03 comp-S9-26 
             pic S9(26) comp 
                        value x'8000000000000000000000000000001A'.
         03 comp-S9-27 
             pic S9(27) comp 
                        value x'8000000000000000000000000000001B'.
         03 comp-S9-28 
             pic S9(28) comp 
                        value x'8000000000000000000000000000001C'.
         03 comp-S9-29 
             pic S9(29) comp 
                        value x'8000000000000000000000000000001D'.
         03 comp-S9-30 
             pic S9(30) comp 
                        value x'8000000000000000000000000000001E'.
         03 comp-S9-31 
             pic S9(31) comp 
                        value x'8000000000000000000000000000001F'.
         03 comp-S9-32 
             pic S9(32) comp 
                        value x'80000000000000000000000000000020'.
         03 comp-S9-33 
             pic S9(33) comp 
                        value x'80000000000000000000000000000021'.
         03 comp-S9-34 
             pic S9(34) comp 
                        value x'80000000000000000000000000000022'.
         03 comp-S9-35 
             pic S9(35) comp 
                        value x'80000000000000000000000000000023'.
         03 comp-S9-36 
             pic S9(36) comp 
                        value x'80000000000000000000000000000024'.
         03 comp-S9-37 
             pic S9(37) comp 
                        value x'80000000000000000000000000000025'.
         03 comp-S9-38 
             pic S9(38) comp 
                        value x'80000000000000000000000000000026'.
         03 comp-S9-39 
             pic S9(39) comp 
                        value x'80000000000000000000000000000027'.
      ***************************************************************
       PROCEDURE DIVISION.
        Display 'Computational Data Types'.
        Stop Run.
[/INST]{
  "id": "BR-001",
  "description": "The range of values that can be represented by a COMP-1 data item is determined by the number of digits specified in the PICTURE clause.",
  "condition": null,
  "output": {
    "range": "The range of values that can be represented by a COMP-1 data item is determined by the number of digits specified in the PICTURE clause."
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTPM1.
       AUTHOR.        DON HIGGINS.
       DATE-WRITTEN.  10/13/08.
      * TEST IF ELSE END-IF                              
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 I       COMP PIC S9(4).
       77 COUNT   COMP PIC 9(4) VALUE 0.
       77 ERRORS  COMP PIC 9(4) VALUE 0.
       77 GOOD    COMP-3 PIC S9(4) VALUE 0.
       PROCEDURE DIVISION.
       MAINLINE.
           DISPLAY 'TESTPM1 STARTING'
      * FORMAT 1A
           MOVE 0 TO COUNT.
           DISPLAY 'TEST PERFIRN FORNATM 1A'
           PERFORM TEST1
           ADD 1 TO GOOD
           IF COUNT NOT = 1 PERFORM ERROR END-IF
           MOVE 0 TO COUNT
           PERFORM TEST1 THRU TEST2
           ADD 1 TO GOOD
           IF COUNT NOT = 3 PERFORM ERROR END-IF
      * FORMAT 1B
           MOVE 0 TO COUNT.
           DISPLAY 'TEST PERFORM FORMAT 1B'
           PERFORM ADD 1 TO COUNT END-PERFORM
           ADD 1 TO GOOD
           IF COUNT NOT = 1 PERFORM ERROR END-IF
      * FORMAT 2A
           MOVE 0 TO COUNT.
           DISPLAY 'TEST PERFORM FORMAT 2A'
           PERFORM TEST1 3 TIMES
           ADD 1 TO GOOD
           IF COUNT NOT = 3 PERFORM ERROR END-IF
      * FORMAT 2B
           MOVE 0 TO COUNT.
           DISPLAY 'TEST PERFORM FORMAT 2B'
           PERFORM 3 TIMES ADD 1 TO COUNT END-PERFORM
           ADD 1 TO GOOD
           IF COUNT NOT = 3 PERFORM ERROR END-IF
      * FORMAT 3A
           MOVE 0 TO COUNT.
           DISPLAY 'TEST PERFORM FORMAT 3A WITH TEST BEFORE'
           MOVE 1 TO I
           PERFORM TEST1I UNTIL I>3 
           ADD 1 TO GOOD
           IF COUNT NOT = 3 PERFORM ERROR END-IF
           MOVE 0 TO COUNT.
           DISPLAY 'TEST PERFORM FORMAT 3A WITH TEST AFTER'
           MOVE 1 TO I
           PERFORM TEST1I WITH TEST AFTER UNTIL I>3 
           ADD 1 TO GOOD
           IF COUNT NOT = 3 PERFORM ERROR END-IF
      * FORMAT 3B
           MOVE 0 TO COUNT.
           DISPLAY 'TEST PERFORM FORMAT 3B WITH TEST BEFORE'
           MOVE 1 TO I.
           PERFORM UNTIL I>3 ADD 1 TO COUNT ADD 1 TO I END-PERFORM
           ADD 1 TO GOOD
           IF COUNT NOT = 3 PERFORM ERROR END-IF
           MOVE 0 TO COUNT.
           DISPLAY 'TEST PERFORM FORMAT 3B WITH TEST AFTER'
           MOVE 1 TO I.
           PERFORM WITH TEST AFTER UNTIL I>3 
             ADD 1 TO COUNT ADD 1 TO I END-PERFORM
           ADD 1 TO GOOD
           IF COUNT NOT = 3 PERFORM ERROR END-IF
      * FORMAT 4A
           MOVE 0 TO COUNT.
           DISPLAY 'TEST PERFORM FORMAT 4A WITH TEST BEFORE'
           PERFORM TEST1 VARYING I FROM 1 BY 1 UNTIL I > 3
           ADD 1 TO GOOD
           IF I NOT = 4 OR COUNT NOT = 3 PERFORM ERROR END-IF
           MOVE 0 TO COUNT.
           DISPLAY 'TEST PERFORM FORMAT 4A WITH TEST AFTER'
           PERFORM TEST1 WITH TEST AFTER VARYING I FROM 1 BY 1 
               UNTIL I > 3
           ADD 1 TO GOOD
           IF I NOT = 4 OR COUNT NOT = 4 PERFORM ERROR END-IF
      * FORMAT 4B
           MOVE 0 TO COUNT.
           DISPLAY 'TEST PERFORM FORMAT 4B WITH TEST BEFORE'
           PERFORM VARYING I FROM 1 BY 1 UNTIL I>3 
               ADD 1 TO COUNT
               DISPLAY 'ADD 1 TO COUNT =' COUNT
           END-PERFORM
           ADD 1 TO GOOD
           IF I NOT = 4 OR COUNT NOT = 3 PERFORM ERROR END-IF
           MOVE 0 TO COUNT.
           DISPLAY 'TEST PERFORM FORMAT 4B WITH TEST AFTER'
           PERFORM WITH TEST AFTER VARYING I FROM 1 BY 1 UNTIL I>3 
               ADD 1 TO COUNT 
               DISPLAY 'ADD 1 TO COUNT =' COUNT
           END-PERFORM
           ADD 1 TO GOOD
           IF I NOT = 4 OR COUNT NOT = 3 PERFORM ERROR END-IF
      * DISPLAY TOTALS
           DISPLAY 'TESTPM1 GOOD TESTS =' GOOD
           STOP RUN.
       ERROR.
           ADD 1 TO ERRORS
           DISPLAY 'ERROR TOTAL =' ERRORS.
       TEST1.
           ADD 1 TO COUNT.
           DISPLAY 'TEST1 ADD 1 TO COUNT =' COUNT
       TEST2.
           PERFORM TEST1
           PERFORM TEST1.
       TEST1I.
           ADD 1 TO COUNT
           ADD 1 TO I.
           DISPLAY 'TEST1I ADD 1 TO COUNT =' COUNT
[/INST]{
  "id": "BR-001",
  "description": "FOR PERFORM Format 1A:\\nThe PERFORM statement must have a PERFORM-UNTIL clause and the PERFORM can\\nbe exited using the EXIT statement or reaching the end of the PERFORM range.\\nIn PERFORM-END-PERFORM, the statements must reside within the PERFORM.",
  "condition": "PERFORM TEST1\\nPERFORM ERROR END-IF",
  "output": null
},
{
  "id": "BR-002",
  "description": "FOR PERFORM Format 1B:\\nA PERFORM statement followed by an END-PERFORM statement having no\\nstatements in between. The PERFORM can be exited using the EXIT statement.",
  "condition": "PERFORM ADD 1 TO COUNT END-PERFORM",
  "output": null
},
{
  "id": "BR-003",
  "description": "FOR PERFORM Format 2A:\\nA PERFORM statement followed by a number of times to be executed.",
  "condition": "PERFORM TEST1 3 TIMES",
  "output": null
},
{
  "id": "BR-004",
  "description": "FOR PERFORM Format 2B:\\nA PERFORM statement followed by a number of times to be executed.",
  "condition": "PERFORM 3 TIMES ADD 1 TO COUNT END-PERFORM",
  "output": null
},
{
  "id": "BR-005",
  "description": "FOR PERFORM Format 3A:\\nA PERFORM statement with TEST BEFORE clause where the test is performed\\nbefore each iteration.",
  "condition": "PERFORM TEST1I UNTIL I>3",
  "output": null
},
{
  "id": "BR-006",
  "description": "FOR PERFORM Format 3A:\\nA PERFORM statement with TEST AFTER clause where the test is performed after\\neach iteration.",
  "condition": "PERFORM TEST1I WITH TEST AFTER UNTIL I>3",
  "output": null
},
{
  "id": "BR-007",
  "description": "FOR PERFORM Format 3B:\\nA PERFORM statement with TEST BEFORE clause where the test is performed\\nbefore each iteration.",
  "condition": "PERFORM UNTIL I>3 ADD 1 TO COUNT ADD 1 TO I END-PERFORM",
  "output": null
},
{
  "id": "BR-008",
  "description": "FOR PERFORM Format 3B:\\nA PERFORM statement with TEST AFTER clause where the test is performed after\\neach iteration.",
  "condition": "PERFORM WITH TEST AFTER UNTIL I>3\\nADD 1 TO COUNT ADD 1 TO I END-PERFORM",
  "output": null
},
{
  "id": "BR-009",
  "description": "FOR PERFORM Format 4A:\\nA PERFORM statement with TEST BEFORE clause where the test is performed\\nbefore each iteration. This PERFORM statement has a VARYING clause that\\ncontrols the value of a data-name in each iteration.",
  "condition": "PERFORM TEST1 VARYING I FROM 1 BY 1 UNTIL I > 3",
  "output": null
},
{
  "id": "BR-010",
  "description": "FOR PERFORM Format 4A:\\nA PERFORM statement with TEST AFTER clause where the test is performed after\\neach iteration. This PERFORM statement has a VARYING clause that controls\\nthe value of a data-name in each iteration.",
  "condition": "PERFORM TEST1 WITH TEST AFTER VARYING I FROM 1 BY 1 UNTIL I > 3",
  "output": null
},
{
  "id": "BR-011",
  "description": "FOR PERFORM Format 4B:\\nA PERFORM statement with TEST BEFORE clause where the test is performed\\nbefore each iteration. This PERFORM statement has a VARYING clause that\\ncontrols the value of a data-name in each iteration.",
  "condition": "PERFORM VARYING I FROM 1 BY 1 UNTIL I>3\\nADD 1 TO COUNT\\nDISPLAY 'ADD 1 TO COUNT =' COUNT\\nEND-PERFORM",
  "output": null
},
{
  "id": "BR-012",
  "description": "FOR PERFORM Format 4B:\\nA PERFORM statement with TEST AFTER clause where the test is performed after\\neach iteration. This PERFORM statement has a VARYING clause that controls\\nthe value of a data-name in each iteration.",
  "condition": "PERFORM WITH TEST AFTER VARYING I FROM 1 BY 1 UNTIL I>3\\nADD 1 TO COUNT\\nDISPLAY 'ADD 1 TO COUNT =' COUNT\\nEND-PERFORM",
  "output": null
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTPM2.
       AUTHOR.        DON HIGGINS.
      * TEST SECTIONS WITH DUPLICATE PARAGRAPHS AND PG QUAL.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       PROCEDURE DIVISION.
       S1 SECTION.
           DISPLAY 'TESTZC1 STARTED'
       P1.
           PERFORM P3.
       P2.
           PERFORM P1 OF S2.
       P3.
           DISPLAY 'S1 P3'.
       S2 SECTION.
       P1.
           PERFORM P3.
       P2.
           PERFORM P1 OF S1
       P3.
           DISPLAY 'S2 P3'
       P4.
           DISPLAY 'TESTZC1 ENDED'
           STOP RUN.
[/INST]{
  "id": "BR-002",  "description": "S1 P3 is run before S2 P3.",
  "condition": "after P1 of S1 and before P2 of S2",
  "output": "S1 P3"
},
{
  "id": "BR-003",  "description": "S2 P3 is only run after P2 of S2.",
  "condition": "after P2 of S2",
  "output": "S2 P3"
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  BYTEFILE.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT IN-FILE
               ASSIGN TO 'ZCOBOL\TEST\TESTPM3.IN'
               ORGANIZATION IS LINE SEQUENTIAL.
           SELECT OUT-FILE
               ASSIGN TO 'ZCOBOL\TEST\TESTPM3.OUT'
               ORGANIZATION IS LINE SEQUENTIAL.
       DATA DIVISION.
       FILE SECTION.
       FD  IN-FILE
           DATA RECORD IS IN-RECORD.
       01  IN-RECORD.
           03  IR   OCCURS  80 PIC X(01).
*******        01  IN-RECORD PIC X(80).
       FD  OUT-FILE
           DATA RECORD IS OUT-RECORD.
       01  OUT-RECORD.
           03  OR   OCCURS  80 PIC X(01).
*******        01  OUT-RECORD PIC X(80).
       WORKING-STORAGE SECTION.
       01  WS-LINE PIC X(80).
       01  END-OF-FILE-FLAG PIC X VALUE 'F'.
       77  ICHAR COMP   PIC S9(4) VALUE +0.
       77  OCHAR COMP   PIC S9(4) VALUE +0.
       77  IBYTES       COMP-3    PIC S9(18) VALUE +0.
       77  COUNT COMP-3 PIC S9(4) VALUE +0.
       77  HOLD-CHAR    PIC X(01) VALUE SPACE.
       PROCEDURE DIVISION.
       MAINLINE.
           DISPLAY 'BYTEFILE STARTED'.
           PERFORM INITIALIZATION-ROUTINE.
           PERFORM THE-LOOP
                   UNTIL END-OF-FILE-FLAG = 'Y'.
           PERFORM EOJ-ROUTINE.
           DISPLAY 'BYTEFILE RECORDS COPIED = ' COUNT.
           DISPLAY 'BYTES COPIED =' IBYTES.
           DISPLAY 'BYTEFILE ENDED OK'
           STOP RUN.
       INITIALIZATION-ROUTINE.
           OPEN INPUT IN-FILE.
           OPEN OUTPUT OUT-FILE.
           READ IN-FILE INTO IN-RECORD
                AT END MOVE 'Y' TO END-OF-FILE-FLAG.
       THE-LOOP.
           PERFORM THE-MOVE 
              VARYING ICHAR FROM 1 BY 1 UNTIL ICHAR > 80.

           WRITE OUT-RECORD.
           ADD 1 TO COUNT.
           READ IN-FILE INTO OUT-RECORD
                AT END MOVE 'Y' TO END-OF-FILE-FLAG.
       THE-MOVE.
           MOVE ICHAR TO OCHAR.
           MOVE IR (ICHAR) TO HOLD-CHAR.
  
           MOVE HOLD-CHAR TO OR (OCHAR).
           COMPUTE IBYTES = IBYTES + 1.
       EOJ-ROUTINE.
           CLOSE IN-FILE.
           CLOSE OUT-FILE.
[/INST]{
  "id": "BR-001",
  "description": "The loop will continue until it reaches the end of file flag.",
  "condition": "END-OF-FILE-FLAG = \\'Y\\'",
  "output": {}
}[INST] 
        IDENTIFICATION DIVISION. 
        PROGRAM-ID. TESTRMD1.
      * AUTHOR.  DON HIGGINS.
      * DATE.    03/28/12.
      * REMARKS. TEST RMD FIELD MODS OF THE FORM (OFFSET:LENGTH)
      *            1. (LIT:LIT)
      *            2  (VAR:LIT)
      *            3  (LIT:VAR)
      *            3  (VAR:VAR)
        ENVIRONMENT DIVISION.
        DATA DIVISION. 
        WORKING-STORAGE SECTION.
        77 F1 PIC X(3) VALUE 'ABC'.
        77 F2 PIC X(5) VALUE 'DEFGH'.
        77 O1 PIC 9 VALUE 2.
        77 L1 PIC 9 VALUE 1.
        77 O2 PIC 9 VALUE 3.
        77 L2 PIC 9 VALUE 2.
        77 GOOD PIC 999 VALUE 0.
        77 BAD  PIC 999 VALUE 0.
        PROCEDURE DIVISION.
            DISPLAY 'TESTRMD1 STARTED'
            MOVE 'DEFGH' TO F2
     1      MOVE F1(2:1) TO F2(3:2)
            IF F2 NOT = 'DEB H' 
               DISPLAY 'ERROR 1 ''DEB H'' NOT =' F2
               PERFORM BAD 
            ELSE PERFORM GOOD.
            MOVE 'DEFGH' TO F2
     2      MOVE F1(O1:1) TO F2(O2:2)
            IF F2 NOT = 'DEB H' 
               DISPLAY 'ERROR 2 ''DEB H'' NOT =' F2
               PERFORM BAD 
            ELSE PERFORM GOOD.
     3      MOVE F1(2:L1) TO F2(3:L2)
            IF F2 NOT = 'DEB H' 
               DISPLAY 'ERROR 3 ''DEB H'' NOT =' F2
               PERFORM BAD 
            ELSE PERFORM GOOD.             
     4      MOVE 'DEFGH' TO F2
            MOVE F1(O1:L1) TO F2(O2:L2)
            IF F2 NOT = 'DEB H' 
               DISPLAY 'ERROR 4 ''DEB H'' NOT =' F2
               PERFORM BAD 
            ELSE PERFORM GOOD.
            DISPLAY  'TOTAL TESTS GOOD= ' GOOD ' BAD=' BAD.
            STOP RUN.
        GOOD.
            ADD 1 TO GOOD.
        BAD.
            ADD 1 TO BAD.[/INST]{
  "id": "BR-002",
  "description": "The OFFSET in the RMD must be less than the LENGTH.",
  "condition": "O1 < L1",
  "output": {}
},
{
  "id": "BR-003",
  "description": "OFFSET and LENGTH must be positive integers",
  "condition": "O1 > 0 AND L1 > 0",
  "output": {}
},
{
  "id": "BR-004",
  "description": "The length of the resulting string cannot be longer than the receiving string.",
  "condition": "L2 <= L1",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTSIX1.
       AUTHOR.        DON HIGGINS.
       DATE-WRITTEN.  01/08/09.
      * TEST SUBSCRIPTS AND INDEXES (MORE TO COME)                              
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77  FLT-SRT FLOAT-SHORT OCCURS 2.
       01  T0.
           10  T1 OCCURS 2 TIMES.
               15 T1-ID PIC X.
               15 T2 OCCURS 3 TIMES.
                  20 T2-ID PIC X.
       77  S1 COMP PIC S9(9).
       77  S2 COMP PIC S9(9).
       77  NFS2 COMP   PIC S9(9)  OCCURS 2 TIMES.
       77  NGS2 COMP   PIC S9(18) OCCURS 2 TIMES.
       77  NHS2 COMP   PIC S9(4)  OCCURS 2 TIMES.
       77  I    COMP   PIC S99    VALUE 1.
       77  J    COMP   PIC S99    VALUE 2.
       77  GOOD COMP-3 PIC S9(9) VALUE 0.
       77  BAD  COMP-3 PIC S9(9) VALUE 0.
       PROCEDURE DIVISION.
       MAINLINE.
           DISPLAY 'TESTSIX1 STARTING'
           MOVE '1ABC2DEF' TO T0
     1     IF T1-ID(1) = '1'   PERFORM GOOD ELSE PERFORM BAD.
     2     IF T1-ID(2) = '2'   PERFORM GOOD ELSE PERFORM BAD.  
     3     IF T2-ID(1 1) = 'A' PERFORM GOOD ELSE PERFORM BAD.  
     4     IF T2-ID(2 1) = 'D' PERFORM GOOD ELSE PERFORM BAD.  
     5     IF T2-ID(1 3) = 'C' PERFORM GOOD ELSE PERFORM BAD.  
     6     IF T2-ID(2 3) = 'F' PERFORM GOOD ELSE PERFORM BAD.  
           MOVE 1 TO S1 MOVE 3 TO S2
     7     IF T2-ID(S1 S2) = 'C' PERFORM GOOD ELSE PERFORM BAD.  
           PERFORM VARYING S1 FROM 1 BY 1 UNTIL S1 > 2
               PERFORM VARYING S2 FROM 1 BY 1 UNTIL S2 > 3
                  DISPLAY 'T2-ID(' S1 ',' S2 ')=' T2-ID(S1 S2).
           MOVE 1 TO NFS2(I) NFS2(I+1)
           ADD       NFS2(I) TO NFS2(I+1)
     8     IF NFS2(I+1) = 2 PERFORM GOOD ELSE PERFORM BAD.
           ADD  1 TO NFS2(I) NFS2(I+1)
     9     IF NFS2(I)   = 2 PERFORM GOOD ELSE PERFORM BAD.
    10     IF NFS2(I+1) = 3 PERFORM GOOD ELSE PERFORM BAD.
      * TEST COMPUTE DFP WITH SUBSCRIPTS
           MOVE 1.1 TO FLT-SRT(2)
           ADD  2.2 TO FLT-SRT(2).
    11     IF FLT-SRT(2) = 3.3 PERFORM GOOD ELSE PERFORM BAD.
           DISPLAY 'TESTSIX1 GOOD TESTS =' GOOD ' BAD TESTS = ' BAD
           STOP RUN.
       GOOD.
           ADD 1 TO GOOD.
           DISPLAY 'GOOD'.
       BAD.
           ADD 1 TO BAD.
           MOVE 16 TO RETURN-CODE
           DISPLAY 'BAD'..
[/INST]{
  "id": "BR-001",
  "description": "T1-ID(1) should be '1'",
  "condition": "T1-ID(1) = '1'",
  "output": {
    "pass": "GOOD",
    "fail": "BAD"
  }
},
{
  "id": "BR-002",
  "description": "T1-ID(2) should be '2'",
  "condition": "T1-ID(2) = '2'",
  "output": {
    "pass": "GOOD",
    "fail": "BAD"
  }
},
{
  "id": "BR-003",
  "description": "T2-ID(1 1) should be 'A'",
  "condition": "T2-ID(1 1) = 'A'",
  "output": {
    "pass": "GOOD",
    "fail": "BAD"
  }
},
{
  "id": "BR-004",
  "description": "T2-ID(2 1) should be 'D'",
  "condition": "T2-ID(2 1) = 'D'",
  "output": {
    "pass": "GOOD",
    "fail": "BAD"
  }
},
{
  "id": "BR-005",
  "description": "T2-ID(1 3) should be 'C'",
  "condition": "T2-ID(1 3) = 'C'",
  "output": {
    "pass": "GOOD",
    "fail": "BAD"
  }
},
{
  "id": "BR-006",
  "description": "T2-ID(2 3) should be 'F'",
  "condition": "T2-ID(2 3) = 'F'",
  "output": {
    "pass": "GOOD",
    "fail": "BAD"
  }
},
{
  "id": "BR-007",
  "description": "T2-ID(S1 S2) should be 'C'",
  "condition": "T2-ID(S1 S2) = 'C'",
  "output": {
    "pass": "GOOD",
    "fail": "BAD"
  }
},
{
  "id": "BR-008",
  "description": "NFS2(I+1) should be 2",
  "condition": "NFS2(I+1) = 2",
  "output": {
    "pass": "GOOD",
    "fail": "BAD"
  }
},
{
  "id": "BR-009",
  "description": "NFS2(I) should be 2",
  "condition": "NFS2(I) = 2",
  "output": {
    "pass": "GOOD",
    "fail": "BAD"
  }
},
{
  "id": "BR-010",
  "description": "NFS2(I+1) should be 3",
  "condition": "NFS2(I+1) = 3",
  "output": {
    "pass": "GOOD",
    "fail": "BAD"
  }
},
{
  "id": "BR-011",
  "description": "FLT-SRT(2) should be 3.3",
  "condition": "FLT-SRT(2) = 3.3",
  "output": {
    "pass": "GOOD",
    "fail": "BAD"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTSIX2.
       AUTHOR.        DON HIGGINS.
       DATE-WRITTEN.  01/08/09.
      ***************************************************************
      * TEST SET AND INDEXES                              
      ***************************************************************
      * 02/24/09 RPI 1002 TEST SET AND INDEX SUPPORT
      ***************************************************************
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  T0.
           10  T1 OCCURS 2 TIMES.
               15 T1-ID PIC X.
               15 T2 OCCURS 3 TIMES.
                  20 T2-ID PIC X.
       77  S1 COMP PIC S9(9).
       77  S2 COMP PIC S9(9).
       77  NFS2 COMP   PIC S9(9)  OCCURS 2 TIMES.
       77  NGS2 COMP   PIC S9(18) OCCURS 2 TIMES.
       77  NHS2 COMP   PIC S9(4)  OCCURS 2 TIMES.
       77  I    COMP   PIC S99    VALUE 1.
       77  J    COMP   PIC S99    VALUE 2.
       77  GOOD COMP-3 PIC S9(9) VALUE 0.
       01  H1 PIC S9(4) COMP OCCURS 3 TIMES INDEXED BY H1X.
           88 H1-ZERO VALUE 10.
       77  H1X-SAVE  INDEX.
       77  H1X-SAVE2 INDEX.
       77  SUB PIC S9(9) COMP.
       PROCEDURE DIVISION.
       MAINLINE.
           DISPLAY 'TESTSIX2 STARTING'
           MOVE '1ABC2DEF' TO T0
     1     IF T1-ID(1) = '1'   PERFORM GOOD ELSE PERFORM BAD.
     2     IF T1-ID(2) = '2'   PERFORM GOOD ELSE PERFORM BAD.  
     3     IF T2-ID(1 1) = 'A' PERFORM GOOD ELSE PERFORM BAD.  
     4     IF T2-ID(2 1) = 'D' PERFORM GOOD ELSE PERFORM BAD.  
     5     IF T2-ID(1 3) = 'C' PERFORM GOOD ELSE PERFORM BAD.  
     6     IF T2-ID(2 3) = 'F' PERFORM GOOD ELSE PERFORM BAD.  
           MOVE 1 TO S1 MOVE 3 TO S2
     7     IF T2-ID(S1 S2) = 'C' PERFORM GOOD ELSE PERFORM BAD.  
           PERFORM VARYING S1 FROM 1 BY 1 UNTIL S1 > 2
               PERFORM VARYING S2 FROM 1 BY 1 UNTIL S2 > 3
                  DISPLAY 'T2-ID(' S1 ',' S2 ')=' T2-ID(S1 S2).
           MOVE 1 TO NFS2(I) NFS2(I+1)
           ADD       NFS2(I) TO NFS2(I+1)
     8     IF NFS2(I+1) = 2 PERFORM GOOD ELSE PERFORM BAD.
           ADD  1 TO NFS2(I) NFS2(I+1)
     9     IF NFS2(I)   = 2 PERFORM GOOD ELSE PERFORM BAD.
    10     IF NFS2(I+1) = 3 PERFORM GOOD ELSE PERFORM BAD.
      * TEST SET 88 LEVEL 
    11     SET H1-ZERO(2) TO TRUE
           IF H1-ZERO(2) 
              PERFORM GOOD ELSE PERFORM BAD.
      * TEST SET INDEXE-MAME, INDEX DATA FEILD, INT FIELD
           SET H1X TO 2
           MOVE 10 TO H1(2)
    12     IF H1(H1X) = 10 
              PERFORM GOOD ELSE PERFORM BAD.
           SET H1X UP BY 1
           SET SUB TO H1X
    13     IF SUB = 3 
              PERFORM GOOD ELSE PERFORM BAD.
           SET H1X-SAVE TO H1X
    14     IF H1X-SAVE = H1X 
              PERFORM GOOD ELSE PERFORM BAD.
           SET H1X-SAVE2 TO H1X-SAVE
    15     IF H1X-SAVE = H1X 
              PERFORM GOOD ELSE PERFORM BAD.
           MOVE 11 TO H1(3)
    16     IF H1(H1X) = 11 
              PERFORM GOOD ELSE PERFORM BAD.
           SET H1X DOWN BY 1
           MOVE 12 TO H1(H1X)
    17     IF H1(2) = 12 
              PERFORM GOOD ELSE PERFORM BAD.
           SET H1X TO H1X-SAVE
           MOVE 11 TO H1(3)
    18     IF H1(H1X) = 11 
              PERFORM GOOD ELSE PERFORM BAD.
           DISPLAY 'TESTSIX2 GOOD TESTS =' GOOD
           STOP RUN.
       GOOD.
           ADD 1 TO GOOD.
       BAD.
           MOVE 16 TO RETURN-CODE
           STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "If the first character of the first element of T1 is equal to '1', perform the GOOD routine, otherwise perform the BAD routine.",
  "condition": "T1-ID(1) = '1'",
  "output": {}
}
,{
  "id": "BR-002",
  "description": "If the second character of the second element of T1 is equal to '2', perform the GOOD routine, otherwise perform the BAD routine.",
  "condition": "T1-ID(2) = '2'",
  "output": {}
}
,{
  "id": "BR-003",
  "description": "If the first character of the first element of T2 is equal to 'A', perform the GOOD routine, otherwise perform the BAD routine.",
  "condition": "T2-ID(1 1) = 'A'",
  "output": {}
}
,{
  "id": "BR-004",
  "description": "If the second character of the first element of T2 is equal to 'D', perform the GOOD routine, otherwise perform the BAD routine.",
  "condition": "T2-ID(2 1) = 'D'",
  "output": {}
}
,{
  "id": "BR-005",
  "description": "If the first character of the third element of T2 is equal to 'C', perform the GOOD routine, otherwise perform the BAD routine.",
  "condition": "T2-ID(1 3) = 'C'",
  "output": {}
}
,{
  "id": "BR-006",
  "description": "If the second character of the third element of T2 is equal to 'F', perform the GOOD routine, otherwise perform the BAD routine.",
  "condition": "T2-ID(2 3) = 'F'",
  "output": {}
}
,{
  "id": "BR-007",
  "description": "If the value of T2 at the index specified by the values of S1 and S2 is equal to 'C', perform the GOOD routine, otherwise perform the BAD routine.",
  "condition": "T2-ID(S1 S2) = 'C'",
  "output": {}
}
,{
  "id": "BR-008",
  "description": "If the sum of NFS2(I) and NFS2(I+1) is equal to 2, perform the GOOD routine, otherwise perform the BAD routine.",
  "condition": "NFS2(I+1) = 2",
  "output": {}
}
,{
  "id": "BR-009",
  "description": "If the sum of NFS2(I) and NFS2(I+1) is equal to 2, perform the GOOD routine, otherwise perform the BAD routine.",
  "condition": "NFS2(I) = 2",
  "output": {}
}
,{
  "id": "BR-010",
  "description": "If NFS2(I+1) is equal to 3, perform the GOOD routine, otherwise perform the BAD routine.",
  "condition": "NFS2(I+1) = 3",
  "output": {}
}
,{
  "id": "BR-011",
  "description": "If the value of H1(2) is equal to 10, perform the GOOD routine, otherwise perform the BAD routine.",
  "condition": "H1(2) = 10",
  "output": {}
}
,{
  "id": "BR-012",
  "description": "If SUB is equal to 3, perform the GOOD routine, otherwise perform the BAD routine.",
  "condition": "SUB = 3",
  "output": {}
}
,{
  "id": "BR-013",
  "description": "If H1X-SAVE is equal to H1X, perform the GOOD routine, otherwise perform the BAD routine.",
  "condition": "H1X-SAVE = H1X",
  "output": {}
}
,{
  "id": "BR-014",
  "description": "If H1X-SAVE2 is equal to H1X-SAVE, perform the GOOD routine, otherwise perform the BAD routine.",
  "condition": "H1X-SAVE = H1X",
  "output": {}
}
,{
  "id": "BR-015",
  "description": "If the value of H1(3) is equal to 11, perform the GOOD routine, otherwise perform the BAD routine.",
  "condition": "H1(3) = 11",
  "output": {}
}
,{
  "id": "BR-016",
  "description": "If the value of H1(2) is equal to 12, perform the GOOD routine, otherwise perform the BAD routine.",
  "condition": "H1(2) = 12",
  "output": {}
}
,{
  "id": "BR-017",
  "description": "If the value of H1(3) is equal to 11, perform the GOOD routine, otherwise perform the BAD routine.",
  "condition": "H1(3) = 11",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTTRC1.
       AUTHOR.        DON HIGGINS.
      * TEST TRUNC OPTION (REQUIRES TRUNC OPTION OVERRIDE)
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        77  HW1     COMP PIC S9(4).
        77  FW1     COMP PIC S9(9).
        77  GW1     COMP PIC S9(18).
        77  GOOD   COMP PIC S9(9) VALUE 0.
       PROCEDURE DIVISION.
       MAINLINE.
           MOVE 9998 TO HW1
           ADD  1    TO HW1
     1     IF HW1 NOT = 9999 PERFORM BAD ELSE PERFORM GOOD.
           ADD  1    TO HW1
     2     IF HW1 NOT = 0    PERFORM BAD ELSE PERFORM GOOD.
           MOVE 999999998 TO FW1
           ADD  1    TO FW1
     3     IF FW1 NOT = 999999999 PERFORM BAD ELSE PERFORM GOOD.
           ADD  1    TO FW1
     4     IF FW1 NOT = 0    PERFORM BAD ELSE PERFORM GOOD.
           MOVE 999999999999999998 TO GW1
           ADD  1    TO GW1
     5     IF GW1 NOT = 999999999999999999 
                             PERFORM BAD ELSE PERFORM GOOD.
           ADD  1    TO GW1
     6     IF GW1 NOT = 0    PERFORM BAD ELSE PERFORM GOOD.
           DISPLAY 'TESTTRC1 GOOD TESTS =' GOOD 
           STOP RUN.
       GOOD.
           ADD 1 TO GOOD
       BAD.
           MOVE 16 TO RETURN-CODE
           STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "The value of HW1 must be either 9998, 9999 or 0.",
  "condition": "HW1 = 9998 OR HW1 = 9999 OR HW1 = 0",
  "output": {}
},
{
  "id": "BR-002",
  "description": "The value of FW1 must be either 999999998, 999999999 or 0.",
  "condition": "FW1 = 999999998 OR FW1 = 999999999 OR FW1 = 0",
  "output": {}
},
{
  "id": "BR-003",
  "description": "The value of GW1 must be either 999999999999999998, 999999999999999999 or 0.",
  "condition": "GW1 = 999999999999999998 OR GW1 = 999999999999999999 OR GW1 = 0",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTTRC2.
       AUTHOR.        DON HIGGINS.
      * TEST ON SIZE ERROR WITH DEFAULT NOTRUNC OPTION.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        77  HW1     COMP PIC S9(4).
        77  FW1     COMP PIC S9(9).
        77  GW1     COMP PIC S9(18).
        77  GOOD   COMP PIC S9(9) VALUE 0.
       PROCEDURE DIVISION.
       MAINLINE.
           MOVE 9998 TO HW1
           ADD  1    TO HW1 ON SIZE ERROR MOVE 1 TO HW1 END-ADD
     1     IF HW1 NOT = 9999 PERFORM BAD ELSE PERFORM GOOD.
           ADD  1    TO HW1 ON SIZE ERROR MOVE 1 TO HW1 END-ADD
     2     IF HW1 NOT = 1    PERFORM BAD ELSE PERFORM GOOD.
           MOVE 999999998 TO FW1
           ADD  1    TO FW1 ON SIZE ERROR MOVE 1 TO FW1 END-ADD
     3     IF FW1 NOT = 999999999 PERFORM BAD ELSE PERFORM GOOD.
           ADD  1    TO FW1 ON SIZE ERROR MOVE 1 TO FW1 END-ADD
     4     IF FW1 NOT = 1    PERFORM BAD ELSE PERFORM GOOD.
           MOVE 999999999999999998 TO GW1
           ADD  1    TO GW1 ON SIZE ERROR MOVE 1 TO GW1 END-ADD
     5     IF GW1 NOT = 999999999999999999 
                             PERFORM BAD ELSE PERFORM GOOD.
           ADD  1    TO GW1 ON SIZE ERROR MOVE 1 TO GW1 END-ADD
     6     IF GW1 NOT = 1    PERFORM BAD ELSE PERFORM GOOD.
           DISPLAY 'TESTTRC2 GOOD TESTS =' GOOD 
           STOP RUN.
       GOOD.
           ADD 1 TO GOOD
       BAD.
           MOVE 16 TO RETURN-CODE
           STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "When increasing a signed 4-digit number by 1 results in a signed 4-digit number, the operation is considered successful.",
  "condition": "ADD 1 TO HW1 ON SIZE ERROR MOVE 1 TO HW1 END-ADD",
  "output": {
    "success": "Perform GOOD",
    "failure": "Perform BAD"
  }
},
{
  "id": "BR-002",
  "description": "When decreasing a signed 4-digit number by 1 results in a signed 4-digit number, the operation is considered successful.",
  "condition": "SUBTRACT 1 FROM HW1 ON SIZE ERROR MOVE 1 TO HW1 END-SUBTRACT",
  "output": {
    "success": "Perform GOOD",
    "failure": "Perform BAD"
  }
},
{
  "id": "BR-003",
  "description": "When increasing a signed 9-digit number by 1 results in a signed 9-digit number, the operation is considered successful.",
  "condition": "ADD 1 TO FW1 ON SIZE ERROR MOVE 1 TO FW1 END-ADD",
  "output": {
    "success": "Perform GOOD",
    "failure": "Perform BAD"
  }
},
{
  "id": "BR-004",
  "description": "When decreasing a signed 9-digit number by 1 results in a signed 9-digit number, the operation is considered successful.",
  "condition": "SUBTRACT 1 FROM FW1 ON SIZE ERROR MOVE 1 TO FW1 END-SUBTRACT",
  "output": {
    "success": "Perform GOOD",
    "failure": "Perform BAD"
  }
},
{
  "id": "BR-005",
  "description": "When increasing a signed 18-digit number by 1 results in a signed 18-digit number, the operation is considered successful.",
  "condition": "ADD 1 TO GW1 ON SIZE ERROR MOVE 1 TO GW1 END-ADD",
  "output": {
    "success": "Perform GOOD",
    "failure": "Perform BAD"
  }
},
{
  "id": "BR-006",
  "description": "When decreasing a signed 18-digit number by 1 results in a signed 18-digit number, the operation is considered successful.",
  "condition": "SUBTRACT 1 FROM GW1 ON SIZE ERROR MOVE 1 TO GW1 END-SUBTRACT",
  "output": {
    "success": "Perform GOOD",
    "failure": "Perform BAD"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTTRC3.
       AUTHOR.        DON HIGGINS.
      * TEST ON SIZE ERROR WITH TRUNC AND NOR64.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
        77  HW1     COMP PIC S9(4).
        77  FW1     COMP PIC S9(9).
        77  GW1     COMP PIC S9(18).
        77  GOOD   COMP PIC S9(9) VALUE 0.
       PROCEDURE DIVISION.
       MAINLINE.
           MOVE 9998 TO HW1
           ADD  1    TO HW1 ON SIZE ERROR MOVE 1 TO HW1 END-ADD
     1     IF HW1 NOT = 9999 PERFORM BAD ELSE PERFORM GOOD.
           ADD  1    TO HW1 ON SIZE ERROR MOVE 1 TO HW1 END-ADD
     2     IF HW1 NOT = 1    PERFORM BAD ELSE PERFORM GOOD.
           MOVE 999999998 TO FW1
           ADD  1    TO FW1 ON SIZE ERROR MOVE 1 TO FW1 END-ADD
     3     IF FW1 NOT = 999999999 PERFORM BAD ELSE PERFORM GOOD.
           ADD  1    TO FW1 ON SIZE ERROR MOVE 1 TO FW1 END-ADD
     4     IF FW1 NOT = 1    PERFORM BAD ELSE PERFORM GOOD.
           MOVE 999999999999999998 TO GW1
           ADD  1    TO GW1 ON SIZE ERROR MOVE 1 TO GW1 END-ADD
     5     IF GW1 NOT = 999999999999999999 
                             PERFORM BAD ELSE PERFORM GOOD.
           ADD  1    TO GW1 ON SIZE ERROR MOVE 1 TO GW1 END-ADD
     6     IF GW1 NOT = 1    PERFORM BAD ELSE PERFORM GOOD.
           DISPLAY 'TESTTRC3 GOOD TESTS =' GOOD 
           STOP RUN.
       GOOD.
           ADD 1 TO GOOD
       BAD.
           MOVE 16 TO RETURN-CODE
           STOP RUN.
[/INST]{
 "id": "BR-001",
 "description": "\\n* if the value in HW1 equals 9999 after adding 1, then an error is triggered.\\n* if the value in FW1 equals 999999999 after adding 1, then an error is triggered.\\n* if the value in GW1 equals 999999999999999999 after adding 1, then an error is triggered.",
 "condition": null,
 "output": {
  "error": "an error is triggered"
 }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    TESTWS1.
       AUTHOR.        DON HIGGINS.
       DATE-WRITTEN.  05/01/08.
      ***************************************************************
      * REGRESSION TEST WORKING STORAGE DATA FIELD GENERATION
      ***************************************************************
      * 10/16/08 ADD TEST FOR OCCURS AT GROUP LEVEL
      * 01/01/09 ADD CONTINUATION TEST                  
      ***************************************************************
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       77 GOOD    PIC S9(4) VALUE 0.
       77 FIELD   PIC X(30) VALUE SPACES.
       77 P1      PIC 9 VALUE 1.
       77 P2      PIC 9 VALUE 2.
       01 G1.
          05 PP3   PIC 99 VALUE 3.
          05 X1    PIC X  VALUE '1'.
          05 XX02  PIC XX VALUE '02'.
          05 G2-TABLE-DATA.
             10 PIC X VALUE 'A'.
             10 PIC X VALUE 'B'.
          05 G2-TABLE REDEFINES G2-TABLE-DATA OCCURS 2.
             10 G2-TABLE-ENTRY PIC X.
       01 G1-REDEF REDEFINES G1.
          05 PP3C  PIC XX.
          05 X3    PIC XXX.
          05 G2V   PIC XX.
       01 G1V PIC X(7) VALUE '03102AB'.
       77 TF COMP  PIC S9(9)  VALUE X'ff'.
       77 TH COMP  PIC S9(4)  VALUE X'ff'.
       77 TX       PIC X(1)   VALUE X'c1'.
       77 TF2 COMP  PIC S9(9)  VALUE X"ff".
       77 TH2 COMP  PIC S9(4)  VALUE X"ff".
       77 TX2       PIC X(1)   VALUE X"c1".
       77 TPN       PIC S9     VALUE +1.
       77 TMN       PIC S9     VALUE -1.
       77 TX1       PIC X(1).
       77 TX3       PIC X(3).
        77 SPLIT-LIT  PIC X(79)
                VALUE 'TESTBEC6 TEST 5:PRESS AID KEY TO HANDLE AEI0 ABEN
      -               'D IN LINKED PROGRAM BY PROGRAM'.
       77 CP1-SRT COMP-1           VALUE 1234567.
       77 CP2-LNG COMP-2           VALUE 123456789012345.
       77 HFP-SRT FLOAT-HEX-7      VALUE 1234567.
       77 HFP-LNG FLOAT-HEX-15     VALUE 123456789012345.
       77 HFP-EXT FLOAT-HEX-30 
                  VALUE 123456789012345678901234567890.
       77 BFP-SRT FLOAT-BINARY-7   VALUE 1234567.
       77 BFP-LNG FLOAT-BINARY-16  VALUE 123456789012345.
       77 BFP-EXT FLOAT-BINARY-34
                  VALUE 1234567890123456789012345678901234.
       77 DFP-SRT FLOAT-DECIMAL-7  VALUE 1234567.
       77 DFP-LNG FLOAT-DECIMAL-16 VALUE 1234567890123456.
       77 DFP-EXT FLOAT-DECIMAL-34
                  VALUE 1234567890123456789012345678901234.
       77 FLT-SRT FLOAT-SHORT    VALUE 1234567.
       77 FLT-LNG FLOAT-LONG     VALUE 1234567890123456.
       77 FLT-EXT FLOAT-EXTENDED 
                  VALUE 1234567890123456789012345678901234.
       77 HW1     COMP PIC S9(4)   VALUE 1234.
       77 FW1     COMP PIC S9(9)   VALUE 123456789.
       77 GW1     COMP PIC S9(18)  VALUE 123456789012345678.
       77 QW1     COMP PIC S9(39) 
                  VALUE 123456789012345678901234567890123456789.
       77 PD1     COMP-3 PIC S9(31) 
                  VALUE 1234567890123456789012345678901.        
       77 ZD1     PIC S9(31) 
                  VALUE 1234567890123456789012345678901.
       PROCEDURE DIVISION.
       MAINLINE.
           DISPLAY 'TESTWS1 STARTING'
           IF P1 NOT = 1   MOVE 'P1' TO FIELD GO TO ABORT.
           IF PP3C NOT = '03' MOVE 'P1C' TO FIELD GO TO ABORT.
           IF X3 NOT = '102' MOVE 'X3' TO FIELD GO TO ABORT.
           IF P2 NOT = 2   MOVE 'P2' TO FIELD GO TO ABORT.
           IF G1 NOT = G1V MOVE 'G1' TO FIELD GO TO ABORT.
           IF G1-REDEF NOT = G1V MOVE 'G1-REDEF' TO FIELD GO TO ABORT.
           IF G2V      NOT = 'AB' MOVE 'G2-TABLE' TO FIELD GO TO ABORT.
           DISPLAY 'TF =' TF.
           IF TF NOT = 255 MOVE 'TF-HEX' TO FIELD GO TO ABORT.
           DISPLAY 'TH =' TH.
           IF TH NOT = 255 MOVE 'TH-HEX' TO FIELD GO TO ABORT.
           DISPLAY 'TX =' TX.
           IF TX NOT = 'A' MOVE 'TX-HEX' TO FIELD GO TO ABORT.
           DISPLAY 'TF =' TF.
           DISPLAY 'TH =' TH.
           DISPLAY 'TX =' TX.
           DISPLAY 'TF2=' TF2.
           DISPLAY 'TH2=' TH2.
           DISPLAY 'TX2=' TX2.
           IF TPN NOT = 1  MOVE 'TPN' TO FIELD GO TO ABORT.
           DISPLAY 'TX2=' TX2.
           IF TMN NOT = -1 MOVE 'TMN' TO FIELD GO TO ABORT.
           MOVE X'C1' TO TX1
           IF TX1 NOT = 'A' MOVE 'TX1' TO FIELD GO TO ABORT. 
           MOVE X'C1C2C3' TO TX3
           IF TX3 NOT = 'ABC' MOVE 'TX3' TO FIELD GO TO ABORT. 
           DISPLAY 'SPLIT-LIT=' SPLIT-LIT
           IF SPLIT-LIT NOT = 
                      'TESTBEC6 TEST 5:PRESS AID KEY TO HANDLE AEI0 ABEN
      -               'D IN LINKED PROGRAM BY PROGRAM' 
               MOVE 'SPLIT-LIT' TO FIELD GO TO ABORT.
           DISPLAY 'CP1-SRT=' CP1-SRT
           DISPLAY 'CP2-LNG=' CP2-LNG
           DISPLAY 'HFP-SRT=' HFP-SRT
           DISPLAY 'HFP-LNG=' HFP-LNG
           DISPLAY 'HFP-EXT=' HFP-EXT
           DISPLAY 'BFP-SRT=' BFP-SRT
           DISPLAY 'BFP-LNG=' BFP-LNG
           DISPLAY 'BFP-EXT=' BFP-EXT
           DISPLAY 'DFP-SRT=' DFP-SRT
           DISPLAY 'DFP-LNG=' DFP-LNG
           DISPLAY 'DFP-EXT=' DFP-EXT
           DISPLAY 'FLT-SRT=' FLT-SRT
           DISPLAY 'FLT-LNG=' FLT-LNG
           DISPLAY 'FLT-EXT=' FLT-EXT
           DISPLAY 'HW1=' HW1
           DISPLAY 'FW1=' FW1
           DISPLAY 'GW1=' GW1
           DISPLAY 'QW1=' QW1
           DISPLAY 'PD1=' PD1
           DISPLAY 'ZD1=' ZD1
           IF CP1-SRT = 1234567
              PERFORM GOOD ELSE PERFORM BAD.
           IF CP2-LNG = 123456789012345
              PERFORM GOOD ELSE PERFORM BAD.
           IF HFP-SRT = 1234567
              PERFORM GOOD ELSE PERFORM BAD.
           IF HFP-LNG = 123456789012345
              PERFORM GOOD ELSE PERFORM BAD.
           IF HFP-EXT = 123456789012345678901234567890
              PERFORM GOOD ELSE PERFORM BAD.
           IF BFP-SRT = 1234567
              PERFORM GOOD ELSE PERFORM BAD.
           IF BFP-LNG = 123456789012345
              PERFORM GOOD ELSE PERFORM BAD.
           IF BFP-EXT = 1234567890123456789012345678901234
              PERFORM GOOD ELSE PERFORM BAD.
           IF DFP-SRT = 1234567
              PERFORM GOOD ELSE PERFORM BAD.
           IF DFP-LNG = 1234567890123456
              PERFORM GOOD ELSE PERFORM BAD.
           IF DFP-EXT = 1234567890123456789012345678901234
              PERFORM GOOD ELSE PERFORM BAD.
           IF FLT-SRT = 1234567
              PERFORM GOOD ELSE PERFORM BAD.
           IF FLT-LNG = 1234567890123456
              PERFORM GOOD ELSE PERFORM BAD.
           IF FLT-EXT = 1234567890123456789012345678901234
              PERFORM GOOD ELSE PERFORM BAD.
           IF HW1     = 1234
              PERFORM GOOD ELSE PERFORM BAD.
           IF FW1     = 123456789
              PERFORM GOOD ELSE PERFORM BAD.
           IF GW1     = 123456789012345678
              PERFORM GOOD ELSE PERFORM BAD.
           IF QW1     = 123456789012345678901234567890123456789
              PERFORM GOOD ELSE PERFORM BAD.
           IF PD1     = 1234567890123456789012345678901
              PERFORM GOOD ELSE PERFORM BAD.
           IF PD1     = 1234567890123456789012345678901
              PERFORM GOOD ELSE PERFORM BAD.
           DISPLAY 'TESTWS1 GOOD TESTS = ' GOOD
           STOP RUN.        
       ABORT.
           DISPLAY 'TESTWS1 ERROR ON ' FIELD
           MOVE 16 TO RETURN-CODE
           STOP RUN.
       GOOD.
           ADD 1 TO GOOD.
       BAD.
           MOVE 16 TO RETURN-CODE 
           STOP RUN.
[/INST]{
  "id": "BR-001",
  "description": "All of the variables below MUST contain the expected information for the program to run without any errors:",
  "condition": "All values MUST be as follows",
  "output": {
    "P1": "1",
    "P1C": "03",
    "X3": "102",
    "P2": "2",
    "G1": "03102AB",
    "G1-REDEF": "03102AB",
    "G2-TABLE": "AB"
  }
}
{
  "id": "BR-002",
  "description": "All hexadecimal fields MUST contain x'ff' (or 'ff')",
  "condition": "All hexadecimal fields MUST be x'ff'",
  "output": {}
}
{
  "id": "BR-003",
  "description": "All fields containing a date MUST be numeric and contain a proper date in the following format: YYYYMMDD",
  "condition": "All dates MUST be numeric and in the format: YYYYMMDD",
  "output": {}
}
{
  "id": "BR-004",
  "description": "All fields containing a time MUST be numeric and contain a time in the following 24-hour format: HHMM",
  "condition": "All times MUST be numeric and in the format: HHMM",
  "output": {}
}
{
  "id": "BR-005",
  "description": "All numeric fields MUST be numeric and contain a valid number",
  "condition": "All numeric fields MUST contain a valid number",
  "output": {}
}
{
  "id": "BR-006",
  "description": "All fields containing a name MUST contain a valid name",
  "condition": "All names MUST be valid",
  "output": {}
}
{
  "id": "BR-007",
  "description": "All fields containing an address MUST contain a valid address",
  "condition": "All addresses MUST be valid",
  "output": {}
}
{
  "id": "BR-008",
  "description": "All fields containing a phone number MUST contain a valid phone number",
  "condition": "All phone numbers MUST be valid",
  "output": {}
}
{
  "id": "BR-009",
  "description": "All fields containing an email address MUST contain a valid email address",
  "condition": "All email addresses MUST be valid",
  "output": {}
}
{
  "id": "BR-010",
  "description": "All fields containing a website MUST contain a valid website",
  "condition": "All websites MUST be valid",
  "output": {}
}
{
  "id": "BR-011",
  "description": "All fields containing a social security number MUST contain a valid social security number",
  "condition": "All social security numbers MUST be valid",
  "output": {}
}
{
  "id": "BR-012",
  "description": "All fields containing a driver's license MUST contain a valid driver's license number",
  "condition": "All driver's license numbers MUST be valid",
  "output": {}
}
{
  "id": "BR-013",
  "description": "All fields containing a credit card number MUST contain a valid credit card number",
  "condition": "All credit card numbers MUST be valid",
  "output": {}
}
{
  "id": "BR-014",
  "description": "All fields containing a bank account number MUST contain a valid bank account number",
  "condition": "All bank account numbers MUST be valid",
  "output": {}
}
{
  "id": "BR-015",
  "description": "All fields containing a routing number MUST contain a valid routing number",
  "condition": "All routing numbers MUST be valid",
  "output": {}
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.  USET.
       ENVIRONMENT DIVISION.
       INPUT-OUTPUT SECTION.
       FILE-CONTROL.
           SELECT IN-FILE
               ASSIGN TO 'ZCOBOL\DEMO\U1.CBL'
               ORGANIZATION IS LINE SEQUENTIAL.
           SELECT OUT-FILE
               ASSIGN TO 'ZCOBOL\DEMO\U4.CBL'
               ORGANIZATION IS LINE SEQUENTIAL.
       DATA DIVISION.
       FILE SECTION.
       FD  IN-FILE
           DATA RECORD IS IN-RECORD.
       01  IN-RECORD.
           03  FILLER             PIC X(24).
           03  IN-FILE-NAME       PIC X(46).
           03  FILLER             PIC X(08).  
       FD  OUT-FILE
           DATA RECORD IS OUT-RECORD.
       01  OUT-RECORD             PIC X(80).
       WORKING-STORAGE SECTION.
       01  END-OF-FILE-FLAG       PIC X VALUE 'F'.
       01  THE-FILE-NAME          PIC X(46).
       01  MY-SUB                 PIC 9(02).
       01  SUB                    PIC 9(02).
       PROCEDURE DIVISION.
       MAINLINE.
           PERFORM INITIALIZATION-ROUTINE.
           PERFORM THE-LOOP
                   UNTIL END-OF-FILE-FLAG = 'Y'.
           PERFORM EOJ-ROUTINE.
           STOP RUN.
       INITIALIZATION-ROUTINE.
           OPEN INPUT IN-FILE.
           OPEN OUTPUT OUT-FILE.
           READ IN-FILE INTO OUT-RECORD
                AT END MOVE 'Y' TO END-OF-FILE-FLAG.
           WRITE OUT-RECORD.
           READ IN-FILE       INTO OUT-RECORD
                AT END MOVE 'Y' TO END-OF-FILE-FLAG.
           WRITE OUT-RECORD.
           READ IN-FILE       INTO OUT-RECORD
                AT END MOVE 'Y' TO END-OF-FILE-FLAG.
           WRITE OUT-RECORD.
           READ IN-FILE       INTO OUT-RECORD
                AT END MOVE 'Y' TO END-OF-FILE-FLAG.
           WRITE OUT-RECORD.
           READ IN-FILE       INTO OUT-RECORD
                AT END MOVE 'Y' TO END-OF-FILE-FLAG.
           WRITE OUT-RECORD.
           READ IN-FILE       INTO OUT-RECORD
                AT END MOVE 'Y' TO END-OF-FILE-FLAG.
           WRITE OUT-RECORD.
           READ IN-FILE
                AT END MOVE 'Y' TO END-OF-FILE-FLAG.
           ACCEPT THE-FILE-NAME 
                              FROM CONSOLE.
           PERFORM L-TO-U VARYING MY-SUB FROM 1 BY 1
             UNTIL MY-SUB > 46.
           MOVE THE-FILE-NAME   TO IN-FILE-NAME.
           WRITE OUT-RECORD   FROM IN-RECORD.
           READ IN-FILE       INTO OUT-RECORD
                AT END MOVE 'Y' TO END-OF-FILE-FLAG.
           WRITE OUT-RECORD   FROM IN-RECORD.
           READ IN-FILE       INTO OUT-RECORD
                AT END MOVE 'Y' TO END-OF-FILE-FLAG.
           WRITE OUT-RECORD   FROM IN-RECORD.
           READ IN-FILE       INTO OUT-RECORD
                AT END MOVE 'Y' TO END-OF-FILE-FLAG.
           MOVE THE-FILE-NAME   TO IN-FILE-NAME.
           PERFORM VARYING SUB FROM 1 BY 1 
             UNTIL SUB > 72
                IF IN-RECORD (SUB:3) = 'CBL'
                    MOVE 'PRN'  TO IN-RECORD (SUB:3)
                END-IF
           END-PERFORM.
           WRITE OUT-RECORD   FROM IN-RECORD.
           READ IN-FILE       INTO OUT-RECORD
                AT END MOVE 'Y' TO END-OF-FILE-FLAG.
       THE-LOOP.
           WRITE OUT-RECORD.
           READ IN-FILE       INTO OUT-RECORD
                AT END MOVE 'Y' TO END-OF-FILE-FLAG.
       EOJ-ROUTINE.
           CLOSE IN-FILE.
           CLOSE OUT-FILE.

       L-TO-U.
          IF THE-FILE-NAME (MY-SUB :1) = 'a'
             MOVE 'A' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'b'
             MOVE 'B' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'c'
             MOVE 'C' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'd'
             MOVE 'D' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'e'
             MOVE 'E' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'f'
             MOVE 'F' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'g'
             MOVE 'G' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'h'
             MOVE 'H' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'i'
             MOVE 'I' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'j'
             MOVE 'J' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'k'
             MOVE 'K' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'l'
             MOVE 'L' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'm'
             MOVE 'M' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'n'
             MOVE 'N' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'o'
             MOVE 'O' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'p'
             MOVE 'P' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'q'
             MOVE 'Q' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'r'
             MOVE 'R' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 's'
             MOVE 'S' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 't'
             MOVE 'T' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'u'
             MOVE 'U' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'v'
             MOVE 'V' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'w'
             MOVE 'W' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'x'
             MOVE 'X' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'y'
             MOVE 'Y' TO THE-FILE-NAME (MY-SUB :1).
          IF THE-FILE-NAME (MY-SUB :1) = 'z'
             MOVE 'Z' TO THE-FILE-NAME (MY-SUB :1).
[/INST]{
  "id": "BR-002",
  "description": "The MY-SUB counter is used to move from one character to another in THE-FILE-NAME",
  "condition": "PERFORM L-TO-U VARYING MY-SUB FROM 1 BY 1 UNTIL MY-SUB > 46",
  "output": {
    "every-character-moved": "true"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID.    IMSCLAIM.
       AUTHOR.        YVES TOLOD.
       INSTALLATION.  ESYSMVS1
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       COPY BAQRINFO.
       01  REQUEST.
           COPY CLAIMREQ.
       01  RESPONSE.
           COPY CLAIMRSP.
       01  API-INFO.
           COPY CLAIMINF.
       COPY IMSCLAIC.
       01 BAQ-REQUEST-PTR           USAGE POINTER.
       01 BAQ-REQUEST-LEN           PIC S9(9) COMP-5 SYNC.
       01 BAQ-RESPONSE-PTR          USAGE POINTER.
       01 BAQ-RESPONSE-LEN          PIC S9(9) COMP-5 SYNC.
       77 COMM-STUB-PGM-NAME        PIC X(8) VALUE 'BAQCSTUB'.
       77 COMM-TERM-PGM-NAME        PIC X(8) VALUE 'BAQCTERM'.
       77 DLI-GET-UNIQUE            PIC X(4) VALUE 'GU  '.
       77 DLI-GET-NEXT              PIC X(4) VALUE 'GN  '.
       77 DLI-INSERT                PIC X(4) VALUE 'ISRT'.
       77 DLI-MESSAGE-EXISTS        PIC X(2) VALUE 'CF'.
       77 DLI-END-SEGMENTS          PIC X(2) VALUE 'QD'.
       77 DLI-END-MESSAGES          PIC X(2) VALUE 'QC'.
       01 API-STATUS-MESSAGE.
          05 OUT-API-STATUS-CODE    PIC S9(9) COMP-5.
          05 OUT-API-STATUS-MSGLEN  PIC S9(9) COMP-5.
          05 OUT-API-STATUS-MESSAGE PIC X(1024).
       01 CLAIM-TEMP-AMOUNT         PIC S9(7)V9(2) COMP-3.
       01 WS-LOG-MESSAGE            PIC X(80).
       01 WS-TEMP-TS.
          05 WS-TEMP-DATE-TIME.
             10 WS-TEMP-DATE.
                15 WS-TEMP-YEAR     PIC 9(4).
                15 WS-TEMP-MONTH    PIC 9(2).
                15 WS-TEMP-DAY      PIC 9(2).
             10 WS-TEMP-TIME.
                15 WS-TEMP-HOUR     PIC 9(2).
                15 WS-TEMP-MIN      PIC 9(2).
                15 WS-TEMP-SEC      PIC 9(2).
                15 WS-TEMP-MS       PIC 9(2).
             10 WS-DIFF-GMT         PIC S9(4).
       01 WS-FORMATTED-TS.
          05 WS-FORMATTED-DATE-TIME.
             10 WS-FORMATTED-YEAR   PIC 9(4).
             10 FILLER              PIC X VALUE '-'.
             10 WS-FORMATTED-MONTH  PIC 9(2).
             10 FILLER              PIC X VALUE '-'.
             10 WS-FORMATTED-DAY    PIC 9(2).
             10 FILLER              PIC X VALUE ' '.
             10 WS-FORMATTED-HOUR   PIC 9(2).
             10 FILLER              PIC X VALUE ':'.
             10 WS-FORMATTED-MIN    PIC 9(2).
             10 FILLER              PIC X VALUE ':'.
             10 WS-FORMATTED-SEC    PIC 9(2).
             10 FILLER              PIC X VALUE ':'.
             10 WS-FORMATTED-MS     PIC 9(2).
       LINKAGE SECTION.
       01 IO-PCB-MASK.
          05 IO-PCB-LTERM          PIC X(8).
          05 FILLER                PIC XX.
          05 IO-PCB-STATUS-CODE    PIC XX.
          05 IO-PCB-DATE           PIC S9(7) COMP-3.
          05 IO-PCB-TIME           PIC S9(6)V9 COMP-3.
          05 IO-PCB-MSG-SEG-NUMBER PIC S9(5) COMP.
          05 IO-PCB-MOD-NAME       PIC X(8).
          05 IO-PCB-USER-ID        PIC X(8).
       PROCEDURE DIVISION USING IO-PCB-MASK.
       DO-MAIN SECTION.
           MOVE 'PROGRAM CALLED' TO WS-LOG-MESSAGE
           PERFORM LOG-MESSAGE
           PERFORM GET-INPUT-MESSAGE
           PERFORM UNTIL IO-PCB-STATUS-CODE     = DLI-END-MESSAGES
                   OR    IO-PCB-STATUS-CODE NOT = SPACES
             PERFORM CALL-API
             PERFORM SET-OUTPUT-MESSAGE
             PERFORM GET-INPUT-MESSAGE
           END-PERFORM
           GOBACK
           .
       CALL-API.
           INITIALIZE REQUEST.
           INITIALIZE RESPONSE.
           SET BAQ-REQUEST-PTR TO ADDRESS OF REQUEST
           MOVE LENGTH OF REQUEST TO BAQ-REQUEST-LEN
           SET BAQ-RESPONSE-PTR TO ADDRESS OF RESPONSE
           MOVE LENGTH OF RESPONSE TO BAQ-RESPONSE-LEN
           MOVE IN-CLAIM-AMOUNT TO CLAIM-TEMP-AMOUNT
           MOVE IN-CLAIM-TYPE TO claimType OF REQUEST
           MOVE CLAIM-TEMP-AMOUNT TO claimAmount OF REQUEST
           EVALUATE IN-CLAIM-TYPE
             WHEN 'DRUG'
               MOVE 4 TO claimType-length
             WHEN 'DENTAL'
               MOVE 6 TO claimType-length
             WHEN 'MEDICAL'
               MOVE 7 TO claimType-length
             WHEN OTHER
               MOVE 7 TO claimType-length
               MOVE 'MEDICAL' TO claimType OF REQUEST
           END-EVALUATE
           CALL COMM-STUB-PGM-NAME USING
                BY REFERENCE API-INFO
                BY REFERENCE BAQ-REQUEST-INFO
                BY REFERENCE BAQ-REQUEST-PTR
                BY REFERENCE BAQ-REQUEST-LEN
                BY REFERENCE BAQ-RESPONSE-INFO
                BY REFERENCE BAQ-RESPONSE-PTR
                BY REFERENCE BAQ-RESPONSE-LEN
           IF BAQ-SUCCESS THEN
              IF Xstatus2(1:Xstatus2-length) = 'Accepted'
                 MOVE IN-CLAIM-TYPE TO OUT-CLAIM-TYPE
                 MOVE 'ACCEPTED' TO OUT-CLAIM-STATUS
                 MOVE IN-CLAIM-DESC TO OUT-CLAIM-DESC
                 MOVE IN-CLAIM-AMOUNT TO OUT-CLAIM-AMOUNT
                 MOVE 'CLAIM WAS PROCESSED'
                     TO OUT-MESSAGE
              ELSE
                 MOVE IN-CLAIM-TYPE TO OUT-CLAIM-TYPE
                 MOVE 'REJECTED' TO OUT-CLAIM-STATUS
                 MOVE IN-CLAIM-DESC TO OUT-CLAIM-DESC
                 MOVE IN-CLAIM-AMOUNT TO OUT-CLAIM-AMOUNT
                 MOVE 'CLAIM NEED FURTHER REVIEW'
                     TO OUT-MESSAGE
              END-IF
           ELSE
              EVALUATE TRUE
                 WHEN BAQ-ERROR-IN-API
                   STRING 'API ERROR: MESSAGE = '
                     BAQ-STATUS-MESSAGE DELIMITED BY SIZE
                     INTO OUT-MESSAGE END-STRING
                   DISPLAY 'API ERROR: '
                     BAQ-STATUS-MESSAGE(1:BAQ-STATUS-MESSAGE-LEN)
                 WHEN BAQ-ERROR-IN-ZCEE
                   STRING 'ZCEE ERROR: MESSAGE = '
                     BAQ-STATUS-MESSAGE DELIMITED BY SIZE
                     INTO OUT-MESSAGE END-STRING
                   DISPLAY 'ZCEE ERROR: '
                     BAQ-STATUS-MESSAGE(1:BAQ-STATUS-MESSAGE-LEN)
                 WHEN BAQ-ERROR-IN-STUB
                   STRING 'STUB ERROR: MESSAGE = '
                     BAQ-STATUS-MESSAGE DELIMITED BY SIZE
                     INTO OUT-MESSAGE END-STRING
                   DISPLAY 'STUB ERROR: '
                     BAQ-STATUS-MESSAGE(1:BAQ-STATUS-MESSAGE-LEN)
              END-EVALUATE
              MOVE 'ERROR' TO OUT-CLAIM-STATUS
              MOVE IN-CLAIM-TYPE TO OUT-CLAIM-TYPE
              MOVE IN-CLAIM-AMOUNT TO OUT-CLAIM-AMOUNT
           END-IF.
           STRING OUT-CLAIM-TYPE OUT-MESSAGE DELIMITED BY SIZE
              INTO WS-LOG-MESSAGE END-STRING
           PERFORM LOG-MESSAGE
           MOVE LENGTH OF OUTPUT-MSG TO OUT-LL
           MOVE 0 TO OUT-ZZ
           CALL COMM-TERM-PGM-NAME USING
                BY REFERENCE BAQ-RESPONSE-INFO.
           IF BAQ-SUCCESS THEN
              MOVE 'BAQCSTUB CONNECTION TERMINATED' TO WS-LOG-MESSAGE
              PERFORM LOG-MESSAGE
           ELSE
              EVALUATE TRUE
                 WHEN BAQ-ERROR-IN-API
                   STRING 'API ERROR: MESSAGE = '
                     BAQ-STATUS-MESSAGE DELIMITED BY SIZE
                     INTO OUT-MESSAGE END-STRING
                   DISPLAY 'API ERROR: '
                     BAQ-STATUS-MESSAGE(1:BAQ-STATUS-MESSAGE-LEN)
                 WHEN BAQ-ERROR-IN-ZCEE
                   STRING 'ZCEE ERROR: MESSAGE = '
                     BAQ-STATUS-MESSAGE DELIMITED BY SIZE
                     INTO OUT-MESSAGE END-STRING
                   DISPLAY 'ZCEE ERROR: '
                     BAQ-STATUS-MESSAGE(1:BAQ-STATUS-MESSAGE-LEN)
                 WHEN BAQ-ERROR-IN-STUB
                   STRING 'STUB ERROR: MESSAGE = '
                     BAQ-STATUS-MESSAGE DELIMITED BY SIZE
                     INTO OUT-MESSAGE END-STRING
                   DISPLAY 'STUB ERROR: '
                     BAQ-STATUS-MESSAGE(1:BAQ-STATUS-MESSAGE-LEN)
              END-EVALUATE
              MOVE 'ERROR' TO OUT-CLAIM-STATUS
              MOVE IN-CLAIM-TYPE TO OUT-CLAIM-TYPE
              MOVE IN-CLAIM-AMOUNT TO OUT-CLAIM-AMOUNT
           END-IF
           .
       GET-INPUT-MESSAGE.
           CALL 'CBLTDLI' USING DLI-GET-UNIQUE IO-PCB-MASK
                                INPUT-MSG
           IF IO-PCB-STATUS-CODE NOT = SPACES AND
              IO-PCB-STATUS-CODE NOT = DLI-END-MESSAGES
             DISPLAY 'GU FAILED WITH IO-PCB-STATUS-CODE('
                     IO-PCB-STATUS-CODE ')'
           END-IF
           .
       SET-OUTPUT-MESSAGE.
           CALL 'CBLTDLI' USING DLI-INSERT IO-PCB-MASK
                                OUTPUT-MSG
           IF IO-PCB-STATUS-CODE NOT = SPACES
             DISPLAY 'ISRT FAILED WITH IO-PCB-STATUS-CODE('
                     IO-PCB-STATUS-CODE ')'
           END-IF
           .
       LOG-MESSAGE.
           MOVE FUNCTION CURRENT-DATE TO WS-TEMP-DATE-TIME
           MOVE WS-TEMP-YEAR  TO WS-FORMATTED-YEAR
           MOVE WS-TEMP-MONTH TO WS-FORMATTED-MONTH
           MOVE WS-TEMP-DAY   TO WS-FORMATTED-DAY
           MOVE WS-TEMP-HOUR  TO WS-FORMATTED-HOUR
           MOVE WS-TEMP-MIN   TO WS-FORMATTED-MIN
           MOVE WS-TEMP-SEC   TO WS-FORMATTED-SEC
           MOVE WS-TEMP-MS    TO WS-FORMATTED-MS
           DISPLAY WS-FORMATTED-DATE-TIME ' IMSCLAIM VER 1.0 '
             WS-LOG-MESSAGE(1:40)
           .
       END PROGRAM IMSCLAIM.
[/INST]{
  "id": "BR-001",
  "description": "The claim is accepted if the Xstatus2 string (the result from the API call) starts with \\\"Accepted\\\"",
  "condition": "Xstatus2(1:Xstatus2-length) = 'Accepted'",
  "output": {
    "claimStatus": "ACCEPTED",
    "claimMessage": "CLAIM WAS PROCESSED"
  }
},
{
  "id": "BR-002",
  "description": "The claim is rejected if the API call does not return an accepted status.",
  "condition": "Xstatus2(1:Xstatus2-length) <> 'Accepted'",
  "output": {
    "claimStatus": "REJECTED",
    "claimMessage": "CLAIM NEED FURTHER REVIEW"
  }
},
{
  "id": "BR-003",
  "description": "The claim is an error if the API call fails in any way.",
  "condition": "(BAQ-ERROR-IN-API OR BAQ-ERROR-IN-ZCEE OR BAQ-ERROR-IN-STUB)",
  "output": {
    "claimStatus": "ERROR",
    "claimMessage": "an error occurred"
  }
}[INST]       IDENTIFICATION DIVISION.
       PROGRAM-ID. ZCONCBL.
       ENVIRONMENT DIVISION.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       COPY ZCONREQ.
       COPY ZCONRESP.
       01 REG-VARIABLES.
          05 REG-GRPNAME1             PIC X(8) VALUE LOW-VALUES.
          05 REG-GRPNAME2                  PIC X(8).
          05 REG-GRPNAME3               PIC X(8).
          05 REG-REGNAME               PIC X(12) VALUE SPACES.
          05 REG-MINCONN               PIC 9(8) COMP VALUE 1.
          05 REG-MAXCONN               PIC 9(8) COMP VALUE 10.
          05 REG-FLAGS                 PIC 9(8) COMP VALUE 0.
          05 REG-URG-FLAGS             PIC 9(8) COMP VALUE 0.
       01 SVC-VARIABLES.
          05 SVC-SERVICE-NAME          PIC X(255).
          05 SVC-SERVICE-NAME-LENGTH   PIC 9(8) COMP.
          05 SVC-RQST-DATA-ADDR        USAGE POINTER.
          05 SVC-RQST-DATA-LENGTH      PIC 9(8) COMP.
          05 SVC-RESP-DATA-ADDR        USAGE POINTER.
          05 SVC-RESP-DATA-LENGTH      PIC 9(8) COMP.
          05 SVC-CONNECT-HANDLE        PIC X(12).
          05 SVC-WAIT-TIME             PIC 9(8) USAGE BINARY.
       01 RSP-VARIABLES.
          05 RSP-RC                    PIC 9(8) COMP VALUE 0.
          05 RSP-RSN                   PIC 9(8) COMP VALUE 0.
          05 RSP-RV                    PIC 9(8) COMP VALUE 0.
       01 STOR-DATA.
          05 STOR-EMPID                PIC X(05).
          05 STOR-EMPNAME              PIC X(25).
          05 STOR-EMAIL                PIC X(30).
          05 STOR-PHONE                PIC X(20).
          05 STOR-REMARKS              PIC X(40).
       01 HTTP-VERB                    PIC X(01).
       01 STOP-FLAG                    PIC 9(1) COMP VALUE 0.
       01 CLEAR-WITH-LOW               PIC X(255) VALUE LOW-VALUES.
       PROCEDURE DIVISION.
       MAIN-CONTROL SECTION.
           MOVE 'COBOLZCON'                    TO REG-REGNAME.
           MOVE 'GRPNAME1'                     TO REG-GRPNAME1.
           MOVE 'GRPNAME2'                     TO REG-GRPNAME2.
           MOVE 'GRPNAME3'                     TO REG-GRPNAME3.
           MOVE 'ZCONCBL'                      TO SVC-SERVICE-NAME.
           INSPECT REG-GRPNAME1 CONVERTING ' ' to LOW-VALUES.
           INITIALIZE SVC-RQST-VARIABLES
                      SVC-RQST-DATA-LENGTH
                      SVC-RESP-VARIABLES
                      SVC-RESP-DATA-LENGTH
           EXIT.
           CALL 'BBOA1REG' USING
                 REG-GRPNAME1,
                 REG-GRPNAME2,
                 REG-GRPNAME3,
                 REG-REGNAME,
                 REG-MINCONN,
                 REG-MAXCONN,
                 REG-FLAGS,
                 RSP-RC,
                 RSP-RSN.
           IF RSP-RC > 0 THEN
             DISPLAY "ERROR: Call to BBOA1REG failed"
             GO TO Bad-RC
           ELSE
             DISPLAY "========================================"
             DISPLAY "  *****  ******   ***   ****  **    **  "
             DISPLAY "  ** *** **      ** **  ** **  **  **   "
             DISPLAY "  *****  ****** ******* **  **  ****    "
             DISPLAY "  ** **  **     **   ** ** **    **     "
             DISPLAY "  **  ** ****** **   ** ****     **     "
             DISPLAY "========================================"
             DISPLAY " Register Name : " REG-REGNAME
             DISPLAY "========================================"
             DISPLAY " Successfully registered into: "
             DISPLAY " " REG-GRPNAME1 " " REG-GRPNAME2 " " REG-GRPNAME3
             DISPLAY "========================================"
           END-IF.
           MOVE LENGTH OF SVC-RQST-VARIABLES TO SVC-RQST-DATA-LENGTH.
           SET SVC-RQST-DATA-ADDR TO ADDRESS OF SVC-RQST-VARIABLES.
           INSPECT SVC-SERVICE-NAME CONVERTING ' ' to LOW-VALUES.
           PERFORM UNTIL STOP-FLAG EQUAL 1
             PERFORM Clear-Fields
             CALL 'BBOA1SRV' USING
                 REG-REGNAME,
                 SVC-SERVICE-NAME,
                 SVC-SERVICE-NAME-LENGTH,
                 SVC-RQST-DATA-ADDR,
                 SVC-RQST-DATA-LENGTH,
                 SVC-CONNECT-HANDLE,
                 SVC-WAIT-TIME,
                 RSP-RC,
                 RSP-RSN,
                 RSP-RV
             DISPLAY " "
             DISPLAY " Service Name        : " SVC-SERVICE-NAME
             DISPLAY " Data length         : " SVC-RQST-DATA-LENGTH
             DISPLAY " Return value length : " RSP-RV
             DISPLAY " "
             IF RSP-RC > 0 THEN
               DISPLAY "ERROR: Call to BBOA1SRV failed"
               GO TO Bad-RC
             END-IF
             DISPLAY "Service request processed"
             MOVE SVC-RQST-TYPE TO HTTP-VERB
             EVALUATE HTTP-VERB
               WHEN 'P'
                 MOVE "POST"             TO SVC-RESP-TYPE
                 MOVE SVC-RQST-DATA      TO SVC-RESP-DATA
                 MOVE SVC-RQST-DATA      TO STOR-DATA
                 MOVE "Record was added" TO SVC-RESP-MESSAGE
                 DISPLAY "-> POST action processed"
                 DISPLAY "   " SVC-RESP-MESSAGE
                 DISPLAY " "
                 DISPLAY "   - ID      : " SVC-RESP-EMPID
                 DISPLAY "   - Name    : " SVC-RESP-EMPNAME
                 DISPLAY "   - Email   : " SVC-RESP-EMAIL
                 DISPLAY "   - Phone   : " SVC-RESP-PHONE
                 DISPLAY "   - Remarks : " SVC-RESP-REMARKS
               WHEN 'G'
                 MOVE "GET"                  TO SVC-RESP-TYPE
                 MOVE "Record was retrieved" TO SVC-RESP-MESSAGE
                 MOVE STOR-DATA              TO SVC-RESP-DATA
                 DISPLAY "-> GET action processed"
                 DISPLAY "   " SVC-RESP-MESSAGE
                 DISPLAY " "
                 DISPLAY "   - ID      : " SVC-RESP-EMPID
                 DISPLAY "   - Name    : " SVC-RESP-EMPNAME
                 DISPLAY "   - Email   : " SVC-RESP-EMAIL
                 DISPLAY "   - Phone   : " SVC-RESP-PHONE
                 DISPLAY "   - Remarks : " SVC-RESP-REMARKS
               WHEN 'U'
                 MOVE SVC-RQST-DATA        TO SVC-RESP-DATA
                 MOVE SVC-RQST-DATA        TO STOR-DATA
                 MOVE "PUT"                TO SVC-RESP-TYPE
                 MOVE "Record was updated" TO SVC-RESP-MESSAGE
                 DISPLAY "-> UPDATE action processed"
                 DISPLAY "   " SVC-RESP-MESSAGE
                 DISPLAY " "
                 DISPLAY "   - ID      : " SVC-RESP-EMPID
                 DISPLAY "   - Name    : " SVC-RESP-EMPNAME
                 DISPLAY "   - Email   : " SVC-RESP-EMAIL
                 DISPLAY "   - Phone   : " SVC-RESP-PHONE
                 DISPLAY "   - Remarks : " SVC-RESP-REMARKS
               WHEN 'D'
                 MOVE "DELETE"             TO SVC-RESP-TYPE
                 MOVE "Record was deleted" TO SVC-RESP-MESSAGE
                 MOVE STOR-DATA            TO SVC-RESP-DATA
                 DISPLAY "-> DELETE action processed"
                 DISPLAY "   " SVC-RESP-MESSAGE
                 DISPLAY " "
                 DISPLAY "   - ID      : " SVC-RESP-EMPID
                 DISPLAY "   - Name    : " SVC-RESP-EMPNAME
                 DISPLAY "   - Email   : " SVC-RESP-EMAIL
                 DISPLAY "   - Phone   : " SVC-RESP-PHONE
                 DISPLAY "   - Remarks : " SVC-RESP-REMARKS
                 MOVE '11111'          TO STOR-EMPID
                 MOVE 'Deleted'        TO STOR-EMPNAME
                 MOVE 'Deleted'        TO STOR-EMAIL
                 MOVE '555-555-5555'   TO STOR-PHONE
                 MOVE 'Deleted'        TO STOR-REMARKS
               WHEN OTHER
                 MOVE "UNKNOWN" TO SVC-RESP-TYPE
                 MOVE "Program terminated." TO SVC-RESP-MESSAGE
                 DISPLAY "-> Unknown action was specified"
                 DISPLAY "   " SVC-RESP-MESSAGE
                 DISPLAY "   Program will terminate ..."
                 MOVE 1 TO STOP-FLAG
             END-EVALUATE
             MOVE LENGTH OF SVC-RESP-VARIABLES TO SVC-RESP-DATA-LENGTH
             SET SVC-RESP-DATA-ADDR TO ADDRESS OF SVC-RESP-VARIABLES
             CALL 'BBOA1SRP' USING
                 SVC-CONNECT-HANDLE,
                 SVC-RESP-DATA-ADDR,
                 SVC-RESP-DATA-LENGTH,
                 RSP-RC,
                 RSP-RSN
             IF RSP-RC > 0 THEN
               DISPLAY "ERROR: Call to BBOA1RP failed"
               GO TO Bad-RC
             END-IF
             CALL 'BBOA1CNR' USING
                   SVC-CONNECT-HANDLE,
                   RSP-RC,
                   RSP-RSN
             IF RSP-RC > 0 THEN
               DISPLAY "ERROR: Call to BBOA1CNR failed"
               GO TO Bad-RC
             END-IF
             MOVE STOR-DATA TO SVC-RESP-DATA
           END-PERFORM.
           CALL 'BBOA1URG' USING
               REG-REGNAME,
               REG-URG-FLAGS,
               RSP-RC,
               RSP-RSN
           IF RSP-RC > 0 THEN
             DISPLAY "ERROR: Call to BBOA1URG failed"
             GO TO Bad-RC
           ELSE
             DISPLAY " "
             DISPLAY " Successfully unregistered from "
             DISPLAY " " REG-GRPNAME1 " " REG-GRPNAME2 " " REG-GRPNAME3
             DISPLAY " "
           END-IF.
           GOBACK.
       Clear-Fields.
           MOVE CLEAR-WITH-LOW TO STOR-DATA
           MOVE SVC-RESP-DATA  TO STOR-DATA
           MOVE CLEAR-WITH-LOW TO SVC-RQST-VARIABLES.
           MOVE CLEAR-WITH-LOW TO SVC-RESP-VARIABLES.
       Bad-RC.
           DISPLAY "                          "
           DISPLAY " Return Code = " RSP-RC
           DISPLAY " Reason Code = " RSP-RSN
           DISPLAY "                          "
           DISPLAY " Program ended with Error "
           GOBACK.
[/INST]{
  "id": "BR-001",
  "description": "The service name cannot contain any spaces. \\nIf the service name contains any spaces, the 'BBOA1SRV' call fails.",
  "condition": "contains(SVC-SERVICE-NAME, ' ')",
  "output": {
    "error": "ERROR: Call to BBOA1SRV failed",
    "message": "Service name should not contain any spaces"
  }
},
{
  "id": "BR-002",
  "description": " HTTP request type should be one of 'P' (POST), 'G' (GET), 'U' (UPDATE), and 'D' (DELETE). \\nAny other value indicates an invalid request type.",
  "condition": "HTTP-VERB = 'P' || HTTP-VERB = 'G' || HTTP-VERB = 'U' || HTTP-VERB = 'D'",
  "output": {
    "error": "ERROR: Call to BBOA1SRV failed",
    "message": "Invalid request type specified."
  }
},
{
  "id": "BR-003",
  "description": "If any error occurred, the program will be terminated with a proper display message.",
  "condition": "RSP-RC > 0",
  "output": {
    "error": "Program ended with Error",
    "message": "The program has encountered an error."
  }
},
{
  "id": "BR-004",
  "description": "A record must be deleted before it's updated or retrieved.",
  "condition": "SVC-RQST-TYPE = 'D' or SVC-RQST-TYPE = 'U' or SVC-RQST-TYPE = 'G'",
  "output": {
    "error": "ERROR: Call to BBOA1SRV failed",
    "message": "Record must be deleted before updating or retrieving."
  }
}
